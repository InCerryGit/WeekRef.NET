<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2022-08-22T09:02:42Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2022/08/22/updates</id>
		<title>2022-08-22: .NET 6 is now in Ubuntu 22.04, Avalonia 11.0 Preview 1, Bringing Kestrel + YARP to Azure App Services</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/22/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-22T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-6-is-now-in-ubuntu-22.04"&gt;.NET 6 is now in Ubuntu 22.04&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-6-is-now-in-ubuntu-2204/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-6-is-now-in-ubuntu-2204/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 が Ubuntu 22.04 (Jammy) の公式配布に含まれるようになったアナウンス。&lt;/p&gt;
&lt;p&gt;Canonical とのパートナーシップにより .NET 6 が Ubuntu の一部として配布されるようになった。これにより apt パッケージマネージャーからパッケージソースの追加なしに &lt;code&gt;apt install dotnet6&lt;/code&gt; でインストールできるようになる。&lt;/p&gt;
&lt;p&gt;また同時に .NET 6 の Chiseled Ubuntu コンテナーイメージも公開された。Chiseled Ubuntu コンテナーイメージは通常のコンテナーイメージと異なり、パッケージマネージャーやシェル、root といったものが削除された極小サイズのイメージとなっている。必要最低限のコンポーネントを含むイメージとなっているため、アタックサーフェースを小さくできる。なお、Chiseled イメージには ICU が含まれていないため、Globalization Invariant モードが有効となっている点に注意が必要。&lt;/p&gt;
&lt;p&gt;記事では apt パッケージマネージャーからのインストールについてとコンテナーイメージの利用方法や注意点について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntu.com/blog/install-dotnet-on-ubuntu"&gt;Microsoft and Canonical announce native .NET availability in Ubuntu 22.04 hosts and containers | Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="turning-it-up-to-11-avalonia-ui"&gt;Turning it up to 11! - Avalonia UI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/avalonia/turning-it-up-to-11-34jn"&gt;https://dev.to/avalonia/turning-it-up-to-11-34jn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia 11.0 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースで含まれる新機能や改善点について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォームサポートの拡大
&lt;ul&gt;
&lt;li&gt;iOS, Android, ブラウザー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいビジュアルレイヤー (コンポジションレンダラー)
&lt;ul&gt;
&lt;li&gt;効率の良いレンダラーで 240fps の達成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;フル機能のテキストレンダリングとレイアウト
&lt;ul&gt;
&lt;li&gt;RTL を含む Unicode サポート&lt;/li&gt;
&lt;li&gt;リッチテキストとインラインサポート、TextFormatter API サポート&lt;/li&gt;
&lt;li&gt;すべてのプラットフォームでの IME のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクセシビリティー (Windows と macOS)&lt;/li&gt;
&lt;li&gt;自動テスト&lt;/li&gt;
&lt;li&gt;コントロールのテーマの改善&lt;/li&gt;
&lt;li&gt;パフォーマンスの向上
&lt;ul&gt;
&lt;li&gt;リソースのオンデマンドローディング&lt;/li&gt;
&lt;li&gt;XAML コンパイラーによる出力される MSIL の削減&lt;/li&gt;
&lt;li&gt;スタイリングシステムとレンダラーの最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Avalonia 11.0 Preview 1 は NuGet から利用可能となっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AvaloniaUI/Avalonia/releases/tag/11.0.0-preview1"&gt;Release 11.0.0 Preview1 · AvaloniaUI/Avalonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-heavy-lift-bringing-kestrel-yarp-to-azure-app-services"&gt;A Heavy Lift: Bringing Kestrel + YARP to Azure App Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/08/16/A-Heavy-Lift.html"&gt;https://azure.github.io/AppService/2022/08/16/A-Heavy-Lift.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Services のフロントエンドとなるリバースプロキシーを HTTP.sys + ARR から Kestrel + YARP へと移行していることについての記事。&lt;/p&gt;
&lt;p&gt;記事では App Services の構成、YARP への移行の理由、移行までの期間、移行中に遭遇したバグといったものを紹介している。&lt;/p&gt;
&lt;p&gt;移行後には FrontEndRole のパフォーマンスがスループットにして80%向上したこと、Linux の App Service も Nginx から同様の Kestrel + YARP に移行することで同じコードベースで gRPC をはじめとして様々な機能を提供できるようになるとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1560026785944784896?s=12&amp;t=805-gsos-tKsEUARJM7rEg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We spent the last 6 months moving Azure App Service from IIS and nginx to YARP + Kestrel to bring you gRPC and also take advantage of the massive performance improvements in .NET 6 🔥🔥🔥🔥&lt;a href="https://t.co/r7YggokNwV"&gt;https://t.co/r7YggokNwV&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/azure?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#azure&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1560026785944784896?ref_src=twsrc%5Etfw"&gt;August 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-version-7.0.0-graphql-dotnetgraphql-dotnet"&gt;Release Version 7.0.0 · graphql-dotnet/graphql-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/graphql-dotnet/graphql-dotnet/releases/tag/7.0.0"&gt;https://github.com/graphql-dotnet/graphql-dotnet/releases/tag/7.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL for .NET 7.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンではデーターローダーの結果のメモリー使用量の削減、検証ルールの非同期サポート、API の改善、CLR 型からのインターフェースグラフといった対応が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://graphql-dotnet.github.io/docs/migrations/migration7/"&gt;Migrating from v5.x to v7.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-conf-focus-on-maui-thats-a-wrap"&gt;.NET Conf Focus on MAUI - That's a wrap!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-conf-focus-on-maui-recap/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-conf-focus-on-maui-recap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf Focus on MAUI のスライドやリンクをまとめた記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-2022-17.4-preview-1-visual-studio-blog"&gt;What's New in Visual Studio 2022 17.4 Preview 1 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-1/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-4-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.4 Preview 1　の新機能について紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンタープライズサポート: LTSC&lt;/li&gt;
&lt;li&gt;Arm64 サポート
&lt;ul&gt;
&lt;li&gt;UWP ワークロードのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio 管理テンプレート (ADMX/ADML) による Visual Studio の管理&lt;/li&gt;
&lt;li&gt;サポート対象外のコンポーネントの削除機能&lt;/li&gt;
&lt;li&gt;Git ツール&lt;/li&gt;
&lt;li&gt;コード検索&lt;/li&gt;
&lt;li&gt;選択マッチハイライト&lt;/li&gt;
&lt;li&gt;生産性
&lt;ul&gt;
&lt;li&gt;C#: ドキュメントアウトラインでファイルのシンボルツリーの確認&lt;/li&gt;
&lt;li&gt;C++: “Navigation after Create Declaration/Definition” のオプション&lt;/li&gt;
&lt;li&gt;C++: ARM64 の CMake と Ninja のサポート&lt;/li&gt;
&lt;li&gt;C++: 接続マネージャーからの SSH プロキシージャンプ&lt;/li&gt;
&lt;li&gt;C++: C++ 23 対応&lt;/li&gt;
&lt;li&gt;F#: ローカル関数の引数のツールチップ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="live-share-enterprise-policies-are-here-visual-studio-blog"&gt;Live Share: Enterprise Policies are here! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/ls-policies/"&gt;https://devblogs.microsoft.com/visualstudio/ls-policies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最新の Visual Studio Live Share と管理テンプレートで Live Share のポリシーを構成できるようになった。&lt;/p&gt;
&lt;p&gt;これにより組織外のユーザーとセッションの共有を拒否することや匿名ゲストの無効化といった構成が可能となった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="directory.enumeratefiles"&gt;Directory.EnumerateFiles メソッドの予期しない挙動について - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2022/08/13/083935"&gt;https://tech.blog.aerie.jp/entry/2022/08/13/083935&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Directory.EnumerateFiles&lt;/code&gt; メソッドのワイルドカードの取り扱いが .NET Framework では予期せぬ結果となる可能性がある挙動であることについての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;*&lt;/code&gt; ワイルドカードに加えて &lt;code&gt;?&lt;/code&gt; ワイルドカードの挙動についても触れている。&lt;/p&gt;
&lt;h3 id="react-asp.net-core-jsakamoto"&gt;&amp;quot;React での ASP.NET Core&amp;quot; テンプレートで生成されるプロジェクトの仕組みを調べてみた | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29304896/"&gt;https://devadjust.exblog.jp/29304896/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の React を使用するテンプレートで作成したプロジェクトを実行する際に、どのようにして JavaScript を処理することでシームレスな起動が行われるようになっているのかについての記事。&lt;/p&gt;
&lt;h3 id="managing-the-most-dangerous-constructor-ever-ayende-rahien"&gt;Managing the most dangerous constructor ever - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/198081-A/managing-the-most-dangerous-constructor-ever"&gt;https://ayende.com/blog/198081-A/managing-the-most-dangerous-constructor-ever&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X509Certificate2&lt;/code&gt; のコンストラクターを使用すると裏でファイルを作成しているため正しく処理しないとファイルが残ってしまって危険、しかし即開放すると非同期のようなケースで壊れてしまうのでそうはいかないという記事。&lt;/p&gt;
&lt;h3 id="tracking-down-ravendb-io-usage-in-linux-ayende-rahien"&gt;Tracking down RavenDB I/O usage in Linux - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197985-A/tracking-down-ravendb-i-o-usage-in-linux"&gt;https://ayende.com/blog/197985-A/tracking-down-ravendb-i-o-usage-in-linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 上で RavenDB の I/O 使用の詳細を探った方法についての記事。&lt;/p&gt;
&lt;h3 id="building-a-custom-configuration-provider-in.net-6"&gt;Building a custom Configuration Provider in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;luisalexandre.rodrigues/building-a-custom-configuration-provider-in-net-6-fb6c4caae4bd"&gt;https://medium.com/&amp;#64;luisalexandre.rodrigues/building-a-custom-configuration-provider-in-net-6-fb6c4caae4bd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Configuration の Configuration Provider を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-coregitlab-cicdecs-qiita"&gt;.NET CoreのプロジェクトをGitLab CI/CDでECSに自動デプロイさせる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/waka0238/items/a5d5f1167efca178f775"&gt;https://qiita.com/waka0238/items/a5d5f1167efca178f775&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを GitLab CI/CD を使用して Amazon ECS にデプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="the-code-blogger.net-7-important-breaking-changes-for-web-developers"&gt;The Code Blogger - .NET 7 – Important Breaking Changes for Web Developers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://thecodeblogger.com/2022/08/13/net-7-important-breaking-changes-for-web-developers/"&gt;https://thecodeblogger.com/2022/08/13/net-7-important-breaking-changes-for-web-developers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で行われる破壊的変更について紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では API コントローラーのパラメーターへ推測による DI、Microsoft.Data.SqlClient のアップデート、SignalR の Hub のパラメーターの DI による解決といった点を紹介している。&lt;/p&gt;
&lt;h3 id="c-file-nesting-in-vscode"&gt;C# file nesting in VSCODE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wahidd/c-file-nesting-in-vscode-1em4"&gt;https://dev.to/wahidd/c-file-nesting-in-vscode-1em4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code のファイルネスト機能で .cs ファイルをネストさせる設定についての記事。&lt;/p&gt;
&lt;h3 id="new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate"&gt;New in Entity Framework 7: Bulk Operations with ExecuteDelete and ExecuteUpdate&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timdeschryver/new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate-1nh2"&gt;https://dev.to/timdeschryver/new-in-entity-framework-7-bulk-operations-with-executedelete-and-executeupdate-1nh2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 の &lt;code&gt;ExecuteDelete&lt;/code&gt; と &lt;code&gt;ExecuteUpdate&lt;/code&gt; による一括操作についての記事。&lt;/p&gt;
&lt;h3 id="internalsvisbletocs0436"&gt;ソースジェネレータとInternalsVisbleToの組み合わせで発生するCS0436を緩和する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/benutomo/articles/b29f72366023b9"&gt;https://zenn.dev/benutomo/articles/b29f72366023b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InternalsVisibleTo&lt;/code&gt; を使用しているプロジェクトでソースジェネレーターが生成したマーカー用の属性が別なアセンブリーからもアクセスできるようになってしまい、それぞれのアセンブリーでマーカー属性クラスを持つことになり名前が競合しているという警告が出てしまう問題を解消する方法についての記事。&lt;/p&gt;
&lt;p&gt;プロジェクト &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; があり、それぞれがソースジェネレーターを参照したことでそれぞれに &lt;code&gt;internal class Marker : Attribute {...}&lt;/code&gt; という属性クラスのコードが生成された場合に、&lt;code&gt;A&lt;/code&gt; が &lt;code&gt;InternalsVisibleTo&lt;/code&gt; で &lt;code&gt;B&lt;/code&gt; に対して internal を公開すると &lt;code&gt;B&lt;/code&gt; からは &lt;code&gt;A&lt;/code&gt; の &lt;code&gt;Marker&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の &lt;code&gt;Marker&lt;/code&gt; の両方が見えて競合してしまうという問題。&lt;/p&gt;
&lt;h3 id="git-line-staging-released-visual-studio-blog"&gt;Git Line-staging Released! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/git-line-staging-released/"&gt;https://devblogs.microsoft.com/visualstudio/git-line-staging-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で Git の行ステージングがサポートされたことについての紹介記事。&lt;/p&gt;
&lt;h3 id="how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation"&gt;How I am using IActionConstraintFactory to handle content negotiation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/codex/how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation-c6bed3e66b89"&gt;https://medium.com/codex/how-i-am-using-iactionconstraintfactory-to-handle-content-negotiation-c6bed3e66b89&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IActionConstraint&lt;/code&gt; を使用して、リクエストのヘッダーなどを条件に実行するアクションを切り替える(コンテントネゴシエーション)方法についての記事。&lt;/p&gt;
&lt;h3 id="securing-amazon-api-gateway-with-lambda-authorizer-in.net-detailed-guide"&gt;Securing Amazon API Gateway with Lambda Authorizer in .NET - Detailed Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codewithmukesh.com/blog/aws-lambda-authorizer-in-dotnet/"&gt;https://codewithmukesh.com/blog/aws-lambda-authorizer-in-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で Lambda オーソライザーを実装して Amazon API Gateway を保護する方法についての記事。&lt;/p&gt;
&lt;h3 id="xunitexception-qiita"&gt;xUnitでExceptionをテストする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mkuwan/items/bc301ffef32044c148e8"&gt;https://qiita.com/mkuwan/items/bc301ffef32044c148e8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xUnit で例外がスローされることをテストする方法についての記事。&lt;/p&gt;
&lt;h3 id="crecord"&gt;【C#】record 型のプロパティへのドキュメント コメントの書き方&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/933cc96767e1d1"&gt;https://zenn.dev/naminodarie/articles/933cc96767e1d1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;record 型のプロパティーのドキュメントコメントについての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="spectresystemssnitch-a-tool-that-help-you-find-duplicate-transitive-package-references"&gt;spectresystems/snitch: A tool that help you find duplicate transitive package references.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/spectresystems/snitch"&gt;https://github.com/spectresystems/snitch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトの参照している NuGet パッケージを間接的に参照しているものも含めて走査して、重複を確認できるツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="c-5"&gt;独習C# 第5版 | 翔泳社&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.shoeisha.co.jp/book/detail/9784798175560"&gt;https://www.shoeisha.co.jp/book/detail/9784798175560&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の入門書である「独習 C#」の C# 10 に対応した改訂版。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/toRisouP/items/e2248a1314e714de8e8f"&gt;独習C# 第5版 を読んだレビュー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/tannergooding/status/1558846271674191873?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ClangSharp v14.0.0-rc1 has been released: &lt;a href="https://t.co/5UpU42uzGI"&gt;https://t.co/5UpU42uzGI&lt;/a&gt;&lt;br&gt;&lt;br&gt;This package is the first to be signed and the first RC since the large rewrite back in 2019.&lt;br&gt;&lt;br&gt;1/&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1558846271674191873?ref_src=twsrc%5Etfw"&gt;August 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;2019年以降大幅に書き換えが行われた ClangSharp v14.0.0-rc1 が公開されたという話。P/Invoke Generator というツールも更新され、C ヘッダーファイルから C# へのバインディングを生成できる、など。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="major-compiler-slowdown-due-to-changes-in.net-gc-between.net-7-preview2-and.net-7-preview3-issue-13730-dotnetfsharp"&gt;Major compiler slowdown due to changes in .NET GC between .NET 7 preview2 and .NET 7 preview3 · Issue #13730 · dotnet/fsharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/issues/13730"&gt;https://github.com/dotnet/fsharp/issues/13730&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 で F# コンパイラーがとても遅くなったという Issue。&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 では GC Region が有効になっているなど GC に大きく手が入っているためではないか、Workstation GC から Server GC にすることで改善する、といった話が出ている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/74286"&gt;Huge performance drop for fsc.exe/dll · Issue #74286 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-threadpool-native-implementation-by-eduardo-vp-pull-request-71719-dotnetruntime"&gt;Remove ThreadPool native implementation by eduardo-vp · Pull Request #71719 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/71719"&gt;https://github.com/dotnet/runtime/pull/71719&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 ではネイティブのスレッドプール実装が削除されるという PR。(.NET 6 からデフォルトでマネージコードによるスレッドプール)&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/08/13/updates</id>
		<title>2022-08-13: Visual Studio 2022 17.3, .NET MAUI in Visual Studio 2022, .NET 7 Preview 7, .NET Framework 4.8.1</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/13/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-13T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-17.3-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.3 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-3-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では 17.3 で更新された次の機能について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET MAUI サポート&lt;/li&gt;
&lt;li&gt;Microsoft Teams 向けアプリケーション開発サポート&lt;/li&gt;
&lt;li&gt;C++ のサポートの改善
&lt;ul&gt;
&lt;li&gt;低優先度ビルド&lt;/li&gt;
&lt;li&gt;インデクシングの高速化&lt;/li&gt;
&lt;li&gt;統合ターミナルでのリモート SSH 接続のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Azure Container Apps サポート&lt;/li&gt;
&lt;li&gt;Live Unit Testing の改善&lt;/li&gt;
&lt;li&gt;What's New ページ&lt;/li&gt;
&lt;li&gt;Git ラインステージング&lt;/li&gt;
&lt;li&gt;タブの複数行表示&lt;/li&gt;
&lt;li&gt;IEnumerable ビジュアライザー&lt;/li&gt;
&lt;li&gt;閉じたドキュメントの再オープン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、次のバージョンとなる 17.4 のプレビューもリリースされ、17.4 は Arm64 ネイティブのリリースバージョンとなること LTSC (長期サポートチャンネル) バージョンとなるとのこと。&lt;/p&gt;
&lt;h3 id="productivity-comes-to.net-maui-in-visual-studio-2022.net-blog"&gt;Productivity comes to .NET MAUI in Visual Studio 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-visualstudio-2022-release/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-visualstudio-2022-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 で .NET MAUI のサポートがプレビューからリリースとなったアナウンス。&lt;/p&gt;
&lt;p&gt;.NET MAUI 自体の GA はすでに行われていたが、ツールサポートは今までプレビューとなっていたが 17.3 のリリースでリリースとなり一般に利用できるようになった。これには XAML のライブプレビューやホットリロードといったものが含まれる。&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac での .NET MAUI サポートは 17.4 Preview ではプレビューとなっており、今年後半にリリースとなる予定とのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-7-preview-7.net-blog"&gt;Announcing .NET 7 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 がリリースされた。開発環境としては Windows, macOS 共に Visual Studio 2022 17.4 プレビューの使用が推奨されている。&lt;/p&gt;
&lt;p&gt;記事では Preview 7 でのアップデートについて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シンプルな LINQ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Order&lt;/code&gt;, &lt;code&gt;OrderDescending&lt;/code&gt; (キーセレクター不要の &lt;code&gt;OrderBy&lt;/code&gt;/&lt;code&gt;OrderByDescending&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix ファイルモードサポート&lt;/li&gt;
&lt;li&gt;低レベルな &lt;code&gt;struct&lt;/code&gt; の改善: &lt;code&gt;ref&lt;/code&gt; フィールド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LibraryImport&lt;/code&gt; P/Invoke ソースジェネレーター
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DllImport&lt;/code&gt; に代わるネイティブライブラリー呼び出しのマーシャリングコード生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ClientWebSocket アップグレードレスポンスの詳細
&lt;ul&gt;
&lt;li&gt;ClientWebSocket がアップグレードの応答に関する詳細(ステータスコード等)を取得できるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コード生成の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、破壊的変更として次のものがあげられている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;トリミングと NativeAOT: すべてのアセンブリがデフォルトでトリミングされる
&lt;ul&gt;
&lt;li&gt;コンソールアプリケーションで &lt;code&gt;PublishTrimmed&lt;/code&gt; を指定した場合、ライブラリープロジェクトが &lt;code&gt;IsTrimmable&lt;/code&gt; の有無にかかわらずトリミングされる。この挙動を変更するには &lt;code&gt;TrimMode&lt;/code&gt; を指定することで以前のバージョンと同等に戻すことが可能。また Windows, Android, iOS, WASM, ASP.NET Core といったプレーンではない .NET アプリケーションは影響を受けない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-7.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-7/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しい Blazor WebAssembly のローディングページ&lt;/li&gt;
&lt;li&gt;Blazor データバインディングの get/set/after 修飾子&lt;/li&gt;
&lt;li&gt;Blazor 仮想化の改善&lt;/li&gt;
&lt;li&gt;NavigationManager を使用したステート渡し&lt;/li&gt;
&lt;li&gt;WebAssembly における System.Security.Cryptography サポートの更なる追加&lt;/li&gt;
&lt;li&gt;Angular と React のテンプレートの更新&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングパフォーマンス&lt;/li&gt;
&lt;li&gt;認証で単一スキームを &lt;code&gt;DefaultScheme&lt;/code&gt; として扱う&lt;/li&gt;
&lt;li&gt;Minimal API での認証済みリクエストでの &lt;code&gt;IFormFile&lt;/code&gt;/&lt;code&gt;IFormFileCollection&lt;/code&gt; のサポート&lt;/li&gt;
&lt;li&gt;問題の詳細サービス
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc7807"&gt;RFC 7807: Problem Details for HTTP APIs&lt;/a&gt; をサポートするサービス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;診断ミドルウェアのアップデート&lt;/li&gt;
&lt;li&gt;新しい &lt;code&gt;HttpResults&lt;/code&gt; インターフェース
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFileHttpResult&lt;/code&gt; や &lt;code&gt;IValueHttpResult&amp;lt;TValue&amp;gt;&lt;/code&gt; といった &lt;code&gt;IResult&lt;/code&gt; の型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-7-interceptors.net-blog"&gt;Announcing Entity Framework 7 Preview 7: Interceptors! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 7 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Entity Framework 7 で強化される Interceptor について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンティティー作成時のシンプルなアクション (マテリアライゼーション)&lt;/li&gt;
&lt;li&gt;LINQ 式ツリーのインターセプト&lt;/li&gt;
&lt;li&gt;オプティミスティック同時実行制御インターセプト&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-framework-4.8.1.net-blog"&gt;Announcing .NET Framework 4.8.1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-framework-481/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-framework-481/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.8.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Framework 4.8.1 では Arm64 のネイティブサポート、 WCAG2.1 準拠のアクセシブルなツールチップ、Windows Forms でのアクセシビリティーの向上といった新機能が導入される。&lt;/p&gt;
&lt;p&gt;対応 OS は Windows 10 Version 20H2 と Windows Server 2022 以降が対象となる。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.3-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.3 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;User Secrets のサポート、新しいコードフィックスの追加や &lt;code&gt;StringSyntaxAttribute&lt;/code&gt; の対応、タスクウィンドウと正規表現ダイアログのネイティブ UI 化、Apple Developer アカウントサポートが行われている。&lt;/p&gt;
&lt;p&gt;また次期バージョンのプレビューである Visual Studio 2022 for Mac v17.4 もリリースされているとのこと。&lt;/p&gt;
&lt;h3 id="net-august-2022-updates.net-6.0.8-and.net-core-3.1.28.net-blog"&gt;.NET August 2022 Updates – .NET 6.0.8 and .NET Core 3.1.28 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/august-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/august-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.8 と .NET Core 3.1.28 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 および .NET Core 3.1 の特権情報の不正アクセスによる情報漏洩のセキュリティー修正が含まれている。&lt;/p&gt;
&lt;h3 id="net-framework-august-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework August 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-august-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年8月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;TLS 1.3 でクライアント証明書を使用している場合にネゴシエーションでハングアップする問題や、WPF の同期に関する問題の修正が含まれる。&lt;/p&gt;
&lt;h3 id="announcing-nuget-6.3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification-the-nuget-blog"&gt;Announcing NuGet 6.3 - Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;NuGet 6.3 は Visual Studio 2022 や .NET 6 に含まれるほか、独立した実行ファイルとしてダウンロードも可能。&lt;/p&gt;
&lt;p&gt;このバージョンでは次の新機能や改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PackageReference のパッケージから pdb を使用する&lt;/li&gt;
&lt;li&gt;Visual Studio での推移的な依存関係の表示 (実験的な機能)
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/"&gt;Introducing Transitive Dependencies in Visual Studio - The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PackageReference&lt;/code&gt;, &lt;code&gt;PackageVersion&lt;/code&gt; または &lt;code&gt;PackageDownload&lt;/code&gt; の重複が見つかった場合の新しい警告&lt;/li&gt;
&lt;li&gt;Visual Studio でのカスタム浮動バージョンのインストール
&lt;ul&gt;
&lt;li&gt;UI 上から &lt;code&gt;1.*&lt;/code&gt; のような形でバージョンを指定できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux での署名されたパッケージの検証のデフォルトでの再有効化&lt;/li&gt;
&lt;li&gt;HTTPS everywhere.
&lt;ul&gt;
&lt;li&gt;HTTP (非暗号化) 利用時の警告 NU1803 の追加、2023年11月以降には HTTP はエラーとなる (オプトアウト可)、2024年11月以降はエラーのオプトアウトも無効化される予定&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/nuget/https-everywhere/"&gt;HTTPS everywhere - The NuGet Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visualstudio.extensibility-a-new-way-to-write-extensions-visual-studio-blog"&gt;VisualStudio.Extensibility: A New Way to Write Extensions - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility/"&gt;https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の拡張性 (VisualStudio.Extensibility) の Phase 2 についての記事。&lt;/p&gt;
&lt;p&gt;Phase 2 で利用できるようになった次の新機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リモート UI フレームワーク
&lt;ul&gt;
&lt;li&gt;Out-of-Process モデルでの UI サポート&lt;/li&gt;
&lt;li&gt;ツールウィンドウ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいエディタ API の追加
&lt;ul&gt;
&lt;li&gt;新しい言語コンテンツタイプの定義&lt;/li&gt;
&lt;li&gt;ドキュメントセレクターを使用した拡張機能の適用可能性の指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しいコマンド
&lt;ul&gt;
&lt;li&gt;ツールチップの表示&lt;/li&gt;
&lt;li&gt;カスタムイメージの表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;タスク進捗状況通知&lt;/li&gt;
&lt;li&gt;インプロセス API によるスムーズな移行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-synapseml-for.net-large-scale-ml-with-a-simple-api.net-blog"&gt;Announcing SynapseML for .NET - Large Scale ML with a Simple API - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-synapseml-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-synapseml-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SynapseML v0.10 のリリースの一部として .NET バインディングが利用できるようになったというアナウンス。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="announcing-the.net-maui-beautiful-ui-challenge.net-blog"&gt;Announcing the .NET MAUI Beautiful UI Challenge - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin と .NET MAUI のきれいなデザインを集める Snppts と NET MAUI Good Look UI リポジトリーにデザインを共有することでステッカーをもらえるというキャンペーンのアナウンス。&lt;/p&gt;
&lt;h3 id="microsoft-authentication-library-for.net-present"&gt;Microsoft Authentication Library for .NET でリフレッシュトークンを永続化する - present&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tnakamura.hatenablog.com/entry/2022/08/08/microsoft-identity-client-extensions-msal"&gt;https://tnakamura.hatenablog.com/entry/2022/08/08/microsoft-identity-client-extensions-msal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Authentication Library for .NET を使用して取得したリフレッシュトークンはインメモリのみの保持のため、永続化してプロセス終了後も利用できるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="trying-out-native-aot-in.net-7-preview-7-soundar-anbu-codes"&gt;Trying out Native AOT in .NET 7 Preview 7 - Soundar Anbu Code's&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.soundaranbu.com/trying-out-native-aot-in-net-7-preview-7/"&gt;https://code.soundaranbu.com/trying-out-native-aot-in-net-7-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 での NativeAOT を試してみたという記事。最終的にどの程度のファイルサイズになるかといった部分に触れている。&lt;/p&gt;
&lt;h3 id="net-7-preview-7-c-11-c-c"&gt;.NET 7 Preview 7 で、C# 11 の機能が一通りそろったみたい | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/8/net7p7/"&gt;https://ufcpp.net/blog/2022/8/net7p7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 7 の時点で C# 11 が Preview からデフォルトになり、リリースに向けて機能が確定したという話。&lt;/p&gt;
&lt;h3 id="cc-qiita"&gt;どのバージョンのC#としてビルドされているかを調べるC#コード - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/chocolamint/items/1c8635a34e6aa0adbc6d"&gt;https://qiita.com/chocolamint/items/1c8635a34e6aa0adbc6d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 言語バージョンごとの文法を含むコードを用意することで、コンパイラーがどのバージョンの C# でコンパイルしているか判断できる(どこでエラーが出るかで判断できる)のではないかという記事。&lt;/p&gt;
&lt;h3 id="virtual-formatter-fixing-tabs-versus-spaces-and-other-problems-the.net-tools-blog"&gt;Virtual Formatter – Fixing Tabs versus Spaces and other Problems | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/11/virtual-formatter-in-resharper-2022-2/"&gt;https://blog.jetbrains.com/dotnet/2022/08/11/virtual-formatter-in-resharper-2022-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 の新機能 Virtual Formatter について紹介している記事。&lt;/p&gt;
&lt;p&gt;Virtual Formatter は表示上でのみフォーマットを適用する機能で、アクセシビリティーや既存のコードのフォーマット、企業でのコーディングスタイルとの不一致といったシーンでのメリットを紹介している。&lt;/p&gt;
&lt;h3 id="exploring.net-webassembly-with-wasi-and-wasmtime"&gt;Exploring .NET WebAssembly with WASI and Wasmtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/azure/exploring-net-webassembly-with-wasi-and-wasmtime-41l5"&gt;https://dev.to/azure/exploring-net-webassembly-with-wasi-and-wasmtime-41l5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WASI を実装する Wasmtime で .NET WebAssembly を Dev Container を使用してビルド、動かす方法についての記事。&lt;/p&gt;
&lt;h3 id="lessons-learned-from-optimizing-performance-in-multi-layered.net-projects"&gt;Lessons learned from optimizing performance in multi-layered .NET projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/elca-it/lessons-learned-from-optimizing-performance-in-multi-layered-net-projects-136576f61787"&gt;https://medium.com/elca-it/lessons-learned-from-optimizing-performance-in-multi-layered-net-projects-136576f61787&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多層化(データベース、アプリケーション、ネットワーク等)された .NET プロジェクトでのパフォーマンス最適化で得られた教訓についての記事。&lt;/p&gt;
&lt;h3 id="handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines"&gt;Handling concurrent merges to master in multi-stage Azure DevOps pipelines&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines/"&gt;https://andrewlock.net/handling-concurrent-merges-to-master-in-multi-stage-azure-devops-pipelines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog .NET APM Tracer のような複数のステージを持つ Azure Pipelines のビルドで、 Pull request によるマージコミットでビルドしている場合にステージ進行中に master が更新されるとマージコミットが変更されてしまう問題に対する対処についての記事。&lt;/p&gt;
&lt;h3 id="discover-the-new-asp.net-core-features-in.net-7-dotnetsafer-blog"&gt;Discover the New ASP.NET Core Features in .NET 7! - Dotnetsafer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/discover-the-new-asp-net-core-features-in-net-7/"&gt;https://blog.dotnetsafer.com/discover-the-new-asp-net-core-features-in-net-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core の新機能についての記事。Minimal API や SignalR のソースジェネレーターといったものを紹介している。&lt;/p&gt;
&lt;h3 id="migrating-from-asp.net-to-asp.net-core-in-visual-studio.net-blog"&gt;Migrating from ASP.NET to ASP.NET Core in Visual Studio - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-project-migrations-visual-studio-extension/"&gt;https://devblogs.microsoft.com/dotnet/introducing-project-migrations-visual-studio-extension/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio に実装された ASP.NET から ASP.NET Core に移行するツールを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-august-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | August 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/08/net-annotated-monthly-august-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/08/08/net-annotated-monthly-august-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET まとめの2022年8月号。&lt;/p&gt;
&lt;h3 id="heap-sort-in-c-code-maze"&gt;Heap Sort in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/csharp-heap-sort/"&gt;https://code-maze.com/csharp-heap-sort/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# でのヒープソートを実装する記事。&lt;/p&gt;
&lt;h3 id="running-a.net-application-on-a-local-kubernetes-cluster"&gt;Running a .NET application on a local Kubernetes cluster&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;TheLe0/running-a-net-application-on-a-local-kubernetes-cluster-1aff3537f755"&gt;https://medium.com/&amp;#64;TheLe0/running-a-net-application-on-a-local-kubernetes-cluster-1aff3537f755&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを Kind のローカル Kubernetes クラスターで動かす方法についての記事。&lt;/p&gt;
&lt;h3 id="linq-explained-with-sketches"&gt;LINQ explained with sketches&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/d65c5411-a69b-489f-b73f-18ce0ed8678d"&gt;https://steven-giesel.com/blogPost/d65c5411-a69b-489f-b73f-18ce0ed8678d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ オペレーターの動きを絵で表す、という記事。&lt;/p&gt;
&lt;h3 id="net-community-toolkit-qiita"&gt;【.NET Community Toolkit】ソースジェネレータのファイルサイズ調査 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/myoga/items/79e64ad7d358b281f6da"&gt;https://qiita.com/myoga/items/79e64ad7d358b281f6da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit の MVVM Source Generator でコード生成した場合に継承ベースの実装とバイナリサイズを比較している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="microsoftfluentui-emoji-fluent-emoji-are-a-collection-of-familiar-friendly-and-modern-emoji-from-microsoft"&gt;microsoft/fluentui-emoji: Fluent Emoji are a collection of familiar, friendly, and modern emoji from Microsoft.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/fluentui-emoji"&gt;https://github.com/microsoft/fluentui-emoji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fluent UI の絵文字。&lt;/p&gt;
&lt;p&gt;Windows の Fluent UI 絵文字で使用されているものと同じデザインの絵文字画像。 MIT ライセンスで公開されている。&lt;/p&gt;
&lt;h3 id="bruce-dunwiddietsql-parser-library-written-in-c-for-parsing-sql-server-t-sql-scripts-in.net"&gt;bruce-dunwiddie/tsql-parser: Library Written in C# For Parsing SQL Server T-SQL Scripts in .Net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bruce-dunwiddie/tsql-parser"&gt;https://github.com/bruce-dunwiddie/tsql-parser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transact-SQL を解析するライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yaju/items/b74310ca4718c2ee112b"&gt;【.NET】SQL構文解析ライブラリーのTSQL Parserを使用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yaju/items/cf6988f4a6a6707654ce"&gt;【.NET】SQL構文解析ライブラリーのTSQL Parserを使用する 応用編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="enterprise-application-patterns-using.net-maui-microsoft-docs"&gt;Enterprise Application Patterns Using .NET MAUI | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/maui/"&gt;https://docs.microsoft.com/en-us/dotnet/architecture/maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションパターンの E-book。&lt;/p&gt;
&lt;!-- https://twitter.com/MichaelStonis/status/1557771597406257152 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;My book Enterprise Application Patterns using .NET MAUI is now available! Lots of info to help you start building apps on the right path.&lt;br&gt;&lt;br&gt;It can be dowloaded from &lt;a href="https://t.co/AYumrTFUhc"&gt;https://t.co/AYumrTFUhc&lt;/a&gt;&lt;br&gt;&lt;br&gt;The best part is that it comes at the low, low price of FREE!&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/MAUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MAUI&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETMAUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETMAUI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael Stonis (&amp;#64;MichaelStonis) &lt;a href="https://twitter.com/MichaelStonis/status/1557771597406257152?ref_src=twsrc%5Etfw"&gt;August 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/shayrojansky/status/1557078174143459328?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Released version 7.0.0-preview.7 of &lt;a href="https://twitter.com/hashtag/npgsql?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#npgsql&lt;/a&gt; and the &lt;a href="https://twitter.com/hashtag/efcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore&lt;/a&gt; provider for &lt;a href="https://twitter.com/hashtag/PostgreSQL?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#PostgreSQL&lt;/a&gt;, with some exciting aggregate support (&lt;a href="https://t.co/QvLCYfL09O"&gt;https://t.co/QvLCYfL09O&lt;/a&gt;) and various other stuff!&lt;/p&gt;&amp;mdash; Shay Rojansky (&amp;#64;shayrojansky) &lt;a href="https://twitter.com/shayrojansky/status/1557078174143459328?ref_src=twsrc%5Etfw"&gt;August 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Npgsql と Entity Framework の 7.0.0-preview.7 で PostgreSQL の集計処理を利用できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1558127162233786369?s=12&amp;t=n8ip1IrKkbSKILeSOgoYjA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One lesson I&amp;#39;ve learned hard over the last few years is the approach for CI must be different between large and jumbo projects.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1558127162233786369?ref_src=twsrc%5Etfw"&gt;August 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jaredpar/status/1558132794676506624?s=12&amp;t=n8ip1IrKkbSKILeSOgoYjA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In terms of the odd incentives of testing at jumbo scale, consider the case of List&amp;lt;T&amp;gt;.Count for .NET. For a large / medium project you&amp;#39;d run unit tests for  core collections on every PR. At jumbo scale though this actually a measurable negative.&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1558132794676506624?ref_src=twsrc%5Etfw"&gt;August 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;中/大規模と超大規模のプロジェクトにおける CI とテストでの違いの話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="port-windowsmsdtc-distributed-transactions-support-by-roji-pull-request-72051-dotnetruntime"&gt;Port Windows/MSDTC distributed transactions support by roji · Pull Request #72051 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/72051"&gt;https://github.com/dotnet/runtime/pull/72051&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSDTC による分散トランザクションのサポートの PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/08/08/updates</id>
		<title>2022-08-08: .NET Community Toolkit 8.0, Rider and ReSharper 2022.2, ILSpy 8.0 Preview 2</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/08/08/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-08-08T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-community-toolkit-8.0-mvvm-diagnostics-performance-and-more.net-blog"&gt;Announcing .NET Community Toolkit 8.0! MVVM, Diagnostics, Performance, and more! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-800/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-800/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit 8.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit は Windows Community Toolkit の後継となるライブラリー。.NET Standard 2.0 から .NET 6 までをカバーし、特定の UI プラットフォームによらない機能を提供するライブラリーとなっている(Diagnostics や Performance は UI とも関係ない)。&lt;/p&gt;
&lt;p&gt;記事では MVVM Toolkit のソースジェネレーターやメッセンジャー API、その他 Diagnostics API などについて紹介している。&lt;/p&gt;
&lt;h3 id="rider-2022.2-comes-with-more-c-11-features-performance-improvements-and-extended-unreal-engine-support-the.net-tools-blog"&gt;Rider 2022.2 Comes With More C# 11 Features, Performance Improvements, and Extended Unreal Engine Support | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/02/rider-2022-2-released/"&gt;https://blog.jetbrains.com/dotnet/2022/08/02/rider-2022-2-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Windows 版のバックエンドが .NET 6 に移行されパフォーマンスが向上した他、C# 11 のサポートの強化、Unreal Engine の対応の向上、.NET MAUI サポートの早期プレビューが含まれている。&lt;/p&gt;
&lt;p&gt;また Rider が公開されてから5年が経過したことを記念した記事も公開されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/03/happy-5th-birthday-rider/"&gt;Happy 5th birthday, Rider 🥳 | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.2-comes-with-c-11-support-solution-wide-analysis-optimizations-and-virtual-formatter-the.net-tools-blog"&gt;ReSharper 2022.2 Comes With C# 11 Support, Solution-Wide Analysis Optimizations, and Virtual Formatter | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/02/resharper-2022-2-released/"&gt;https://blog.jetbrains.com/dotnet/2022/08/02/resharper-2022-2-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# 11 のサポートの追加、ソリューションワイドの解析のメモリー周りのパフォーマンスの向上、Virtual Formatting などが含まれている。&lt;/p&gt;
&lt;p&gt;Virtual Formatter はディスク上のコードを実際に変更することなく、エディターでの表示上のフォーマットを適用する機能。例えばパラメータを仮想的に整列するといったことを行える。アクセシビリティー面での向上も目標としているとのこと。&lt;/p&gt;
&lt;h3 id="dotcover-dotmemory-dotpeek-and-dottrace-2022.2-are-here-the.net-tools-blog"&gt;dotCover, dotMemory, dotPeek, and dotTrace 2022.2 are here! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/08/02/dottools-2022-2-released/"&gt;https://blog.jetbrains.com/dotnet/2022/08/02/dottools-2022-2-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotCover, dotMemory, dotPeek, と dotTrace の 2022.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;dotCover と dotMemory は Rider での連携や強化が行われている。dotPeek は IL Viewer 内でデコンパイル結果としてハイレベルとローレベルの C# を選択可能となった。dotTrace はタイムラインコールツリーで Windows のカーネル呼び出しなどを詳細に表示できるようになった。&lt;/p&gt;
&lt;h3 id="release-ilspy-8.0-preview-2-icsharpcodeilspy"&gt;Release ILSpy 8.0 Preview 2 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview2"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v8.0-preview2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 8.0 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;ILSpy 8 では .NET 6 に移行されている。Preview 2 では C# 11 の ref fields や C# 10 の record structs などに対応している。&lt;/p&gt;
&lt;h3 id="public-preview.net-7-support-in-linux-consumption-plan-azure-updates-microsoft-azure"&gt;Public preview: .NET 7 support in Linux Consumption Plan | Azure updates | Microsoft Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.microsoft.com/en-us/updates/public-preview-net-7-support-in-linux-consumption-plan/"&gt;https://azure.microsoft.com/en-us/updates/public-preview-net-7-support-in-linux-consumption-plan/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions の Linux Consumption Plan で .NET 7 のサポートがプレビュー。&lt;/p&gt;
&lt;h3 id="net-data-microsoft-docs"&gt;.NET Data のドキュメント | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/dotnet-data/"&gt;https://docs.microsoft.com/ja-jp/ef/dotnet-data/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET でデータを扱う方法についてのドキュメントのとっかかりとなるランディングページが公開された。&lt;/p&gt;
&lt;!-- https://twitter.com/jeremylikness/status/1552350099367272448 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;🤔If you find yourself asking &amp;quot;How do I &amp;lt;do something with data&amp;gt; in .NET?&amp;quot; we may just have the answer.&lt;br&gt;&lt;br&gt;✅Introducing the new .NET data hub, a place to find documentation from &lt;a href="https://twitter.com/hashtag/SQL?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SQL&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/EFCore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#EFCore&lt;/a&gt; to &lt;a href="https://twitter.com/hashtag/BigData?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#BigData&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/OData?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#OData&lt;/a&gt; or your data in one click. &lt;br&gt;&lt;br&gt;PRs accepted!&lt;a href="https://t.co/Elpt2I1QAI"&gt;https://t.co/Elpt2I1QAI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeremy Likness ⚡️ (&amp;#64;jeremylikness) &lt;a href="https://twitter.com/jeremylikness/status/1552350099367272448?ref_src=twsrc%5Etfw"&gt;July 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="try-the-latest-azure-sdk-for.net-management-libraries"&gt;Try the latest Azure SDK for .NET management libraries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/try-the-latest-azure-management-sdk-for-net/"&gt;https://devblogs.microsoft.com/azure-sdk/try-the-latest-azure-management-sdk-for-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure のリソースの作成などの管理系の操作を .NET から行うための新しい Azure SDK for .NET 管理ライブラリーのリリースの紹介。&lt;/p&gt;
&lt;p&gt;記事では認証方法、ArmClient について、リソースコレクションのリソースの作成と更新、長期実行操作 (LRO) といったものをコードとともに紹介している。&lt;/p&gt;
&lt;h3 id="release-v2.0.0-abc-arbitragezerolog"&gt;Release v2.0.0 · Abc-Arbitrage/ZeroLog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Abc-Arbitrage/ZeroLog/releases/tag/v2.0.0"&gt;https://github.com/Abc-Arbitrage/ZeroLog/releases/tag/v2.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ZeroLog v2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;2.0 では .NET 6 と C# 10 の機能を活用する形に書き直され、Interpolated string handler など新しい機能の恩恵を受けられるようになった。&lt;/p&gt;
&lt;h3 id="release-release-v1.7.0-gui-csterminal.gui"&gt;Release Release v1.7.0 · gui-cs/Terminal.Gui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gui-cs/Terminal.Gui/releases/tag/v1.7.0"&gt;https://github.com/gui-cs/Terminal.Gui/releases/tag/v1.7.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terminal.Gui v1.7.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;マルチステップウィザードが追加され、様々な不具合の修正が行われたほか、gui-cs Organization へリポジトリが移動された。&lt;/p&gt;
&lt;!-- https://twitter.com/ckindel/status/1552726073032466433?s=12&amp;t=BV-bdqI8UR3eLhHHf7FtDg --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Terminal.Gui v1.7.0 just released!&lt;br&gt;&lt;br&gt;- New: Multi-step Wizard &lt;br&gt;- New: Moved to new github org (gui-cs)&lt;br&gt;- Bunches of other enhancements&lt;a href="https://t.co/0YdVGu43TS"&gt;https://t.co/0YdVGu43TS&lt;/a&gt;&lt;a href="https://twitter.com/migueldeicaza?ref_src=twsrc%5Etfw"&gt;&amp;#64;migueldeicaza&lt;/a&gt; &lt;a href="https://twitter.com/BDisp?ref_src=twsrc%5Etfw"&gt;&amp;#64;BDisp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tui?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#tui&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/guics?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#guics&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/terminalUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#terminalUI&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/consoleUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#consoleUI&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/crossplatform?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#crossplatform&lt;/a&gt; &lt;a href="https://t.co/ukgdVJru1q"&gt;pic.twitter.com/ukgdVJru1q&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tigger (Charlie) Kindel (&amp;#64;ckindel) &lt;a href="https://twitter.com/ckindel/status/1552726073032466433?ref_src=twsrc%5Etfw"&gt;July 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="new-run-visual-studio-software-on-amazon-ec2-with-user-based-license-model-amazon-web-services"&gt;New – Run Visual Studio Software on Amazon EC2 with User-Based License Model | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/aws/new-run-visual-studio-software-on-amazon-ec2-with-user-based-license-model/"&gt;https://aws.amazon.com/jp/blogs/aws/new-run-visual-studio-software-on-amazon-ec2-with-user-based-license-model/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon EC2 で Visual Studio をユーザーベースのライセンスモデルで使用できるようになったというアナウンス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.classmethod.jp/articles/official-visual-studio-ami-is-available-with-aws-license-manager/"&gt;Visual Studio入りAMIが使える様になった件をライセンス面から調査してみた | DevelopersIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="containerize.net-applications-without-writing-dockerfiles-red-hat-developer"&gt;Containerize .NET applications without writing Dockerfiles | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/08/01/containerize-net-applications-without-writing-dockerfiles"&gt;https://developers.redhat.com/articles/2022/08/01/containerize-net-applications-without-writing-dockerfiles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-build-image という .NET CLI Tool を使用して Dockerfile を記述することなく .NET アプリケーションをコンテナー化するという記事。&lt;/p&gt;
&lt;h3 id="matt-warren-performance-in-the.net-runtime-ndc-london-2022"&gt;Matt Warren - Performance in the .NET Runtime - NDC London 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=YcZ-nZa2XgA&amp;amp;feature=youtu.be"&gt;https://m.youtube.com/watch?v=YcZ-nZa2XgA&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-nanoframeworkm5stickc-plus"&gt;.NET nanoFrameworkでM5StickC Plusを使ってみる - はつねの日記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hatsune.hatenablog.jp/entry/2022/07/31/013826"&gt;https://hatsune.hatenablog.jp/entry/2022/07/31/013826&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;M5StickC Plus で .NET nanoFramework を動かしてみる手順などについての記事。&lt;/p&gt;
&lt;h3 id="system.threading.ratelimiting-qiita"&gt;System.Threading.RateLimitingで流量制限を行う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/cf1a08366a1f0cd9a5d1"&gt;https://qiita.com/skitoy4321/items/cf1a08366a1f0cd9a5d1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入されるレートリミットを実装するための API である System.Threading.RateLimiting を使用することについての記事。&lt;/p&gt;
&lt;p&gt;記事ではライブラリーに含まれるクラスや標準で用意されているレートリミットのアルゴリズムを紹介している。&lt;/p&gt;
&lt;h3 id="how-to-call-a-rest-service-in.net-if-you-have-its-open-api-specification"&gt;How to call a REST service in .NET if you have its Open API specification&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;yurexus/how-to-call-a-rest-service-in-net-if-you-have-its-open-api-specification-59fa15c9f857"&gt;https://medium.com/&amp;#64;yurexus/how-to-call-a-rest-service-in-net-if-you-have-its-open-api-specification-59fa15c9f857&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio で OpenAPI 定義からクライアントを生成して API を呼び出す方法についての記事。&lt;/p&gt;
&lt;h3 id="c-converting-bytes-to-kilobytes-and-beyond"&gt;C# Converting Bytes To Kilobytes and Beyond&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/csharp-converting-bytes-to-kb-mb-gb-and-tb"&gt;https://khalidabuhakmeh.com/csharp-converting-bytes-to-kb-mb-gb-and-tb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイト(数値)をキロバイトのような単位に変換するヘルパーを作成するという記事。&lt;/p&gt;
&lt;p&gt;記事では既存のライブラリーの Humanizer と UnitsNet についても触れている。&lt;/p&gt;
&lt;h3 id="pdd-profiler-driven-development"&gt;PDD Profiler Driven Development&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aloiskraus.wordpress.com/2022/07/25/pdd-profiler-driven-development/"&gt;https://aloiskraus.wordpress.com/2022/07/25/pdd-profiler-driven-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロファイラー駆動開発についての記事。記事では Concurrency Visualizer による並列状態、WPA を使用したファイル I/O や CPU 使用率といったものを解析している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Diagnostics.DiagnosticsConcurrencyVisualizer2022"&gt;Concurrency Visualizer for Visual Studio 2022 - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="microservices-implementation-with-ocelot-gateway-using.net-core-6-api-and-angular-14"&gt;Microservices Implementation with Ocelot Gateway using .NET Core 6 API and Angular 14&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;jaydeepvpatil225/microservices-implementation-with-ocelot-gateway-using-net-core-6-api-and-angular-14-64b2ce3248ee"&gt;https://medium.com/&amp;#64;jaydeepvpatil225/microservices-implementation-with-ocelot-gateway-using-net-core-6-api-and-angular-14-64b2ce3248ee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の API ゲートウェイである Ocelot API Gateway を使用して ASP.NET Core の API と Angular アプリケーションを組み合わせたマイクロサービスを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-qiita"&gt;生文字列リテラルを使ってみた (C# 11 新機能) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/haruka_kotani/items/a274b982d6d42c5540f0"&gt;https://qiita.com/haruka_kotani/items/a274b982d6d42c5540f0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入される新機能の生文字列リテラル (Raw string literal) について紹介している記事。&lt;/p&gt;
&lt;h3 id="prevent-sensitive-data-exposure-in-log-with-serilog"&gt;Prevent sensitive data exposure in log with Serilog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/auvansang/prevent-sensitive-data-exposure-in-log-with-serilog-1pk7"&gt;https://dev.to/auvansang/prevent-sensitive-data-exposure-in-log-with-serilog-1pk7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog でパスワードのようなセンシティブなデータをマスクする方法についての記事。&lt;/p&gt;
&lt;h3 id="differentiating-visual-studio-instances-visual-studio-blog"&gt;Differentiating Visual Studio instances - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/differentiating-visual-studio-instances/"&gt;https://devblogs.microsoft.com/visualstudio/differentiating-visual-studio-instances/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock"&gt;Visual Studio Code の Peacock 拡張&lt;/a&gt;のように、異なる Visual Studio のインスタンス/ソリューションをステータスバーの上の色で判別できるようにする拡張の紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.SolutionColors"&gt;Solution Colors - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="how-to-bulk-email-with-c-and.net-zero-to-hero"&gt;How to Bulk Email with C# and .NET: Zero to Hero&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/bulk-email-with-csharp-and-dotnet"&gt;https://www.twilio.com/blog/bulk-email-with-csharp-and-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# から SendGrid の API を呼び出して、一斉にメールを送信する方法についての記事。パーソナライズやテンプレートの簡単な使い方について触れている。&lt;/p&gt;
&lt;h3 id="cmake-c-winrt-component-c-winui3-qiita"&gt;CMake + C++を使って WinRT Component を作って C# WinUI3 アプリから使う (後編) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/unicodon/items/4351458bda722a106695"&gt;https://qiita.com/unicodon/items/4351458bda722a106695&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ で実装した Windows Runtime (WinRT) Component を WinUI 3 を使用した C# アプリケーションから利用する手順についての記事。&lt;/p&gt;
&lt;h3 id="peeking-into-linq-distinctby-source-code"&gt;Peeking into LINQ DistinctBy source code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/canro91/peeking-into-linq-distinctby-source-code-48a2"&gt;https://dev.to/canro91/peeking-into-linq-distinctby-source-code-48a2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で LINQ に追加された &lt;code&gt;DistinctBy&lt;/code&gt; のソースコードを解説している記事。&lt;/p&gt;
&lt;h3 id="c-1-qiita"&gt;[C#] ビットカウントする（1が立っているビット数を数える） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/fca624ffb04553c44de7"&gt;https://qiita.com/radian-jp/items/fca624ffb04553c44de7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C#/.NET でのビットカウントについての記事。&lt;/p&gt;
&lt;p&gt;ナイーブな実装との比較や popcnt が使用できない場合のソフトウェアフォールバック実装についても触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-izyprowatchdog"&gt;GitHub - IzyPro/WatchDog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IzyPro/WatchDog"&gt;https://github.com/IzyPro/WatchDog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションのリクエストやログを記録して表示するユーザーインターフェースを提供する開発支援ライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/&amp;#64;uleluisrael/logging-in-net-the-modern-way-87c1b2f13ea5"&gt;Logging in .NET: The Modern Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="scottplot"&gt;ScottPlot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scottplot.net/"&gt;https://scottplot.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinForms、WPF や Avalonia に対応したプロットライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/shio163/articles/b3152a554393a0"&gt;C#でのグラフ描画 ScottPlot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jbevain/status/1554318820096954368?s=12&amp;t=y3-BSJhh8YLp-C3BikQe8Q --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Interesting crash today: we&amp;#39;ve had this code running for years on .NET Framework &amp;amp; Mono, seemingly without issues, but producing a stack overflow on .NET Core which exposes a bug in our code: we&amp;#39;re not handling the case where BeginReceiveFrom completes synchronously. &lt;a href="https://t.co/YUn46qP1je"&gt;pic.twitter.com/YUn46qP1je&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1554318820096954368?ref_src=twsrc%5Etfw"&gt;August 2, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Begin/End (いわゆる APM パターン) 非同期処理で End に続けて次の待機を行うようなコードを .NET Framework / Mono から .NET / .NET Core に移して動かしたところ、挙動が変わって同期的に完了できる場合が出てきたことでスタックオーバーフローしたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1555500611461795840?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We disabled JavaScript and TypeScript support in ReSharper 2022.2 by default&lt;br&gt;&lt;br&gt;It was difficult to support new language versions quickly, so we decided to put JS/TS support on hold. We’re looking for a better way to support these languages.&lt;br&gt;&lt;br&gt;Details: &lt;a href="https://t.co/ndCwoIMueQ"&gt;https://t.co/ndCwoIMueQ&lt;/a&gt; &lt;a href="https://t.co/H2pBXFmSZJ"&gt;pic.twitter.com/H2pBXFmSZJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1555500611461795840?ref_src=twsrc%5Etfw"&gt;August 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ReSharper 2022.2 から JavaScript と TypeScript のサポートがデフォルトで無効となるという話。言語のアップデートに対して迅速なサポートを続けていくことが難しくなっているため、長い議論の末にサポートは保留とすることになりデフォルトで無効とされた。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="optimization-of-datetime.getdate.year.month.day.dayofyear-by-euclidean-affine-functions-by-sergeipavlov-pull-request-72712-dotnetruntime"&gt;30% optimization of &lt;code&gt;DateTime.GetDate()&lt;/code&gt;/&lt;code&gt;.Year/.Month/.Day/.DayOfYear&lt;/code&gt; by 'Euclidean affine functions' by SergeiPavlov · Pull Request #72712 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/72712"&gt;https://github.com/dotnet/runtime/pull/72712&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Euclidean Affine Functions というアルゴリズムによって年月日の計算を30%高速化するという PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/29/updates</id>
		<title>2022-07-29: .NET Conf: Focus on MAUI</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/29/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-29T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-conf-focus-on.net-maui-reactor-and-community-events"&gt;Announcing .NET Conf - Focus on .NET MAUI, Reactor, and Community Events&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-focus-reactor-community-events/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-focus-reactor-community-events/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI にフォーカスしたライブストリーミングイベントの .NET Conf が8月9日に行われるというアナウンス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://focus.dotnetconf.net/"&gt;.NET Conf: Focus on MAUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="profiling-questpdf-in-pursuit-of-performance-the.net-tools-blog"&gt;Profiling QuestPDF: In Pursuit of Performance | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/27/profiling-questpdf-in-pursuit-of-performance/"&gt;https://blog.jetbrains.com/dotnet/2022/07/27/profiling-questpdf-in-pursuit-of-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains のオープンソース支援の一環で QuestPDF を dotTrace と dotMemory でプロファイリングしてパフォーマンスの問題の突き止めと修正を行ったことについて。&lt;/p&gt;
&lt;p&gt;ラムダによるキャプチャーの削減、キューの再利用、オブジェクトの生成削減、サイズ削減といった様々な最適化を行っている(記事内に実際の Pull request へのリンクがある)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/QuestPDF/QuestPDF"&gt;QuestPDF/QuestPDF: QuestPDF is an open-source, modern and battle-tested library that can help you with generating PDF documents by offering friendly, discoverable and predictable C# fluent API.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-july-2022-cumulative-update-preview"&gt;.NET Framework July 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 2022年7月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;TLS 1.3 でクライアント証明書を使用している場合にネゴシエーションでハングアップする問題や、WPF の同期に関する問題の修正が含まれる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-modify-claims-via-middleware-in-asp.net"&gt;C#: Modify Claims via Middleware in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kenakamu/c-modify-claims-via-middleware-in-aspnet-335m"&gt;https://dev.to/kenakamu/c-modify-claims-via-middleware-in-aspnet-335m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で JWT 認証などを行っている場合に、開発/テスト時にミドルウェアでクレームを変更することで認証をパスできるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="using-iasyncenumerable-in-a-razor-component-gerald-barre"&gt;Using IAsyncEnumerable in a Razor component - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/using-iasyncenumerable-in-a-razor-component.htm"&gt;https://www.meziantou.net/using-iasyncenumerable-in-a-razor-component.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IAsyncEnumerable を Blazor の Razor コンポーネントで使用することについての記事。&lt;/p&gt;
&lt;p&gt;愚直に実装した場合 StateHasChanged を呼び出す頻度が高くなるので、スロットリングしたほうがいいといったことが書かれている。&lt;/p&gt;
&lt;h3 id="tricks-every-c-dev-should-know-about-linqpad-code4it"&gt;5 tricks every C# dev should know about LINQPad - Code4IT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.code4it.dev/blog/5-linqpad-tricks"&gt;https://www.code4it.dev/blog/5-linqpad-tricks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQPad で役立つ5つの機能を紹介している記事。&lt;/p&gt;
&lt;p&gt;Dump やスタイリング、xUnit サポートなど。&lt;/p&gt;
&lt;h3 id="maui"&gt;MAUIのカスタムコントロールの所感&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/muak/articles/876fa1d62a3f40"&gt;https://zenn.dev/muak/articles/876fa1d62a3f40&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のカスタムコントロールを実装する際のポイントを解説している記事。&lt;/p&gt;
&lt;p&gt;カスタムコントロールに必要なものについてや、各プラットフォームごとのファイル構成について触れている。&lt;/p&gt;
&lt;h3 id="c-why-function-pointers-cant-be-used-on-instance-methods"&gt;[C#] Why function pointers can’t be used on instance methods&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/c-why-function-pointers-cant-be-used-on-instance-methods-8a99fc99b040"&gt;https://minidump.net/c-why-function-pointers-cant-be-used-on-instance-methods-8a99fc99b040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インスタンスメソッドに対して C# 9 の関数ポインターを使用すると正常に動かないことがあることを解説している記事。&lt;/p&gt;
&lt;p&gt;インスタンスメソッドには隠し引数として this があること、レジスターに収まらない構造体を返す場合にリターンバッファーを用意して渡すといったことが行われていることといった理由があるとしている。&lt;/p&gt;
&lt;h3 id="real-time-analytics-using.net-redis"&gt;Real time analytics using .Net &amp;amp; Redis&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/c_arnab/real-time-analytics-using-net-redis-4c5d"&gt;https://dev.to/c_arnab/real-time-analytics-using-net-redis-4c5d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis で RedisTimeSeries モジュールを使用して時系列データを扱うことでリアルタイム分析を実現するアプリケーションを構築するという記事。&lt;/p&gt;
&lt;h3 id="ways-to-navigate-and-explore-codebases-the.net-tools-blog"&gt;Ways to navigate and explore codebases | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/25/ways-to-navigate-and-explore-codebases/"&gt;https://blog.jetbrains.com/dotnet/2022/07/25/ways-to-navigate-and-explore-codebases/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider に備わっているコードを移動/探索するための様々な機能の紹介をしている記事。&lt;/p&gt;
&lt;h3 id="net-v7.0-features-will-change-the-way-you-code-nile-bits"&gt;.NET v7.0 Features Will Change the Way You Code - Nile Bits&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nilebits.com/blog/2022/07/net-v7-0-features-will-change-the-way-you-code/"&gt;https://www.nilebits.com/blog/2022/07/net-v7-0-features-will-change-the-way-you-code/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入される新しい API のいくつかをコード例と合わせて紹介している記事。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-dotnet"&gt;OpenTelemetry in Dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mrblonde91/opentelemetry-in-dotnet-398"&gt;https://dev.to/mrblonde91/opentelemetry-in-dotnet-398&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションで OpenTelemetry を使用してトレースやメトリクスを収集する構成について例をあげて紹介している記事。&lt;/p&gt;
&lt;h3 id="running.net-core-applications-as-a-linux-service-code-maze"&gt;Running .NET Core Applications as a Linux Service - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/aspnetcore-running-applications-as-linux-service/"&gt;https://code-maze.com/aspnetcore-running-applications-as-linux-service/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のアプリケーションを Linux のサービスとして動作させる方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Systemd での実行に必要な手順を解説している。&lt;/p&gt;
&lt;h3 id="exploring-communication-of-rate-limits-in-asp.net-core-with-rate-limit-headers"&gt;Exploring Communication of Rate Limits in ASP.NET Core With Rate Limit Headers&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tpeczek.com/2022/07/exploring-communication-of-rate-limits.html"&gt;https://www.tpeczek.com/2022/07/exploring-communication-of-rate-limits.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core での API レートリミットに関して、レートリミットの HTTP ヘッダーの取り扱いについての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 の Rate Limiting API、AspNetCoreRateLimit パッケージを使用した方法、HttpClient での呼び出しの制限に触れている。&lt;/p&gt;
&lt;h3 id="asynchronous-programming-in.net-introduction-misconceptions-and-problems-blog"&gt;Asynchronous Programming in .NET - Introduction, Misconceptions, and Problems | Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://wapplegate.com/asynchronous-programming/"&gt;https://wapplegate.com/asynchronous-programming/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の非同期プログラミング (async/await) に関するまとめ記事。&lt;/p&gt;
&lt;p&gt;I/O バウンドと CPU バウンドの処理の違い、非同期で得られるメリット、async/await での誤解、避けるべき操作、スレッドプールの枯渇といった点が書かれている。&lt;/p&gt;
&lt;h3 id="microsoft-releases-new.net-rate-limiter-in.net-7-and-its-amazing"&gt;Microsoft Releases New .NET Rate Limiter in .NET 7 - And It's Amazing!🤯&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/new-microsoft-dotnet-rate-limiter-for-rate-limiting/"&gt;https://blog.dotnetsafer.com/new-microsoft-dotnet-rate-limiter-for-rate-limiting/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Rate Limiting API について、各レートリミットのアルゴリズムについて図解つきで説明している記事。&lt;/p&gt;
&lt;h3 id="microsoft-tests-tutorials-inside-visual-studio-starting-with-blazor-visual-studio-magazine"&gt;Microsoft Tests Tutorials Inside Visual Studio, Starting with Blazor -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/07/28/vs-tutorials.aspx"&gt;https://visualstudiomagazine.com/articles/2022/07/28/vs-tutorials.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 内でチュートリアルを進められる仕組みがテストされていることについての記事。&lt;/p&gt;
&lt;p&gt;Visual Studio のプレビューを使用する一部のユーザーが Blazor のチュートリアルを Visual Studio のペインで進められるという仕組みがテストされているとのこと。&lt;/p&gt;
&lt;h3 id="digging-into-the-clr-diagnostics-ipc-protocol-in-c"&gt;Digging into the CLR Diagnostics IPC Protocol in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/digging-into-the-clr-diagnostics-ipc-protocol-in-c-4d4cbe57826c"&gt;https://chnasarre.medium.com/digging-into-the-clr-diagnostics-ipc-protocol-in-c-4d4cbe57826c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で CLR の診断用プロセス間通信プロトコルを取り扱うことについてのシリーズ。&lt;/p&gt;
&lt;p&gt;この記事では簡単に扱うためのパッケージについて触れている。&lt;/p&gt;
&lt;h3 id="auto-update-uwp-apps-over-azure-blob-storage-static-websites-medienstudio.net"&gt;Auto-Update UWP Apps over Azure BLOB Storage Static Websites - medienstudio.net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medienstudio.net/development-en/auto-update-uwp-apps-over-azure-blob-storage-static-websites/"&gt;https://medienstudio.net/development-en/auto-update-uwp-apps-over-azure-blob-storage-static-websites/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UWP アプリケーションの自動更新メカニズムを使用して Azure Storage BLOB から更新する方法についての記事。&lt;/p&gt;
&lt;p&gt;現在、ms-appinstaller プロトコルハンドラーはデフォルトで無効となっているためポリシーで有効化する必要があるとのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-microsoftnugetninja"&gt;GitHub - microsoft/NugetNinja&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/NugetNinja"&gt;https://github.com/microsoft/NugetNinja&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトの依存関係を検出し、最適なパッケージ参照状態の提案などを行うツール。&lt;/p&gt;
&lt;p&gt;ハッカソンで実装されたツールで現在開発中のプロジェクトというステータス。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="xamarin-androidwindowsonarm64.md-at-main-xamarinxamarin-android-github"&gt;xamarin-android/WindowsOnArm64.md at main · xamarin/xamarin-android · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xamarin/xamarin-android/blob/main/Documentation/guides/WindowsOnArm64.md"&gt;https://github.com/xamarin/xamarin-android/blob/main/Documentation/guides/WindowsOnArm64.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 版 Windows 上の Windows Subsystem for Android で Android アプリケーション (Xamarin, MAUI) を動作させる方法についての手順ドキュメント。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-unixfilemode-apis-by-tmds-pull-request-69980-dotnetruntime"&gt;Implement UnixFileMode APIs by tmds · Pull Request #69980 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/69980"&gt;https://github.com/dotnet/runtime/pull/69980&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unix ファイルモードを取り扱う API が .NET 7 で導入されるという PR (マージ済み)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/core/issues/7455#issuecomment-1184710446"&gt;What's new in .NET 7 Preview 7 [WIP] · Issue #7455 · dotnet/core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/22/updates</id>
		<title>2022-07-22: Windows Community Toolkit Labs, Microsoft.UI.Xaml v2.8.0, Visual Studio 2022 17.3 Preview 4</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/22/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-22T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-the-windows-community-toolkit-labs"&gt;Announcing the Windows Community Toolkit Labs!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-the-windows-community-toolkit-labs/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-the-windows-community-toolkit-labs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit の実験的なコンポーネントを開発する「ラボ」を発表した。&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs は新しいアイデアや開発中、実験段階のコンポーネントのためのプロジェクト。成熟したコンポーネントは最終的に Windows Community Toolkit に取り込まれることとなる。&lt;/p&gt;
&lt;p&gt;記事では Lab の目的、Lab に含まれているコンポーネントの紹介、アプリケーションでのパッケージ使用方法といった部分にも触れている。&lt;/p&gt;
&lt;p&gt;また Uno Platform もサポートされ、現在ブラウザーで Lab のサンプルアプリケーションを実行可能となっている。&lt;/p&gt;
&lt;h3 id="release-microsoft.ui.xaml-v2.8.0-microsoftmicrosoft-ui-xaml"&gt;Release Microsoft.UI.Xaml v2.8.0 · microsoft/microsoft-ui-xaml&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.0"&gt;https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.UI.Xaml (WinUI 2) 2.8.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WebView2 が利用できるようになった他、サポートバージョンの変更、いくつかの不具合修正と改善が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.3-preview-4-visual-studio-2022-preview-release-notes"&gt;Visual Studio 2022 17.3 Preview 4 - Visual Studio 2022 Preview Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1730-pre40--visual-studio-2022-version-173-preview-4"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1730-pre40--visual-studio-2022-version-173-preview-4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET MAUI のサービスリリースが含まれるほか、ARM64 での Windows Forms のデザイナーの修正などいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-7-preview-5-available-on-app-service-azure-app-service"&gt;.NET 7 Preview 5 available on App Service - Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/07/18/dotnet7_preview5.html"&gt;https://azure.github.io/AppService/2022/07/18/dotnet7_preview5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で .NET 7 Preview 5 が App Service Early Access feature にて利用可能となった。&lt;/p&gt;
&lt;p&gt;App Service 上で .NET 7 をターゲットにしている場合、今後アップデートがリリースされると自動で更新される。これは RC と GA となるまで続く。Self-contained なアプリケーションの場合は更新されない。&lt;/p&gt;
&lt;h3 id="announcing-the.net-7-support-for-azure-functions-in-an-isolated-process-in-public-preview"&gt;Announcing the .NET 7 support for Azure functions in an isolated process in public preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-support-for-azure-functions-in-an-isolated/ba-p/3574316"&gt;https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-support-for-azure-functions-in-an-isolated/ba-p/3574316&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions のプロセス分離モデルで .NET 7 のサポートがパブリックプレビューとなった。&lt;/p&gt;
&lt;h3 id="release-6.0.419-service-release-3-dotnetmaui"&gt;Release 6.0.419 (Service Release 3) · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.419"&gt;https://github.com/dotnet/maui/releases/tag/6.0.419&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI 6.0.419 (Service Release 3) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースはサービスリリースとなり、主に細かい不具合の修正が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-6-c-tokyo-connpass"&gt;【オンライン】.NET 6 移行祭り！ C# Tokyo イベント - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csharp-tokyo.connpass.com/event/254206/"&gt;https://csharp-tokyo.connpass.com/event/254206/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 への移行をテーマにしたコミュニティーオンラインイベントが8月26日に行われる。&lt;/p&gt;
&lt;h3 id="net-7"&gt;.NET 7からサポートポリシーが変更になる予定 - つばろぐ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tsubalog.hatenablog.com/entry/2022/07/16/221307"&gt;https://tsubalog.hatenablog.com/entry/2022/07/16/221307&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で変更となるサポートポリシーについて解説している記事。&lt;/p&gt;
&lt;p&gt;大きく Current の呼び名の変更、サポートライフサイクルの流れの整理が行われるとのこと。&lt;/p&gt;
&lt;h3 id="production-postmortem-out-of-memory-on-a-clear-sky"&gt;Production postmortem: Out of memory on a clear sky&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197635-A/production-postmortem-out-of-memory-on-a-clear-sky?Key=43188033-6bfd-4682-9fc8-1bef248f2caf"&gt;https://ayende.com/blog/197635-A/production-postmortem-out-of-memory-on-a-clear-sky?Key=43188033-6bfd-4682-9fc8-1bef248f2caf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux のシステム上に余裕があるにもかかわらずスレッド生成時に OutOfMemoryException が発生した原因を調査したという記事。&lt;/p&gt;
&lt;p&gt;Linux にはいくつかの設定がありその上限に達していたため失敗していたとのこと。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-cloneanalysis-ii"&gt;High performance .NET: Building a Redis Clone–Analysis II&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197665-C/high-performance-net-building-a-redis-clone-analysis-ii?Key=be0be55d-1092-47ce-a951-950ce65243cd"&gt;https://ayende.com/blog/197665-C/high-performance-net-building-a-redis-clone-analysis-ii?Key=be0be55d-1092-47ce-a951-950ce65243cd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis クローンを作りながらパフォーマンスについてみていくというシリーズ。&lt;/p&gt;
&lt;p&gt;記事ではコマンドの実行に関して、ネットワークの I/O を含む処理の負荷のかかっている部分を探っている。&lt;/p&gt;
&lt;h3 id="benchmarking-slow-is-fast-fast-is-slow"&gt;Benchmarking: Slow is fast, fast is slow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197857-C/benchmarking-slow-is-fast-fast-is-slow"&gt;https://ayende.com/blog/197857-C/benchmarking-slow-is-fast-fast-is-slow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Corax と Lucene でのインデックス速度の比較をした際に Corax のほうが遅く、Corax と Lucene 両方から呼び出される共通コードの実行時間に差が出ていたのは何故かについて。&lt;/p&gt;
&lt;p&gt;これは RavenDB ではデータを読み出す前にページを検証する仕組みがあり、Corax が速く検証を行い、あとから Lucene が来るので Lucene はその操作をする必要がないため見かけ上速くなっていた。&lt;/p&gt;
&lt;p&gt;正しい結果を見るにはそれぞれ別々のシナリオに分けてコールドブートで実行しようという話。&lt;/p&gt;
&lt;h3 id="top-50-reasons-to-use-uno-platform-2022-edition"&gt;Top 50 Reasons to use Uno Platform – 2022 edition&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/top-50-reasons-to-use-uno-platform-2022-edition/"&gt;https://platform.uno/blog/top-50-reasons-to-use-uno-platform-2022-edition/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform を使う50の理由 (2022年版)&lt;/p&gt;
&lt;h3 id="building-ambie-3.0-the-best-white-noise-app-on-windows"&gt;Building Ambie 3.0 — the best white noise app on Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kid-jenius.medium.com/building-ambie-3-0-the-best-white-noise-app-on-windows-d899fb02adf2"&gt;https://kid-jenius.medium.com/building-ambie-3-0-the-best-white-noise-app-on-windows-d899fb02adf2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambie というホワイトノイズを流す Windows アプリの新しいバージョンを開発した際の話。&lt;/p&gt;
&lt;p&gt;新しいデザインにする初期プランが始まり、プロトタイプ、見直し、結果といったことが書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jenius-apps/ambie"&gt;jenius-apps/ambie: The best white noise app on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="maui"&gt;MAUI ハンドラーのマップ変更を試したメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/muak/articles/8e17cabbc1ae35"&gt;https://zenn.dev/muak/articles/8e17cabbc1ae35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のコントロールのハンドラーマッピングをカスタマイズする方法を試してみるという記事。&lt;/p&gt;
&lt;h3 id="how-to-profile.net-code-using-the-dotmemory-plugin-in-rider-the.net-tools-blog"&gt;How to Profile .NET Code Using the dotMemory Plugin in Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/18/how-to-profile-net-code-using-the-dotmemory-plugin-in-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/07/18/how-to-profile-net-code-using-the-dotmemory-plugin-in-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で dotMemory プラグインを使用して .NET アプリケーションのプロファイルを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="add-authentication-to.net-maui-apps-with-auth0"&gt;Add Authentication to .NET MAUI Apps with Auth0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/add-authentication-to-dotnet-maui-apps-with-auth0/"&gt;https://auth0.com/blog/add-authentication-to-dotnet-maui-apps-with-auth0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI アプリケーションに Auth0 による認証を組み込む方法についての記事。&lt;/p&gt;
&lt;h3 id="discord-ui-in.net-maui-tylah-kapa"&gt;Discord UI in .NET MAUI — Tylah Kapa&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kapa.dev/blog/discord-ui-in-net-maui"&gt;https://kapa.dev/blog/discord-ui-in-net-maui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Discord の UI のようなモックアップを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="combining-lottie-animations-with-gestures-and-scrolling"&gt;Combining Lottie Animations with Gestures and Scrolling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.cayas.de/blog/lottie-animations-gestures-and-scrolling"&gt;https://www.cayas.de/blog/lottie-animations-gestures-and-scrolling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI 上で表示した Lottie アニメーションをジェスチャーやスクロールといったインタラクションと連動させる方法についての記事。&lt;/p&gt;
&lt;h3 id="setting-up-ci-for-your.net-maui-windows-app-in-azure-devops-andreas-nesheim"&gt;Setting up CI for your .NET MAUI Windows app in Azure DevOps - Andreas Nesheim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/"&gt;https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の Windows アプリケーションを Azure  DevOps でビルド、署名する方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-basic-4-option"&gt;Visual Basic の 4 つの Option について - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2022/07/15/153127"&gt;https://tech.blog.aerie.jp/entry/2022/07/15/153127&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Basic .NET の言語で使用されている設定の4つの Option (&lt;code&gt;Option Compare&lt;/code&gt;, &lt;code&gt;Option Explicit&lt;/code&gt;, &lt;code&gt;Option Strict&lt;/code&gt;, &lt;code&gt;Option Infer&lt;/code&gt;) について解説している記事。&lt;/p&gt;
&lt;h3 id="exploring-the-new-output-caching-middleware"&gt;Exploring the new output caching middleware&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/exploring-the-new-output-caching-middleware-4no1"&gt;https://dev.to/this-is-learning/exploring-the-new-output-caching-middleware-4no1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core で導入される出力キャッシュのミドルウェアについての記事。どのようにして利用できるかといったことを紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="byme8zeroql"&gt;byme8/ZeroQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/byme8/ZeroQL"&gt;https://github.com/byme8/ZeroQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL のクエリー呼び出しコードを解析して事前にコードを生成することでパフォーマンスを向上させたクライアントライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/byme8/zeroql-c-friendly-graphql-4134"&gt;ZeroQL - C# friendly GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/markrussinovich/status/1549440918553448448?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s here: Zoomit with screen recording plus updates to Sigcheck, Procmon, Bginfo and PsExec: &lt;a href="https://t.co/th84RGgI18"&gt;https://t.co/th84RGgI18&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mark Russinovich (&amp;#64;markrussinovich) &lt;a href="https://twitter.com/markrussinovich/status/1549440918553448448?ref_src=twsrc%5Etfw"&gt;July 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ZoomIt に簡易的なスクリーンレコーディング機能が実装されたという話。(ウィンドウや範囲指定などはなくズームされている画面か全画面となる)&lt;/p&gt;
&lt;!-- https://twitter.com/FSazanavets/status/1548972196596486144 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;To help more &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; developers to gain access to educational resources, I am, once again, giving away digital copies of my &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt; book for free until the end of July. It is available to download via this link:&lt;a href="https://t.co/3tZPp8QfRn"&gt;https://t.co/3tZPp8QfRn&lt;/a&gt; &lt;a href="https://t.co/1CP8eoXbQ8"&gt;pic.twitter.com/1CP8eoXbQ8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fiodar Sazanavets 🇺🇦 (&amp;#64;FSazanavets) &lt;a href="https://twitter.com/FSazanavets/status/1548972196596486144?ref_src=twsrc%5Etfw"&gt;July 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://leanpub.com/signalronnet6-thecompleteguide/c/free-until-august"&gt;SignalR on .NET 6 - the Complete Guide&lt;/a&gt; という電子書籍 (E-book) が7月末まで無料という話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/16/updates</id>
		<title>2022-07-16: .NET 7 Preview 6, Rate Limiting API, .NET Core 3.1 EoS on December 13, 2022</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/16/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-16T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-6.net-blog"&gt;Announcing .NET 7 Preview 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;このプレビューリリースでは型コンバーターの改善、JSON コントラクトのカスタマイズ、System.Formats.Tar API の更新、.NET プロジェクトテンプレートの制約、コード生成によるパフォーマンス改善などが含まれている。&lt;/p&gt;
&lt;p&gt;型コンバーター (TypeConverter) では新たに DateOnly, TimeOnly, Int128, UInt128, Half といった型をサポートした。JSON コントラクトのカスタマイズではプロパティーのシリアライズの挙動をコンバーターなしでコントロールしたりといったことが可能となる。&lt;/p&gt;
&lt;p&gt;System.Formats.Tar API にはグローバル拡張属性 (GEA) のサポートや複数のエントリー形式の混在のサポートが対応されている。&lt;/p&gt;
&lt;p&gt;.NET プロジェクトテンプレートに制約の概念が導入され、OS やテンプレートエンジンホスト (.NET CLI や Visual Studio)、インストールされているワークロードといった条件を設定できるようになった。現在は CLI でのサポートのみで Visual Studio でのサポートも進めているとのこと。将来的には MSBuild のプロパティーに基づく制約などもサポートするとのこと。そのほか複数項目選択や終了コードの統一といった改善も含まれる。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-6.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-6/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 6 での ASP.NET Core のアップデートについてのアナウンス記事。&lt;/p&gt;
&lt;p&gt;このプレビューリリースでは次の新機能や改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リクエスト圧縮展開ミドルウェア&lt;/li&gt;
&lt;li&gt;出力キャッシュミドルウェア&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェアの更新&lt;/li&gt;
&lt;li&gt;Kestrel での HTTP/2 上の WebSockets のサポート&lt;/li&gt;
&lt;li&gt;Kestrel の多コアマシンでのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;W3CLogger での付加的なリクエストヘッダーのロギングのサポート&lt;/li&gt;
&lt;li&gt;空の Blazor プロジェクトテンプレート&lt;/li&gt;
&lt;li&gt;WebAssembly での System.Security.Cryptography のサポート&lt;/li&gt;
&lt;li&gt;Blazor カスタム要素 (Blazor custom elements) の非実験的な位置づけへの変更&lt;/li&gt;
&lt;li&gt;Blazor の実験的な QuickGrid コンポーネント&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングの複数に分割されたパラメータ&lt;/li&gt;
&lt;li&gt;MapGroup で多くの拡張メソッドをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
リクエスト圧縮展開ミドルウェアはクライアントからのリクエストが `Content-Encoding: gzip` のような形で圧縮されている場合に展開する。レスポンスの圧縮と同様に GZip, Brotli, Deflate またはカスタムな形式をサポートする。
--&gt;
&lt;h3 id="announcing-entity-framework-core-7-preview-6-performance-edition.net-blog"&gt;Announcing Entity Framework Core 7 Preview 6: Performance Edition - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 Preview 6 がリリースされたことに合わせてパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では SaveChanges でのラウンドトリップの削減について、SQL Server での複数行の INSERT の改善といったパフォーマンスに関する改善を紹介している。&lt;/p&gt;
&lt;h3 id="announcing-rate-limiting-for.net.net-blog"&gt;Announcing Rate Limiting for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入されるレートリミッターの API についての紹介記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 7 のレートリミッターがサポートするアルゴリズムと API について説明している。レートリミッターは「同時実行制限」「トークンバケット制限」「固定ウィンドウ制限」「スライディングウィンドウ制限」の4つのアルゴリズムを提供する。&lt;/p&gt;
&lt;p&gt;API についてはそれぞれのアルゴリズムでの使用や、HttpClient と組み合わせた場合の使い方、ASP.NET Core のミドルウェアでの利用にも触れている。&lt;/p&gt;
&lt;h3 id="net-core-3.1-will-reach-end-of-support-on-december-13-2022.net-blog"&gt;.NET Core 3.1 will reach End of Support on December 13, 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-core-3-1-will-reach-end-of-support-on-december-13-2022/"&gt;https://devblogs.microsoft.com/dotnet/net-core-3-1-will-reach-end-of-support-on-december-13-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 が2022年12月13日でサポート終了となるというアナウンス。&lt;/p&gt;
&lt;p&gt;2022年12月13日以降セキュリティー修正はリリースされなくなるため、.NET 6 (LTS) への移行が推奨される。またこれによってサポート終了後には Visual Studio 2019 および 2022 では .NET Core 3.1 コンポーネントのインストールがサポート外となりオプションに変更される。インストール済みのものや、手動でインストールした場合には引き続き利用できるが Visual Studio 2022 の .NET 6 への移行が推奨される。&lt;/p&gt;
&lt;h3 id="net-framework-july-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework July 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年7月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー修正は含まれないが、6月のリリースが正しく累積されておらず、セキュリティー更新のいくつかが含まれていなかった問題が修正されている。&lt;/p&gt;
&lt;h3 id="net-july-2022-updates.net-6.0.7-and.net-core-3.1.27.net-blog"&gt;.NET July 2022 Updates – .NET 6.0.7 and .NET Core 3.1.27 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/july-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/july-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.7 と .NET Core 3.1.27 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー修正は含まれておらず、不具合の修正や改善といったものが含まれるものとなっている。&lt;/p&gt;
&lt;h3 id="microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool"&gt;Microsoft open sources Salus software bill of materials (SBOM) generation tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool/"&gt;https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SBOM (ソフトウェア部品表) の生成ツールがオープンソースでリリースされた。&lt;/p&gt;
&lt;p&gt;成果物をスキャンしてファイルや各種依存パッケージといった情報を SPDX 形式で出力することのできるツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/sbom-tool"&gt;microsoft/sbom-tool: The SBOM tool is a highly scalable and enterprise ready tool to create SPDX 2.2 compatible SBOMs for any variety of artifacts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="whats-coming-for-blazor-in.net-7"&gt;What’s Coming for Blazor in .NET 7?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.telerik.com/blogs/whats-coming-blazor-dotnet-7?dclid=CNH85ZbH-vgCFW6G6QUdOtoLHg"&gt;https://www.telerik.com/blogs/whats-coming-blazor-dotnet-7?dclid=CNH85ZbH-vgCFW6G6QUdOtoLHg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Blazor で導入される新機能などをまとめて紹介している記事。&lt;/p&gt;
&lt;h3 id="minimal-api-validation-with-fluentvalidation"&gt;Minimal API Validation with FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/minimal-api-validation-with-fluentvalidation"&gt;https://khalidabuhakmeh.com/minimal-api-validation-with-fluentvalidation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API で FluentValidation を使用してパラメータ検証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="neue-cc-asyncawait"&gt;neue cc - async/awaitのキャンセル処理やタイムアウトを効率的に扱うためのパターン＆プラクティス&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/07/13_Cancellation.html"&gt;https://neue.cc/2022/07/13_Cancellation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期処理を実装する上で頻出する、CancellationToken を使用したキャンセルやタイムアウトを取り扱うためのパターンとプラクティスについての記事。&lt;/p&gt;
&lt;h3 id="net-mauiandroid"&gt;.NET MAUI(Android)でも、データをシェア(受信)したい！&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/test_myname/articles/d856ed8e4d5fa3"&gt;https://zenn.dev/test_myname/articles/d856ed8e4d5fa3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI (Android) アプリケーションで外部のアプリケーションからデータを受け取る (Intent) 方法についての記事。&lt;/p&gt;
&lt;h3 id="firebase-push-notifications-for-android-and-ios-using-ionic-and-asp.net-a-complete-guide"&gt;Firebase Push Notifications for Android and iOS Using Ionic and ASP.NET —A Complete Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/firebase-push-notifications-for-android-and-ios-using-ionic-and-aspnet-a-complete-guide-16bi"&gt;https://dev.to/syncfusion/firebase-push-notifications-for-android-and-ios-using-ionic-and-aspnet-a-complete-guide-16bi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ionic を使用した iOS/Android アプリケーションに ASP.NET Core アプリケーションから Firebase Push Notification で通知を送る方法について解説している記事。&lt;/p&gt;
&lt;h3 id="net-6-system.text.json.nodes.jsonnode"&gt;[.NET 6] System.Text.Json.Nodes.JsonNode の一致を判定する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/f961adfe2219ff"&gt;https://zenn.dev/shimat/articles/f961adfe2219ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json で JSON をパースし JsonNode となったものを比較して同一の値を持つかどうかを判定する方法についての記事。&lt;/p&gt;
&lt;p&gt;単純に JSON を文字列比較した場合はプロパティーの順番などでうまくいかないため、オブジェクトのプロパティー単位で比較していく必要がある。&lt;/p&gt;
&lt;h3 id="binding-lottie-or-any-other-swift-framework-with-ui-in-maui"&gt;Binding Lottie (or any other Swift framework with UI) in MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/csaba8472/binding-lottie-or-any-other-swift-framework-with-ui-in-maui-543m"&gt;https://dev.to/csaba8472/binding-lottie-or-any-other-swift-framework-with-ui-in-maui-543m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI (Android と iOS) で Lottie (アニメーションを再生する仕組み)を使用するバインディングを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="vs2022-performance-enhancements-git-branch-switching-visual-studio-blog"&gt;VS2022 Performance Enhancements: Git Branch Switching - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/vs2022-performance-enhancements-git-branch-switching/"&gt;https://devblogs.microsoft.com/visualstudio/vs2022-performance-enhancements-git-branch-switching/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビューでの Git のブランチ切り替えのパフォーマンス改善について。&lt;/p&gt;
&lt;p&gt;ソリューションのの読み込みを回避したり、リロードは30%程度改善するといったことでパフォーマンスを大幅に向上しているとのこと。&lt;/p&gt;
&lt;h3 id="building-our-first-microsoft-orleans-app"&gt;Building our first Microsoft Orleans App&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/willvelida/building-our-first-microsoft-orleans-app-489l"&gt;https://dev.to/willvelida/building-our-first-microsoft-orleans-app-489l&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans でクライアントとサーバーのプロジェクトを作ってみるというステップバイステップ記事。&lt;/p&gt;
&lt;h3 id="net-debugger.launch-for-macos-and-linux"&gt;.NET Debugger.Launch for macOS and Linux&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/dotnet-debugger-launch-for-macos-and-linux"&gt;https://khalidabuhakmeh.com/dotnet-debugger-launch-for-macos-and-linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Debugger.Launch&lt;/code&gt; は Windows でのみ使用できるが macOS と Linux でも似たようなことをするにはどうすればよいかという記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IsAttached&lt;/code&gt; プロパティーは使用できるので起動時にアタッチするまで待機するというワークアラウンドになってしまうとのこと。&lt;/p&gt;
&lt;h3 id="c-1-qiita"&gt;【C#】ループの最適化手法 ①配列編 ～境界値チェックと専用命令と～ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/fafd3468690a896139b3"&gt;https://qiita.com/Kujiro/items/fafd3468690a896139b3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配列、 &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; を使った要素の列挙のパフォーマンスをソースコードやアセンブリレベルで比較、解説している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Kujiro/items/9569e91b942bcf9d528b"&gt;【C#】ループの最適化手法 ②List&amp;lt;T&amp;gt;編 ～List&amp;lt;T&amp;gt;はSpanT化すると数倍早い～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Kujiro/items/21d004bc74449765dbf7"&gt;【C#】ループの最適化手法 ③Span&amp;lt;T&amp;gt;編 ～配列をSpan&amp;lt;T&amp;gt;にするだけで早い～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="customizing-controls-in.net-maui.net-blog"&gt;Customizing Controls in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/customizing-dotnet-maui-controls/"&gt;https://devblogs.microsoft.com/dotnet/customizing-dotnet-maui-controls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NET MAUI の既存のコントロールを拡張、カスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="ienumerable-debugger-visualizer-improvements-visual-studio-blog"&gt;IEnumerable Debugger Visualizer Improvements - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/ienumerable-visualizer-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/ienumerable-visualizer-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 Preview で強化された IEnumerable のデバッガービジュアライザーの最新のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;フィルタリングや CSV エクスポート、Visual Studio に合わせたテーマといった機能が実装されたとのこと。&lt;/p&gt;
&lt;h3 id="julyot-15.net-nanoframework-networking-and-azure"&gt;#JulyOT 15: .NET nanoFramework networking and Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/azure/julyot-15-net-nanoframework-networking-and-azure-2ng5"&gt;https://dev.to/azure/julyot-15-net-nanoframework-networking-and-azure-2ng5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET nanoFramework でネットワーク通信を行い、Azure と接続する方法についての記事。&lt;/p&gt;
&lt;p&gt;HTTPSのクライアントや Web サーバー、MQTT や SignalR といったものを使用する方法、Azure IoT サービスを呼び出す方法とったものを紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-usausaazure-functions-extension-azure-functions-extension"&gt;GitHub - usausa/azure-functions-extension: Azure Functions extension.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/azure-functions-extension"&gt;https://github.com/usausa/azure-functions-extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions でパラメータのモデルバインディングなどを提供する拡張ライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="cutt-systemc"&gt;CUTT System:C#ベクトルプログラミング入門&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.cutt.co.jp/book/978-4-87783-524-8.html"&gt;https://www.cutt.co.jp/book/978-4-87783-524-8.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Runtime.Intrinsics の SIMD サポートを使用して C# でベクトルプログラミングを行うことについての書籍。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1547311810277085184?s=12&amp;t=i6d9fNI7jg-55SATIPgtYw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;ve ever needed to debug WPF or other NGEN/R2R images in VS, it&amp;#39;s now even easier with our new option.&lt;br&gt;&lt;br&gt;You can disable the load of NGEN/ R2R using the &lt;br&gt;settings under  Tools &amp;gt;Options&amp;gt;Debugging &amp;gt;General&amp;gt; Prevent using precompiled images on module load&lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://t.co/eHnv1NCSGT"&gt;pic.twitter.com/eHnv1NCSGT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1547311810277085184?ref_src=twsrc%5Etfw"&gt;July 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;デバッグ時に R2R/NGEN イメージを読み込まないようにするオプションが 17.3 Preview 3 で追加されたという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/10/updates</id>
		<title>2022-07-10: AWS .NET deployment tool, Increased Subscription Pricing for JetBrains products, CoreWCF 1.1.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/10/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-10T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="aws-announces-a-streamlined-deployment-experience-for.net-applications-in.net-cli-and-visual-studio"&gt;AWS announces a streamlined deployment experience for .NET applications in .NET CLI and Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/07/aws-streamlined-deployment-net-applications-cli-visual-studio/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/07/aws-streamlined-deployment-net-applications-cli-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを AWS に簡単にデプロイするための CLI と Visual Studio 向けの拡張が一般公開となった。&lt;/p&gt;
&lt;p&gt;適切なコンピュートの選択や Dockerfile の自動生成、パッケージングとデプロイといったことを支援するツール。例えば &lt;code&gt;dotnet aws deploy ...&lt;/code&gt; で ECS や App Runner にデプロイできる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.github.io/aws-dotnet-deploy/"&gt;AWS .NET deployment tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ide.net-all-products-pack-jetbrains-news"&gt;IDE、.NET ツール、および All Products Pack のサブスクリプションの価格改定 | JetBrains News&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/ja/blog/2022/06/29/increased-subscription-pricing-for-ides-net-tools-and-the-all-products-pack/"&gt;https://blog.jetbrains.com/ja/blog/2022/06/29/increased-subscription-pricing-for-ides-net-tools-and-the-all-products-pack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の IDE や .NET ツール、All Products Pack のサブスクリプションの価格が改訂されるというアナウンス。&lt;/p&gt;
&lt;p&gt;ReSharper や Rider を含む、多くの JetBrains 製品のサブスクリプションの価格が改訂され値上がりとなる。この新しい価格は2022年10月1日から適用される。&lt;/p&gt;
&lt;p&gt;個人向けのプランでは最大2年または3年の、法人向けプランでは最大2年の現行の価格での先払いが可能となっている。&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;製品 (個人向け)&lt;/th&gt;
&lt;th&gt;現行価格 (税込; 1年目)&lt;/th&gt;
&lt;th&gt;改定後価格 (税込; 1年目)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;All Products Pack&lt;/td&gt;
&lt;td&gt;31,570 円&lt;/td&gt;
&lt;td&gt;38,148 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dotUltimate (Rider + ReSharper)&lt;/td&gt;
&lt;td&gt;18,920 円&lt;/td&gt;
&lt;td&gt;22,308 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReSharper&lt;/td&gt;
&lt;td&gt;16,390 円&lt;/td&gt;
&lt;td&gt;18,348 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rider&lt;/td&gt;
&lt;td&gt;17,600 円&lt;/td&gt;
&lt;td&gt;19,668 円&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="corewcf-1.1.0-and-project-templates.net-blog"&gt;CoreWCF 1.1.0 and project templates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/corewcf-1-1-0-and-project-templates/"&gt;https://devblogs.microsoft.com/dotnet/corewcf-1-1-0-and-project-templates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoreWCF 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;HTTP 上のトランスポートセキュリティーでの偽装や WebHttpBinding で生成する Swagger ファイルを変更するための新しい API といった小さな改善が含まれている。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースで追加されたプロジェクトテンプレートについても紹介している。&lt;/p&gt;
&lt;h3 id="release-release-v2.47.0-grpcgrpc-dotnet"&gt;Release Release v2.47.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.47.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.47.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grpc-dotnet 2.47.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;HttpClientBuilder で AddCallCredentials に CallCredentials を受け取るオーバーロードの追加のほかいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-data-frameworks-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;.NET Data Frameworks Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework を含むデータフレームワークの隔週更新情報の7月7日分。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 で値オブジェクトのサポートとマップされていない型に対する生 SQL クエリーのサポートがカットされたとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/ajcvickers/status/1545089731385491458?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;EF Core Biweekly Update&lt;br&gt;&lt;br&gt;Unfortunately, we have had to make some painful cuts for EF7. Most notably, value objects and raw SQL for unmapped types are cut. 😢&lt;br&gt;&lt;br&gt;In better news, interceptors for query expressions and concurrency exceptions are now merged! 🦄&lt;a href="https://t.co/4RGMEMJtB4"&gt;https://t.co/4RGMEMJtB4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Arthur Vickers (&amp;#64;ajcvickers) &lt;a href="https://twitter.com/ajcvickers/status/1545089731385491458?ref_src=twsrc%5Etfw"&gt;July 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-c-10-ref-field"&gt;(C#) C# 10でも ref field したい - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/07/02/203741"&gt;https://ikorin2.hatenablog.jp/entry/2022/07/02/203741&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入される ref field と同様なことを &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; で実現するというテクニックについての記事。&lt;/p&gt;
&lt;h3 id="azure-sdk-for.net-defaultazurecredential-tech.guitarrapc.com"&gt;Azure SDK for .NET の認証を DefaultAzureCredential にそろえる - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/07/06/012351"&gt;https://tech.guitarrapc.com/entry/2022/07/06/012351&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure SDK for .NET に古くからの &lt;code&gt;AzureCredentials&lt;/code&gt; と現在推奨される &lt;code&gt;DefaultAzureCredential&lt;/code&gt; があり、それを &lt;code&gt;DefaultAzureCredential&lt;/code&gt; で共通に扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="manage.net-microservices-apis-with-apache-apisix-api-gateway"&gt;Manage .NET Microservices APIs with Apache APISIX API Gateway&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/apisix/manage-net-microservices-apis-with-apache-apisix-api-gateway-2cbk"&gt;https://dev.to/apisix/manage-net-microservices-apis-with-apache-apisix-api-gateway-2cbk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache APISIX API Gateway を使用して .NET の Web API を扱う例についての記事。&lt;/p&gt;
&lt;h3 id="back-to-basics-custom-http-response-header-manipulation-in-asp.net-core-rick-strahls-web-log"&gt;Back to Basics: Custom HTTP Response Header Manipulation in ASP.NET Core - Rick Strahl's Web Log&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Jul/07/Back-to-Basics-Custom-HTTP-Response-Header-Manipulation-in-ASPNET-Core"&gt;https://weblog.west-wind.com/posts/2022/Jul/07/Back-to-Basics-Custom-HTTP-Response-Header-Manipulation-in-ASPNET-Core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core でカスタム HTTP レスポンスヘッダーを取り扱う方法についてのおさらい記事。MVC のアクションの中、ミドルウェア、Web.config といったものを説明している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-july-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | July 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/05/net-annotated-monthly-july-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/07/05/net-annotated-monthly-july-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連情報のまとめ、7月号。&lt;/p&gt;
&lt;h3 id="graphql-for.net"&gt;GraphQL For .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/drminnaar/graphql-for-net-38lc"&gt;https://dev.to/drminnaar/graphql-for-net-38lc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL の API サーバーを構築する方法をステップバイステップで解説している記事。&lt;/p&gt;
&lt;p&gt;サーバーの構築からミューテーション、Entity Framework Core の利用やクエリープロジェクションといったことに触れている。&lt;/p&gt;
&lt;h3 id="asp.net-core-web-qiita"&gt;複数のASP.NET Core Webアプリーションでセッション情報を共有する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Shuji_Kitamura/items/e8fa20c30b8bb52d5d84"&gt;https://qiita.com/Shuji_Kitamura/items/e8fa20c30b8bb52d5d84&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;複数の ASP.NET Core アプリケーション間でセッション情報を共有する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Redis を使用してアプリケーション間でセッションを共有する構成を解説している。&lt;/p&gt;
&lt;h3 id="monodigit-separator-qiita"&gt;MonoでDigit Separator (桁区切り文字)にハメられた話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ktz_alias/items/42359f5fe76f2cf21ac9"&gt;https://qiita.com/ktz_alias/items/42359f5fe76f2cf21ac9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono の mcs (C# コンパイラー) では Digit Separators (桁区切り文字; 数字区切り文字) の処理に不具合があり、不正な値となる問題があるという記事。&lt;/p&gt;
&lt;p&gt;Roslyn では問題がないため、Mono かつ mcs を使用している場合に影響を受けるので外部のサービスなどで注意が必要なケースがある(Mono には Roslyn の csc も含まれている)。&lt;/p&gt;
&lt;h3 id="maui"&gt;MAUI で独自のコントロールを作る方法のメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/maui-custom-control"&gt;https://zenn.dev/okazuki/articles/maui-custom-control&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI でネイティブのコントロールを使用するカスタムコントロールを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-generic-attributes-more-than-syntax-sugar"&gt;C# 11 Generic Attributes More Than Syntax Sugar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gsferreira.com/archive/2022/csharp-11-generic-attributes-more-than-syntax-sugar/"&gt;https://gsferreira.com/archive/2022/csharp-11-generic-attributes-more-than-syntax-sugar/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入されるジェネリック属性についての記事。&lt;/p&gt;
&lt;p&gt;簡単なコード例でどのような形で利用できるのかといったことを紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-ui-july-outlook-clone"&gt;.NET MAUI UI July: Outlook Clone&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://goforgoldman.com/2022/06/30/outlook-clone.html"&gt;https://goforgoldman.com/2022/06/30/outlook-clone.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Outlook の UI を再現してみるという記事。&lt;/p&gt;
&lt;h3 id="distribute-visual-studio-project-templates"&gt;Distribute Visual Studio project templates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pieterjandeclippel.medium.com/distribute-visual-studio-project-templates-1788324cc842"&gt;https://pieterjandeclippel.medium.com/distribute-visual-studio-project-templates-1788324cc842&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio (.NET SDK) のプロジェクトテンプレートを配布する方法についての記事。&lt;/p&gt;
&lt;h3 id="creating-a-treeview-control-in.net-maui"&gt;Creating a TreeView control in .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/icebeam7/creating-a-treeview-control-in-net-maui-49mp"&gt;https://dev.to/icebeam7/creating-a-treeview-control-in-net-maui-49mp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI でツリービューコントロールを実装するという記事。&lt;/p&gt;
&lt;h3 id="containerizing-a-running-application-with-aws-app2container-bill-the-vest-guy"&gt;Containerizing a Running Application with AWS App2Container - Bill, the Vest Guy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://billthevestguy.com/2022/07/03/containerizing-a-running-application-with-aws-app2container/"&gt;https://billthevestguy.com/2022/07/03/containerizing-a-running-application-with-aws-app2container/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework で実装されたアプリケーションを AWS App2Container でコンテナー化する方法についての記事。&lt;/p&gt;
&lt;h3 id="the-best.net-decompiler-comparison-guide-free-and-paid"&gt;The Best .NET Decompiler Comparison Guide ✅ (Free and Paid)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/best-dotnet-decompilers/"&gt;https://blog.dotnetsafer.com/best-dotnet-decompilers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のデコンパイラー(有償および無償)を比較紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では ildasm, ILSpy, DnSpy, 9Rays Spices.Net, Redgate .NET Reflector, JustDecompile, dotPeek のそれぞれの特徴を紹介している。&lt;/p&gt;
&lt;h3 id="returning-xml-from-minimal-apis-in.net-6"&gt;Returning XML from minimal APIs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/returning-xml-from-minimal-apis-in-dotnet-6/"&gt;https://andrewlock.net/returning-xml-from-minimal-apis-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal APIs で XML を返すリザルトを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では RecyclableMemoryStream を使用したバッファーのプーリングについても触れている。&lt;/p&gt;
&lt;h3 id="checking-orleans-with-the-pvs-studio-analyzer-dev-community"&gt;Checking Orleans with the PVS-Studio analyzer - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/unicorn_developer/checking-orleans-with-the-pvs-studio-analyzer-3id2"&gt;https://dev.to/unicorn_developer/checking-orleans-with-the-pvs-studio-analyzer-3id2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans を PVS-Studio Analyzer (有償の静的コードアナライザー) で解析して見つかった問題を紹介する記事。&lt;/p&gt;
&lt;p&gt;初期化の順番、重複したコードといった様々な問題が発見されている。&lt;/p&gt;
&lt;h3 id="story-about-graceful-termination-with-modern.net"&gt;Story about graceful termination with modern .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.kbegiedza.eu/dotnet-and-story-about-graceful-termination"&gt;https://blog.kbegiedza.eu/dotnet-and-story-about-graceful-termination&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションでコンテナーのシャットダウン要求のようなグレースフルな終了を実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.Extensions.Hosting の BackgroundService を使用した方法を紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-tech.guitarrapc.com"&gt;Visual Studio 2022 でインラインで型名やパラメーター名を表示する設定 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/07/08/015920"&gt;https://tech.guitarrapc.com/entry/2022/07/08/015920&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で導入されたインラインヒント (ReSharper や Rider の Inlay hints と同様の機能) を有効にする方法を紹介する記事。&lt;/p&gt;
&lt;h3 id="tag-helper-for-display-templates-youve-been-haacked"&gt;Tag Helper for Display Templates | You've Been Haacked&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://haacked.com/archive/2022/07/08/display-template-tag-helper/"&gt;http://haacked.com/archive/2022/07/08/display-template-tag-helper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Html.DisplayFor(...)&lt;/code&gt; の代わりに &lt;code&gt;&amp;lt;display for=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; で呼び出せるタグヘルパーを実装するという記事。&lt;/p&gt;
&lt;h3 id="the-fastest.net-ever-the-latest-new-features-of.net-7-confirm-the-rumors"&gt;The FASTEST .NET Ever? The Latest New Features of .NET 7 Confirm the Rumors&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/dotnet-7-performance-features-benchmark-comparison/"&gt;https://blog.dotnetsafer.com/dotnet-7-performance-features-benchmark-comparison/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で達成されるといわれているパフォーマンス改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;リフレクション、On Stack Replacement、起動時間や AOT など。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="damianedwardsblazoridentity-an-exploration-of-recreating-the-asp.net-core-identity-ui-functionality-in-blazor-components"&gt;DamianEdwards/BlazorIdentity: An exploration of recreating the ASP.NET Core Identity UI functionality in Blazor components.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/DamianEdwards/BlazorIdentity"&gt;https://github.com/DamianEdwards/BlazorIdentity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で ASP.NET Core Identity の UI を再実装しているライブラリー。&lt;/p&gt;
&lt;h3 id="skater.net-obfuscator-index"&gt;Skater .NET Obfuscator - Index&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://skaterpro.net/"&gt;https://skaterpro.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有償の .NET 向け難読化ツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/tannergooding/status/1543456262230200320?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I should clarify no differences in &amp;quot;normal&amp;quot; single threaded code.&lt;br&gt;&lt;br&gt;You can pretty easily create observable differences in safe single threaded code if you know what you&amp;#39;re doing.&lt;br&gt;&lt;br&gt;It&amp;#39;s just expected most methods and ideas won&amp;#39;t do something like that so it wouldn&amp;#39;t be an issue&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1543456262230200320?ref_src=twsrc%5Etfw"&gt;July 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt; 修飾子をつけても値渡しと違いはないといったツイートから、実際には大きい構造体以外では複雑なコード生成によるパフォーマンスの悪化や、防衛的コピーやマルチスレッドでの問題の発生といったことがあるよというツッコミ。&lt;/p&gt;
&lt;!-- https://twitter.com/tannergooding/status/1545096402732167168?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This means that you need to consider `constexpr` in the face of &amp;quot;ref assembly&amp;quot;.&lt;br&gt;&lt;br&gt;You need to consider `constexpr` in the face of runtime differences or behaviors (say Roslyn runs on Mono and the user has set an environment variable opting into &amp;quot;fast math&amp;quot;, changing the result)&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1545096402732167168?ref_src=twsrc%5Etfw"&gt;July 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# では &lt;code&gt;Math.Floor(100/7)&lt;/code&gt; をコンパイル時定数化できないんですか?という問いに対して、JIT はできるかもしれないが C# (Roslyn) はその関数が決定論的に pure な関数であることを伝えることができないので無理という話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="arm64-server-throughput-address-many-core-scaling-challenges-issue-70528-dotnetruntime"&gt;[Arm64 Server Throughput] Address many-core scaling challenges · Issue #70528 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/70528#issuecomment-1171487696"&gt;https://github.com/dotnet/runtime/issues/70528#issuecomment-1171487696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 のメニーコアサーバーでのスケーリングに関する Issue。&lt;/p&gt;
&lt;p&gt;.NET 7 では .NET 6 に比べて最大5倍のパフォーマンスを出せるようになったというコメント。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/01/updates</id>
		<title>2022-07-01: Uno Platform 4.4, Leveraging trimming to make the Microsoft Store faster and reduce its binary size, StackExchange.Redis 2.6.48</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/01/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-01T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="uno-platform-4.4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more"&gt;Uno Platform 4.4 – Wasm Threading+Exception Handling, Rich Animations, GamePad APIs and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/"&gt;https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは Skottie 統合による Lottie アニメーションの再生、TextBlock の SkiaSharp での書き換え、テンプレートの更新、ゲームパッド API、パフォーマンス改善などが含まれている。&lt;/p&gt;
&lt;p&gt;また WebAssembly に関する強化も .NET 7 に先駆けて幾つか導入され WebAssembly 例外や WebAssembly スレッドのサポートが追加となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/06/29/uno-platform-4-4.aspx"&gt;Uno Platform Does WebAssembly Threading Months Ahead of .NET 7 -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size-ifdef-windows"&gt;Leveraging trimming to make the Microsoft Store faster and reduce its binary size - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/"&gt;https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションをトリミングすることでパフォーマンス改善とバイナリサイズの削減を行ったことについての記事。&lt;/p&gt;
&lt;p&gt;最近更新された Microsoft Store アプリケーションは C# で書かれた UWP アプリケーションであり、.NET Native (Native AOT の前身的なもの) で AOT コンパイルされている。.NET Native は .NET SDK 同様 IL トリミングの機能があり、記事では IL トリミングをどのようにして有効にするか、有効にした場合にどのような落とし穴や壊れやすい部分があるのかといったことに触れている。&lt;/p&gt;
&lt;p&gt;ケーススタディーとして動的なプロパティーの取得や XAML のページレイアウトセレクターの型名の取得などといったコードでリフレクションをいかにして減らしたかを説明している。また、オープンソースの Windows Community Toolkit でのトリミングの問題解消に貢献したとのこと。&lt;/p&gt;
&lt;p&gt;トリミングによって Microsoft Store のアプリケーションバイナリサイズが 25% 程度削減できたとしている。&lt;/p&gt;
&lt;p&gt;まとめとしてトリミングの有効化は落とし穴や必要な作業も増えてしまうがとても価値があり、新しいコードを書くときは常にパフォーマンスとトリミングを念頭に置くことが重要であるとしている。これは後からトリミングを有効にした際のエラーを減らして時間を節約できることに繋がる他、(リフレクションなどによる)エラーの発生しにくいコードを書くことを強制されるためとしている。&lt;/p&gt;
&lt;h3 id="stackexchange.redis-2.6.48-is-now-deployed"&gt;StackExchange.Redis 2.6.48 is now deployed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/marcgravell/status/1541782061278789632"&gt;https://twitter.com/marcgravell/status/1541782061278789632&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StackExchange.Redis 2.6.48 がリリースされた。&lt;/p&gt;
&lt;p&gt;直前にリリースされたバージョン 2.6.45 でのバッチ/トランザクションハンドリングに問題があり、正しくトランザクションに入らない可能性があるため、2.6.45 を使用している場合には更新の必要がある。(2.6.45 は NuGet から取り下げ済)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/StackExchange.Redis/pull/2177"&gt;URGENT Fix error in batch/transaction handling by mgravell · Pull Request #2177 · StackExchange/StackExchange.Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/marcgravell/status/1541782061278789632?s=20&amp;t=iAAZQNQJkSxrjSRojc2y7g --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;StackExchange.Redis 2.6.48 is now deployed; this is considered a critical update if you&amp;#39;re using the recent 2.6.45 (if you&amp;#39;re not using that: no urgency) &lt;a href="https://t.co/ri2dIYXMdF"&gt;https://t.co/ri2dIYXMdF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marc Gravell (&amp;#64;marcgravell) &lt;a href="https://twitter.com/marcgravell/status/1541782061278789632?ref_src=twsrc%5Etfw"&gt;June 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cosmos-db.net-qiita"&gt;Cosmos DBに対する .NET での再試行ロジック - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4"&gt;https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cosmos DB の .NET クライアントでの再試行ロジックについて解説している記事。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clone-skipping-strings"&gt;High performance .NET: Building a Redis Clone – skipping strings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3"&gt;https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis クローンを作るシリーズの記事。&lt;/p&gt;
&lt;p&gt;文字列をスキップしてバイト配列を保持するのに再利用可能なバッファーを作ることで文字列の確保を回避することについて。&lt;/p&gt;
&lt;h3 id="native-aot-and-ahead-of-time-compilation-in.net"&gt;Native AOT and Ahead-of-Time Compilation in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/"&gt;https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Native AOT (事前コンパイル) についての記事。&lt;/p&gt;
&lt;p&gt;記事では仕組みや AOT でのメリットとデメリット、.NET 7 での Native AOT を利用してコンソールアプリケーションや AWS Lambda での実行とその効果といったものを紹介している。&lt;/p&gt;
&lt;h3 id="sneak-peek-and-edit-your-code-while-you-search-visual-studio-blog"&gt;Sneak Peek and Edit Your Code While You Search - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/"&gt;https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビューで実装されている All-In-One 検索の 17.3 Preview 2 の新機能の紹介記事。&lt;/p&gt;
&lt;p&gt;17.3 Preview 2 では検索結果の一覧にコードプレビューから編集が可能となり、検索 UI から離れることなく完全なコード編集体験が提供される。&lt;/p&gt;
&lt;h3 id="creating-a-certificate-checker-with.net"&gt;Creating a Certificate Checker With .Net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da"&gt;https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core と HttpClient を使って証明書のチェックツールを作るという記事。&lt;/p&gt;
&lt;p&gt;記事では URL を POST すると、有効期限などを返却するような API を実装している。&lt;/p&gt;
&lt;h3 id="net-maui-qiita"&gt;【抄訳】.NET MAUI の使用を開始するための新しいリソース - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32"&gt;https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;New Resources to Get Started with .NET MAUI&lt;/a&gt; の翻訳記事。&lt;/p&gt;
&lt;h3 id="the-difference-between-null-check-with-is-instead-of-in-c"&gt;The difference between null check with ‘is’ instead of ‘==’ in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e"&gt;https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; チェックにおいて &lt;code&gt;is&lt;/code&gt; を使用した場合と &lt;code&gt;==&lt;/code&gt; を使用した場合での違いについて解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; では &lt;code&gt;==&lt;/code&gt; オペレーターオーバーロードを考慮しない比較であることなど。&lt;/p&gt;
&lt;h3 id="using-refit-to-consume-apis-in-c-code-maze"&gt;Using Refit to Consume APIs in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/using-refit-to-consume-apis-in-csharp/"&gt;https://code-maze.com/using-refit-to-consume-apis-in-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Refit を使用して REST クライアントを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-a.net-maui-windows-app-as-administrator-elevated"&gt;Running a .NET MAUI Windows App as Administrator (Elevated)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/"&gt;https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションを管理者権限で起動する方法についての記事。&lt;/p&gt;
&lt;p&gt;package.appxmanifest と app.manifest で設定を指定することで可能となる。&lt;/p&gt;
&lt;h3 id="observing-all-http-requests-in-a.net-application-gerald-barre"&gt;Observing all http requests in a .NET application - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm"&gt;https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient を使用したリクエストを DiagnosticSource と EventSource で監視する方法についての記事。&lt;/p&gt;
&lt;h3 id="multi-image-docker-images-using-copy-with-images-directly-from-registries"&gt;Multi-Image Docker Images: Using COPY with Images directly from registries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed"&gt;https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker イメージをビルド時に、複数の Docker イメージから COPY でファイルをコピーする方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET のイメージには特定のバージョンのランタイムのみが含まれるため、以前のバージョンを必要とする場合に複合的なイメージを自分で用意する必要がある。&lt;/p&gt;
&lt;h3 id="cppsharp-native-binding"&gt;CppSharp で Native Binding を楽に行う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/70d9dc73f8e663"&gt;https://zenn.dev/tan_y/articles/70d9dc73f8e663&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CppSharp を使用してネイティブライブラリーのヘッダーファイルからバインディングを生成し、C# から呼び出すことを解説する記事。&lt;/p&gt;
&lt;p&gt;記事では CppSharp の使用方法や C++ との連携、その他注意すべき点にも触れている。&lt;/p&gt;
&lt;h3 id="idbcontextfactory-qiita"&gt;IDbContextFactory を使って並列でクエリを実行する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/bc7407462f399da001ec"&gt;https://qiita.com/karuakun/items/bc7407462f399da001ec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で並列にクエリーを実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;DbContext は並列に操作を行うことができないため、 IDbContextFactory を使用して複数の DbContext を作ることで呼び出せるようにする。&lt;/p&gt;
&lt;h3 id="getting-started-with-devops-and.net-maui"&gt;Getting Started with DevOps and .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の DevOps パイプラインを GitHub Actions と Azure DevOps を使用して構築することを説明している記事。&lt;/p&gt;
&lt;p&gt;macOS でのビルドと Windows でのビルドについてそれぞれ触れている。&lt;/p&gt;
&lt;h3 id="understanding-your-middleware-pipeline-in.net-6-with-the-middleware-analysis-package"&gt;Understanding your middleware pipeline in .NET 6 with the Middleware Analysis package&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/"&gt;https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ミドルウェアの診断パッケージを使用してミドルウェアのパイプラインを理解することを説明している記事。&lt;/p&gt;
&lt;p&gt;Microsoft.AspNetCore.MiddlewareAnalysis と DiagnosticsAdapter を使用することでミドルウェアの呼び出しイベントを購読でき、記事ではそれらを使って呼び出しをログに出力するといったことを行っている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jcouv/status/1541818706249916419?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We merged a preview C# 11 feature into VS 17.3: `ref` fields.&lt;br&gt;&lt;br&gt;This allows adding `ref` fields inside `ref struct` types (to safely simplify some perf scenarios) and overriding lifetime defaults with the `scoped` modifier for variables.&lt;br&gt;&lt;br&gt;Spec: &lt;a href="https://t.co/RKtYbm8e3G"&gt;https://t.co/RKtYbm8e3G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julien Couvreur (&amp;#64;jcouv) &lt;a href="https://twitter.com/jcouv/status/1541818706249916419?ref_src=twsrc%5Etfw"&gt;June 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# 11 のプレビュー機能である &lt;code&gt;ref&lt;/code&gt; fields が Visual Studio 2022 17.3 (プレビュー) にマージされたという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ufcpp.net/blog/2022/2/ref-field/"&gt;【C# 11候補】 ref field | ++C++; // 未確認飛行 C ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/jsnover/status/1541447375369097217?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After 22+ awesome years at Microsoft (18+ of which were awesome in a good way 😂 ), it is time for me to try something new.&lt;br&gt;&lt;br&gt;I feel blessed to have had the opportunity to work with such incredible people and to work on things that matter.&lt;br&gt;&lt;br&gt;My last day will be Friday, July 1st. &lt;a href="https://t.co/l2inatE2BM"&gt;pic.twitter.com/l2inatE2BM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeffrey Snover (&amp;#64;jsnover) &lt;a href="https://twitter.com/jsnover/status/1541447375369097217?ref_src=twsrc%5Etfw"&gt;June 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PowerShell の生みの親であるところの Jeffrey Snover 氏が Microsoft を去るという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/24/updates</id>
		<title>2022-06-24: Incremental ASP.NET Migration Tooling Preview 2, gRPC Remove C# implementation, GitHub Copilot</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="incremental-asp.net-migration-tooling-preview-2.net-blog"&gt;Incremental ASP.NET Migration Tooling Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;段階的 ASP.NET 移行ツール Preview 2 についての記事。&lt;/p&gt;
&lt;p&gt;ASP.NET 移行ツール Preview 2 のリリースではコードの改善や ASP.NET/ASP.NET Core アプリケーション間の認証共有といったものが含まれる。記事では ASP.NET との認証の共有についてと実際の利用手順について触れている。&lt;/p&gt;
&lt;h3 id="release-release-v1.47.0-grpcgrpc"&gt;Release Release v1.47.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.47.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.47.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 がリリースされた(.NET 実装は含まれない)。&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 では C# 実装が削除され C-core のパッケージは 2.46.x としてメンテナンスになり、現行の実装は grpc-dotnet へと移行する。なおツールに関しては引き続きリポジトリーに残る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grpc/grpc/pull/29225"&gt;Remove C# implementation (individual packages will continue to be maintained through v2.46.x patches or moved to grpc-dotnet) by jtattermusch · Pull Request #29225 · grpc/grpc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="github-copilot-is-generally-available-to-all-developers-the-github-blog"&gt;GitHub Copilot is generally available to all developers | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/"&gt;https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI ベースのコーディング支援ツールである GitHub Copilot が個人向けに一般公開された。&lt;/p&gt;
&lt;p&gt;月額 $10 または年額 $100 で利用可能で60日間のトライアルが可能。学生や人気のあるオープンソースプロジェクトのメンテナーは無料で利用できる。&lt;/p&gt;
&lt;p&gt;IDE は Visual Studio Code や Visual Studio, Rider などで利用できる。&lt;/p&gt;
&lt;h3 id="listen-up-visual-studio-has-a-new-feature-you-need-to-hear-about-visual-studio-blog"&gt;Listen Up, Visual Studio has a new feature you need to hear about! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で導入されたオーディオキュー機能についての記事。&lt;/p&gt;
&lt;p&gt;オーディオキューはキャレットがエラーやブレークポイントのような特定行に移動したときに音を鳴らす機能。Visual Studio Code ですでに導入されている。&lt;/p&gt;
&lt;h3 id="improving.net-host-error-messages-and-supportability.net-blog"&gt;Improving .NET host error messages and supportability - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のホストやフレームワークがインストールされていない場合のエラーメッセージを .NET 7 Preview 6 で改善したことについての記事。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="dotnet-corenugetdocker-qiita"&gt;Dotnet CoreプロジェクトでプライベートNuGetフィードを使ってセキュアなDockerイメージを作る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/superriver/items/3a5e14bc1880b00d7415"&gt;https://qiita.com/superriver/items/3a5e14bc1880b00d7415&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトの Docker イメージをビルド時にプライベートの NuGet フィードを利用する必要がある場合の対応についての記事。&lt;/p&gt;
&lt;h3 id="a-gentle-introduction-to-c-11-list-patterns"&gt;A Gentle Introduction to C# 11 List Patterns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c"&gt;https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 に入る予定のリストパターン記法についての記事。&lt;/p&gt;
&lt;h3 id="centralized-appsettings-for.net-apps-using-spring-cloud-config"&gt;Centralized appsettings for .NET apps using Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535"&gt;https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Config サーバーで .NET のアプリケーション構成 (appsettings) を保持し、利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="postgresql-14-breaks-the.net-and-java-drivers-for-postgresql"&gt;PostgreSQL 14 Breaks the .NET and Java Drivers for PostgreSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/"&gt;https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 14 では SQL 関数を作成する際に &lt;code&gt;BEGIN ATOMIC ... END&lt;/code&gt; を使用する場合に .NET のドライバーと互換性がない問題についての記事。&lt;/p&gt;
&lt;p&gt;Npgsql では Raw SQL モードが追加されているため、それを利用することで回避できる。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clonenaively-ayende-rahien"&gt;High performance .NET: Building a Redis Clone–naively - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively"&gt;https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で Redis クローンを実装してハイパフォーマンスなコードを書いていくシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197537-A/high-performance-net-building-a-redis-clone-the-wrong-optimization-path"&gt;High performance .NET: Building a Redis Clone– the wrong optimization path - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197505-C/high-performance-net-building-a-redis-clone-separation-of-computation-i-o"&gt;High performance .NET: Building a Redis Clone–separation of computation &amp;amp; I/O - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nuget-support-in-visual-studio-for-mac-17.0-matt-ward"&gt;NuGet Support in Visual Studio for Mac 17.0 - Matt Ward&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/"&gt;https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 での NuGet サポートの変更点についての記事。&lt;/p&gt;
&lt;p&gt;NuGet のバージョン変更や、設定ファイルの場所の変更、パスワードのキーチェーンへの格納など。&lt;/p&gt;
&lt;h3 id="the-perils-of-combining-multicast-delegates-with-tasks-in-c-endjin"&gt;The Perils of Combining Multicast Delegates with Tasks in C# | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html"&gt;https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マルチキャストデリゲートと Task の組み合わせについての記事。
マルチキャストデリゲートは最後のデリゲートの値を返すため、Task と組み合わせて使うと予期せぬ結果となる。&lt;/p&gt;
&lt;h3 id="net6-asp.net-core1asp.net-webapivue3-vite-qiita"&gt;.NET6 ASP.NET Coreで１つのプロジェクトで、ASP.NET WebAPI+Vue3 Viteの環境を作ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7"&gt;https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core プロジェクトで Vue と Vite を組み合わせた構成を構築する手順についての記事。&lt;/p&gt;
&lt;h3 id="multi-tenant-apps-with-ef-core-and-asp.net-core-the.net-tools-blog"&gt;Multi-tenant Apps With EF Core and ASP.NET Core | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/"&gt;https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と ASP.NET Core を使用してマルチテナントアプリケーションを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では一つのデータベースを共有する方法とテナントごとにデータベースを持つ方法での接続について触れている。&lt;/p&gt;
&lt;h3 id="feature-flags-in.net-from-simple-to-more-advanced"&gt;Feature Flags in .NET, from simple to more advanced&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og"&gt;https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションにフィーチャーフラグを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.FeatureManagement.AspNetCore を使用してカスタマイズする方法などに触れている。&lt;/p&gt;
&lt;h3 id="consuming-anonymous-types-with-diagnosticlistener-in.net-6"&gt;Consuming anonymous types with DiagnosticListener in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/"&gt;https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で DiagnosticListener を利用時に匿名型のデータが渡ってきた場合の処理についての記事。&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DiagnosticAdapter が利用できるが、更新されないステータスになっていることなどに触れている。&lt;/p&gt;
&lt;h3 id="resharper-rider-2022.2-eap6-has-just-been-released"&gt;ReSharper &amp;amp; Rider 2022.2 EAP6 has just been released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;
&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2022.2 EAP6 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper では IL Viewer における高レベル/低レベル C# でコンパイル表示に対応し、Rider では Angular 14 のサポートとデータベースに関する機能が追加された。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1539936408403644417?s=12&amp;t=gFjBq0dbcfHQJcpAfvGndA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.2 EAP6 has just been released! This update contains an option to view decompiled high-level / low-level C# code in the IL Viewer. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/NoWHM5dBvi"&gt;https://t.co/NoWHM5dBvi&lt;/a&gt; &lt;a href="https://t.co/xJhY7cucLr"&gt;pic.twitter.com/xJhY7cucLr&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1539936408403644417?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1539940713416298497?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.2 EAP6 has just landed with support for Angular standalone components and 2 new models for resolving database objects. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/HMvf9osthz"&gt;https://t.co/HMvf9osthz&lt;/a&gt; &lt;a href="https://t.co/1tKQZZ14k0"&gt;pic.twitter.com/1tKQZZ14k0&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1539940713416298497?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="ralfbiedertinteroptopus-the-polyglot-bindings-generator-for-your-library-c-c-python"&gt;ralfbiedert/interoptopus: The polyglot bindings generator for your library (C#, C, Python, …) 🐙&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ralfbiedert/interoptopus"&gt;https://github.com/ralfbiedert/interoptopus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust の多言語向けバインディングを実装/生成するライブラリー。C# への対応がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/guilhermerochas/interop-your-net-application-with-rust-nk2"&gt;Interop your .NET application with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1539715292368015360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One of the most exciting parts of this new release is support for managed code debugging. This includes support for managed stack frames and local variables! &lt;a href="https://t.co/3y6128jSQ0"&gt;https://t.co/3y6128jSQ0&lt;/a&gt; &lt;a href="https://t.co/w0wQxkQ2hl"&gt;pic.twitter.com/w0wQxkQ2hl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1539715292368015360?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview でマネージコードのデバッグでスタックフレームとローカル変数を確認できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonAWS/status/1539639350530641925 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The latest &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; Toolkit for Visual Studio 2022 has an updated Publish to AWS feature with a UX refresh. Get the AWS Toolkit for VS2022 at the link below, or update your existing version in VS using Extensions &amp;gt; Manage Extensions &amp;gt; Updates.&lt;a href="https://t.co/I4MJJphkDL"&gt;https://t.co/I4MJJphkDL&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1539639350530641925?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;AWS Toolkit for Visual Studio 2022 の AWS への発行 UX がリフレッシュされたものがリリースされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1539471033698177024 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Playing around with using static interface methods and the new IParsable&amp;lt;T&amp;gt; to make generic callsites for HTTP APIs.  Before .NET 7 there was no way to write generic code that did {Type}.TryParse/{Type}.Parse. The type system didn&amp;#39;t have a way to describe these contracts. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/hhlBOYQmGf"&gt;pic.twitter.com/hhlBOYQmGf&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1539471033698177024?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 以前は TryParse/Parse をジェネリックに書くことができなかったけど、static abstract members in interface と &lt;code&gt;IParsableT&lt;/code&gt; によってできるようなったという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-il-emit-support-for-methodinfo.invoke-and-friends-by-steveharter-pull-request-67917-dotnetruntime"&gt;Add IL Emit support for MethodInfo.Invoke() and friends by steveharter · Pull Request #67917 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67917"&gt;https://github.com/dotnet/runtime/pull/67917&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MethodInfo.Invoke()&lt;/code&gt; のような動的メソッド呼び出しのコードで IL を出力するようにしてパフォーマンスを向上するという PR&lt;/p&gt;
&lt;!-- https://twitter.com/kzu/status/1538935462831718401?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL: using MethodInto.Invoke() is fine again. Add IL Emit support for MethodInfo.Invoke() and friends by steveharter  &lt;a href="https://t.co/BCEV5Eo2fG"&gt;https://t.co/BCEV5Eo2fG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Cazzulino 🇦🇷 (&amp;#64;kzu) &lt;a href="https://twitter.com/kzu/status/1538935462831718401?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="tier0r2r-instrumented-tier0-optimized-tier1-by-egorbo-pull-request-70941-dotnetruntime"&gt;tier0/R2R - instrumented tier0 - optimized tier1 by EgorBo · Pull Request #70941 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/70941"&gt;https://github.com/dotnet/runtime/pull/70941&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ready2Run → 階層化 JIT (Tier 0) → 階層化JIT (Tier 1; PGO による最適化) という流れで起動時からのパフォーマンスを上げていく PR。&lt;/p&gt;
&lt;p&gt;R2R を使用しないフル Dynamic PGO は最終的には最速のパフォーマンスが出るが初回リクエスト応答の時間がとても遅くなってしまうため、ハイブリッドなアプローチで R2R の初回応答性とフル Dynamic PGO のパフォーマンスの両方を得られるようにする。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1538851479942987777?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;A proposal to add a new tier in JIT - &amp;quot;instrumented tier0 after AOT&amp;quot; &lt;a href="https://t.co/WvS3IkI2Ga"&gt;https://t.co/WvS3IkI2Ga&lt;/a&gt; - should allow us to still do PGO for AOT&amp;#39;d (R2R) code. &lt;a href="https://t.co/ttpIxNxz3R"&gt;pic.twitter.com/ttpIxNxz3R&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1538851479942987777?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/18/updates</id>
		<title>2022-06-18: .NET 7 Preview 5, Arm64 Visual Studio, .NET 6.0.6 and .NET Core 3.1.26</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/18/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-18T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-5.net-blog"&gt;Announcing .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Preview 5 での改善点として下記のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オブザーバビリティ&lt;/li&gt;
&lt;li&gt;System.Text.Json
&lt;ul&gt;
&lt;li&gt;ポリモーフィズム&lt;/li&gt;
&lt;li&gt;Utf8JsonReader.CopyString&lt;/li&gt;
&lt;li&gt;ソースコード生成の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System.IO
&lt;ul&gt;
&lt;li&gt;ReadExactly, ReadAtLeast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegexGenerator のための新しい Roslyn アナライザーと CodeFix&lt;/li&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;System.Reflection を利用したメソッド呼び出しのパフォーマンス向上&lt;/li&gt;
&lt;li&gt;ML.NET テキスト分類 API&lt;/li&gt;
&lt;li&gt;CodeGen (JIT)&lt;/li&gt;
&lt;li&gt;トリミングの有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="arm64-visual-studio-visual-studio-blog"&gt;Arm64 Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で ARM64 環境での Visual Studio 自身のネイティブ実行サポートが追加された。&lt;/p&gt;
&lt;p&gt;現時点では重要なワークロードして C++ 開発 (MSBuild)、.NET Framework と .NET でのデスクトップ (WinForms, WPF) 開発、.NET による Web 開発がサポートされている。拡張機能の移行に関しては別途ブログで解説されるとのこと。&lt;/p&gt;
&lt;p&gt;インストーラーは x64 と共通となっているためプラットフォームに合わせてインストールされる。またインストールには既存のバージョンのアンインストールが必要となっている点に注意が必要。&lt;/p&gt;
&lt;h3 id="announcing-entity-framework-7-preview-5.net-blog"&gt;Announcing Entity Framework 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 についての記事。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 では SQL Server での AT TIME ZONE コマンドやコマンドと接続のインターセプト、&lt;code&gt;DeleteBehavior&lt;/code&gt; 属性の追加などが行われているが、記事では Table-per-concrete-type (TPC) についてフォーカスして紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-5.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JWT 認証の改善と自動認証設定
&lt;ul&gt;
&lt;li&gt;認証構成の簡素化&lt;/li&gt;
&lt;li&gt;エンドポイントの許可ポリシー&lt;/li&gt;
&lt;li&gt;開発時の JWT の管理を行う &lt;code&gt;dotnet user-jwts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の引数リストのパラメーターバインディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-7-preview-5-generic-math.net-blog"&gt;.NET 7 Preview 5 - Generic Math - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で提供される static abstract member in interface の活用である Generic Math についての記事。&lt;/p&gt;
&lt;p&gt;記事では Generic Math によってどのようなことが可能となるか、.NET 6 でのプレビューからの変更点、インターフェースをはじめとした API について紹介している。&lt;/p&gt;
&lt;h3 id="net-june-2022-updates.net-6.0.6-and.net-core-3.1.26.net-blog"&gt;.NET June 2022 Updates – .NET 6.0.6 and .NET Core 3.1.26 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/june-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/june-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.6 と .NET Core 3.1.26 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合とセキュリティーに関する修正が含まれている。
セキュリティーに関しては NuGet の認証情報が漏洩してしまうことがある問題が修正されている。&lt;/p&gt;
&lt;p&gt;記事では .NET 5 のサポートが終了していること、.NET Core 3.1 のサポートも2022年12月13日に終了することにも触れている。&lt;/p&gt;
&lt;h3 id="net-framework-june-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework June 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年6月の累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースには新しいセキュリティー修正は含まれておらず、GC やその他の問題に関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.3-preview-2-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.3 Preview 2 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.3 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正や改善と MAUI のサポートの改善が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the-ml.net-text-classification-api-preview.net-blog"&gt;Introducing the ML.NET Text Classification API (preview) - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/"&gt;https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET にプレビューとして追加されたテキスト分類 API についての紹介記事。&lt;/p&gt;
&lt;h3 id="vnext-license-changes-discussion-2151-sixlaborsimagesharp"&gt;VNext License Changes · Discussion #2151 · SixLabors/ImageSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SixLabors/ImageSharp/discussions/2151"&gt;https://github.com/SixLabors/ImageSharp/discussions/2151&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp のライセンスを現在の Apache License から商用利用向けのライセンス体系に変更を検討しているという Discussion。&lt;/p&gt;
&lt;h3 id="oneservice-journey-to.net-6.net-blog"&gt;OneService Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OneService と呼ばれる Microsoft Start、Microsoft Edge、Windows などでのコンテンツ体験を提供するサービスを .NET Framework から .NET 6 に移行した事例紹介記事。&lt;/p&gt;
&lt;p&gt;事例のハイライトには次のものをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インフラストラクチャーコストの 29% 削減&lt;/li&gt;
&lt;li&gt;移行したサービスの CPU 使用率の平均 30% 向上&lt;/li&gt;
&lt;li&gt;主な API の P95 レイテンシーが 8～27% 改善&lt;/li&gt;
&lt;li&gt;技術的負債の解消により、毎年の継続的な .NET のアップグレード&lt;/li&gt;
&lt;li&gt;生産的なチーム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では移行の流れや、その間に行われていた手法について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OneService について&lt;/li&gt;
&lt;li&gt;移行ステージ&lt;/li&gt;
&lt;li&gt;最初の移行の試み&lt;/li&gt;
&lt;li&gt;.NET Framework 上での ASP.NET Core 2.1 への移行&lt;/li&gt;
&lt;li&gt;.NET 6 への移行&lt;/li&gt;
&lt;li&gt;パフォーマンスの改善&lt;/li&gt;
&lt;li&gt;コスト削減&lt;/li&gt;
&lt;li&gt;その他の恩恵&lt;/li&gt;
&lt;li&gt;運用環境における A/B テスト&lt;/li&gt;
&lt;li&gt;運用環境のミラーリング
&lt;ul&gt;
&lt;li&gt;運用環境のトラフィック1%をミラーリングして処理するカナリアクラスター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運用環境へのデプロイ&lt;/li&gt;
&lt;li&gt;ASP.NET から ASP.NET Core への移行
&lt;ul&gt;
&lt;li&gt;レスポンスの gzip/Brotli 圧縮が外れていて Azure Front Door/Akamai のコストが増えるまで気づかなかった話&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API 課題
&lt;ul&gt;
&lt;li&gt;OData&lt;/li&gt;
&lt;li&gt;ServicePointManager の非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="june-9-2022.net-data-biweekly-updates-2022"&gt;June 9, 2022 - .NET Data Biweekly Updates (2022)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のデータアクセス関連のアップデート 2022年6月9日号。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 でのアップデートを中心に取り上げている。&lt;/p&gt;
&lt;h3 id="maybe-its-time-to-rethink-our-project-structure-with.net-6"&gt;Maybe it's time to rethink our project structure with .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core の Minimal API に合わせてプロジェクト構成を再考してはどうかという記事。&lt;/p&gt;
&lt;h3 id="introducing-the-new-website-nuke"&gt;Introducing the New Website | NUKE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuke.build/blog/2022/06/15/new-website/"&gt;https://nuke.build/blog/2022/06/15/new-website/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUKE の新しい Web サイトが公開された。&lt;/p&gt;
&lt;h3 id="is-codelens-enabled"&gt;Is CodeLens Enabled?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/is-codelens-enabled-7p7"&gt;https://dev.to/calvinallen/is-codelens-enabled-7p7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の拡張から CodeLens が有効になっているかどうかを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-does-packagereference-work"&gt;How does PackageReference work?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dfederm.com/how-does-packagereference-work/"&gt;https://dfederm.com/how-does-packagereference-work/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PackageReference が内部でどのように処理され、情報が保持されているのかを解説する記事。&lt;/p&gt;
&lt;h3 id="troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox"&gt;Troubleshooting CPU and exceptions issues with Datadog toolbox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da"&gt;https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog .NET Tracer を使用して Datadog APM 上で CPU や例外に関する問題のトラブルシュートについての記事。&lt;/p&gt;
&lt;h3 id="new-profiler-feature-in-visual-studio"&gt;New Profiler feature in Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 で導入された新しいプロファイリングツールの紹介記事。&lt;/p&gt;
&lt;p&gt;新しいプロファイリングツールではファイル I/O に関するパフォーマンス情報を取得できるようになっている。&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor-server-without-cookie"&gt;ASP.NET Core Blazor Server でオレオレ認証を追加したい without Cookie&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3"&gt;https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP｡NET Core Blazor Server で Cookie を使用せず認証を行い、セッション中は維持する方法についての記事。&lt;/p&gt;
&lt;h3 id="dependency-injection-for-native-aot"&gt;Dependency Injection for Native AOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395"&gt;https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT 環境下で DI を使用する場合に NativeAOT のリフレクションフリーモードでも正しく動作させるにはどうすればよいのかという記事。&lt;/p&gt;
&lt;h3 id="c-11-static-abstract-members-ndepend"&gt;C# 11 static abstract members - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/c-11-static-abstract-members"&gt;https://blog.ndepend.com/c-11-static-abstract-members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) の static abstract members in interfaces についての解説記事。&lt;/p&gt;
&lt;h3 id="new-resources-to-get-started-with.net-maui.net-blog"&gt;New Resources to Get Started with .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI を始めるのに役立つリソースの紹介記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-make-it-your-home-visual-studio-blog"&gt;What’s New in Visual Studio: Make it Your Home - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-vs/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1 以降で導入された、バージョンアップでの新機能などを紹介する What's New ページについて。&lt;/p&gt;
&lt;h3 id="preview.net-7c-11-generic-math"&gt;[Preview版] .NET 7(C# 11) で導入される Generic math&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/a355451cc7a4a3"&gt;https://zenn.dev/naminodarie/articles/a355451cc7a4a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入される Generic Math の簡単な例の紹介記事。&lt;/p&gt;
&lt;h3 id="a-brief-introduction-to-diagnosticsource"&gt;A brief introduction to DiagnosticSource&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-brief-introduction-to-diagnostic-source/"&gt;https://andrewlock.net/a-brief-introduction-to-diagnostic-source/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DiagnosticSource についての簡単な解説記事。&lt;/p&gt;
&lt;p&gt;他のロギングの仕組みとの違いやリッスンしてイベントを購読する方法などについて触れている。&lt;/p&gt;
&lt;h3 id="share-debug-configuration-between.net-ides-with-launch-profiles"&gt;Share debug configuration between .NET IDEs with launch profiles&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p"&gt;https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio や Rider といった IDE での起動プロファイルを使用したデバッグ起動時の設定についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnet-symbol-symbols-download-utility"&gt;dotnet-symbol: Symbols download utility&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/dotnet-symbol"&gt;https://www.nuget.org/packages/dotnet-symbol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;シンボルファイルをダウンロードするツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/symstore/tree/main/src/dotnet-symbol"&gt;Symbol downloader dotnet cli extension - symstore/src/dotnet-symbol at main · dotnet/symstore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/drasticactionsa/status/1537108758362480640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;DA&amp;#39;s useful tool of the day: dotnet-symbol&lt;a href="https://t.co/9pcqnTxP8O"&gt;https://t.co/9pcqnTxP8O&lt;/a&gt;&lt;br&gt;&lt;br&gt;Saved me tons of time getting symbols from the MS symbol servers for sideloading.&lt;/p&gt;&amp;mdash; Drastic Actions (&amp;#64;drasticactionSA) &lt;a href="https://twitter.com/drasticactionSA/status/1537108758362480640?ref_src=twsrc%5Etfw"&gt;June 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="pharringsettingsstoreexplorer-a-visual-studio-extension-with-a-tool-window-for-viewing-and-editing-the-contents-of-visual-studios-settings-store"&gt;pharring/SettingsStoreExplorer: A Visual Studio Extension with a tool window for viewing and editing the contents of Visual Studio's Settings Store.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pharring/SettingsStoreExplorer"&gt;https://github.com/pharring/SettingsStoreExplorer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の設定ストアを表示、編集する拡張。&lt;/p&gt;
&lt;h3 id="github-avanadebeef-business-entity-execution-framework"&gt;GitHub - Avanade/Beef: Business Entity Execution Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Avanade/Beef"&gt;https://github.com/Avanade/Beef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core をベースとしたコード生成による Web API 実装のためのフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/karamem0/articles/2022_06_15_200000"&gt;Avanade Beef のレイヤー構造を理解する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deepdive"&gt;DeepDive&lt;/h2&gt;
&lt;h3 id="api-proposal-unreachableexception-issue-35324-dotnetruntime"&gt;API Proposal: UnreachableException · Issue #35324 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/35324"&gt;https://github.com/dotnet/runtime/issues/35324&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コード上到達しないことを表す UnreachableException の導入。&lt;/p&gt;
&lt;p&gt;コードカバレッジツールでの到達不能コードの認識や JIT でのコールドパスとして扱うといったことが可能になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.diagnostics.unreachableexception?view=net-7.0"&gt;UnreachableException クラス (System.Diagnostics) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/tannergooding/status/1536735202327703554?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET 7, `throw new System.Diagnostics.UnreachableException()` ;)&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1536735202327703554?ref_src=twsrc%5Etfw"&gt;June 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>