<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2022-07-01T08:32:51Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2022/07/01/updates</id>
		<title>2022-07-01: Uno Platform 4.4, Leveraging trimming to make the Microsoft Store faster and reduce its binary size</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/01/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-01T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="uno-platform-4.4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more"&gt;Uno Platform 4.4 – Wasm Threading+Exception Handling, Rich Animations, GamePad APIs and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/"&gt;https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは Skottie 統合による Lottie アニメーションの再生、TextBlock の SkiaSharp での書き換え、テンプレートの更新、ゲームパッド API、パフォーマンス改善などが含まれている。&lt;/p&gt;
&lt;p&gt;また WebAssembly に関する強化も .NET 7 に先駆けて幾つか導入され WebAssembly 例外や WebAssembly スレッドのサポートが追加となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/06/29/uno-platform-4-4.aspx"&gt;Uno Platform Does WebAssembly Threading Months Ahead of .NET 7 -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size-ifdef-windows"&gt;Leveraging trimming to make the Microsoft Store faster and reduce its binary size - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/"&gt;https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションをトリミングすることでパフォーマンス改善とバイナリサイズの削減を行ったことについての記事。&lt;/p&gt;
&lt;p&gt;最近更新された Microsoft Store アプリケーションは C# で書かれた UWP アプリケーションであり、.NET Native (Native AOT の前身的なもの) で AOT コンパイルされている。.NET Native は .NET SDK 同様 IL トリミングの機能があり、記事では IL トリミングをどのようにして有効にするか、有効にした場合にどのような落とし穴や壊れやすい部分があるのかといったことに触れている。&lt;/p&gt;
&lt;p&gt;ケーススタディーとして動的なプロパティーの取得や XAML のページレイアウトセレクターの型名の取得などといったコードでリフレクションをいかにして減らしたかを説明している。また、オープンソースの Windows Community Toolkit でのトリミングの問題解消に貢献したとのこと。&lt;/p&gt;
&lt;p&gt;トリミングによって Microsoft Store のアプリケーションバイナリサイズが 25% 程度削減できたとしている。&lt;/p&gt;
&lt;p&gt;まとめとしてトリミングの有効化は落とし穴や必要な作業も増えてしまうがとても価値があり、新しいコードを書くときは常にパフォーマンスとトリミングを念頭に置くことが重要であるとしている。これは後からトリミングを有効にした際のエラーを減らして時間を節約できることに繋がる他、(リフレクションなどによる)エラーの発生しにくいコードを書くことを強制されるためとしている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cosmos-db.net-qiita"&gt;Cosmos DBに対する .NET での再試行ロジック - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4"&gt;https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cosmos DB の .NET クライアントでの再試行ロジックについて解説している記事。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clone-skipping-strings"&gt;High performance .NET: Building a Redis Clone – skipping strings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3"&gt;https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis クローンを作るシリーズの記事。&lt;/p&gt;
&lt;p&gt;文字列をスキップしてバイト配列を保持するのに再利用可能なバッファーを作ることで文字列の確保を回避することについて。&lt;/p&gt;
&lt;h3 id="native-aot-and-ahead-of-time-compilation-in.net"&gt;Native AOT and Ahead-of-Time Compilation in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/"&gt;https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Native AOT (事前コンパイル) についての記事。&lt;/p&gt;
&lt;p&gt;記事では仕組みや AOT でのメリットとデメリット、.NET 7 での Native AOT を利用してコンソールアプリケーションや AWS Lambda での実行とその効果といったものを紹介している。&lt;/p&gt;
&lt;h3 id="sneak-peek-and-edit-your-code-while-you-search-visual-studio-blog"&gt;Sneak Peek and Edit Your Code While You Search - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/"&gt;https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビューで実装されている All-In-One 検索の 17.3 Preview 2 の新機能の紹介記事。&lt;/p&gt;
&lt;p&gt;17.3 Preview 2 では検索結果の一覧にコードプレビューから編集が可能となり、検索 UI から離れることなく完全なコード編集体験が提供される。&lt;/p&gt;
&lt;h3 id="creating-a-certificate-checker-with.net"&gt;Creating a Certificate Checker With .Net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da"&gt;https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core と HttpClient を使って証明書のチェックツールを作るという記事。&lt;/p&gt;
&lt;p&gt;記事では URL を POST すると、有効期限などを返却するような API を実装している。&lt;/p&gt;
&lt;h3 id="net-maui-qiita"&gt;【抄訳】.NET MAUI の使用を開始するための新しいリソース - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32"&gt;https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;New Resources to Get Started with .NET MAUI&lt;/a&gt; の翻訳記事。&lt;/p&gt;
&lt;h3 id="the-difference-between-null-check-with-is-instead-of-in-c"&gt;The difference between null check with ‘is’ instead of ‘==’ in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e"&gt;https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; チェックにおいて &lt;code&gt;is&lt;/code&gt; を使用した場合と &lt;code&gt;==&lt;/code&gt; を使用した場合での違いについて解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; では &lt;code&gt;==&lt;/code&gt; オペレーターオーバーロードを考慮しない比較であることなど。&lt;/p&gt;
&lt;h3 id="using-refit-to-consume-apis-in-c-code-maze"&gt;Using Refit to Consume APIs in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/using-refit-to-consume-apis-in-csharp/"&gt;https://code-maze.com/using-refit-to-consume-apis-in-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Refit を使用して REST クライアントを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-a.net-maui-windows-app-as-administrator-elevated"&gt;Running a .NET MAUI Windows App as Administrator (Elevated)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/"&gt;https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションを管理者権限で起動する方法についての記事。&lt;/p&gt;
&lt;p&gt;package.appxmanifest と app.manifest で設定を指定することで可能となる。&lt;/p&gt;
&lt;h3 id="observing-all-http-requests-in-a.net-application-gerald-barre"&gt;Observing all http requests in a .NET application - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm"&gt;https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient を使用したリクエストを DiagnosticSource と EventSource で監視する方法についての記事。&lt;/p&gt;
&lt;h3 id="multi-image-docker-images-using-copy-with-images-directly-from-registries"&gt;Multi-Image Docker Images: Using COPY with Images directly from registries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed"&gt;https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker イメージをビルド時に、複数の Docker イメージから COPY でファイルをコピーする方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET のイメージには特定のバージョンのランタイムのみが含まれるため、以前のバージョンを必要とする場合に複合的なイメージを自分で用意する必要がある。&lt;/p&gt;
&lt;h3 id="cppsharp-native-binding"&gt;CppSharp で Native Binding を楽に行う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/70d9dc73f8e663"&gt;https://zenn.dev/tan_y/articles/70d9dc73f8e663&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CppSharp を使用してネイティブライブラリーのヘッダーファイルからバインディングを生成し、C# から呼び出すことを解説する記事。&lt;/p&gt;
&lt;p&gt;記事では CppSharp の使用方法や C++ との連携、その他注意すべき点にも触れている。&lt;/p&gt;
&lt;h3 id="idbcontextfactory-qiita"&gt;IDbContextFactory を使って並列でクエリを実行する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/bc7407462f399da001ec"&gt;https://qiita.com/karuakun/items/bc7407462f399da001ec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で並列にクエリーを実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;DbContext は並列に操作を行うことができないため、 IDbContextFactory を使用して複数の DbContext を作ることで呼び出せるようにする。&lt;/p&gt;
&lt;h3 id="getting-started-with-devops-and.net-maui"&gt;Getting Started with DevOps and .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の DevOps パイプラインを GitHub Actions と Azure DevOps を使用して構築することを説明している記事。&lt;/p&gt;
&lt;p&gt;macOS でのビルドと Windows でのビルドについてそれぞれ触れている。&lt;/p&gt;
&lt;h3 id="understanding-your-middleware-pipeline-in.net-6-with-the-middleware-analysis-package"&gt;Understanding your middleware pipeline in .NET 6 with the Middleware Analysis package&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/"&gt;https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ミドルウェアの診断パッケージを使用してミドルウェアのパイプラインを理解することを説明している記事。&lt;/p&gt;
&lt;p&gt;Microsoft.AspNetCore.MiddlewareAnalysis と DiagnosticsAdapter を使用することでミドルウェアの呼び出しイベントを購読でき、記事ではそれらを使って呼び出しをログに出力するといったことを行っている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jcouv/status/1541818706249916419?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We merged a preview C# 11 feature into VS 17.3: `ref` fields.&lt;br&gt;&lt;br&gt;This allows adding `ref` fields inside `ref struct` types (to safely simplify some perf scenarios) and overriding lifetime defaults with the `scoped` modifier for variables.&lt;br&gt;&lt;br&gt;Spec: &lt;a href="https://t.co/RKtYbm8e3G"&gt;https://t.co/RKtYbm8e3G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julien Couvreur (&amp;#64;jcouv) &lt;a href="https://twitter.com/jcouv/status/1541818706249916419?ref_src=twsrc%5Etfw"&gt;June 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# 11 のプレビュー機能である &lt;code&gt;ref&lt;/code&gt; fields が Visual Studio 2022 17.3 (プレビュー) にマージされたという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ufcpp.net/blog/2022/2/ref-field/"&gt;【C# 11候補】 ref field | ++C++; // 未確認飛行 C ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/jsnover/status/1541447375369097217?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After 22+ awesome years at Microsoft (18+ of which were awesome in a good way 😂 ), it is time for me to try something new.&lt;br&gt;&lt;br&gt;I feel blessed to have had the opportunity to work with such incredible people and to work on things that matter.&lt;br&gt;&lt;br&gt;My last day will be Friday, July 1st. &lt;a href="https://t.co/l2inatE2BM"&gt;pic.twitter.com/l2inatE2BM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeffrey Snover (&amp;#64;jsnover) &lt;a href="https://twitter.com/jsnover/status/1541447375369097217?ref_src=twsrc%5Etfw"&gt;June 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PowerShell の生みの親であるところの Jeffrey Snover 氏が Microsoft を去るという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/24/updates</id>
		<title>2022-06-24: Incremental ASP.NET Migration Tooling Preview 2, gRPC Remove C# implementation, GitHub Copilot</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="incremental-asp.net-migration-tooling-preview-2.net-blog"&gt;Incremental ASP.NET Migration Tooling Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;段階的 ASP.NET 移行ツール Preview 2 についての記事。&lt;/p&gt;
&lt;p&gt;ASP.NET 移行ツール Preview 2 のリリースではコードの改善や ASP.NET/ASP.NET Core アプリケーション間の認証共有といったものが含まれる。記事では ASP.NET との認証の共有についてと実際の利用手順について触れている。&lt;/p&gt;
&lt;h3 id="release-release-v1.47.0-grpcgrpc"&gt;Release Release v1.47.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.47.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.47.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 がリリースされた(.NET 実装は含まれない)。&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 では C# 実装が削除され C-core のパッケージは 2.46.x としてメンテナンスになり、現行の実装は grpc-dotnet へと移行する。なおツールに関しては引き続きリポジトリーに残る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grpc/grpc/pull/29225"&gt;Remove C# implementation (individual packages will continue to be maintained through v2.46.x patches or moved to grpc-dotnet) by jtattermusch · Pull Request #29225 · grpc/grpc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="github-copilot-is-generally-available-to-all-developers-the-github-blog"&gt;GitHub Copilot is generally available to all developers | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/"&gt;https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI ベースのコーディング支援ツールである GitHub Copilot が個人向けに一般公開された。&lt;/p&gt;
&lt;p&gt;月額 $10 または年額 $100 で利用可能で60日間のトライアルが可能。学生や人気のあるオープンソースプロジェクトのメンテナーは無料で利用できる。&lt;/p&gt;
&lt;p&gt;IDE は Visual Studio Code や Visual Studio, Rider などで利用できる。&lt;/p&gt;
&lt;h3 id="listen-up-visual-studio-has-a-new-feature-you-need-to-hear-about-visual-studio-blog"&gt;Listen Up, Visual Studio has a new feature you need to hear about! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で導入されたオーディオキュー機能についての記事。&lt;/p&gt;
&lt;p&gt;オーディオキューはキャレットがエラーやブレークポイントのような特定行に移動したときに音を鳴らす機能。Visual Studio Code ですでに導入されている。&lt;/p&gt;
&lt;h3 id="improving.net-host-error-messages-and-supportability.net-blog"&gt;Improving .NET host error messages and supportability - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のホストやフレームワークがインストールされていない場合のエラーメッセージを .NET 7 Preview 6 で改善したことについての記事。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="dotnet-corenugetdocker-qiita"&gt;Dotnet CoreプロジェクトでプライベートNuGetフィードを使ってセキュアなDockerイメージを作る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/superriver/items/3a5e14bc1880b00d7415"&gt;https://qiita.com/superriver/items/3a5e14bc1880b00d7415&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトの Docker イメージをビルド時にプライベートの NuGet フィードを利用する必要がある場合の対応についての記事。&lt;/p&gt;
&lt;h3 id="a-gentle-introduction-to-c-11-list-patterns"&gt;A Gentle Introduction to C# 11 List Patterns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c"&gt;https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 に入る予定のリストパターン記法についての記事。&lt;/p&gt;
&lt;h3 id="centralized-appsettings-for.net-apps-using-spring-cloud-config"&gt;Centralized appsettings for .NET apps using Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535"&gt;https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Config サーバーで .NET のアプリケーション構成 (appsettings) を保持し、利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="postgresql-14-breaks-the.net-and-java-drivers-for-postgresql"&gt;PostgreSQL 14 Breaks the .NET and Java Drivers for PostgreSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/"&gt;https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 14 では SQL 関数を作成する際に &lt;code&gt;BEGIN ATOMIC ... END&lt;/code&gt; を使用する場合に .NET のドライバーと互換性がない問題についての記事。&lt;/p&gt;
&lt;p&gt;Npgsql では Raw SQL モードが追加されているため、それを利用することで回避できる。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clonenaively-ayende-rahien"&gt;High performance .NET: Building a Redis Clone–naively - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively"&gt;https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で Redis クローンを実装してハイパフォーマンスなコードを書いていくシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197537-A/high-performance-net-building-a-redis-clone-the-wrong-optimization-path"&gt;High performance .NET: Building a Redis Clone– the wrong optimization path - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197505-C/high-performance-net-building-a-redis-clone-separation-of-computation-i-o"&gt;High performance .NET: Building a Redis Clone–separation of computation &amp;amp; I/O - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nuget-support-in-visual-studio-for-mac-17.0-matt-ward"&gt;NuGet Support in Visual Studio for Mac 17.0 - Matt Ward&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/"&gt;https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 での NuGet サポートの変更点についての記事。&lt;/p&gt;
&lt;p&gt;NuGet のバージョン変更や、設定ファイルの場所の変更、パスワードのキーチェーンへの格納など。&lt;/p&gt;
&lt;h3 id="the-perils-of-combining-multicast-delegates-with-tasks-in-c-endjin"&gt;The Perils of Combining Multicast Delegates with Tasks in C# | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html"&gt;https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マルチキャストデリゲートと Task の組み合わせについての記事。
マルチキャストデリゲートは最後のデリゲートの値を返すため、Task と組み合わせて使うと予期せぬ結果となる。&lt;/p&gt;
&lt;h3 id="net6-asp.net-core1asp.net-webapivue3-vite-qiita"&gt;.NET6 ASP.NET Coreで１つのプロジェクトで、ASP.NET WebAPI+Vue3 Viteの環境を作ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7"&gt;https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core プロジェクトで Vue と Vite を組み合わせた構成を構築する手順についての記事。&lt;/p&gt;
&lt;h3 id="multi-tenant-apps-with-ef-core-and-asp.net-core-the.net-tools-blog"&gt;Multi-tenant Apps With EF Core and ASP.NET Core | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/"&gt;https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と ASP.NET Core を使用してマルチテナントアプリケーションを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では一つのデータベースを共有する方法とテナントごとにデータベースを持つ方法での接続について触れている。&lt;/p&gt;
&lt;h3 id="feature-flags-in.net-from-simple-to-more-advanced"&gt;Feature Flags in .NET, from simple to more advanced&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og"&gt;https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションにフィーチャーフラグを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.FeatureManagement.AspNetCore を使用してカスタマイズする方法などに触れている。&lt;/p&gt;
&lt;h3 id="consuming-anonymous-types-with-diagnosticlistener-in.net-6"&gt;Consuming anonymous types with DiagnosticListener in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/"&gt;https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で DiagnosticListener を利用時に匿名型のデータが渡ってきた場合の処理についての記事。&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DiagnosticAdapter が利用できるが、更新されないステータスになっていることなどに触れている。&lt;/p&gt;
&lt;h3 id="resharper-rider-2022.2-eap6-has-just-been-released"&gt;ReSharper &amp;amp; Rider 2022.2 EAP6 has just been released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;
&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2022.2 EAP6 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper では IL Viewer における高レベル/低レベル C# でコンパイル表示に対応し、Rider では Angular 14 のサポートとデータベースに関する機能が追加された。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1539936408403644417?s=12&amp;t=gFjBq0dbcfHQJcpAfvGndA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.2 EAP6 has just been released! This update contains an option to view decompiled high-level / low-level C# code in the IL Viewer. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/NoWHM5dBvi"&gt;https://t.co/NoWHM5dBvi&lt;/a&gt; &lt;a href="https://t.co/xJhY7cucLr"&gt;pic.twitter.com/xJhY7cucLr&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1539936408403644417?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1539940713416298497?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.2 EAP6 has just landed with support for Angular standalone components and 2 new models for resolving database objects. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/HMvf9osthz"&gt;https://t.co/HMvf9osthz&lt;/a&gt; &lt;a href="https://t.co/1tKQZZ14k0"&gt;pic.twitter.com/1tKQZZ14k0&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1539940713416298497?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="ralfbiedertinteroptopus-the-polyglot-bindings-generator-for-your-library-c-c-python"&gt;ralfbiedert/interoptopus: The polyglot bindings generator for your library (C#, C, Python, …) 🐙&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ralfbiedert/interoptopus"&gt;https://github.com/ralfbiedert/interoptopus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust の多言語向けバインディングを実装/生成するライブラリー。C# への対応がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/guilhermerochas/interop-your-net-application-with-rust-nk2"&gt;Interop your .NET application with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1539715292368015360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One of the most exciting parts of this new release is support for managed code debugging. This includes support for managed stack frames and local variables! &lt;a href="https://t.co/3y6128jSQ0"&gt;https://t.co/3y6128jSQ0&lt;/a&gt; &lt;a href="https://t.co/w0wQxkQ2hl"&gt;pic.twitter.com/w0wQxkQ2hl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1539715292368015360?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview でマネージコードのデバッグでスタックフレームとローカル変数を確認できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonAWS/status/1539639350530641925 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The latest &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; Toolkit for Visual Studio 2022 has an updated Publish to AWS feature with a UX refresh. Get the AWS Toolkit for VS2022 at the link below, or update your existing version in VS using Extensions &amp;gt; Manage Extensions &amp;gt; Updates.&lt;a href="https://t.co/I4MJJphkDL"&gt;https://t.co/I4MJJphkDL&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1539639350530641925?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;AWS Toolkit for Visual Studio 2022 の AWS への発行 UX がリフレッシュされたものがリリースされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1539471033698177024 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Playing around with using static interface methods and the new IParsable&amp;lt;T&amp;gt; to make generic callsites for HTTP APIs.  Before .NET 7 there was no way to write generic code that did {Type}.TryParse/{Type}.Parse. The type system didn&amp;#39;t have a way to describe these contracts. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/hhlBOYQmGf"&gt;pic.twitter.com/hhlBOYQmGf&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1539471033698177024?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 以前は TryParse/Parse をジェネリックに書くことができなかったけど、static abstract members in interface と &lt;code&gt;IParsableT&lt;/code&gt; によってできるようなったという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-il-emit-support-for-methodinfo.invoke-and-friends-by-steveharter-pull-request-67917-dotnetruntime"&gt;Add IL Emit support for MethodInfo.Invoke() and friends by steveharter · Pull Request #67917 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67917"&gt;https://github.com/dotnet/runtime/pull/67917&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MethodInfo.Invoke()&lt;/code&gt; のような動的メソッド呼び出しのコードで IL を出力するようにしてパフォーマンスを向上するという PR&lt;/p&gt;
&lt;!-- https://twitter.com/kzu/status/1538935462831718401?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL: using MethodInto.Invoke() is fine again. Add IL Emit support for MethodInfo.Invoke() and friends by steveharter  &lt;a href="https://t.co/BCEV5Eo2fG"&gt;https://t.co/BCEV5Eo2fG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Cazzulino 🇦🇷 (&amp;#64;kzu) &lt;a href="https://twitter.com/kzu/status/1538935462831718401?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="tier0r2r-instrumented-tier0-optimized-tier1-by-egorbo-pull-request-70941-dotnetruntime"&gt;tier0/R2R - instrumented tier0 - optimized tier1 by EgorBo · Pull Request #70941 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/70941"&gt;https://github.com/dotnet/runtime/pull/70941&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ready2Run → 階層化 JIT (Tier 0) → 階層化JIT (Tier 1; PGO による最適化) という流れで起動時からのパフォーマンスを上げていく PR。&lt;/p&gt;
&lt;p&gt;R2R を使用しないフル Dynamic PGO は最終的には最速のパフォーマンスが出るが初回リクエスト応答の時間がとても遅くなってしまうため、ハイブリッドなアプローチで R2R の初回応答性とフル Dynamic PGO のパフォーマンスの両方を得られるようにする。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1538851479942987777?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;A proposal to add a new tier in JIT - &amp;quot;instrumented tier0 after AOT&amp;quot; &lt;a href="https://t.co/WvS3IkI2Ga"&gt;https://t.co/WvS3IkI2Ga&lt;/a&gt; - should allow us to still do PGO for AOT&amp;#39;d (R2R) code. &lt;a href="https://t.co/ttpIxNxz3R"&gt;pic.twitter.com/ttpIxNxz3R&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1538851479942987777?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/18/updates</id>
		<title>2022-06-18: .NET 7 Preview 5, Arm64 Visual Studio, .NET 6.0.6 and .NET Core 3.1.26</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/18/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-18T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-5.net-blog"&gt;Announcing .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Preview 5 での改善点として下記のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オブザーバビリティ&lt;/li&gt;
&lt;li&gt;System.Text.Json
&lt;ul&gt;
&lt;li&gt;ポリモーフィズム&lt;/li&gt;
&lt;li&gt;Utf8JsonReader.CopyString&lt;/li&gt;
&lt;li&gt;ソースコード生成の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System.IO
&lt;ul&gt;
&lt;li&gt;ReadExactly, ReadAtLeast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegexGenerator のための新しい Roslyn アナライザーと CodeFix&lt;/li&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;System.Reflection を利用したメソッド呼び出しのパフォーマンス向上&lt;/li&gt;
&lt;li&gt;ML.NET テキスト分類 API&lt;/li&gt;
&lt;li&gt;CodeGen (JIT)&lt;/li&gt;
&lt;li&gt;トリミングの有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="arm64-visual-studio-visual-studio-blog"&gt;Arm64 Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で ARM64 環境での Visual Studio 自身のネイティブ実行サポートが追加された。&lt;/p&gt;
&lt;p&gt;現時点では重要なワークロードして C++ 開発 (MSBuild)、.NET Framework と .NET でのデスクトップ (WinForms, WPF) 開発、.NET による Web 開発がサポートされている。拡張機能の移行に関しては別途ブログで解説されるとのこと。&lt;/p&gt;
&lt;p&gt;インストーラーは x64 と共通となっているためプラットフォームに合わせてインストールされる。またインストールには既存のバージョンのアンインストールが必要となっている点に注意が必要。&lt;/p&gt;
&lt;h3 id="announcing-entity-framework-7-preview-5.net-blog"&gt;Announcing Entity Framework 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 についての記事。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 では SQL Server での AT TIME ZONE コマンドやコマンドと接続のインターセプト、&lt;code&gt;DeleteBehavior&lt;/code&gt; 属性の追加などが行われているが、記事では Table-per-concrete-type (TPC) についてフォーカスして紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-5.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JWT 認証の改善と自動認証設定
&lt;ul&gt;
&lt;li&gt;認証構成の簡素化&lt;/li&gt;
&lt;li&gt;エンドポイントの許可ポリシー&lt;/li&gt;
&lt;li&gt;開発時の JWT の管理を行う &lt;code&gt;dotnet user-jwts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の引数リストのパラメーターバインディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-7-preview-5-generic-math.net-blog"&gt;.NET 7 Preview 5 - Generic Math - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で提供される static abstract member in interface の活用である Generic Math についての記事。&lt;/p&gt;
&lt;p&gt;記事では Generic Math によってどのようなことが可能となるか、.NET 6 でのプレビューからの変更点、インターフェースをはじめとした API について紹介している。&lt;/p&gt;
&lt;h3 id="net-june-2022-updates.net-6.0.6-and.net-core-3.1.26.net-blog"&gt;.NET June 2022 Updates – .NET 6.0.6 and .NET Core 3.1.26 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/june-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/june-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.6 と .NET Core 3.1.26 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合とセキュリティーに関する修正が含まれている。
セキュリティーに関しては NuGet の認証情報が漏洩してしまうことがある問題が修正されている。&lt;/p&gt;
&lt;p&gt;記事では .NET 5 のサポートが終了していること、.NET Core 3.1 のサポートも2022年12月13日に終了することにも触れている。&lt;/p&gt;
&lt;h3 id="net-framework-june-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework June 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年6月の累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースには新しいセキュリティー修正は含まれておらず、GC やその他の問題に関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.3-preview-2-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.3 Preview 2 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.3 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正や改善と MAUI のサポートの改善が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the-ml.net-text-classification-api-preview.net-blog"&gt;Introducing the ML.NET Text Classification API (preview) - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/"&gt;https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET にプレビューとして追加されたテキスト分類 API についての紹介記事。&lt;/p&gt;
&lt;h3 id="vnext-license-changes-discussion-2151-sixlaborsimagesharp"&gt;VNext License Changes · Discussion #2151 · SixLabors/ImageSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SixLabors/ImageSharp/discussions/2151"&gt;https://github.com/SixLabors/ImageSharp/discussions/2151&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp のライセンスを現在の Apache License から商用利用向けのライセンス体系に変更を検討しているという Discussion。&lt;/p&gt;
&lt;h3 id="oneservice-journey-to.net-6.net-blog"&gt;OneService Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OneService と呼ばれる Microsoft Start、Microsoft Edge、Windows などでのコンテンツ体験を提供するサービスを .NET Framework から .NET 6 に移行した事例紹介記事。&lt;/p&gt;
&lt;p&gt;事例のハイライトには次のものをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インフラストラクチャーコストの 29% 削減&lt;/li&gt;
&lt;li&gt;移行したサービスの CPU 使用率の平均 30% 向上&lt;/li&gt;
&lt;li&gt;主な API の P95 レイテンシーが 8～27% 改善&lt;/li&gt;
&lt;li&gt;技術的負債の解消により、毎年の継続的な .NET のアップグレード&lt;/li&gt;
&lt;li&gt;生産的なチーム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では移行の流れや、その間に行われていた手法について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OneService について&lt;/li&gt;
&lt;li&gt;移行ステージ&lt;/li&gt;
&lt;li&gt;最初の移行の試み&lt;/li&gt;
&lt;li&gt;.NET Framework 上での ASP.NET Core 2.1 への移行&lt;/li&gt;
&lt;li&gt;.NET 6 への移行&lt;/li&gt;
&lt;li&gt;パフォーマンスの改善&lt;/li&gt;
&lt;li&gt;コスト削減&lt;/li&gt;
&lt;li&gt;その他の恩恵&lt;/li&gt;
&lt;li&gt;運用環境における A/B テスト&lt;/li&gt;
&lt;li&gt;運用環境のミラーリング
&lt;ul&gt;
&lt;li&gt;運用環境のトラフィック1%をミラーリングして処理するカナリアクラスター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運用環境へのデプロイ&lt;/li&gt;
&lt;li&gt;ASP.NET から ASP.NET Core への移行
&lt;ul&gt;
&lt;li&gt;レスポンスの gzip/Brotli 圧縮が外れていて Azure Front Door/Akamai のコストが増えるまで気づかなかった話&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API 課題
&lt;ul&gt;
&lt;li&gt;OData&lt;/li&gt;
&lt;li&gt;ServicePointManager の非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="june-9-2022.net-data-biweekly-updates-2022"&gt;June 9, 2022 - .NET Data Biweekly Updates (2022)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のデータアクセス関連のアップデート 2022年6月9日号。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 でのアップデートを中心に取り上げている。&lt;/p&gt;
&lt;h3 id="maybe-its-time-to-rethink-our-project-structure-with.net-6"&gt;Maybe it's time to rethink our project structure with .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core の Minimal API に合わせてプロジェクト構成を再考してはどうかという記事。&lt;/p&gt;
&lt;h3 id="introducing-the-new-website-nuke"&gt;Introducing the New Website | NUKE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuke.build/blog/2022/06/15/new-website/"&gt;https://nuke.build/blog/2022/06/15/new-website/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUKE の新しい Web サイトが公開された。&lt;/p&gt;
&lt;h3 id="is-codelens-enabled"&gt;Is CodeLens Enabled?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/is-codelens-enabled-7p7"&gt;https://dev.to/calvinallen/is-codelens-enabled-7p7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の拡張から CodeLens が有効になっているかどうかを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-does-packagereference-work"&gt;How does PackageReference work?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dfederm.com/how-does-packagereference-work/"&gt;https://dfederm.com/how-does-packagereference-work/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PackageReference が内部でどのように処理され、情報が保持されているのかを解説する記事。&lt;/p&gt;
&lt;h3 id="troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox"&gt;Troubleshooting CPU and exceptions issues with Datadog toolbox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da"&gt;https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog .NET Tracer を使用して Datadog APM 上で CPU や例外に関する問題のトラブルシュートについての記事。&lt;/p&gt;
&lt;h3 id="new-profiler-feature-in-visual-studio"&gt;New Profiler feature in Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 で導入された新しいプロファイリングツールの紹介記事。&lt;/p&gt;
&lt;p&gt;新しいプロファイリングツールではファイル I/O に関するパフォーマンス情報を取得できるようになっている。&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor-server-without-cookie"&gt;ASP.NET Core Blazor Server でオレオレ認証を追加したい without Cookie&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3"&gt;https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP｡NET Core Blazor Server で Cookie を使用せず認証を行い、セッション中は維持する方法についての記事。&lt;/p&gt;
&lt;h3 id="dependency-injection-for-native-aot"&gt;Dependency Injection for Native AOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395"&gt;https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT 環境下で DI を使用する場合に NativeAOT のリフレクションフリーモードでも正しく動作させるにはどうすればよいのかという記事。&lt;/p&gt;
&lt;h3 id="c-11-static-abstract-members-ndepend"&gt;C# 11 static abstract members - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/c-11-static-abstract-members"&gt;https://blog.ndepend.com/c-11-static-abstract-members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) の static abstract members in interfaces についての解説記事。&lt;/p&gt;
&lt;h3 id="new-resources-to-get-started-with.net-maui.net-blog"&gt;New Resources to Get Started with .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI を始めるのに役立つリソースの紹介記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-make-it-your-home-visual-studio-blog"&gt;What’s New in Visual Studio: Make it Your Home - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-vs/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1 以降で導入された、バージョンアップでの新機能などを紹介する What's New ページについて。&lt;/p&gt;
&lt;h3 id="preview.net-7c-11-generic-math"&gt;[Preview版] .NET 7(C# 11) で導入される Generic math&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/a355451cc7a4a3"&gt;https://zenn.dev/naminodarie/articles/a355451cc7a4a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入される Generic Math の簡単な例の紹介記事。&lt;/p&gt;
&lt;h3 id="a-brief-introduction-to-diagnosticsource"&gt;A brief introduction to DiagnosticSource&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-brief-introduction-to-diagnostic-source/"&gt;https://andrewlock.net/a-brief-introduction-to-diagnostic-source/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DiagnosticSource についての簡単な解説記事。&lt;/p&gt;
&lt;p&gt;他のロギングの仕組みとの違いやリッスンしてイベントを購読する方法などについて触れている。&lt;/p&gt;
&lt;h3 id="share-debug-configuration-between.net-ides-with-launch-profiles"&gt;Share debug configuration between .NET IDEs with launch profiles&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p"&gt;https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio や Rider といった IDE での起動プロファイルを使用したデバッグ起動時の設定についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnet-symbol-symbols-download-utility"&gt;dotnet-symbol: Symbols download utility&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/dotnet-symbol"&gt;https://www.nuget.org/packages/dotnet-symbol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;シンボルファイルをダウンロードするツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/symstore/tree/main/src/dotnet-symbol"&gt;Symbol downloader dotnet cli extension - symstore/src/dotnet-symbol at main · dotnet/symstore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/drasticactionsa/status/1537108758362480640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;DA&amp;#39;s useful tool of the day: dotnet-symbol&lt;a href="https://t.co/9pcqnTxP8O"&gt;https://t.co/9pcqnTxP8O&lt;/a&gt;&lt;br&gt;&lt;br&gt;Saved me tons of time getting symbols from the MS symbol servers for sideloading.&lt;/p&gt;&amp;mdash; Drastic Actions (&amp;#64;drasticactionSA) &lt;a href="https://twitter.com/drasticactionSA/status/1537108758362480640?ref_src=twsrc%5Etfw"&gt;June 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="pharringsettingsstoreexplorer-a-visual-studio-extension-with-a-tool-window-for-viewing-and-editing-the-contents-of-visual-studios-settings-store"&gt;pharring/SettingsStoreExplorer: A Visual Studio Extension with a tool window for viewing and editing the contents of Visual Studio's Settings Store.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pharring/SettingsStoreExplorer"&gt;https://github.com/pharring/SettingsStoreExplorer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の設定ストアを表示、編集する拡張。&lt;/p&gt;
&lt;h3 id="github-avanadebeef-business-entity-execution-framework"&gt;GitHub - Avanade/Beef: Business Entity Execution Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Avanade/Beef"&gt;https://github.com/Avanade/Beef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core をベースとしたコード生成による Web API 実装のためのフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/karamem0/articles/2022_06_15_200000"&gt;Avanade Beef のレイヤー構造を理解する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deepdive"&gt;DeepDive&lt;/h2&gt;
&lt;h3 id="api-proposal-unreachableexception-issue-35324-dotnetruntime"&gt;API Proposal: UnreachableException · Issue #35324 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/35324"&gt;https://github.com/dotnet/runtime/issues/35324&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コード上到達しないことを表す UnreachableException の導入。&lt;/p&gt;
&lt;p&gt;コードカバレッジツールでの到達不能コードの認識や JIT でのコールドパスとして扱うといったことが可能になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.diagnostics.unreachableexception?view=net-7.0"&gt;UnreachableException クラス (System.Diagnostics) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/tannergooding/status/1536735202327703554?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET 7, `throw new System.Diagnostics.UnreachableException()` ;)&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1536735202327703554?ref_src=twsrc%5Etfw"&gt;June 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/09/updates</id>
		<title>2022-06-09: Windows App SDK 1.1.0, Exchange Online Journey to .NET Core, Appwrite Cloud Functions supports .NET Runtime</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/09/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-09T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-v1.1.0-microsoftwindowsappsdk"&gt;Release v1.1.0 · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.1.0"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1 ではいくつかの新機能と安定性の向上やパフォーマンス改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーションで同じ UI スレッド上に WinUI 3 コンテンツを持つ複数のウィンドウを作成できるようになった&lt;/li&gt;
&lt;li&gt;Windows 11 の Mica とアクリル背景スタイルを使用できるようになった&lt;/li&gt;
&lt;li&gt;Z-オーダー、サイズ変更や高さのあるタイトルバーといったカスタムタイトルバーの新機能&lt;/li&gt;
&lt;li&gt;Windows App SDK を使用したアプリケーションの昇格した権限での実行のサポート&lt;/li&gt;
&lt;li&gt;依存も含めた自己完結型の展開を行うアプリケーションに Windows App SDK を含めることが可能になった&lt;/li&gt;
&lt;li&gt;新しい API で環境変数の &lt;code&gt;PATH&lt;/code&gt; と &lt;code&gt;PATHEXT&lt;/code&gt; を実行時に管理、追跡できるようになった&lt;/li&gt;
&lt;li&gt;アプリケーションの再起動を手動で行うことや、システム更新時に自動で行うことが可能になった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、詳しくはリリースノートを参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/windows/apps/windows-app-sdk/stable-channel#version-11-stable"&gt;バージョン 1.1 Stable - Windows App SDK の安定チャネルのリリース ノート - Windows apps | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exchange-online-journey-to.net-core.net-blog"&gt;Exchange Online Journey to .NET Core - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/exchange-online-journey-to-net-core/"&gt;https://devblogs.microsoft.com/dotnet/exchange-online-journey-to-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft 365 の Exchange Online の .NET Core/.NET への移行事例を紹介している記事。&lt;/p&gt;
&lt;p&gt;Microsoft 365 は Exchange に由来する Substrate (基盤) と呼ばれるサービスのセットを持っていて、それを .NET Framework から .NET Core へと移行するといった話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://petri.com/office-365-substrate/"&gt;Exploring the Office 365 Substrate | Petri IT Knowledgebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Substrate は大体3,400のC#プロジェクトを持つ非常に大きなプロダクトで .NET Core へと移行するモチベーションとしてはコスト効率の向上やアクティブな開発を終えた .NET Framework からの最新のフレームワークへの移行といった点があったとのこと。&lt;/p&gt;
&lt;p&gt;まずは PoC を兼ねてた移行として POP3 プロトコルを扱うサービスの移行から始めたとのこと。これは POP3 プロトコルが比較的小さく、依存するものが少なく収まるため。それでも140程度のアセンブリと NuGet パッケージを .NET Core へと移行する必要があった。&lt;/p&gt;
&lt;p&gt;.NET Core アプリケーションが使うアセンブリは .NET Core か .NET Standard をターゲットとしている必要があるためアセンブリの移行には順番を決める必要があり、そのためデイリービルドからプロトコルのアセンブリの依存から依存関係グラフを作るツールを開発し、何を移行すると Substrate の他のプロセスや AppPool に影響があるのかを見つけるようにした。&lt;/p&gt;
&lt;p&gt;この記事の時点では Substrate のリポジトリ内の1,061アセンブリが移行され、下記のサービスが .NET Core で実行されているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POP3 サービス&lt;/li&gt;
&lt;li&gt;IMAP4 サービス&lt;/li&gt;
&lt;li&gt;Mapi-Http app pool&lt;/li&gt;
&lt;li&gt;MSExchangeTransportLogSearch サービス&lt;/li&gt;
&lt;li&gt;MSExchangeTransportStreamingOptics サービス&lt;/li&gt;
&lt;li&gt;(進行中) EAS on http.sys (※多分 EAS は Exchange ActiveSync)&lt;/li&gt;
&lt;li&gt;テストと評価システム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET Core への移行での重要なチャレンジの一つとして、かなり多くの数の NuGet パッケージ (Microsoft社内、社外共に) に依存していたため、.NET Standard や .NET Core に対応していない場合にパッケージ所有者を見つけることが必要となったので、パッケージの所有者のマッピングを最新に保つことの重要性を理解したとのこと。&lt;/p&gt;
&lt;p&gt;移行した結果のパフォーマンスもいくつか紹介している。&lt;/p&gt;
&lt;p&gt;まず POP3 は .NET Framework 4.7.2 からの比較で CPU、GC、メモリー使用量といったものが大きく改善されたとしている。またこの移行時点では Span といった新しい API への対応は行っていないとのこと。&lt;/p&gt;
&lt;p&gt;IMAP4 は移行の手順が異なったため、.NET Framework との比較ではなく .NET 5 と .NET 6 の比較を行っている。この比較では CPU とメモリー使用量が改善され、パフォーマンスに関わりそうなコードの変更も行ったが多くは .NET 6 によるものではないかとしている。&lt;/p&gt;
&lt;p&gt;Mapi Http は IIS の App Pool 上から Kestrel に移行されたアプリケーションで、メモリー使用量や CPU 効率が改善されたとのこと。&lt;/p&gt;
&lt;p&gt;最後に CSO と呼ばれる Exchange ストア上の .NET 6 の Kestrel ベース gRPC アプリケーションについて。CSO はデータセンター内のノード間通信に使用されるもので、.NET Framework 版はなく最初から .NET Core で作られていたため、メールボックスからページを取得するクエリーでのシナリオでの比較がされている。その比較では REST ベースの従来の仕組みに比べ、レイテンシーやCPU、データベース CPUといったものが改善されたとのこと。異なるサービスなので直接の比較はできないが多くは Kestrel や gRPC といったものによるものだろうとしている。&lt;/p&gt;
&lt;p&gt;まとめとして .NET Core への移行はパフォーマンス上の利点が大きく、目標として Substrate 全体を .NET Core と gRPC を使用した内部マイクロサービスへと移行を進めていくとしている。加えてビルドチームのインフラストラクチャーの変更により、.NET の最新バージョンを利用できるようになり、利用者にパフォーマンスを提供できるとしている。&lt;/p&gt;
&lt;h3 id="cloud-functions-using-the-new.net-runtime"&gt;Cloud Functions Using the New .NET Runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/appwrite/cloud-functions-using-the-new-net-runtime-4fkm"&gt;https://dev.to/appwrite/cloud-functions-using-the-new-net-runtime-4fkm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AppWrite (セルフホスト可能なオープンソースBaaS) の Cloud Functions のランタイムとして .NET がサポートされた。&lt;/p&gt;
&lt;p&gt;記事では実際に AppWrite 上に .NET で実装した Cloud Functions を動かす方法を紹介している。&lt;/p&gt;
&lt;h3 id="performance-improvements-in.net-maui.net-blog"&gt;Performance Improvements in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 のプレビューから .NET 6 / MAUI GA までに行われた様々なパフォーマンス改善について数多く解説している。プラットフォームを問わないものもあるものの、特に Android 向けの改善が多く含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起動時のパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;Android でのプロファイリング方法&lt;/li&gt;
&lt;li&gt;プロファイルを使った AOT&lt;/li&gt;
&lt;li&gt;単一ファイルアセンブリストア&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Hosting の削除&lt;/li&gt;
&lt;li&gt;など..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションサイズの改善&lt;/li&gt;
&lt;li&gt;.NET PodCast サンプルアプリケーションの改善&lt;/li&gt;
&lt;li&gt;その他実験的な機能と高度なオプション&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="this-project-is-on-hold-discussion-689-aaubryyamldotnet"&gt;This project is on hold · Discussion #689 · aaubry/YamlDotNet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aaubry/YamlDotNet/discussions/689"&gt;https://github.com/aaubry/YamlDotNet/discussions/689&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YamlDotNet の開発者である Antoine Aubry 氏が現在アクティブにプロジェクトに取り込むつもりがないという話。&lt;/p&gt;
&lt;p&gt;Antoine 氏は既に使用する機会がなくエネルギーを割くことができないので、メンテナーやその他提案を受け付けている状況とのこと。&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.1.2-are-now-available-the.net-tools-blog"&gt;ReSharper and Rider 2022.1.2 Are Now Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/03/resharper-rider-2022-1-2/"&gt;https://blog.jetbrains.com/dotnet/2022/06/03/resharper-rider-2022-1-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2022.1.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper は Ctrl+. ショートカットとパフォーマンスの修正、Rider は SQL Server の Windows 統合認証と Unity に関連する修正が行われている。&lt;/p&gt;
&lt;h3 id="release-8.0.0-preview-4-communitytoolkitdotnet"&gt;Release 8.0.0 Preview 4 · CommunityToolkit/dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/CommunityToolkit/dotnet/releases/tag/v8.0.0-preview4"&gt;https://github.com/CommunityToolkit/dotnet/releases/tag/v8.0.0-preview4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET CommunityToolkit 8.0.0 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの属性がリネームされ、クラスレベルでの適用が可能となるなどの変更が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="generic-math-c-11-c-c"&gt;【Generic Math】 C# 11 での演算子の新機能 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/oop/generic-math-operators/"&gt;https://ufcpp.net/study/csharp/oop/generic-math-operators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入される新しい演算子の機能の紹介記事。&lt;/p&gt;
&lt;p&gt;現状、符号なし右シフト(&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;)について紹介している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-june-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | June 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/07/net-annotated-monthly-june-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/06/07/net-annotated-monthly-june-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の .NET 関連情報まとめの6月号&lt;/p&gt;
&lt;h3 id="opentelemetry-in-a-c.net-application-implementation-guide-signoz"&gt;OpenTelemetry in a C# .NET application | Implementation guide | SigNoz&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-dotnet/"&gt;https://signoz.io/blog/opentelemetry-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンソースの APM である SigNoz と OpenTelemetry を組み合わせて .NET アプリケーションのモニタリングを行うことについての記事。&lt;/p&gt;
&lt;h3 id="using-pathbase-with.net-6s-webapplicationbuilder"&gt;Using PathBase with .NET 6's WebApplicationBuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/using-pathbase-with-dotnet-6-webapplicationbuilder/"&gt;https://andrewlock.net/using-pathbase-with-dotnet-6-webapplicationbuilder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で PathBase を使用する方法について。&lt;/p&gt;
&lt;p&gt;UsePathBase によるミドルウェアの追加は Routing ミドルウェアよりも先に行う必要があり、.NET 5 まではすべてコントロールしていたので問題なかったが、.NET 6 の Minimal API では暗黙的に Routing ミドルウェアが追加されるようになったため注意が必要となったことを説明している。&lt;/p&gt;
&lt;h3 id="securing-razor-pages-applications-with-auth0"&gt;Securing Razor Pages Applications with Auth0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/securing-razor-pages-applications-with-auth0/"&gt;https://auth0.com/blog/securing-razor-pages-applications-with-auth0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor ページアプリケーションを Auth0 で保護する方法についての記事。&lt;/p&gt;
&lt;h3 id="the-best-c.net-web-application-tech-stack-choosing-the-front-end-michaels-coding-spot"&gt;The Best C# .NET Web Application Tech Stack: Choosing The Front End - Michael's Coding Spot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://michaelscodingspot.com/web-application-tech-stack-front-end/"&gt;https://michaelscodingspot.com/web-application-tech-stack-front-end/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の Web アプリケーションのフロントエンドの現状の選択肢を紹介している記事。&lt;/p&gt;
&lt;p&gt;SPA, サーバーサイドでレンダリングするパターン、Blazor WebAssembly のようなクライアントパターンなど。&lt;/p&gt;
&lt;h3 id="runtime-c-code-compilation-revisited-for-roslyn"&gt;Runtime C# Code Compilation Revisited for Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#compilation-startup-performance"&gt;https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#compilation-startup-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn でランタイムに C# のソースコードをコンパイルすることについての記事。&lt;/p&gt;
&lt;p&gt;記事ではコンパイルに必要な手順をはじめ、スクリプティング API やそれを利用したライブラリーの紹介、依存関係の管理(ライブラリ参照)といった点に触れている。&lt;/p&gt;
&lt;h3 id="how-to-test-asp.net-core-minimal-apis"&gt;How to test ASP.NET Core Minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/06/07/how-test-aspnetcore-minimal-apis.html"&gt;https://blog.maartenballiauw.be/post/2022/06/07/how-test-aspnetcore-minimal-apis.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API を使用したアプリケーションのテストを記述する方法についての記事。&lt;/p&gt;
&lt;p&gt;エントリーポイントとなるクラスを可視化する、WebApplicationFactory を使用するといったことを説明している。&lt;/p&gt;
&lt;h3 id="deploying-existing.net-5-project-with-docker-to-aws-lambda"&gt;Deploying Existing .NET 5 Project with Docker to AWS Lambda&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;vhlnd/deploying-existing-net-5-project-with-docker-to-aws-lambda-a7e0d8f1382b"&gt;https://medium.com/&amp;#64;vhlnd/deploying-existing-net-5-project-with-docker-to-aws-lambda-a7e0d8f1382b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既存の ASP.NET Core (.NET 5) プロジェクトを Docker イメージにして AWS Lambda 上に移行する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-maui-graphicview-qiita"&gt;.NET MAUI のGraphicViewで描写テスト - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/390f1dbb044fb7403cea"&gt;https://qiita.com/hqf00342/items/390f1dbb044fb7403cea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の GraphicView で描画する際のパフォーマンスを簡単にテストしてみたという記事。&lt;/p&gt;
&lt;p&gt;前の記事では AbsoluteLayout による配置でパフォーマンスが出なかったため、GraphicView による描画の正攻法との比較となっている。&lt;/p&gt;
&lt;h3 id="authorization-authentication-from-backend-perspective-pt1"&gt;Authorization &amp;amp; Authentication from backend perspective pt1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/andreyka26git/authorization-authentication-from-backend-perspective-pt1-2239"&gt;https://dev.to/andreyka26git/authorization-authentication-from-backend-perspective-pt1-2239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サーバーサイド (ASP.NET Core) での認証と認可についての記事。&lt;/p&gt;
&lt;p&gt;Part 1として Basic 認証とダイジェスト認証の実装について紹介している。&lt;/p&gt;
&lt;h3 id="release-system.commandline-v2.0.0-beta4.22272.1-dotnetcommand-line-api"&gt;Release System.CommandLine v2.0.0-beta4.22272.1 · dotnet/command-line-api&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/command-line-api/releases/tag/2.0.0-beta4.22272.1"&gt;https://github.com/dotnet/command-line-api/releases/tag/2.0.0-beta4.22272.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine v2.0.0-beta4.22272.1 がリリースされた。&lt;/p&gt;
&lt;h3 id="avalonia-platform-support-why-its-simple"&gt;Avalonia platform support - why it's simple&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/avalonia/avalonia-platform-support-why-its-simple-cjd"&gt;https://dev.to/avalonia/avalonia-platform-support-why-its-simple-cjd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia のプラットフォームについての記事。&lt;/p&gt;
&lt;p&gt;Avalonia プラットフォームと MAUI の違いや、構成について簡単に紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-devloopedchromium-run-a-portable-chromium-using-dotnet-6-and-nuget"&gt;GitHub - devlooped/chromium: Run a portable Chromium using dotnet 6 and nuget.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/devlooped/chromium"&gt;https://github.com/devlooped/chromium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET CLI Tools またはアプリケーションから利用するためのライブラリーとして Chromium を組み込むツール/ライブラリー。&lt;/p&gt;
&lt;p&gt;Playwright を利用したプロジェクトでブラウザー自動操作のために組み込み Chromium を利用したいというケースなどで役立つとのこと。&lt;/p&gt;
&lt;h3 id="github-awslabsdotnet-nativeaot-labs-a-place-to-learn-about-and-experiment-with.net-nativeaot-on-aws"&gt;GitHub - awslabs/dotnet-nativeaot-labs: A place to learn about and experiment with .NET NativeAOT on AWS.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/awslabs/dotnet-nativeaot-labs"&gt;https://github.com/awslabs/dotnet-nativeaot-labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda 上で .NET の NativeAOT の動作させることについて学ぶためのリポジトリ。&lt;/p&gt;
&lt;h3 id="mukai1011types-dotnet-type-definition-of.net"&gt;mukai1011/types-dotnet: Type definition of .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mukai1011/types-dotnet"&gt;https://github.com/mukai1011/types-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションに JavaScript エンジンを組み込む ClearScript で使うための .NET クラスライブラリーの TypeScript 型定義を作るというリポジトリ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mukai1011/items/e27e70d5eea3c74e790d"&gt;.NETの型定義を書こうとしてえらいことになってる（ClearScript） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1534530435543334914?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ICYMI - Did you know you can request AWS credits for your .NET open source project? We are excited to see what you build on AWS that fuels the .NET &lt;a href="https://twitter.com/hashtag/opensource?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#opensource&lt;/a&gt; community. Visit the link below to make your request.&lt;a href="https://t.co/JYTn2heO3q"&gt;https://t.co/JYTn2heO3q&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/OSS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#OSS&lt;/a&gt; &lt;a href="https://t.co/xmFjND1Nta"&gt;pic.twitter.com/xmFjND1Nta&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1534530435543334914?ref_src=twsrc%5Etfw"&gt;June 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;AWS がオープンソースプロジェクトにはクレジットを提供するという話(AWS の開発に利用できるということ)。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1532880744732758018?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today we had a meeting about experimenting with a green threads implementation in .NET. More info to come soon, exciting times! &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1532880744732758018?ref_src=twsrc%5Etfw"&gt;June 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET にグリーンスレッドを実装する試みがあるというような話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-http2-websockets-by-tratcher-pull-request-41558-dotnetaspnetcore"&gt;Implement Http/2 WebSockets by Tratcher · Pull Request #41558 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41558"&gt;https://github.com/dotnet/aspnetcore/pull/41558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 上の WebSocket サポートを実装する PR。&lt;/p&gt;
&lt;h3 id="add-document-outline-tool-window-by-emilyanas2323-pull-request-61784-dotnetroslyn"&gt;Add Document Outline Tool Window by emilyanas2323 · Pull Request #61784 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/61784"&gt;https://github.com/dotnet/roslyn/pull/61784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio にソースコードのドキュメントアウトラインを表示するツールウィンドウを実装する PR。&lt;/p&gt;
&lt;h3 id="aspnet-support-for-webtransport-issue-39583-dotnetaspnetcore"&gt;Aspnet support for webtransport · Issue #39583 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39583"&gt;https://github.com/dotnet/aspnetcore/issues/39583&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core (Kestrel) での WebTransport サポートの Issue。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/42097"&gt;[WIP] Adding the rest of WebTransport into Kestrel by Daniel-Genkin-MS-2 · Pull Request #42097 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41877"&gt;Adding WebTransport Handshake to Kestrel by Daniel-Genkin-MS-2 · Pull Request #41877 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/03/updates</id>
		<title>2022-06-03: Visual Studio at Microsoft Build 2022, Incremental ASP.NET to ASP.NET Core Migration</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/03/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-03T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-at-microsoft-build-2022.net-blog"&gt;Visual Studio at Microsoft Build 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-at-microsoft-build-2022/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-at-microsoft-build-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Build 2022 での Visual Studio 関連の情報についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2022 17.3 Preview 1.1 と Visual Studio 2022 for Mac 17.3 Preview 1 で .NET MAUI のツーリングが利用可能に&lt;/li&gt;
&lt;li&gt;Microsoft Dev Box (Windows 365 の開発者向け版) のアナウンス&lt;/li&gt;
&lt;li&gt;Azure Deployment Environments のアナウンス&lt;/li&gt;
&lt;li&gt;ARM64 向け Visual Studio のアナウンス&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="incremental-asp.net-to-asp.net-core-migration.net-blog"&gt;Incremental ASP.NET to ASP.NET Core Migration - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/incremental-asp-net-to-asp-net-core-migration/"&gt;https://devblogs.microsoft.com/dotnet/incremental-asp-net-to-asp-net-core-migration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET を ASP.NET Core に段階的に移行する方法とそれを支援するツールやライブラリーについての記事。&lt;/p&gt;
&lt;p&gt;記事では大きなプロジェクトを段階的に移行する方法として System.Web アダプターライブラリーと YARP を使用した構成を構築し、一部のロジックを ASP.NET Core アプリケーションへと移行しトラフィックを流していく形でインクリメンタルに移行する手段を紹介している。&lt;/p&gt;
&lt;p&gt;またその構成を Visual Studio 上で簡単に構築できるマイグレーション用の拡張 (要 Visual Studio Preview) についても使用方法を含めて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/systemweb-adapters"&gt;dotnet/systemweb-adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=WebToolsTeam.aspnetprojectmigrations"&gt;Microsoft Project Migrations (Experimental) - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-may-2022-cumulative-update.net-blog"&gt;.NET Framework May 2022 Cumulative Update - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-may-2022-cumulative-update/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-may-2022-cumulative-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年5月の累積アップデートプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートでは WPF、WinForms、.NET ランタイム、ワークフローに関する品質と安定性の向上が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="ccustom-github-action-yucchiys-note"&gt;C#でCustom GitHub Actionを書く | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/05/implement-custom-github-action-with-csharp/"&gt;https://blog.yucchiy.com/2022/05/implement-custom-github-action-with-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions のカスタム action を C# で記述する方法についての記事。&lt;/p&gt;
&lt;h3 id="vscodeunityuseglobalmono"&gt;【vscode/Unity】補完が消えた&amp;amp;useGlobalMonoがなくなって混乱している人へ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/leaf/articles/98f02a61440893"&gt;https://zenn.dev/leaf/articles/98f02a61440893&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code で使用する C# 拡張を使用している場合に Unity のプロジェクトのようなフルフレームワークプロジェクトで補完が効かなくなる問題についての記事。&lt;/p&gt;
&lt;p&gt;原因は C# 拡張の OmniSharp が .NET 6 で動作するようになったことで不完全な付属のミニマルな Mono と MSBuild Tools を削除となり、その結果として設定項目が変更されたことによる。(デフォルトでは .NET SDK を探しにいく)&lt;/p&gt;
&lt;p&gt;解決策は omnisharp.useModernNet を false にすることでインストールされた Mono を利用するようにする。&lt;/p&gt;
&lt;h3 id="page-navigation-in.net-maui-an-overview"&gt;Page Navigation in .NET MAUI: An Overview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/page-navigation-in-net-maui-an-overview-2bkm"&gt;https://dev.to/syncfusion/page-navigation-in-net-maui-an-overview-2bkm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で利用できる2種類のページナビゲーションの簡単な説明記事。&lt;/p&gt;
&lt;h3 id="c-cswin32win32apipinvoke-qiita"&gt;[C#] CsWin32でWin32APIのプラットフォーム呼び出し(P/Invoke)コードを自動生成 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/a4509f9a44101fb2f30e"&gt;https://qiita.com/radian-jp/items/a4509f9a44101fb2f30e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows (Win32 API) 向けの P/Invoke の呼び出しコードを生成する Source Generator の CsWin32 の使い方についての記事。&lt;/p&gt;
&lt;h3 id="securing.net-app-secrets-with-aws-secrets-manager"&gt;Securing .NET App Secrets with AWS Secrets Manager&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/aws-builders/securing-net-app-secrets-with-aws-secrets-manager-2f4h"&gt;https://dev.to/aws-builders/securing-net-app-secrets-with-aws-secrets-manager-2f4h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションから AWS Secrets Manager にアクセスしてシークレットを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="improved-doc-management-personalization"&gt;Improved doc management personalization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/doc-management-personalization/"&gt;https://devblogs.microsoft.com/visualstudio/doc-management-personalization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で強化されたドキュメント(タブ)管理について紹介する記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タブの複数行配置&lt;/li&gt;
&lt;li&gt;非表示ドキュメント名の斜体表示&lt;/li&gt;
&lt;li&gt;変更済みインジケーターのアクセシビリティの向上&lt;/li&gt;
&lt;li&gt;閉じたタブの復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="next.js-meets-asp.net-core-a-story-of-performance-and-love-at-long-tail"&gt;Next.js meets ASP .NET Core — a story of performance and love at long tail&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;david.nissimoff/next-js-meets-asp-net-core-a-story-of-performance-and-love-at-long-tail-41cf9231b2de"&gt;https://medium.com/&amp;#64;david.nissimoff/next-js-meets-asp-net-core-a-story-of-performance-and-love-at-long-tail-41cf9231b2de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core サーバーで Next.js の静的生成 (SSG) ページをホストするという試みについての記事。&lt;/p&gt;
&lt;h3 id="surprising-ways-to-profile-your.net-applications-the.net-tools-blog"&gt;Surprising Ways To Profile Your .NET Applications | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/31/surprising-ways-to-profile-your-net-applications/"&gt;https://blog.jetbrains.com/dotnet/2022/05/31/surprising-ways-to-profile-your-net-applications/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotTrace, dotMemory を使用してのプロファイリングは IDE やビルドパイプライン、ユニットテストやリモート環境といった様々な環境で行えることを紹介する記事。&lt;/p&gt;
&lt;h3 id="understanding-pathbase-in-asp.net-core"&gt;Understanding PathBase in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-pathbase-in-aspnetcore/"&gt;https://andrewlock.net/understanding-pathbase-in-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の HttpContext にある PathBase プロパティーがどういうものかを説明している記事。&lt;/p&gt;
&lt;p&gt;PathBase はリクエストのプレフィックスとなるパスを表すもので、リバースプロキシーの裏側にいる場合などに役立つ。&lt;/p&gt;
&lt;h3 id="unusual-optimizations-ref-foreach-and-ref-returns"&gt;Unusual optimizations; ref foreach and ref returns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.marcgravell.com/2022/05/unusual-optimizations-ref-foreach-and.html"&gt;https://blog.marcgravell.com/2022/05/unusual-optimizations-ref-foreach-and.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;foreach で ref を使い、構造体のコピーを減らすことでパフォーマンスを向上させるテクニックについての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; は対象が構造体の列挙の場合、値を取り出すことがコピーとなるためパフォーマンスに影響が出る可能性がある。&lt;/p&gt;
&lt;p&gt;例として配列の要素に対するメソッド呼び出しには &lt;code&gt;foreach&lt;/code&gt; を使った場合は「配列からインデックスで値を取り出す」「ローカル変数に保存する」「ローカル変数のアドレスを取得する」の3ステップが必要となる一方、 &lt;code&gt;for&lt;/code&gt; の場合は「インデックスで値のアドレスを取り出す」だけでコピーが発生しない IL へとコンパイルされる。(ちなみに SharpLab で JIT 結果を見ると同じ結果になっているように見えるので単純なコードの場合差がない可能性がある)&lt;/p&gt;
&lt;p&gt;配列以外で似たようなことをするにはどうすればよいのかというところで &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;foreach (ref ...)&lt;/code&gt; を使用する方法があるとしている。リストであれば &lt;code&gt;foreach (ref var tmp in CollectionsMarshal.AsSpan(list)) { ... }&lt;/code&gt; のようにすることでコンパイラーと JIT での最適化で配列での &lt;code&gt;for&lt;/code&gt; と同じようなコピーしない操作結果を得られる。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; を使用できないとしても &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; などと同様に Enumerator.Current で &lt;code&gt;ref return&lt;/code&gt; するカスタム Enumerator を実装することもできる。&lt;/p&gt;
&lt;h3 id="may-26-2022.net-data-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;May 26, 2022 - .NET Data Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 関連の隔週のアップデート情報。5月26日分。&lt;/p&gt;
&lt;p&gt;コミュニティスタンドアップの紹介や EF Core 7 の実装状況などについて触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="vol.78-web-shell-mag"&gt;シェルスクリプトマガジンvol.78 Web掲載記事まとめ | shell-mag&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://shell-mag.com/vol-78-web/"&gt;https://shell-mag.com/vol-78-web/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 特集が組まれている。&lt;/p&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/runfaster2000/status/1531743163190128640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Cool ... The MCR domain now does something useful. &lt;a href="https://t.co/UyELAGuv4E"&gt;https://t.co/UyELAGuv4E&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rich Lander (&amp;#64;runfaster2000) &lt;a href="https://twitter.com/runfaster2000/status/1531743163190128640?ref_src=twsrc%5Etfw"&gt;May 31, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft の公式コンテナーレジストリーのカタログページがあるので、.NET のイメージも探せるという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/26/updates</id>
		<title>2022-05-26: .NET MAUI GA, Visual Studio 2022 for Mac</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/26/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-26T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="introducing.net-maui-one-codebase-many-platforms"&gt;Introducing .NET MAUI - One Codebase, Many Platforms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/"&gt;https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クロスプラットフォーム開発フレームワークの .NET MAUI が一般提供となった。&lt;/p&gt;
&lt;p&gt;現時点では開発ツーリングとして Visual Studio 2022 の Preview が必要となる (ツーリングの GA は今年の後半予定)。&lt;/p&gt;
&lt;p&gt;記事ではネイティブ UI の各種対応(アクセシビリティやクロスプラットフォームな操作、カスタマイズなど)、モダンな開発者プロダクティビティ (新しいテンプレートやプロジェクト構成)、Blazor Hybird、パフォーマンスの最適化といったものを紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-is-now-available"&gt;Visual Studio 2022 for Mac is now available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac v17.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 では. NET 6 での開発サポートをはじめ、IDE の macOS ネイティブ UI 化や Apple SIlicon (ARM64) ネイティブでの動作の対応が行われている。&lt;/p&gt;
&lt;p&gt;また、同時に Preview 版となる 17.3 もリリースされ、.NET 7 プレビューと GA となった .NET MAUI 開発がサポートされている。&lt;/p&gt;
&lt;h3 id="create-next-generation-experiences-at-scale-with-windows-windows-developer-blog"&gt;Create Next Generation Experiences at Scale with Windows - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/"&gt;https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Build 2022 での Windows 向けの開発についてのアナウンス。&lt;/p&gt;
&lt;p&gt;WinUI 3 プラットフォームをベースとした Windows App SDK 1.1 のプレビュー版の提供や新しい API、Template Studio for WinUI と移行ツールの更新、.NET MAUI のリリースなど。&lt;/p&gt;
&lt;p&gt;その他、Microsoft Store では Win32 アプリケーションの配布に待ちリストへの登録が不要になったことや、ARM デバイスの開発を進めるための開発向けデバイスの Project Volterra や Visual Studio の ARM 版の提供予定などが発表されている。&lt;/p&gt;
&lt;h3 id="grpc-support-on-azure-app-service"&gt;gRPC support on Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html"&gt;https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service for Linux にて .NET Core 3.1 と .NET 6 で gRPC のサポートがプライベートプレビューの Early Updates Access Program で提供開始のアナウンス。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1528776801924698112 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;We are pleased to announce that gRPC is now available and supported on Azure App Service for Linux workloads. This was made possible by recent platform upgrades to the HTTP reverse proxy layer to leverage YARP and Kestrel.&amp;quot; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/imT7GHb2f5"&gt;https://t.co/imT7GHb2f5&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1528776801924698112?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="introducing-the-private-preview-of-port-tunneling-in-visual-studio-for-asp.net-core-projects"&gt;Introducing the private preview of port tunneling in Visual Studio for ASP.NET Core projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1.1 で ASP.NET Core の Web プロジェクトへのポートトンネリング機能 (プレビュー) が追加されたことについてのアナウンス。&lt;/p&gt;
&lt;p&gt;これはコールバックや Webhooks 、Power Platform のような外部からアクセスする必要があるアプリケーションを開発する際にインターネット側からアクセス可能にするトンネルを提供するものとなる。(類似のものでよく知られているものとしては ngrok がある)&lt;/p&gt;
&lt;p&gt;プライベートプレビューにサインインし、Preview 版でプレビュー機能を有効にし、launchSettings.json で指定することで Visual Studio からシームレスにトンネルを作成できるとのこと。&lt;/p&gt;
&lt;h3 id="uno-platform-4.3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more"&gt;Uno Platform 4.3 - Figma Plugin, Uno Extensions, Material Design 3 Support, New Sample App and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/"&gt;https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Figma プラグインと Material Design 3 テーマサポート、Uno Extensions、.NET 6 モバイル RTM のサポートなどが行われている。&lt;/p&gt;
&lt;h3 id="the-journey-of-moving-from-cwinrt-to-c-in-the-microsoft-store"&gt;The journey of moving from C++/WinRT to C# in the Microsoft Store&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/"&gt;https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションを C++/WinRT から C# へと移行したことについての記事。&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションは HoloLens や Surface Hub をターゲットとしている都合 UWP アプリケーションであり .NET Native (特殊な AOT) でビルドされているという事情があることで、パッケージマネージャーの WinRT API との相互運用にいくつかのハードルがありそれを乗り越える必要があったことが説明されている。&lt;/p&gt;
&lt;h3 id="the-stack-overflow-journey-to.net-6"&gt;The Stack Overflow journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/"&gt;https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 へ移行したことについての記事。&lt;/p&gt;
&lt;p&gt;3つの製品の共通コードベースがあること、本番環境へのデプロイまでの流れ、EF Core 2.2 から Entity Framework 5 へのアップグレード、.NET 6 への移行で発生した問題の対応、コネクションプールの問題(のように見えたもの)、移行の結果について書かれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="provide-default-configuration-to-your.net-applications"&gt;Provide default configuration to your .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications"&gt;https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; を使って、.NET アプリケーションの設定にデフォルト値を持たせる方法についての記事。&lt;/p&gt;
&lt;h3 id="temporary-breakpoint-new-feature-in-visual-studio-2022"&gt;Temporary breakpoint – New feature in Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/"&gt;https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一度だけブレークして消える、一時的なブレークポイント (Temporary Breakpoint) の紹介記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-1"&gt;ASP.NET Core MVC で 1 ページに複数個のフォームを置きたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page"&gt;https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のビューに複数のフォームを配置し、それぞれで送信とバリデーションを行いつつ、両方のデータを保持する方法についての記事。&lt;/p&gt;
&lt;h3 id="asp.net"&gt;ASP.NET でのパスワード格納&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/6ef107ad173f39"&gt;https://zenn.dev/masakura/articles/6ef107ad173f39&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET/ASP.NET Core 標準のユーザーパスワード格納時のハッシュ化処理で、アルゴリズムやストレッチングなどどのような手法がとられているかについての記事。&lt;/p&gt;
&lt;h3 id="investigating-the-performance-benefits-of-ef-core-6.0-compiled-models-feature"&gt;Investigating the performance benefits of EF Core 6.0 compiled models feature&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e"&gt;https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6.0 のコンパイル済みモデルによる起動パフォーマンス向上についての記事。&lt;/p&gt;
&lt;p&gt;実際にプロジェクトで試してみたところ初回のインスタンス作成時間が4倍程度短縮されたとのこと。&lt;/p&gt;
&lt;h3 id="direct2dsvg"&gt;Direct2DでSVGファイルを画像化する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/udaken/articles/svg-rendering-with-direct2d"&gt;https://zenn.dev/udaken/articles/svg-rendering-with-direct2d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P/Invoke で Direct2D を呼び出し、SVG のサブセットを描画する方法についての記事。&lt;/p&gt;
&lt;h3 id="breaking-change-actionresultt-set-statuscode-to-200-issue-485-aspnetannouncements"&gt;[Breaking change]: ActionResult&amp;lt;T&amp;gt; set StatusCode to 200 · Issue #485 · aspnet/Announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/485"&gt;https://github.com/aspnet/Announcements/issues/485&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 以前の ASP.NET Core では &lt;code&gt;ActionResult&amp;lt;T&amp;gt;&lt;/code&gt; を返した場合、 Response.StatusCode が尊重されていたが常に 200 が返るようになったという破壊的変更のアナウンス。&lt;/p&gt;
&lt;h3 id="macos-environment-setup-for-maui-development-the.net-tools-blog"&gt;macOS Environment Setup For MAUI Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/"&gt;https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 EAP でサポートされた .NET MAUI の開発を macOS 環境上で行うためのセットアップについての記事。&lt;/p&gt;
&lt;h3 id="extending-visual-studio-codelens-functionality"&gt;Extending Visual Studio CodeLens Functionality&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f"&gt;https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の CodeLens を拡張して独自の CodeLens Provider を実装する方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master/CodeLensOopSample"&gt;VSSDK-Extensibility-Samples/CodeLensOopSample at master · microsoft/VSSDK-Extensibility-Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exploring-the-f-frontend-landscape"&gt;Exploring The F# Frontend Landscape&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa"&gt;https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# でのフロントエンド開発のフレームワークを紹介している記事。&lt;/p&gt;
&lt;h3 id="how-we-used-dotmemory-to-optimize-dotmemory-the.net-tools-blog"&gt;How We Used dotMemory to Optimize dotMemory | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/"&gt;https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotMemory のドミネーターツリーのパフォーマンスを dotMemory と dotTrace で改善したドッグフーディングの記事。&lt;/p&gt;
&lt;p&gt;当初、しばらく実行すると物理メモリーを使い果たして動かなくなってしまうほどであったが、ドミネーターツリーの構築アルゴリズムの変更やデータ構造の変更といったことを行った結果現実的な時間とメモリー使用量になったとのこと。&lt;/p&gt;
&lt;h3 id="bringing-webassembly-to-the.net-mainstream-steve-sanderson-microsoft-youtube"&gt;Bringing WebAssembly to the .NET Mainstream - Steve Sanderson, Microsoft - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PIeYw7kJUIg"&gt;https://www.youtube.com/watch?v=PIeYw7kJUIg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アセンブリを WebAssembly で動かすということについてのプレゼンテーション。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは Blazor WebAssembly ではなく、WASI を使用した .NET アプリケーションの WebAssembly 化の可能性についてを話している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk"&gt;SteveSandersonMS/dotnet-wasi-sdk: Packages for building .NET projects as standalone WASI-compliant modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpgrpcwebsocketbridge-yet-another-grpc-over-http1-using-websocket-implementation-primarily-targets.net-platform"&gt;Cysharp/GrpcWebSocketBridge: Yet Another gRPC over HTTP/1 using WebSocket implementation, primarily targets .NET platform.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/GrpcWebSocketBridge"&gt;https://github.com/Cysharp/GrpcWebSocketBridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC のトランスポートとして HTTP/2 の代わりに WebSocket を利用することで Unity WebGL や Blazor WebAssembly から gRPC (Unary/Streaming) を利用できるようにする ASP.NET Core と .NET クライアント向けのブリッジライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1528883407337295874?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We just released a new version of WinDbg Preview! Lots of new stuff to talk about, but most excitingly it&amp;#39;s on .NET 6! If you&amp;#39;re running on ARM64, you&amp;#39;ll definitely love the perf improvements we got from moving to .NET 6&lt;a href="https://t.co/8mjsz8Czwy"&gt;https://t.co/8mjsz8Czwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1528883407337295874?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview の新バージョンで .NET 6 へと移行して ARM64 で動くようになった話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="extended-nameof-parameter-scope-by-billwagner-pull-request-29549-dotnetdocs"&gt;Extended nameof parameter scope by BillWagner · Pull Request #29549 · dotnet/docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/docs/pull/29549"&gt;https://github.com/dotnet/docs/pull/29549&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nameof&lt;/code&gt; が使える範囲が C# 11 で広がるのでそのドキュメント更新の PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/19/updates</id>
		<title>2022-05-19: Unity and .NET, Azure Cosmos DB Journey to .NET 6, Regular Expression Improvements in .NET 7</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/19/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-19T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="unity-and.net-whats-next-unity-blog"&gt;Unity and .NET, what’s next? | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/unity-and-net-whats-next"&gt;https://blog.unity.com/technology/unity-and-net-whats-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の .NET に関する今後の方針についての解説記事。&lt;/p&gt;
&lt;p&gt;Unity は現在までに Mono のアップデートなどを経て C# の言語サポートの向上などを行ってきたが、一方で .NET エコシステム自体も進化し NuGet や最新のランタイムやツールといったものを Unity と共に利用したいというニーズが高まっていること。今後 Unity は .NET SDK やランタイム、MSBuild といったものを活用できるよう Mono から CoreCLR へと移行していく。&lt;/p&gt;
&lt;p&gt;ランタイムの移行についてはまずデスクトップのスタンドアローンプレイヤーで CoreCLR サポートを行う (2023年中)、その後 2024年に Unity Editor を CoreCLR へと移植し .NET 7/8 の API アクセスが可能となるようにする。&lt;/p&gt;
&lt;p&gt;その他、現在進行中のモダナイズとして async/await のサポートの改善や &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; によるメモリーの割り当てとコピーの改善といったことを進めているとのこと。&lt;/p&gt;
&lt;h3 id="the-azure-cosmos-db-journey-to.net-6.net-blog"&gt;The Azure Cosmos DB Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/"&gt;https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Cosmos DB を .NET 6 へ移行したという事例紹介記事。&lt;/p&gt;
&lt;p&gt;API ゲートウェイでは .NET のアップグレードを経て、継続的にパフォーマンス改善の恩恵を受けていたこと、ゲートウェイを HttpListener (HTTP.sys) から Kestrel へ移行することでスループットを大幅に改善したことなど。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Span&lt;/code&gt; をはじめとした新しい API によりオーバーヘッドの削減とガベージコレクションの軽減、&lt;code&gt;ConcurrentDictionary&lt;/code&gt; の &lt;code&gt;GetOrUpdate&lt;/code&gt; メソッドのコンテキスト利用などでのアロケーションオーバーヘッドの軽減といった効果により、.NET Framework から .NET Core へ移行した結果、待機時間が5倍改善された顧客もいた。&lt;/p&gt;
&lt;p&gt;複数の NUMA ノードを持つ強力な VM で稼働するプロセスの動作を最適化するため、プロセスを特定の NUMA ノードに関連付けるプロセッサーアフィニティーを設定したこと、非同期コードの処理が改善されたことで .NET のアップグレードで性能が向上したことなども触れている。&lt;/p&gt;
&lt;h3 id="regular-expression-improvements-in.net-7.net-blog"&gt;Regular Expression Improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での正規表現の改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 7 で強化される様々な機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バックトラッキング (&lt;code&gt;RegexOptions.NonBacktracking&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;DFA エンジン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringSyntaxAttribute.Regex&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 上での文字列内での IntelliSense やシンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大文字小文字を区別しないマッチング (&lt;code&gt;RegexOptions.IgnoreCase&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ソースジェネレーション
&lt;ul&gt;
&lt;li&gt;Source Generator によるマッチングの生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Span
&lt;ul&gt;
&lt;li&gt;Span を受け入れる API とそれを利用したマッチの列挙など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベクトル化
&lt;ul&gt;
&lt;li&gt;Boyer-Moore アルゴリズムからの変更など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自動アトミック化とバックトラッキング&lt;/li&gt;
&lt;li&gt;文字クラス(セット)最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-grpc-json-transcoding-for.net.net-blog"&gt;Announcing gRPC JSON transcoding for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC JSON トランスコーディングについてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET 7 で gRPC サービスを JSON の RESTful API として表現するトランスコーディングの仕組みが提供される。&lt;/p&gt;
&lt;p&gt;JSON トランスコーディングは grpc-web と異なり、ASP.NET Core の内部で Protobuf と JSON を相互変換し gRPC サービスの呼び出しに変換するため、ブラウザー側に特別なクライアントが不要となり一般的な JSON を受け付ける RESTful API のように使用できる。&lt;/p&gt;
&lt;h3 id="rider-2022.2-roadmap-the.net-tools-blog"&gt;Rider 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトごとの設定の新しい既定値&lt;/li&gt;
&lt;li&gt;メインツールバーの変更&lt;/li&gt;
&lt;li&gt;MAUI 実行構成のサポートの追加&lt;/li&gt;
&lt;li&gt;Xamarin と Unity の新しいツールバー&lt;/li&gt;
&lt;li&gt;Razor ビューでの JavaScript 再フォーマット&lt;/li&gt;
&lt;li&gt;Windows での .NET Core への移行&lt;/li&gt;
&lt;li&gt;リモート開発&lt;/li&gt;
&lt;li&gt;Windows Subsystem for Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="resharper-2022.2-roadmap-the.net-tools-blog"&gt;ReSharper 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言語サポートと改善&lt;/li&gt;
&lt;li&gt;仮想コードスタイルとその他のコードフォーマッターの更新&lt;/li&gt;
&lt;li&gt;プロファイラの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rider 同様 EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="whats-new-with-ml.net-automated-ml-automl-and-tooling"&gt;What's new with ML.NET Automated ML (AutoML) and tooling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET AutoML の更新についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AutoML の更新
&lt;ul&gt;
&lt;li&gt;Experimental API&lt;/li&gt;
&lt;li&gt;検索スペースとスイープ可能な推定器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モデルビルダーと ML.NET CLI の更新
&lt;ul&gt;
&lt;li&gt;時系列予測シナリオ (プレビュー)&lt;/li&gt;
&lt;li&gt;新しいバージョンの ML.NET CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノートブックのショートカット&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、今後の予定としてディープラーニング、.NET DataFrame、MLOps といったものについても触れている。&lt;/p&gt;
&lt;h3 id="release-release-v2.46.0-grpcgrpc-dotnet"&gt;Release Release v2.46.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpd-dotnet) の 2.46.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正のほか、リゾルバーのリトライや呼び出し資格情報をクライアントファクトリーで追加するといった機能の追加が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-httpexample.comfoobar-sub-path-qiita"&gt;Blazor アプリケーションを &amp;quot;http://example.​com/foo/bar/&amp;quot; のような Sub Path に配置するために必要な実装 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94"&gt;https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly アプリケーションを特定のパス以下に配置する方法についての記事。&lt;/p&gt;
&lt;h3 id="new-features-in-c-1011-speaker-deck"&gt;New Features in C# 10/11 - Speaker Deck&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/chack411/11"&gt;https://speakerdeck.com/chack411/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10/11 での新機能についてのまとめスライド。&lt;/p&gt;
&lt;h3 id="docker-multi-architecture.net-6.0-and-opencvsharp"&gt;Docker multi-architecture, .NET 6.0 and OpenCVSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd"&gt;https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で OpenCVSharp を利用するアプリケーションをマルチアーキテクチャー (x64, arm32, aarch64) Docker コンテナーイメージにする方法についての記事。&lt;/p&gt;
&lt;h3 id="migrating-mr.gestures-from-xamarin.forms-to.net-maui-xamarin-blog"&gt;Migrating MR.Gestures from Xamarin.Forms to .NET MAUI - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/"&gt;https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MR.Gestures (商用ジェスチャーライブラリー) を Xamarin.Forms から .NET MAUI に移行したことについての記事。&lt;/p&gt;
&lt;h3 id="all-in-one-search-is-getting-slicker-visual-studio-blog"&gt;All-In-One Search Is Getting Slicker - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/"&gt;https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 でプレビューとして導入された All-In-One 検索の改善についての記事。&lt;/p&gt;
&lt;h3 id="chttps-qiita"&gt;【C#】非同期HTTPSサーバー通信アプリを作ってみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a"&gt;https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;組み込み機器などのテストのために HTTPS サーバーを自作するという記事。&lt;/p&gt;
&lt;h3 id="ienumerable-visualizer-in-visual-studio-2022.net-core-tutorials"&gt;IEnumerable Visualizer In Visual Studio 2022 - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/"&gt;https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-qiita"&gt;.NET Framework でもタダでカバレッジをとりたい！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52"&gt;https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="case-study-how-the-profilers-uncover-critical-issues-that-mimic-apps-normal-behavior-the.net-tools-blog"&gt;Case Study – How the Profilers Uncover Critical Issues That Mimic Apps’ Normal Behavior | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/"&gt;https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-use-biometric-authentication-in.net-maui-andreas-nesheim"&gt;How to use biometric authentication in .NET MAUI - Andreas Nesheim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/"&gt;https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-http-security-header"&gt;ASP.NET Core Http Security Header&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8"&gt;https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mvvm-toolkit-messenger-qiita"&gt;MVVM Toolkit の Messenger を使うときに購読解除を共通化する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3"&gt;https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-html-css"&gt;Blazor で HTML と CSS で画面作りたくないよぉ…&lt;/h3&gt;
&lt;p&gt;Blazor で利用できる UI ツールキットの紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/and-blazor-lab"&gt;Blazor で HTML と CSS で画面作りたくないよぉ… AntDesign 編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/i-dont-want-to-use-html-to-create-ui"&gt;Blazor で画面作るために HTML 使いたくないよぉ… Fluent UI 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net6guidreadonly-struct"&gt;.NET6でいつの間にかGuidがreadonly structになっていた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/c5881dccd6ae25"&gt;https://zenn.dev/nin_neko/articles/c5881dccd6ae25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で &lt;code&gt;System.Guid&lt;/code&gt; が &lt;code&gt;readonly struct&lt;/code&gt; へと変更されていたことについての記事。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-action-optimizing-database-operations"&gt;OpenTelemetry in Action: Optimizing Database Operations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377"&gt;https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;API の呼び出し中のデータベースアクセスに関する情報を OpenTelemetry で追いかけて改善する方法についての記事。&lt;/p&gt;
&lt;h3 id="automated-accessibility-testing-in-playwright.net-with-axe"&gt;Automated accessibility testing in Playwright .NET with Axe.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08"&gt;https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Playwright と Axe で .NET からアクセシビリティテストを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="telegram-bot-qiita"&gt;Telegram Botを使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d"&gt;https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Telegram.Bot を使用した Telegram のボットの作成についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnetsystemweb-adapters"&gt;dotnet/systemweb-adapters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/systemweb-adapters"&gt;https://github.com/dotnet/systemweb-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 上で .NET Framework の ASP.NET の System.Web と同様の機能を提供するアダプターライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rla4/status/1524736823645327360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Yesterday we finished the .NET 5 -&amp;gt; .NET 6 upgrade! Stack Overflow is now running on .NET 6 across all servers 🥳 &lt;br&gt;&lt;br&gt;Worth mentioning that it was a much smoother move than upgrading from .NET 3.1 -&amp;gt; .NET 5&lt;/p&gt;&amp;mdash; Roberta Arcoverde (&amp;#64;rla4) &lt;a href="https://twitter.com/rla4/status/1524736823645327360?ref_src=twsrc%5Etfw"&gt;May 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 に移行した(.NET Core 3.1 から .NET 5 よりもスムーズだった)という話。&lt;/p&gt;
&lt;!-- https://twitter.com/sinclairinat0r/status/1526034052209418245?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;👀👀 Alright Jeremy, where are you going with this?&amp;quot;&lt;br&gt;&lt;br&gt;Yo fam... &lt;br&gt;&lt;br&gt;What if I told you that I could do something like run Fiddler and have it load using the Arm64 .NET Framework Clr?!&lt;br&gt;&lt;br&gt;   Before                                               After &lt;a href="https://t.co/L1rLVPMdi8"&gt;pic.twitter.com/L1rLVPMdi8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeremy Sinclair (&amp;#64;sinclairinat0r) &lt;a href="https://twitter.com/sinclairinat0r/status/1526034052209418245?ref_src=twsrc%5Etfw"&gt;May 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt; コマンドには起動したいアーキテクチャーを指定できる &lt;code&gt;/machine&lt;/code&gt; オプションがあるので、ARM64 マシン上で AnyCPU でビルドされたアプリケーションを &lt;code&gt;/machine arm64&lt;/code&gt; で実行することで ARM64 版 .NET Framework でアプリケーションを起動できることがあるというテクニック。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-segmentedhashsett-by-sharwell-pull-request-54574-dotnetroslyn"&gt;✨ Implement SegmentedHashSet&amp;lt;T&amp;gt; by sharwell · Pull Request #54574 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/54574"&gt;https://github.com/dotnet/roslyn/pull/54574&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn の内部コレクションの話。&lt;code&gt;HashSet&lt;/code&gt; の持つバケットを &lt;code&gt;SegmentedArray&lt;/code&gt; (これは断片化された Array で Sequence のようなもの)にすることで Large Object Heap を使わないようにするという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/50156"&gt;Implement SegmentedDictionary&amp;lt;TKey, TValue&amp;gt; by sharwell · Pull Request #50156 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/12/updates</id>
		<title>2022-05-12: .NET 5 End-of-Life, Visual Studio 2022 17.2, .NET 7 Preview 4</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/12/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-12T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;2022年5月10日で .NET 5 のサポートが終了となりました&lt;/a&gt;。今後も引き続きセキュリティー更新などのサポートを受けるためには .NET 6 への移行が強く推奨されます。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-17.2-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.2 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では 17.2 について以下のようなトピックを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Link
&lt;ul&gt;
&lt;li&gt;アセンブリがソース情報を提供する場合 &lt;code&gt;Go To Implementation&lt;/code&gt; (定義に移動) でソースコードに移動できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Raw string literal
&lt;ul&gt;
&lt;li&gt;C# 11 プレビューの生の文字列リテラルのリファクタリング対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging collections
&lt;ul&gt;
&lt;li&gt;デバッグ時のコレクション (&lt;code&gt;IEnumerable&lt;/code&gt;) に対する新しいビジュアライザーの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Razor editor
&lt;ul&gt;
&lt;li&gt;region やスニペットの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Live Preview for ASP.NET Framework
&lt;ul&gt;
&lt;li&gt;ASP.NET Web Forms のライブプレビューの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Azure Development&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Git tooling
&lt;ul&gt;
&lt;li&gt;行ステージング (プレビュー機能) の対応&lt;/li&gt;
&lt;li&gt;コミットグラフに対応することによるパフォーマンス向上&lt;/li&gt;
&lt;li&gt;ブランチ切り替え時の UI 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LTS
&lt;ul&gt;
&lt;li&gt;17.2 は LTSC リリースとなり、2024年1月9日までのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17.2 がリリースされたことで Preview Channel は 17.3 をターゲットとすることとなり、そちらの Preview 1 もリリースされた。&lt;/p&gt;
&lt;h3 id="announcing.net-7-preview-4.net-blog"&gt;Announcing .NET 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;ブログでは Preview 4 について以下のようなトピックを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.Extensions の nullable アノテーション&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;li&gt;TimeStamp, DateTime, DateTimeOffset, TimeOnly へのマイクロ秒とナノ秒の追加&lt;/li&gt;
&lt;li&gt;System.Text.RegularExpresssions の強化と新 API&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Caching のメトリクスの追加&lt;/li&gt;
&lt;li&gt;Tar (アーカイブ) 操作の新 API の追加&lt;/li&gt;
&lt;li&gt;On Stack Replacement (aka OSR)
&lt;ul&gt;
&lt;li&gt;実行中のメソッドのコードを JIT 最適化されたコードに変更できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Central Package Management&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-4.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 4 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/2 パフォーマンス改善
&lt;ul&gt;
&lt;li&gt;ロックからスレッドセーフキューに変更したことで gRPC のストリーミングのスループットが大幅に向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の型付リザルト
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IResult&lt;/code&gt; の実装型が公開されたことでテスタビリティが向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の OpenAPI 強化&lt;/li&gt;
&lt;li&gt;Minimal API の結果として複数型の返却&lt;/li&gt;
&lt;li&gt;ルートグループ&lt;/li&gt;
&lt;li&gt;SignalR でのクライアントリザルト
&lt;ul&gt;
&lt;li&gt;サーバーからクライアントを呼び出して結果を受け取る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディング
&lt;ul&gt;
&lt;li&gt;gRPC を JSON の RESTful API として表現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;トップレベル ステートメントの代わりに &lt;code&gt;Program.Main&lt;/code&gt; を使用するプロジェクトテンプレートオプション&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェア&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-4.net-blog"&gt;Announcing Entity Framework 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では値生成されるプロパティーにコンバーターを割り当てることができるようになり、キーを Value Object にするといったケースがカバーしやすくなったことを紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-3.net-blog"&gt;.NET MAUI Release Candidate 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-3/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Release Candidate 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではナビゲーションの実装方法として新しく用意されている Shell を使用した方法について紹介している。&lt;/p&gt;
&lt;p&gt;なお MAUI RC3 の利用には Visual Studio 2022 version 17.3 (Preview 1) が必要となる。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-release-candidate-2-visual-studio-blog"&gt;Visual Studio 2022 for Mac Release Candidate 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate-2/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 Release Candidate 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;リリースに向けて、パフォーマンスの改善と信頼性の向上と様々な不具合の修正が行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.0.0-pre.11"&gt;Visual Studio 2022 for Mac version 17.0 Release Candidate 2 - Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wpf-community-run-projects-discussion-6556-dotnetwpf"&gt;WPF Community-run projects · Discussion #6556 · dotnet/wpf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/wpf/discussions/6556"&gt;https://github.com/dotnet/wpf/discussions/6556&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF リポジトリーでコミュニティーベースのプロジェクトを開始するというアナウンス。&lt;/p&gt;
&lt;p&gt;まずは .NET 7 に向けて Issue とバグへの対応をリアクションの多いものを優先的に行っていくとのこと。&lt;/p&gt;
&lt;h3 id="net-framework-may-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework May 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/framework-may-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/framework-may-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年5月のセキュリティー修正と累積更新がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではローカルユーザーが細工をされたファイルを開いた場合にシステムに対してサービス拒否が発生するセキュリティー問題の修正とサードパーティーの .NET アプリケーションがディレクトリーサービスを使用した際にクラッシュする問題の修正が含まれる。&lt;/p&gt;
&lt;h3 id="net-may-2022-updates.net-6.0.5.net-5.0.17-and.net-core-3.1.25.net-blog"&gt;.NET May 2022 Updates – .NET 6.0.5, .NET 5.0.17 and, .NET Core 3.1.25 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/may-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/may-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6, 5, .NET Core 3.1 の2022年5月のアップデートについてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET 6.0.5, 5.0.17 および .NET Core 3.1.25 では3つのサービス拒否のセキュリティー問題についての修正が含まれている。&lt;/p&gt;
&lt;p&gt;また、.NET 5 は2022年5月10日がサポート終了日となるため、今回が最後の更新となる。引き続きサポートを受けるには .NET 6 への移行が必要となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;.NET 5.0 will reach End of Support on May 10, 2022 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="update-all-visual-studio-installations-with-a-single-click-visual-studio-blog"&gt;Update all Visual Studio installations with a single click! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/update-all-visual-studio-installations-with-a-single-click/"&gt;https://devblogs.microsoft.com/visualstudio/update-all-visual-studio-installations-with-a-single-click/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Installer で複数の Visual Studio インストールをまとめてアップデートできる機能が付いたというアナウンス。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-blazor-razor-javascript-qiita"&gt;Visual Studio 2022 のテストエクスプローラー上で、Blazor 用 Razor クラスライブラリ中の JavaScript コードに対する単体テストを実行する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/68c07a79bca043af3f0e"&gt;https://qiita.com/jsakamoto/items/68c07a79bca043af3f0e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のテストエクスプローラーに .NET プロジェクトに含まれる JavaScript のテストを統合して実行できるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="cdictionary-yucchiys-note"&gt;C#のコレクション初期化子とインデックス初期化子、またはDictionaryの初期化について | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/05/csharp-collection-index-initializer-and-dictionary/"&gt;https://blog.yucchiy.com/2022/05/csharp-collection-index-initializer-and-dictionary/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のコレクション初期化子とインデックス初期化子についての改めて解説している記事。&lt;/p&gt;
&lt;h3 id="windows-app-sdk-1.1-preview-3-desktop-acrylic-mica"&gt;Windows App SDK 1.1 Preview 3 で追加された Desktop Acrylic と Mica のサポートを試した - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220510/1652191991"&gt;https://blog.shibayan.jp/entry/20220510/1652191991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1 Preview 3 で利用できるようになった Windows 11 の質感デザインである Mica と Acrylic を適用するのを試すという記事。&lt;/p&gt;
&lt;h3 id="testing-asp.net-core-grpc-services-in-jetbrains-rider"&gt;Testing ASP.NET Core gRPC services in JetBrains Rider&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/testing-aspnetcore-grpc-services-in-jetbrains-rider/"&gt;https://andrewlock.net/testing-aspnetcore-grpc-services-in-jetbrains-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で ASP.NET Core の gRPC サービスを呼び出してテストする方法についての記事。&lt;/p&gt;
&lt;p&gt;ユニットテストではなく Rider の組み込みクライアントでリクエストを送信するといった手法。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-action-identifying-database-dependencies"&gt;OpenTelemetry in Action: Identifying Database Dependencies&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/lightstep/opentelemetry-in-action-identifying-database-dependencies-17ml"&gt;https://dev.to/lightstep/opentelemetry-in-action-identifying-database-dependencies-17ml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry でデータベースへの依存情報を取得して、LightStep (外部サービス) へ送信するという方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="deploy.net-blazor-webassembly-application-to-aws-amplify-amazon-web-services"&gt;Deploy .NET Blazor WebAssembly Application to AWS Amplify | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/devops/deploy-net-blazor-webassembly-application-to-aws-amplify/"&gt;https://aws.amazon.com/jp/blogs/devops/deploy-net-blazor-webassembly-application-to-aws-amplify/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Blazor WebAssembly アプリケーションを AWS Amplify にデプロイする方法を紹介する記事。&lt;/p&gt;
&lt;h3 id="using-c-libraries-in-dart-by-steve-hamblett-may-2022-medium"&gt;Using C# libraries in Dart | by Steve Hamblett | May, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;stevehamblett/using-c-libraries-in-dart-ec630848d52c"&gt;https://medium.com/&amp;#64;stevehamblett/using-c-libraries-in-dart-ec630848d52c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のコードを Dart から呼び出すにはどうすればいいのかという記事。&lt;/p&gt;
&lt;p&gt;記事では NativeAOT を使用してライブラリーを生成して FFI によって呼び出す方法を紹介している。&lt;/p&gt;
&lt;h3 id="net-6-redis-qiita"&gt;[.NET 6] 認証情報を redis に保持しログアウト時に無効化する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/pi2ji79/items/6ad967a0bda1d5c52af1"&gt;https://qiita.com/pi2ji79/items/6ad967a0bda1d5c52af1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis にログイン状態を保持することでログアウト時に削除して認証情報を無効にする方法についての記事。&lt;/p&gt;
&lt;h3 id="how-to-use-pubsub-in-c.net-to-build-a-chat-app"&gt;How to use pub/sub in C# .NET to build a chat app&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marcduiker/how-to-use-pub-sub-in-c-net-to-build-a-chat-app-bfad51d38f59"&gt;https://medium.com/&amp;#64;marcduiker/how-to-use-pub-sub-in-c-net-to-build-a-chat-app-bfad51d38f59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pub/Sub メッセージングなどを提供するサービス Ably を使用してチャットアプリを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="upgrading-a-wcf-service-to.net-6-with-corewcf.net-blog"&gt;Upgrading a WCF service to .NET 6 with CoreWCF - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/upgrading-a-wcf-service-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/upgrading-a-wcf-service-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の WCF サービスを使ったアプリケーションを .NET 6 と CoreWCF に移行する手順について紹介している記事。&lt;/p&gt;
&lt;h3 id="visual-studio-on-an-ultra-wide-monitor-visual-studio-blog"&gt;Visual Studio on an ultra-wide monitor - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-on-an-ultra-wide-monitor/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-on-an-ultra-wide-monitor/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio をウルトラワイドモニターで使うときの Tips を紹介している記事。&lt;/p&gt;
&lt;h3 id="tips-for-moving-your-xamarin-library-to.net-maui-xamarin-blog"&gt;Tips for Moving Your Xamarin Library to .NET MAUI - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/tips-for-porting-your-xamarin-library-to-dotnet-maui/"&gt;https://devblogs.microsoft.com/xamarin/tips-for-porting-your-xamarin-library-to-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin ライブラリーを .NET MAUI に移行する際の Tips を紹介している記事。&lt;/p&gt;
&lt;h3 id="structure-and-organize.net-projects-with-rider-the.net-tools-blog"&gt;Structure and Organize .NET Projects with Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/11/structure-and-organize-net-projects-with-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/05/11/structure-and-organize-net-projects-with-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で .NET プロジェクト(ソリューション)の構成についてフォルダーやファイル、名前空間、&lt;code&gt;global using&lt;/code&gt; の活用といった Tips を紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nuitsjpkamishibai-kamishibai-is-a-navigation-library-for-wpf-that-supports-mvvm-pattern-on-generic-host"&gt;nuitsjp/KAMISHIBAI: KAMISHIBAI is a navigation library for WPF that supports MVVM pattern on Generic Host.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nuitsjp/KAMISHIBAI"&gt;https://github.com/nuitsjp/KAMISHIBAI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF 向けの Generic Host の上で MVVM パターンでアプリケーションを構築するためのフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/release-kamishibai-1_0_0"&gt;WPF用Generic Host対応MVVMフレームワーク「KAMISHIBAI」をリリースしました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpalternats-an-alternative-high-performance-nats-client-for.net"&gt;Cysharp/AlterNats: An alternative high performance NATS client for .NET.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/AlterNats"&gt;https://github.com/Cysharp/AlterNats&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pub/Sub 等のメッセージングをサポートする NATS サーバーのクライアントライブラリー。&lt;/p&gt;
&lt;p&gt;ゼロアロケーションと公式クライアントに比べて3倍以上のパフォーマンスを提供することが特徴。(ただし NATS/nats.net の提供する機能のフルサポートではない)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;neue cc - AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/05/updates</id>
		<title>2022-05-05: CoreWCF 1.0, MAUI RC 2, Microsoft Graph's Journey to .NET 6</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/05/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-05T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="corewcf-1.0-has-been-released-wcf-for.net-core-and.net-5"&gt;CoreWCF 1.0 has been Released, WCF for .NET Core and .NET 5+&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/corewcf-v1-released/"&gt;https://devblogs.microsoft.com/dotnet/corewcf-v1-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoreWCF 1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;CoreWCF は .NET Core と .NET 5 以降向けに WCF (Windows Communication Foundation) を移植したものとなり、SOAP、NetTCP や WSDL の互換実装を提供するコミュニティー主導のフレームワーク。&lt;/p&gt;
&lt;p&gt;CoreWCF は .NET Standard 2.0 のライブラリーとして提供され、.NET Framework と .NET Core, .NET ランタイムで動作することで .NET Framework プロジェクトなどからの移行を簡単にする。&lt;/p&gt;
&lt;p&gt;記事ではサポートしている機能と未サポートの機能についても触れている。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-2-with-100-more-tizen"&gt;.NET MAUI Release Candidate 2 - With 100% More Tizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Release Candidate 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;Tizen のサポートが追加され Samsung Tizen を搭載するモバイルやテレビといったデバイスで MAUI アプリケーションの動作が可能となる。.NET 6 をサポートする Tizen Emulator は近くリリースされるとのこと。&lt;/p&gt;
&lt;p&gt;記事ではプラットフォーム固有のソース管理(フォルダーや条件付きコンパイル)についても触れている。&lt;/p&gt;
&lt;h3 id="microsoft-graphs-journey-to.net-6"&gt;Microsoft Graph's Journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-graph-dotnet-6-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-graph-dotnet-6-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Graph のサーバーを .NET 6 に移行するまでの話。(Microsoft Graph は Microsoft 365 の様々なデータにアクセスするための API ゲートウェイ)&lt;/p&gt;
&lt;p&gt;記事では .NET 6 への道のりと移行のガイダンス、アップグレードのヒントが書かれている。&lt;/p&gt;
&lt;p&gt;.NET 6 への道のりについて。&lt;/p&gt;
&lt;p&gt;4年前は .NET Framework 4.6.2 上の ASP.NET を IIS で実行していて、現在は .NET 6 上の ASP.NET Core を Http.sys で実行している (.NET Core 3.1, .NET 5 を経て)。.NET Core 3.1 と .NET 6 では特に CPU 使用率の改善が見られた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Framework から .NET Core 3.1 で CPU 使用率が 30% 削減された (トラフィックは同量)&lt;/li&gt;
&lt;li&gt;.NET Core 3.1 から .NET 5 では大きな差はみられなかった&lt;/li&gt;
&lt;li&gt;.NET 5 から .NET 6 では CPU 使用率が 10% 削減された (トラフィックは同量)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4年前は10億リクエスト/日でコストがとても高く、現在では700億リクエスト/日の70倍となっているが10億リクエストごとの運用コストは91%削減されているとのこと。&lt;/p&gt;
&lt;p&gt;.NET Core のインパクトについては .NET Framework から .NET Core 3.1 (Kestrel + ASP.NET Core その後 Http.sys) に移行した際のスループットの改善での比較を紹介している。&lt;/p&gt;
&lt;p&gt;Standard_D3_v2 インスタンスで疑似的なトラフィックをかけた場合の RPS (リクエスト毎秒) と CPU 使用率を比較し、CPU 使用率 60% での RPS が古いスタックで約 350 RPS に対して、新しいスタックでは約 850 RPS となり、最終的に運用環境では 30% の CPU 使用率の削減が見られた。&lt;/p&gt;
&lt;p&gt;ビルドシステムのモダナイゼーションについて。.NET Core への移行するために .NET Core と互換性のないツールチェーンを使用する内部ビルドシステムを使用していたため、初めにビルドシステムをモダナイズして MSBuild と dotnet コマンドをサポートする Visual Studio ツールチェーンを使用するモダンなビルドシステムに移行した。この移行は困難だったが、ビルドの高速化や保守が簡単になるなど、生産性の向上に寄与したとしている。&lt;/p&gt;
&lt;p&gt;最後に移行することでコードベースを新しくでき、 Span や null 許容参照型 など新しい API と C# の機能による様々なメリットを得られたとしている。&lt;/p&gt;
&lt;p&gt;次に移行ガイダンスでは ASP.NET から ASP.NET Core に移行する戦略を解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1. モダナイゼーションの構築
&lt;ul&gt;
&lt;li&gt;.NET Framework と .NET Core でのビルドシステムの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 2. アーキテクチャーの準備
&lt;ul&gt;
&lt;li&gt;ここでは3つのステージに分けるアーキテクチャをあげている&lt;/li&gt;
&lt;li&gt;Stage 1. すべて .NET Framework&lt;/li&gt;
&lt;li&gt;Stage 2. アプリケーションを .NET Standard にして .NET Framework / .NET Core 両対応&lt;/li&gt;
&lt;li&gt;Stage 3. すべて .NET Core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 3. .NET Framework 依存の棚卸&lt;/li&gt;
&lt;li&gt;Step 4. プロジェクトライブラリーから .NET Framework の依存を取り除く&lt;/li&gt;
&lt;li&gt;Step 5. ブロックされることを避ける
&lt;ul&gt;
&lt;li&gt;取り除くのが難しい依存関係を解消することをあきらめない&lt;/li&gt;
&lt;li&gt;そのような状況となった場合は次のようなオプションがある
&lt;ul&gt;
&lt;li&gt;コードオーナーが .NET Standard 対応を行い、ブロックを解消するボランティアを行う&lt;/li&gt;
&lt;li&gt;コードをフォークして互換性のあるものがリリースされるまで一時的に .NET Standard としてビルドする&lt;/li&gt;
&lt;li&gt;依存関係を .NET Framework で動作するコンソールアプリケーションやバックグラウンドサービスとして切り出す&lt;/li&gt;
&lt;li&gt;最終手段として .NET Framework プロジェクトやパッケージを参照して、互換 shim で動作させる (ビルドはできるかもしれないが保証はない)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 6. ASP.NET Core の新しい Web サーバープロジェクトを作成する&lt;/li&gt;
&lt;li&gt;Step 7. A/B テストとロールアウトプラン
&lt;ul&gt;
&lt;li&gt;Stage 2 の状態で A/B テストを行う計画を作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 8. すべてのプロジェクトのターゲットを .NET Core にする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後のアップグレードのヒントでは URI エンコーディングの取り扱いが ASP.NET と ASP.NET Core で違うこと、.NET 6 で導入された Dynamic PGO によるパフォーマンス向上といったものを紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-release-candidate"&gt;Visual Studio 2022 for Mac Release Candidate&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac RC がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では改めて Visual Studio 2022 for Mac での変更点を紹介している(アクセシビリティー対応、Apple Silicon ネイティブサポート、.NET 6 対応や UI の更新など)。&lt;/p&gt;
&lt;h3 id="livesharp-goes-free-and-open-source-news-livesharp"&gt;26.04.2022 LiveSharp goes free and open source - News – LiveSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.livesharp.net/news/"&gt;https://www.livesharp.net/news/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LiveSharp が無料化しオープンソースとなった。&lt;/p&gt;
&lt;p&gt;LiveSharp は .NET 上でホットリロードを実現するツールキットで今まで有償製品として提供されてきたが、.NET 6 でホットリロードがランタイムと SDK で提供されることとなり、有償ライセンス利用者が減ったことにより LiveSharp のサポートを継続できなくなったとのこと。&lt;/p&gt;
&lt;p&gt;しかし .NET 6 のホットリロードは一部のシナリオで利用できず、そのようなケースでは LiveSharp はまだ役立つので無料とオープンソース化を行ったとしている。既存のサブスクリプションはすべてキャンセルされるとのこと。&lt;/p&gt;
&lt;h3 id="yarp-1.1-is-here-with-new-requested-reverse-proxy-features"&gt;YARP 1.1 is here with new requested reverse proxy features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/yarp-reverse-proxy-1-1-release/"&gt;https://devblogs.microsoft.com/dotnet/yarp-reverse-proxy-1-1-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP (Yet Another Reverse Proxy) 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;バージョン 1.1 での変更点は次の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ゼロバイト読み込み
&lt;ul&gt;
&lt;li&gt;WebSocket や gRPC のようなストリーミングでアイドル状態のストリームが多い場合のメモリースケーリングが改善される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数値ヘッダーマッチング
&lt;ul&gt;
&lt;li&gt;ルートのヘッダーマッチングで複数値を持つヘッダーや同名のヘッダーが複数ある場合をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3 サポート
&lt;ul&gt;
&lt;li&gt;.NET 6 の HTTP/3 をサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数の構成ソース
&lt;ul&gt;
&lt;li&gt;YARP の構成をソースコードや設定ファイルなど複数のソースから読み込み、マージすることが可能となった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Http.sys への移譲
&lt;ul&gt;
&lt;li&gt;YARP が Http.sys でホストされている場合、同マシン上で Http.sys を使用する他のプロセスにリクエストをルーティングできるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ミドルウェアのための API
&lt;ul&gt;
&lt;li&gt;クラスターやルーティングといった構成にリアルタイムでアクセスできる API を追加。これにより A/B テストやローリングアップデートのような機能を実装できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメンテーション&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-c-implementation-individual-packages-will-continue-to-be-maintained-through-v2.46.x-patches-or-moved-to-grpc-dotnet-by-jtattermusch-pull-request-29225-grpcgrpc"&gt;Remove C# implementation (individual packages will continue to be maintained through v2.46.x patches or moved to grpc-dotnet) by jtattermusch · Pull Request #29225 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/pull/29225"&gt;https://github.com/grpc/grpc/pull/29225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (C-core) リポジトリーから C# の実装 (ツールを除く) が削除された。&lt;/p&gt;
&lt;p&gt;モチベーションとしては C# 実装を削除することで C-core の大きな変更を簡素化する、gRPC の C#/.NET のサポート状況と一致させる(現在 Grpc.Core はメンテナンスモードで、grpc-dotnet が推奨実装)こととしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Grpc&lt;/code&gt;, &lt;code&gt;Grpc.Core&lt;/code&gt;, &lt;code&gt;Grpc.Core.Testing&lt;/code&gt;, &lt;code&gt;Grpc.Core.NativeDebug&lt;/code&gt;, &lt;code&gt;Grpc.Core.Xamarin&lt;/code&gt; は v1.46.x メンテナンスブランチに残され、セキュリティー修正などはそこで行われる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grpc.Core.Api&lt;/code&gt;, &lt;code&gt;Grpc.Auth&lt;/code&gt;, &lt;code&gt;Grpc.HealthCheck&lt;/code&gt;, &lt;code&gt;Grpc.Reflection&lt;/code&gt; は grpc/grpc-dotnet リポジトリーに移動する (これらは実装非依存)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grpc.Tools&lt;/code&gt; は grpc/grpc の master に残り続ける (このツールはビルドインフラストラクチャーや最新の protoc などに依存してる部分が多く、簡単ではないため現時点ではそのまま)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v1.46.0-grpcgrpc"&gt;Release Release v1.46.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.46.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.46.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC v1.46.0 (NuGet パッケージバージョンは 2.46.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;C# (C-core) ではシャットダウンされたチャンネルに対して Unary 呼び出しを行うとクラッシュする問題が修正されている。&lt;/p&gt;
&lt;h3 id="net-package-maintenance-deprecation-issue-7420-dotnetcore-github"&gt;.NET Package Maintenance (deprecation) · Issue #7420 · dotnet/core · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/issues/7420"&gt;https://github.com/dotnet/core/issues/7420&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NuGet パッケージメンテナンス (非推奨化) についてのアナウンス。&lt;/p&gt;
&lt;p&gt;原則として .NET サポートポリシーに従いサポートから外れたものが非推奨 (Deprecated) としてマークされるようになる。そのほか dnx のような古いプレビューリリースも非推奨となる。&lt;/p&gt;
&lt;p&gt;今後新しいパッケージがリリースされた場合は古いバージョンを非推奨としてマークするようになる。例えば .NET 6.0.10 がリリースされた後は 6.0.9 が非推奨としてマークされる。&lt;/p&gt;
&lt;p&gt;AspNetCore 2.2 パッケージは .NET Framework の利用もあるため特別な扱いとなる。&lt;/p&gt;
&lt;p&gt;来週からマーキングを開始したいとしていて何か問題がある場合は Issue にコメントが欲しいとしている。対象となるパッケージは &lt;a href="https://github.com/dotnet/core/blob/main/release-notes/net-package-deprecation.md"&gt;.NET Package Deprecation list&lt;/a&gt; を参照のこと。&lt;/p&gt;
&lt;h3 id="release-11.0-fluentvalidationfluentvalidation"&gt;Release 11.0 · FluentValidation/FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/FluentValidation/FluentValidation/releases/tag/11.0"&gt;https://github.com/FluentValidation/FluentValidation/releases/tag/11.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FluentValidation 11.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Core 2.1 のサポートの削除や、Sync-over-async 状況で例外をスローするようになるなど。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="opentelemetry.net"&gt;OpenTelemetry .NETの追加コード不要な計装ライブラリの最初のリリースが出たので試してみた | ドクセル&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docswell.com/s/tanaka_733/ZJNQGK-opentelemetry-dotnet-automatic-instrumentation"&gt;https://www.docswell.com/s/tanaka_733/ZJNQGK-opentelemetry-dotnet-automatic-instrumentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry.NET の追加コード不要で計測を実装するライブラリーの beta がリリースされたので使用してみるというスライド。&lt;/p&gt;
&lt;h3 id="cfcmhttp-v1-api-qiita"&gt;【C#】FCMでHTTP v1 APIを使ってプッシュメッセージ送信 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/piro_rin_piro/items/0d479b523996f475c809"&gt;https://qiita.com/piro_rin_piro/items/0d479b523996f475c809&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Firebase Cloud Messaging の HTTP v1 API を使用するという記事。&lt;/p&gt;
&lt;h3 id="path.getinvalidpathchars-path.getinvalidfilenamechars-qiita"&gt;Path.GetInvalidPathChars と Path.GetInvalidFileNameChars の違い - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/FN_Programming/items/33e73566fcd5d666a865"&gt;https://qiita.com/FN_Programming/items/33e73566fcd5d666a865&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Path.GetInvalidPathChars&lt;/code&gt; と &lt;code&gt;Path.GetInvalidFileNameChars&lt;/code&gt; の違いについての記事。&lt;/p&gt;
&lt;p&gt;例えば Windows 上では &lt;code&gt;GetInvalidPathChars&lt;/code&gt; はパスとして無効な文字なので &lt;code&gt;*&lt;/code&gt; を含まないが、&lt;code&gt;GetInvalidFileNameChars&lt;/code&gt; はファイル名なので &lt;code&gt;*&lt;/code&gt; は無効な文字として扱われている。またコメント欄では Unix 系の環境では null 文字のみがパスとして無効、ファイル名は null 文字と &lt;code&gt;/&lt;/code&gt; だけとなっていることも。&lt;/p&gt;
&lt;h3 id="asp.netcore2.26.0.pptx"&gt;2022年ASP.NETCore2.2～6.0の旅.pptx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/ssuser7f4bbb/2022aspnetcore2260pptx"&gt;https://www.slideshare.net/ssuser7f4bbb/2022aspnetcore2260pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 2.2 (ASP.NET Core + EF Core) のアプリケーションを .NET 6 に更新した話のスライド。&lt;/p&gt;
&lt;p&gt;.NET Core 2.2 → 3.1 → .NET 5 → .NET 6 へとアップグレードしていく間に出た対応を紹介している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-may-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | May 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/03/net-annotated-monthly-may-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/05/03/net-annotated-monthly-may-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の .NET 関連のまとめ2022年5月分の記事。&lt;/p&gt;
&lt;h3 id="case-study-double-performance-in-under-30-minutes"&gt;Case Study: Double performance in under 30 minutes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/case-study-double-performance-in-under-30-minutes/"&gt;https://devblogs.microsoft.com/visualstudio/case-study-double-performance-in-under-30-minutes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で展開コードを実装してプロファイルして30分で2倍のパフォーマンス改善を行えた話。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream.ReadByte&lt;/code&gt; の実装が1要素の byte 配列を確保するという実装となっていたため大量のアロケーションがあり GC が発生していたという話。&lt;/p&gt;
&lt;h3 id="system.text.jsonjsondocument-qiita"&gt;System.Text.JsonのJsonDocumentを使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TheParkSider/items/7d85f730314dfe642c91"&gt;https://qiita.com/TheParkSider/items/7d85f730314dfe642c91&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json の JsonDocument の使い方についての記事。&lt;/p&gt;
&lt;h3 id="system.text.jsonjsonnode-qiita"&gt;System.Text.JsonのJsonNodeを使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TheParkSider/items/9632c7c5cb4c5b3d9717"&gt;https://qiita.com/TheParkSider/items/9632c7c5cb4c5b3d9717&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json の JsonNode の使い方についての記事。&lt;/p&gt;
&lt;h3 id="cswin32-win32-api-com"&gt;CsWin32 で Win32 API や COM を使ったアプリケーション開発を効率化する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220501/1651339430"&gt;https://blog.shibayan.jp/entry/20220501/1651339430&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CsWin32 (Win32 API のラッパーコードを生成する Source Generator) を使用して Win32 API や COM をアプリケーションから呼び出すためのコツを紹介する記事。&lt;/p&gt;
&lt;h3 id="net-benchmarking-and-profiling-for-beginners"&gt;.NET benchmarking and profiling for beginners&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/ingeniouslysimple/net-benchmarking-and-profiling-for-beginners-62462e1e9a19"&gt;https://medium.com/ingeniouslysimple/net-benchmarking-and-profiling-for-beginners-62462e1e9a19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BenchmarkDotNet を使用したベンチマークとプロファイリングの入門についての記事。&lt;/p&gt;
&lt;h3 id="why-isnt-my-asp.net-core-app-in-docker-working"&gt;Why isn't my ASP.NET Core app in Docker working?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/why-isnt-my-aspnetcore-app-in-docker-working/"&gt;https://andrewlock.net/why-isnt-my-aspnetcore-app-in-docker-working/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションを Docker コンテナーで稼働させたときにうまく動かない問題があったことについての記事。Kestrel でバインドするアドレスが問題となっていたことについて解説している。&lt;/p&gt;
&lt;h3 id="improving-asp.net-core-before-it-ships"&gt;Improving ASP.NET Core Before It Ships 🚢&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/justeattakeaway-tech/improving-asp-net-core-before-it-ships-3e44b6f65054"&gt;https://medium.com/justeattakeaway-tech/improving-asp-net-core-before-it-ships-3e44b6f65054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で見つかった問題を特定して修正したことについての記事。&lt;/p&gt;
&lt;p&gt;.NET 6 の RC 版を展開して問題がなかったのでリリース版を展開したところデッドロックが発生し、状況証拠などから構成関連の処理(M.E.Configuration)であることを特定し、Visual Studio でコード上の原因を特定、バグ修正を行ったとのこと。(なおこの修正は .NET 6.0.3 で利用可能)&lt;/p&gt;
&lt;h3 id="generating-sortable-guids-using-newid"&gt;Generating sortable Guids using NewId&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/generating-sortable-guids-using-newid/"&gt;https://andrewlock.net/generating-sortable-guids-using-newid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GUID の代わりに使用できる Snowflake アルゴリズムを使用した NewId パッケージの解説の記事。&lt;/p&gt;
&lt;h3 id="evil-monkeypatching-in-c-with-rosyln-source-generators"&gt;Evil Monkeypatching in C# with Rosyln Source Generators&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/martinjt/evil-monkeypatching-in-c-with-rosyln-source-generators-4g6f"&gt;https://dev.to/martinjt/evil-monkeypatching-in-c-with-rosyln-source-generators-4g6f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator で &lt;code&gt;global using&lt;/code&gt; を吐き出すことでモンキーパッチ(コード上で指しているものを上書き)するという手法についての記事。&lt;/p&gt;
&lt;h3 id="detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request"&gt;Detect Breaking Changes in your GraphQL Schema automatically for Each Pull Request&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;TimHolzherr/detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request-77bbe261feef"&gt;https://medium.com/&amp;#64;TimHolzherr/detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request-77bbe261feef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines で Pull request を作った際に GraphQL スキーマの破壊的変更を検出する手法についての記事。&lt;/p&gt;
&lt;h3 id="use-the-query-string-to-pass-an-array-of-selected-values-between-blazor-pages"&gt;Use the Query String to pass an array of selected values between Blazor Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jonhilton.net/blazor-deep-linking/"&gt;https://jonhilton.net/blazor-deep-linking/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のページ間で選択した値の配列をクエリーストリングを使用して渡す方法についての記事。&lt;/p&gt;
&lt;h3 id="quickly-map-your-nuget-packages-to-sources"&gt;Quickly Map Your NuGet Packages to Sources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/"&gt;https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet のパッケージソースマッピング (パッケージごとにどの NuGet サーバーを使うかの設定) を生成する PackageSourceMapper を紹介する記事。&lt;/p&gt;
&lt;h3 id="looking-for-a-way-to-initialize-ioptionst-manually"&gt;Looking for a way to initialize IOptions&amp;lt;T&amp;gt; manually?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mahesh-more.medium.com/looking-for-a-way-to-initialize-ioptions-t-manually-4df4ca97b2b0"&gt;https://mahesh-more.medium.com/looking-for-a-way-to-initialize-ioptions-t-manually-4df4ca97b2b0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IOption&amp;lt;T&amp;gt;&lt;/code&gt; のインスタンスをユニットテストなどで簡単に作るにはどうするのかという記事。&lt;code&gt;Options.Create&lt;/code&gt; というヘルパーがあるのでそれを使用する。&lt;/p&gt;
&lt;h3 id="null-c-c"&gt;引数 null チェックの !!、取りやめ | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/5/double-bang-removed/"&gt;https://ufcpp.net/blog/2022/5/double-bang-removed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引数で null を受け入れないことを明示し、渡された場合に &lt;code&gt;NullReferenceException&lt;/code&gt; をスローするという &lt;code&gt;!!&lt;/code&gt; という文法がプレビューで導入されたが、フィードバックの結果差し戻しとなった件についての記事。&lt;/p&gt;
&lt;h3 id="windows-property-system-c"&gt;Windows Property System を使って C# から曲情報を取得する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220504/1651658855"&gt;https://blog.shibayan.jp/entry/20220504/1651658855&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows が持つ Windows Property System と呼ばれるファイルのメタデータを取得・変更できる機能を使用して音楽の曲情報を取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11.0-c-c"&gt;C# 11.0 の新機能 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/cheatsheet/ap_ver11/"&gt;https://ufcpp.net/study/csharp/cheatsheet/ap_ver11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 での新機能について紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-azure-samplesorleans-cluster-on-azure-app-service-sample-application-demonstrating-a-multiple-silo-orleans-cluster-running-in-azure-app-service"&gt;GitHub - Azure-Samples/Orleans-Cluster-on-Azure-App-Service: Sample application demonstrating a multiple-silo Orleans cluster running in Azure App Service.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Azure-Samples/Orleans-Cluster-on-Azure-App-Service"&gt;https://github.com/Azure-Samples/Orleans-Cluster-on-Azure-App-Service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で動作する Orleans のクラスターのサンプルコード。&lt;/p&gt;
&lt;h3 id="github-ievangelistblazorators-this-project-converts-typescript-type-declarations-into-c-representations-and-use-c-source-generators-to-expose-automatic-javascript-interop-functionality"&gt;GitHub - IEvangelist/blazorators: This project converts TypeScript type declarations into C# representations, and use C# source generators to expose automatic JavaScript interop functionality.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IEvangelist/blazorators"&gt;https://github.com/IEvangelist/blazorators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TypeScript の型定義から Blazor の JavaScript 相互運用のための C# コードを生成する Source Generator。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="htmx-for-asp.net-core-developers.net-guide"&gt;HTMX for ASP.NET Core Developers - .NET Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/dotnet/guide/tutorials/htmx-aspnetcore/"&gt;https://www.jetbrains.com/dotnet/guide/tutorials/htmx-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で HTMX を使うチュートリアル。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/27/htmx-for-asp-net-core-developers-tutorial/"&gt;HTMX for ASP.NET Core Developers – Tutorial | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="diagnostics-tools-overview.net-core"&gt;Diagnostics tools overview - .NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/"&gt;https://docs.microsoft.com/en-us/dotnet/core/diagnostics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core/.NET で使用できる診断ツールについてのドキュメント。&lt;/p&gt;
&lt;h3 id="blazor-ecec.net6-nekojoker-booth"&gt;猫でもわかるBlazor ECサイト編〜誰でもかんたんにECサイトを作る！〜（.NET6対応） - nekojoker - BOOTH&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nekojoker.booth.pm/items/3813171"&gt;https://nekojoker.booth.pm/items/3813171&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で EC サイトを実装することについてのまとめた本。Azure Active Directory B2C を使用しての認証、Stripe での決済などにも触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nekojoker/articles/f0b80c407209dc"&gt;【Blazor】約300ページにわたる技術書をひとりで執筆した話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1520966312817664000?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One of the patterns that has emerged when doing high performance byte/char manipulation in .NET since the inception of Span is using stack allocated or pooled memory for synchronous operations. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/nUNnRtDfy5"&gt;pic.twitter.com/nUNnRtDfy5&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1520966312817664000?ref_src=twsrc%5Etfw"&gt;May 2, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;stackalloc&lt;/code&gt; と &lt;code&gt;ArrayPool&lt;/code&gt; を使った定型パターン。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="update-sdk-and-use-u8-string-literals-by-brennanconroy-pull-request-41449-dotnetaspnetcore"&gt;Update SDK and use 'u8' string literals by BrennanConroy · Pull Request #41449 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41449"&gt;https://github.com/dotnet/aspnetcore/pull/41449&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の中で使用されている UTF-8 文字列 (バイト配列)を &lt;code&gt;u8&lt;/code&gt; サフィックスによる UTF-8 文字列に変更する PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/04/26/updates</id>
		<title>2022-04-26: C# on Oracle Functions, ReSharper/Rider 2022.1, grpc-dotnet 2.45</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/04/26/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-04-26T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="support-for-c-oracle-cloud-infrastructure-release-notes"&gt;Support for C# - Oracle Cloud Infrastructure Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/"&gt;https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oracle Functions のサポート言語として C# が追加され、C# での開発が行えるようになった。&lt;/p&gt;
&lt;p&gt;言語サポートのページによればランタイムは現時点で .NET Core 3.1 のみがサポートされているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/en-us/iaas/Content/Functions/Tasks/languagessupportedbyfunctions.htm"&gt;Languages Supported by Oracle Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/22/oracle-cloud-functions.aspx"&gt;Oracle Cloud Functions Now Supports C# -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rider-2022.1-comes-with-full-unreal-engine-support-and-remote-development-the.net-tools-blog"&gt;Rider 2022.1 Comes With Full Unreal Engine Support and Remote Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事で紹介されている新機能、改善は次のようなものがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unreal Engine と Unity でのゲーム開発の統合
&lt;ul&gt;
&lt;li&gt;Unity プロジェクトの読み込み時間の改善&lt;/li&gt;
&lt;li&gt;.asmref/.asmdef といったアセンブリ参照/定義ファイルのサポートの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リモート開発 (Beta)
&lt;ul&gt;
&lt;li&gt;JetBrains Gateway でのリモート開発に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;新しいツールバーのカスタマイズ&lt;/li&gt;
&lt;li&gt;Docker および docker-compose の高速モード&lt;/li&gt;
&lt;li&gt;&amp;quot;Search Everywhere&amp;quot; での全文検索&lt;/li&gt;
&lt;li&gt;C# 10 のサポート: &lt;code&gt;global using&lt;/code&gt; へのリファクタリングの対応など&lt;/li&gt;
&lt;li&gt;.NET 6 の新しい属性のサポート: &lt;code&gt;EditorRequired&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新しい通知ツールウィンドウ&lt;/li&gt;
&lt;li&gt;新しいズームウィジェット&lt;/li&gt;
&lt;li&gt;.NET と .NET Core プロジェクトへの Web 参照の追加機能&lt;/li&gt;
&lt;li&gt;バージョンコントロール: Preview Diff アイコンをツールバーから歯車メニューに移動し Show Diff Preview on Single Click にリネーム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他細かい新機能や改善は別ページにまとまっているので参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/rider/whatsnew/"&gt;What’s New in Rider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.1-released-the.net-tools-blog"&gt;ReSharper 2022.1 Released | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のサポートの向上
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;global using&lt;/code&gt; に関連するリファクタリングの追加&lt;/li&gt;
&lt;li&gt;null 許容参照型のサポート強化&lt;/li&gt;
&lt;li&gt;C# 11 のジェネリック属性の実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;機能
&lt;ul&gt;
&lt;li&gt;Endpoints として ASP.NET Core の Minimal API と規約ベースのルーティングをサポート&lt;/li&gt;
&lt;li&gt;Razor と Blazor では Razor 内でのローカル関数サポートやナビゲーションの追加&lt;/li&gt;
&lt;li&gt;フォーマッティングのアクションの整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtrack.jetbrains.com/issue/RSRP-480863"&gt;Out-of-Process 対応の進捗と詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デコンパイラー
&lt;ul&gt;
&lt;li&gt;XML ドキュメントコメントのプラットフォームアセンブリなどのサポート&lt;/li&gt;
&lt;li&gt;Assembly Explorer での転送された型 (forwarded types) のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;/li&gt;
&lt;li&gt;ReSharper C++
&lt;ul&gt;
&lt;li&gt;Unreal Engine のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotTrace, dotCover, dotMemory
&lt;ul&gt;
&lt;li&gt;dotTrace での SQL Server イベントのサポート (Windows 上での .NET Core または .NET 5 以降)&lt;/li&gt;
&lt;li&gt;ドラッグアンドドロップでのアタッチ&lt;/li&gt;
&lt;li&gt;dotCovert での &amp;quot;not coverable&amp;quot; としてコードをマークできるように&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/dottrace-dotmemory-dotcover-dotpeek-2022-1/"&gt;The 2022.1 Release of dotTrace, dotMemory, dotCover, and dotPeek! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.45.0-grpcgrpc-dotnet"&gt;Release Release v2.45.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) の 2.45.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WriteAsync&lt;/code&gt; メソッドで &lt;code&gt;CancellationToken&lt;/code&gt; がサポート、再接続バックオフの構成といった改善のほか、いくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-diagnostics-release-v6.0.320703-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.320703 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断ツール v6.0.320703 がリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="the-future-of.net-and-unity-unity-at-gdc-2022"&gt;The future of .NET and Unity | Unity at GDC 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=6UiKtnDQeEg"&gt;https://m.youtube.com/watch?v=6UiKtnDQeEg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GDC 2022 における Unity の .NET ランタイムとエコシステムに関する今後についてのセッション。&lt;/p&gt;
&lt;p&gt;セッションでは MSBuild/SDK-style プロジェクトについてや、CoreCLR への移行について、Unity での async/await 対応についてといった点に触れている。&lt;/p&gt;
&lt;h3 id="using-c-and-auto-ml-in-ml.net-to-predict-video-game-ratings"&gt;Using C# and Auto ML in ML .NET to Predict Video Game Ratings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j"&gt;https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET/Auto ML と C# を使用してゲームの ESRB レーティングラベル予測するものを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="view.net-collections-with-the-new-ienumerable-debugger-visualizer"&gt;View .NET collections with the new IEnumerable Debugger Visualizer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/"&gt;https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 2 で強化された、デバッグ時に IEnumerable をビジュアライズする機能についての記事。&lt;/p&gt;
&lt;p&gt;記事ではプロパティーの展開、複数の IEnumerable の実装の切り替え、ソートとエクスポートといった機能について触れている。&lt;/p&gt;
&lt;h3 id="alternative-to-blazor-wisej-3-ships-visual-studio-magazine"&gt;'Alternative to Blazor' Wisej 3 Ships -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx"&gt;https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET 上に構築された C# ベースで Web アプリケーションを構築する有償フレームワーク Wisej 3 がリリースされたことについての記事。&lt;/p&gt;
&lt;p&gt;Wisej 3 は C# のみでインタラクティブな Web アプリケーションを構築できるという意味で Blazor の代替に近い位置づけとなるフレームワーク。なお、Wisej 3 は .NET Framework 4.8 と .NET 6 で利用できるマルチターゲットなフレームワークとしてリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wisej.com/blog/wisej-net-3-released-for-net-framework-4-8-and-net-6/"&gt;Wisej.NET 3 released for .NET Framework 4.8 and .NET 6 – Wisej.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wisej.com/"&gt;Wisej.com – Rapid .NET Web Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blazor-editform-reactiveproperty"&gt;Blazor の EditForm で ReactiveProperty を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/reactiveproperty-editform"&gt;https://zenn.dev/okazuki/articles/reactiveproperty-editform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の EditForm の入力値検証で ReactiveProperty を使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="use-browser-dev-tools-with-blazor-hybrid"&gt;Use browser dev tools with Blazor Hybrid&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh"&gt;https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Blazor Hybrid をデプロイしたモバイル環境(エミュレーターなど)に対して Microsoft Edge の DevTools を接続する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-javascript-inside-a.net-app-with-javascriptengineswitcher"&gt;Running JavaScript inside a .NET app with JavaScriptEngineSwitcher&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/"&gt;https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションで JavaScript を動作させたいケースで使用できる様々な JavaScript のエンジンを抽象化/ラップする JavaScriptEngineSwitcher についての記事。&lt;/p&gt;
&lt;p&gt;記事では Jurassic (ピュア .NET 実装のエンジン) を使用して JavaScript を実行する例を載せている。&lt;/p&gt;
&lt;h3 id="net-core-microservice-metrics-with-prometheus-and-grafana"&gt;.Net Core Microservice Metrics with Prometheus and Grafana&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの CPU 使用率やリクエストなどのメトリクスを Prometheus と Grafana で可視化する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-core-microservice-logging-with-grafana-and-loki"&gt;.NET Core Microservice Logging with Grafana and Loki&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのロギングを Loki と Grafana で取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="nullable-reference-types-in-c-migrating-to-nullable-reference-types-part-1"&gt;Nullable reference types in C# - Migrating to nullable reference types - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html"&gt;https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;null 許容参照型についてとその移行について解説する記事シリーズ。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-qiita"&gt;ASP.NET Core MVC 公式チュートリアルから実開発への橋渡し - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948"&gt;https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC アプリケーションの公式チュートリアルで作った部分から実際のプロジェクト開発へと進んだ際に必要となるパーツを埋めることを目的とした記事。&lt;/p&gt;
&lt;p&gt;記事では認証の追加、フィルター処理、appsettings.json のカスタマイズといった部分を解説している。&lt;/p&gt;
&lt;h3 id="introducing-a-new-way-to-search-your-code-and-visual-studio-features"&gt;Introducing a New Way to Search Your Code and Visual Studio Features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 3 で導入された All-In-One 検索体験についての記事。既存の VS Search (Ctrl+Q) Go To (Ctrl+T) を合わせて一つの検索ウィンドウで検索できるようになる (ReSharper の Search Everywhere と似ている)。&lt;/p&gt;
&lt;p&gt;記事では検索時にファイルや型、メンバーでフィルターできるといった点について触れている。&lt;/p&gt;
&lt;h3 id="czip"&gt;C#でzipを展開するときに気をつけること&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/throw_exception/articles/7202956e9824d5"&gt;https://zenn.dev/throw_exception/articles/7202956e9824d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.5 から導入された Zip ファイルを操作可能となった API を使用してファイルを展開する際に注意すべき点についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;ExtractToFile&lt;/code&gt; メソッドではディレクトリトラバーサルが発生してセキュリティー上の問題となることがある点とその対策について解説している。&lt;/p&gt;
&lt;h3 id="net-mvvm-communitytoolkit.mvvm-ver8-preview3-qiita"&gt;.NET用 MVVMライブラリ CommunityToolkit.Mvvm ver8 (preview3) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6"&gt;https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit 8.0.0 Preview 3 の新しい MVVM サポートを利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-framework-april-2022-cumulative-update-preview"&gt;.NET Framework April 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年4月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;3rd パーティーのアプリケーションがディレクトリーサービスを呼び出した場合にアクセス違反となる不具合が修正されている。&lt;/p&gt;
&lt;h3 id="combining-bearer-token-and-cookie-authentication-in-asp.net"&gt;Combining Bearer Token and Cookie Authentication in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET"&gt;https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでの認証に Bearer トークン方式と Cookie を使用する方式の両対応を行う方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rahulrai_in/status/1517408881957294081?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Docker?ref_src=twsrc%5Etfw"&gt;&amp;#64;Docker&lt;/a&gt; now supports heredocs&lt;br&gt;&lt;br&gt;I wrote a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; API inside a Dockerfile and it works 🤯&lt;br&gt;&lt;br&gt;Thanks for the tip &lt;a href="https://twitter.com/iximiuz?ref_src=twsrc%5Etfw"&gt;&amp;#64;iximiuz&lt;/a&gt; &lt;a href="https://twitter.com/shanselman?ref_src=twsrc%5Etfw"&gt;&amp;#64;shanselman&lt;/a&gt; &lt;a href="https://twitter.com/davidfowl?ref_src=twsrc%5Etfw"&gt;&amp;#64;davidfowl&lt;/a&gt; &lt;a href="https://twitter.com/aspnetcore_news?ref_src=twsrc%5Etfw"&gt;&amp;#64;aspnetcore_news&lt;/a&gt; &lt;a href="https://t.co/iFtJW4VZjg"&gt;pic.twitter.com/iFtJW4VZjg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rahul Rai (&amp;#64;rahulrai_in) &lt;a href="https://twitter.com/rahulrai_in/status/1517408881957294081?ref_src=twsrc%5Etfw"&gt;April 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dockerfile でヒアドキュメントをサポートしたのでそのままソースコードを書けば、Dockerfile 完結の .NET アプリコンテナーイメージを作れるというネタ。&lt;/p&gt;
&lt;!-- https://twitter.com/sitnikadam/status/1518004664695934977?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Guess what I have just prototyped. (I have left one core for the Task Manager, otherwise it can&amp;#39;t refresh the charts at reasonable rate). &lt;a href="https://t.co/nKS9r4sXm9"&gt;pic.twitter.com/nKS9r4sXm9&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Sitnik (&amp;#64;SitnikAdam) &lt;a href="https://twitter.com/SitnikAdam/status/1518004664695934977?ref_src=twsrc%5Etfw"&gt;April 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;BenchmarkDotNet でベンチマークを各コアで並列に動かすというプロトタイプを作ったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/buhakmeh/status/1518658195329273856?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did I mention &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; has an amazing file explorer for &lt;a href="https://twitter.com/hashtag/docker?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#docker&lt;/a&gt; containers? &lt;a href="https://t.co/2KIVf3jPFV"&gt;pic.twitter.com/2KIVf3jPFV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Khalid - khalidabuhakmeh&amp;#64;mastodon.social (&amp;#64;buhakmeh) &lt;a href="https://twitter.com/buhakmeh/status/1518658195329273856?ref_src=twsrc%5Etfw"&gt;April 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Rider では Docker コンテナーの中をブラウジングするといった便利機能があるという Tips。(Files タブは&lt;a href="https://www.jetbrains.com/help/rider/Docker.html#interacting-with-containers"&gt;Docker | JetBrains Rider&lt;/a&gt; には書かれていないので比較的最近実装されたのかもしれない)&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="vectorized-memoryextensions.commonprefixlength-by-gfoidl-pull-request-68210-dotnetruntime"&gt;Vectorized MemoryExtensions.CommonPrefixLength by gfoidl · Pull Request #68210 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/68210"&gt;https://github.com/dotnet/runtime/pull/68210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Span 同士で同じプレフィックスの長さを取る &lt;code&gt;MemoryExtensions.CommonPrefixLength&lt;/code&gt; メソッド (.NET 7) をベクトル化して高速化するという PR。&lt;/p&gt;
&lt;h3 id="implement-minimal-ratelimitingmiddleware-by-wtgodbe-pull-request-41008-dotnetaspnetcore"&gt;Implement minimal RateLimitingMiddleware by wtgodbe · Pull Request #41008 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41008"&gt;https://github.com/dotnet/aspnetcore/pull/41008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RateLimiting API を使用した ASP.NET Core 向けのミニマルな RateLimiting ミドルウェアの実装 PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>