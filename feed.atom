<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title>WeekRef.NET</title>
	<author>
		<name>Mayuki Sawatari</name>
	</author>
	<link rel="self" href="/" />
	<rights>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</rights>
	<updated>2022-07-22T07:08:06Z</updated>
	<logo>/img/logo.png</logo>
	<subtitle>.NET 関連の情報をほぼ週刊配信</subtitle>
	<entry>
		<id>/2022/07/22/updates</id>
		<title>2022-07-22: Windows Community Toolkit Labs, Microsoft.UI.Xaml v2.8.0, Visual Studio 2022 17.3 Preview 4</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/22/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-22T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-the-windows-community-toolkit-labs"&gt;Announcing the Windows Community Toolkit Labs!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-the-windows-community-toolkit-labs/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-the-windows-community-toolkit-labs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit の実験的なコンポーネントを開発する「ラボ」を発表した。&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit Labs は新しいアイデアや開発中、実験段階のコンポーネントのためのプロジェクト。成熟したコンポーネントは最終的に Windows Community Toolkit に取り込まれることとなる。&lt;/p&gt;
&lt;p&gt;記事では Lab の目的、Lab に含まれているコンポーネントの紹介、アプリケーションでのパッケージ使用方法といった部分にも触れている。&lt;/p&gt;
&lt;p&gt;また Uno Platform もサポートされ、現在ブラウザーで Lab のサンプルアプリケーションを実行可能となっている。&lt;/p&gt;
&lt;h3 id="release-microsoft.ui.xaml-v2.8.0-microsoftmicrosoft-ui-xaml"&gt;Release Microsoft.UI.Xaml v2.8.0 · microsoft/microsoft-ui-xaml&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.0"&gt;https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.8.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.UI.Xaml (WinUI 2) 2.8.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは WebView2 が利用できるようになった他、サポートバージョンの変更、いくつかの不具合修正と改善が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.3-preview-4-visual-studio-2022-preview-release-notes"&gt;Visual Studio 2022 17.3 Preview 4 - Visual Studio 2022 Preview Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1730-pre40--visual-studio-2022-version-173-preview-4"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1730-pre40--visual-studio-2022-version-173-preview-4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET MAUI のサービスリリースが含まれるほか、ARM64 での Windows Forms のデザイナーの修正などいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-7-preview-5-available-on-app-service-azure-app-service"&gt;.NET 7 Preview 5 available on App Service - Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/07/18/dotnet7_preview5.html"&gt;https://azure.github.io/AppService/2022/07/18/dotnet7_preview5.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で .NET 7 Preview 5 が App Service Early Access feature にて利用可能となった。&lt;/p&gt;
&lt;p&gt;App Service 上で .NET 7 をターゲットにしている場合、今後アップデートがリリースされると自動で更新される。これは RC と GA となるまで続く。Self-contained なアプリケーションの場合は更新されない。&lt;/p&gt;
&lt;h3 id="announcing-the.net-7-support-for-azure-functions-in-an-isolated-process-in-public-preview"&gt;Announcing the .NET 7 support for Azure functions in an isolated process in public preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-support-for-azure-functions-in-an-isolated/ba-p/3574316"&gt;https://techcommunity.microsoft.com/t5/apps-on-azure-blog/announcing-the-net-7-support-for-azure-functions-in-an-isolated/ba-p/3574316&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions のプロセス分離モデルで .NET 7 のサポートがパブリックプレビューとなった。&lt;/p&gt;
&lt;h3 id="release-6.0.419-service-release-3-dotnetmaui"&gt;Release 6.0.419 (Service Release 3) · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.419"&gt;https://github.com/dotnet/maui/releases/tag/6.0.419&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI 6.0.419 (Service Release 3) がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースはサービスリリースとなり、主に細かい不具合の修正が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-6-c-tokyo-connpass"&gt;【オンライン】.NET 6 移行祭り！ C# Tokyo イベント - connpass&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csharp-tokyo.connpass.com/event/254206/"&gt;https://csharp-tokyo.connpass.com/event/254206/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 への移行をテーマにしたコミュニティーオンラインイベントが8月26日に行われる。&lt;/p&gt;
&lt;h3 id="net-7"&gt;.NET 7からサポートポリシーが変更になる予定 - つばろぐ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tsubalog.hatenablog.com/entry/2022/07/16/221307"&gt;https://tsubalog.hatenablog.com/entry/2022/07/16/221307&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で変更となるサポートポリシーについて解説している記事。&lt;/p&gt;
&lt;p&gt;大きく Current の呼び名の変更、サポートライフサイクルの流れの整理が行われるとのこと。&lt;/p&gt;
&lt;h3 id="production-postmortem-out-of-memory-on-a-clear-sky"&gt;Production postmortem: Out of memory on a clear sky&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197635-A/production-postmortem-out-of-memory-on-a-clear-sky?Key=43188033-6bfd-4682-9fc8-1bef248f2caf"&gt;https://ayende.com/blog/197635-A/production-postmortem-out-of-memory-on-a-clear-sky?Key=43188033-6bfd-4682-9fc8-1bef248f2caf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux のシステム上に余裕があるにもかかわらずスレッド生成時に OutOfMemoryException が発生した原因を調査したという記事。&lt;/p&gt;
&lt;p&gt;Linux にはいくつかの設定がありその上限に達していたため失敗していたとのこと。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-cloneanalysis-ii"&gt;High performance .NET: Building a Redis Clone–Analysis II&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197665-C/high-performance-net-building-a-redis-clone-analysis-ii?Key=be0be55d-1092-47ce-a951-950ce65243cd"&gt;https://ayende.com/blog/197665-C/high-performance-net-building-a-redis-clone-analysis-ii?Key=be0be55d-1092-47ce-a951-950ce65243cd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis クローンを作りながらパフォーマンスについてみていくというシリーズ。&lt;/p&gt;
&lt;p&gt;記事ではコマンドの実行に関して、ネットワークの I/O を含む処理の負荷のかかっている部分を探っている。&lt;/p&gt;
&lt;h3 id="benchmarking-slow-is-fast-fast-is-slow"&gt;Benchmarking: Slow is fast, fast is slow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197857-C/benchmarking-slow-is-fast-fast-is-slow"&gt;https://ayende.com/blog/197857-C/benchmarking-slow-is-fast-fast-is-slow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Corax と Lucene でのインデックス速度の比較をした際に Corax のほうが遅く、Corax と Lucene 両方から呼び出される共通コードの実行時間に差が出ていたのは何故かについて。&lt;/p&gt;
&lt;p&gt;これは RavenDB ではデータを読み出す前にページを検証する仕組みがあり、Corax が速く検証を行い、あとから Lucene が来るので Lucene はその操作をする必要がないため見かけ上速くなっていた。&lt;/p&gt;
&lt;p&gt;正しい結果を見るにはそれぞれ別々のシナリオに分けてコールドブートで実行しようという話。&lt;/p&gt;
&lt;h3 id="top-50-reasons-to-use-uno-platform-2022-edition"&gt;Top 50 Reasons to use Uno Platform – 2022 edition&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/top-50-reasons-to-use-uno-platform-2022-edition/"&gt;https://platform.uno/blog/top-50-reasons-to-use-uno-platform-2022-edition/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform を使う50の理由 (2022年版)&lt;/p&gt;
&lt;h3 id="building-ambie-3.0-the-best-white-noise-app-on-windows"&gt;Building Ambie 3.0 — the best white noise app on Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kid-jenius.medium.com/building-ambie-3-0-the-best-white-noise-app-on-windows-d899fb02adf2"&gt;https://kid-jenius.medium.com/building-ambie-3-0-the-best-white-noise-app-on-windows-d899fb02adf2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambie というホワイトノイズを流す Windows アプリの新しいバージョンを開発した際の話。&lt;/p&gt;
&lt;p&gt;新しいデザインにする初期プランが始まり、プロトタイプ、見直し、結果といったことが書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jenius-apps/ambie"&gt;jenius-apps/ambie: The best white noise app on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="maui"&gt;MAUI ハンドラーのマップ変更を試したメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/muak/articles/8e17cabbc1ae35"&gt;https://zenn.dev/muak/articles/8e17cabbc1ae35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のコントロールのハンドラーマッピングをカスタマイズする方法を試してみるという記事。&lt;/p&gt;
&lt;h3 id="how-to-profile.net-code-using-the-dotmemory-plugin-in-rider-the.net-tools-blog"&gt;How to Profile .NET Code Using the dotMemory Plugin in Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/18/how-to-profile-net-code-using-the-dotmemory-plugin-in-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/07/18/how-to-profile-net-code-using-the-dotmemory-plugin-in-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で dotMemory プラグインを使用して .NET アプリケーションのプロファイルを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="add-authentication-to.net-maui-apps-with-auth0"&gt;Add Authentication to .NET MAUI Apps with Auth0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/add-authentication-to-dotnet-maui-apps-with-auth0/"&gt;https://auth0.com/blog/add-authentication-to-dotnet-maui-apps-with-auth0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI アプリケーションに Auth0 による認証を組み込む方法についての記事。&lt;/p&gt;
&lt;h3 id="discord-ui-in.net-maui-tylah-kapa"&gt;Discord UI in .NET MAUI — Tylah Kapa&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kapa.dev/blog/discord-ui-in-net-maui"&gt;https://kapa.dev/blog/discord-ui-in-net-maui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Discord の UI のようなモックアップを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="combining-lottie-animations-with-gestures-and-scrolling"&gt;Combining Lottie Animations with Gestures and Scrolling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.cayas.de/blog/lottie-animations-gestures-and-scrolling"&gt;https://www.cayas.de/blog/lottie-animations-gestures-and-scrolling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI 上で表示した Lottie アニメーションをジェスチャーやスクロールといったインタラクションと連動させる方法についての記事。&lt;/p&gt;
&lt;h3 id="setting-up-ci-for-your.net-maui-windows-app-in-azure-devops-andreas-nesheim"&gt;Setting up CI for your .NET MAUI Windows app in Azure DevOps - Andreas Nesheim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/"&gt;https://www.andreasnesheim.no/setting-up-ci-for-your-net-maui-windows-app-in-azure-devops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の Windows アプリケーションを Azure  DevOps でビルド、署名する方法についての記事。&lt;/p&gt;
&lt;h3 id="visual-basic-4-option"&gt;Visual Basic の 4 つの Option について - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2022/07/15/153127"&gt;https://tech.blog.aerie.jp/entry/2022/07/15/153127&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Basic .NET の言語で使用されている設定の4つの Option (&lt;code&gt;Option Compare&lt;/code&gt;, &lt;code&gt;Option Explicit&lt;/code&gt;, &lt;code&gt;Option Strict&lt;/code&gt;, &lt;code&gt;Option Infer&lt;/code&gt;) について解説している記事。&lt;/p&gt;
&lt;h3 id="exploring-the-new-output-caching-middleware"&gt;Exploring the new output caching middleware&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/this-is-learning/exploring-the-new-output-caching-middleware-4no1"&gt;https://dev.to/this-is-learning/exploring-the-new-output-caching-middleware-4no1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の ASP.NET Core で導入される出力キャッシュのミドルウェアについての記事。どのようにして利用できるかといったことを紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="byme8zeroql"&gt;byme8/ZeroQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/byme8/ZeroQL"&gt;https://github.com/byme8/ZeroQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL のクエリー呼び出しコードを解析して事前にコードを生成することでパフォーマンスを向上させたクライアントライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/byme8/zeroql-c-friendly-graphql-4134"&gt;ZeroQL - C# friendly GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/markrussinovich/status/1549440918553448448?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It&amp;#39;s here: Zoomit with screen recording plus updates to Sigcheck, Procmon, Bginfo and PsExec: &lt;a href="https://t.co/th84RGgI18"&gt;https://t.co/th84RGgI18&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mark Russinovich (&amp;#64;markrussinovich) &lt;a href="https://twitter.com/markrussinovich/status/1549440918553448448?ref_src=twsrc%5Etfw"&gt;July 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ZoomIt に簡易的なスクリーンレコーディング機能が実装されたという話。(ウィンドウや範囲指定などはなくズームされている画面か全画面となる)&lt;/p&gt;
&lt;!-- https://twitter.com/FSazanavets/status/1548972196596486144 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;To help more &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; developers to gain access to educational resources, I am, once again, giving away digital copies of my &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt; book for free until the end of July. It is available to download via this link:&lt;a href="https://t.co/3tZPp8QfRn"&gt;https://t.co/3tZPp8QfRn&lt;/a&gt; &lt;a href="https://t.co/1CP8eoXbQ8"&gt;pic.twitter.com/1CP8eoXbQ8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fiodar Sazanavets 🇺🇦 (&amp;#64;FSazanavets) &lt;a href="https://twitter.com/FSazanavets/status/1548972196596486144?ref_src=twsrc%5Etfw"&gt;July 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://leanpub.com/signalronnet6-thecompleteguide/c/free-until-august"&gt;SignalR on .NET 6 - the Complete Guide&lt;/a&gt; という電子書籍 (E-book) が7月末まで無料という話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/16/updates</id>
		<title>2022-07-16: .NET 7 Preview 6, Rate Limiting API, .NET Core 3.1 EoS on December 13, 2022</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/16/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-16T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-6.net-blog"&gt;Announcing .NET 7 Preview 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;このプレビューリリースでは型コンバーターの改善、JSON コントラクトのカスタマイズ、System.Formats.Tar API の更新、.NET プロジェクトテンプレートの制約、コード生成によるパフォーマンス改善などが含まれている。&lt;/p&gt;
&lt;p&gt;型コンバーター (TypeConverter) では新たに DateOnly, TimeOnly, Int128, UInt128, Half といった型をサポートした。JSON コントラクトのカスタマイズではプロパティーのシリアライズの挙動をコンバーターなしでコントロールしたりといったことが可能となる。&lt;/p&gt;
&lt;p&gt;System.Formats.Tar API にはグローバル拡張属性 (GEA) のサポートや複数のエントリー形式の混在のサポートが対応されている。&lt;/p&gt;
&lt;p&gt;.NET プロジェクトテンプレートに制約の概念が導入され、OS やテンプレートエンジンホスト (.NET CLI や Visual Studio)、インストールされているワークロードといった条件を設定できるようになった。現在は CLI でのサポートのみで Visual Studio でのサポートも進めているとのこと。将来的には MSBuild のプロパティーに基づく制約などもサポートするとのこと。そのほか複数項目選択や終了コードの統一といった改善も含まれる。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-6.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-6/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 6 での ASP.NET Core のアップデートについてのアナウンス記事。&lt;/p&gt;
&lt;p&gt;このプレビューリリースでは次の新機能や改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リクエスト圧縮展開ミドルウェア&lt;/li&gt;
&lt;li&gt;出力キャッシュミドルウェア&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェアの更新&lt;/li&gt;
&lt;li&gt;Kestrel での HTTP/2 上の WebSockets のサポート&lt;/li&gt;
&lt;li&gt;Kestrel の多コアマシンでのパフォーマンス改善&lt;/li&gt;
&lt;li&gt;W3CLogger での付加的なリクエストヘッダーのロギングのサポート&lt;/li&gt;
&lt;li&gt;空の Blazor プロジェクトテンプレート&lt;/li&gt;
&lt;li&gt;WebAssembly での System.Security.Cryptography のサポート&lt;/li&gt;
&lt;li&gt;Blazor カスタム要素 (Blazor custom elements) の非実験的な位置づけへの変更&lt;/li&gt;
&lt;li&gt;Blazor の実験的な QuickGrid コンポーネント&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディングの複数に分割されたパラメータ&lt;/li&gt;
&lt;li&gt;MapGroup で多くの拡張メソッドをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
リクエスト圧縮展開ミドルウェアはクライアントからのリクエストが `Content-Encoding: gzip` のような形で圧縮されている場合に展開する。レスポンスの圧縮と同様に GZip, Brotli, Deflate またはカスタムな形式をサポートする。
--&gt;
&lt;h3 id="announcing-entity-framework-core-7-preview-6-performance-edition.net-blog"&gt;Announcing Entity Framework Core 7 Preview 6: Performance Edition - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 Preview 6 がリリースされたことに合わせてパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では SaveChanges でのラウンドトリップの削減について、SQL Server での複数行の INSERT の改善といったパフォーマンスに関する改善を紹介している。&lt;/p&gt;
&lt;h3 id="announcing-rate-limiting-for.net.net-blog"&gt;Announcing Rate Limiting for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入されるレートリミッターの API についての紹介記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 7 のレートリミッターがサポートするアルゴリズムと API について説明している。レートリミッターは「同時実行制限」「トークンバケット制限」「固定ウィンドウ制限」「スライディングウィンドウ制限」の4つのアルゴリズムを提供する。&lt;/p&gt;
&lt;p&gt;API についてはそれぞれのアルゴリズムでの使用や、HttpClient と組み合わせた場合の使い方、ASP.NET Core のミドルウェアでの利用にも触れている。&lt;/p&gt;
&lt;h3 id="net-core-3.1-will-reach-end-of-support-on-december-13-2022.net-blog"&gt;.NET Core 3.1 will reach End of Support on December 13, 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-core-3-1-will-reach-end-of-support-on-december-13-2022/"&gt;https://devblogs.microsoft.com/dotnet/net-core-3-1-will-reach-end-of-support-on-december-13-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 が2022年12月13日でサポート終了となるというアナウンス。&lt;/p&gt;
&lt;p&gt;2022年12月13日以降セキュリティー修正はリリースされなくなるため、.NET 6 (LTS) への移行が推奨される。またこれによってサポート終了後には Visual Studio 2019 および 2022 では .NET Core 3.1 コンポーネントのインストールがサポート外となりオプションに変更される。インストール済みのものや、手動でインストールした場合には引き続き利用できるが Visual Studio 2022 の .NET 6 への移行が推奨される。&lt;/p&gt;
&lt;h3 id="net-framework-july-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework July 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-july-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年7月のセキュリティーと累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー修正は含まれないが、6月のリリースが正しく累積されておらず、セキュリティー更新のいくつかが含まれていなかった問題が修正されている。&lt;/p&gt;
&lt;h3 id="net-july-2022-updates.net-6.0.7-and.net-core-3.1.27.net-blog"&gt;.NET July 2022 Updates – .NET 6.0.7 and .NET Core 3.1.27 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/july-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/july-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.7 と .NET Core 3.1.27 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは新しいセキュリティー修正は含まれておらず、不具合の修正や改善といったものが含まれるものとなっている。&lt;/p&gt;
&lt;h3 id="microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool"&gt;Microsoft open sources Salus software bill of materials (SBOM) generation tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool/"&gt;https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-salus-software-bill-of-materials-sbom-generation-tool/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SBOM (ソフトウェア部品表) の生成ツールがオープンソースでリリースされた。&lt;/p&gt;
&lt;p&gt;成果物をスキャンしてファイルや各種依存パッケージといった情報を SPDX 形式で出力することのできるツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/sbom-tool"&gt;microsoft/sbom-tool: The SBOM tool is a highly scalable and enterprise ready tool to create SPDX 2.2 compatible SBOMs for any variety of artifacts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="whats-coming-for-blazor-in.net-7"&gt;What’s Coming for Blazor in .NET 7?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.telerik.com/blogs/whats-coming-blazor-dotnet-7?dclid=CNH85ZbH-vgCFW6G6QUdOtoLHg"&gt;https://www.telerik.com/blogs/whats-coming-blazor-dotnet-7?dclid=CNH85ZbH-vgCFW6G6QUdOtoLHg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Blazor で導入される新機能などをまとめて紹介している記事。&lt;/p&gt;
&lt;h3 id="minimal-api-validation-with-fluentvalidation"&gt;Minimal API Validation with FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/minimal-api-validation-with-fluentvalidation"&gt;https://khalidabuhakmeh.com/minimal-api-validation-with-fluentvalidation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API で FluentValidation を使用してパラメータ検証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="neue-cc-asyncawait"&gt;neue cc - async/awaitのキャンセル処理やタイムアウトを効率的に扱うためのパターン＆プラクティス&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2022/07/13_Cancellation.html"&gt;https://neue.cc/2022/07/13_Cancellation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;非同期処理を実装する上で頻出する、CancellationToken を使用したキャンセルやタイムアウトを取り扱うためのパターンとプラクティスについての記事。&lt;/p&gt;
&lt;h3 id="net-mauiandroid"&gt;.NET MAUI(Android)でも、データをシェア(受信)したい！&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/test_myname/articles/d856ed8e4d5fa3"&gt;https://zenn.dev/test_myname/articles/d856ed8e4d5fa3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI (Android) アプリケーションで外部のアプリケーションからデータを受け取る (Intent) 方法についての記事。&lt;/p&gt;
&lt;h3 id="firebase-push-notifications-for-android-and-ios-using-ionic-and-asp.net-a-complete-guide"&gt;Firebase Push Notifications for Android and iOS Using Ionic and ASP.NET —A Complete Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/firebase-push-notifications-for-android-and-ios-using-ionic-and-aspnet-a-complete-guide-16bi"&gt;https://dev.to/syncfusion/firebase-push-notifications-for-android-and-ios-using-ionic-and-aspnet-a-complete-guide-16bi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ionic を使用した iOS/Android アプリケーションに ASP.NET Core アプリケーションから Firebase Push Notification で通知を送る方法について解説している記事。&lt;/p&gt;
&lt;h3 id="net-6-system.text.json.nodes.jsonnode"&gt;[.NET 6] System.Text.Json.Nodes.JsonNode の一致を判定する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/f961adfe2219ff"&gt;https://zenn.dev/shimat/articles/f961adfe2219ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json で JSON をパースし JsonNode となったものを比較して同一の値を持つかどうかを判定する方法についての記事。&lt;/p&gt;
&lt;p&gt;単純に JSON を文字列比較した場合はプロパティーの順番などでうまくいかないため、オブジェクトのプロパティー単位で比較していく必要がある。&lt;/p&gt;
&lt;h3 id="binding-lottie-or-any-other-swift-framework-with-ui-in-maui"&gt;Binding Lottie (or any other Swift framework with UI) in MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/csaba8472/binding-lottie-or-any-other-swift-framework-with-ui-in-maui-543m"&gt;https://dev.to/csaba8472/binding-lottie-or-any-other-swift-framework-with-ui-in-maui-543m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI (Android と iOS) で Lottie (アニメーションを再生する仕組み)を使用するバインディングを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="vs2022-performance-enhancements-git-branch-switching-visual-studio-blog"&gt;VS2022 Performance Enhancements: Git Branch Switching - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/vs2022-performance-enhancements-git-branch-switching/"&gt;https://devblogs.microsoft.com/visualstudio/vs2022-performance-enhancements-git-branch-switching/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビューでの Git のブランチ切り替えのパフォーマンス改善について。&lt;/p&gt;
&lt;p&gt;ソリューションのの読み込みを回避したり、リロードは30%程度改善するといったことでパフォーマンスを大幅に向上しているとのこと。&lt;/p&gt;
&lt;h3 id="building-our-first-microsoft-orleans-app"&gt;Building our first Microsoft Orleans App&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/willvelida/building-our-first-microsoft-orleans-app-489l"&gt;https://dev.to/willvelida/building-our-first-microsoft-orleans-app-489l&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans でクライアントとサーバーのプロジェクトを作ってみるというステップバイステップ記事。&lt;/p&gt;
&lt;h3 id="net-debugger.launch-for-macos-and-linux"&gt;.NET Debugger.Launch for macOS and Linux&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/dotnet-debugger-launch-for-macos-and-linux"&gt;https://khalidabuhakmeh.com/dotnet-debugger-launch-for-macos-and-linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Debugger.Launch&lt;/code&gt; は Windows でのみ使用できるが macOS と Linux でも似たようなことをするにはどうすればよいかという記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IsAttached&lt;/code&gt; プロパティーは使用できるので起動時にアタッチするまで待機するというワークアラウンドになってしまうとのこと。&lt;/p&gt;
&lt;h3 id="c-1-qiita"&gt;【C#】ループの最適化手法 ①配列編 ～境界値チェックと専用命令と～ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/fafd3468690a896139b3"&gt;https://qiita.com/Kujiro/items/fafd3468690a896139b3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配列、 &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; を使った要素の列挙のパフォーマンスをソースコードやアセンブリレベルで比較、解説している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Kujiro/items/9569e91b942bcf9d528b"&gt;【C#】ループの最適化手法 ②List&amp;lt;T&amp;gt;編 ～List&amp;lt;T&amp;gt;はSpanT化すると数倍早い～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Kujiro/items/21d004bc74449765dbf7"&gt;【C#】ループの最適化手法 ③Span&amp;lt;T&amp;gt;編 ～配列をSpan&amp;lt;T&amp;gt;にするだけで早い～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="customizing-controls-in.net-maui.net-blog"&gt;Customizing Controls in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/customizing-dotnet-maui-controls/"&gt;https://devblogs.microsoft.com/dotnet/customizing-dotnet-maui-controls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NET MAUI の既存のコントロールを拡張、カスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="ienumerable-debugger-visualizer-improvements-visual-studio-blog"&gt;IEnumerable Debugger Visualizer Improvements - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/ienumerable-visualizer-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/ienumerable-visualizer-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 Preview で強化された IEnumerable のデバッガービジュアライザーの最新のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;フィルタリングや CSV エクスポート、Visual Studio に合わせたテーマといった機能が実装されたとのこと。&lt;/p&gt;
&lt;h3 id="julyot-15.net-nanoframework-networking-and-azure"&gt;#JulyOT 15: .NET nanoFramework networking and Azure&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/azure/julyot-15-net-nanoframework-networking-and-azure-2ng5"&gt;https://dev.to/azure/julyot-15-net-nanoframework-networking-and-azure-2ng5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET nanoFramework でネットワーク通信を行い、Azure と接続する方法についての記事。&lt;/p&gt;
&lt;p&gt;HTTPSのクライアントや Web サーバー、MQTT や SignalR といったものを使用する方法、Azure IoT サービスを呼び出す方法とったものを紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-usausaazure-functions-extension-azure-functions-extension"&gt;GitHub - usausa/azure-functions-extension: Azure Functions extension.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/azure-functions-extension"&gt;https://github.com/usausa/azure-functions-extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions でパラメータのモデルバインディングなどを提供する拡張ライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="cutt-systemc"&gt;CUTT System:C#ベクトルプログラミング入門&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.cutt.co.jp/book/978-4-87783-524-8.html"&gt;https://www.cutt.co.jp/book/978-4-87783-524-8.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Runtime.Intrinsics の SIMD サポートを使用して C# でベクトルプログラミングを行うことについての書籍。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1547311810277085184?s=12&amp;t=i6d9fNI7jg-55SATIPgtYw --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;ve ever needed to debug WPF or other NGEN/R2R images in VS, it&amp;#39;s now even easier with our new option.&lt;br&gt;&lt;br&gt;You can disable the load of NGEN/ R2R using the &lt;br&gt;settings under  Tools &amp;gt;Options&amp;gt;Debugging &amp;gt;General&amp;gt; Prevent using precompiled images on module load&lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://t.co/eHnv1NCSGT"&gt;pic.twitter.com/eHnv1NCSGT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1547311810277085184?ref_src=twsrc%5Etfw"&gt;July 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;デバッグ時に R2R/NGEN イメージを読み込まないようにするオプションが 17.3 Preview 3 で追加されたという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/10/updates</id>
		<title>2022-07-10: AWS .NET deployment tool, Increased Subscription Pricing for JetBrains products, CoreWCF 1.1.0</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/10/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-10T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="aws-announces-a-streamlined-deployment-experience-for.net-applications-in.net-cli-and-visual-studio"&gt;AWS announces a streamlined deployment experience for .NET applications in .NET CLI and Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/07/aws-streamlined-deployment-net-applications-cli-visual-studio/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2022/07/aws-streamlined-deployment-net-applications-cli-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを AWS に簡単にデプロイするための CLI と Visual Studio 向けの拡張が一般公開となった。&lt;/p&gt;
&lt;p&gt;適切なコンピュートの選択や Dockerfile の自動生成、パッケージングとデプロイといったことを支援するツール。例えば &lt;code&gt;dotnet aws deploy ...&lt;/code&gt; で ECS や App Runner にデプロイできる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.github.io/aws-dotnet-deploy/"&gt;AWS .NET deployment tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ide.net-all-products-pack-jetbrains-news"&gt;IDE、.NET ツール、および All Products Pack のサブスクリプションの価格改定 | JetBrains News&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/ja/blog/2022/06/29/increased-subscription-pricing-for-ides-net-tools-and-the-all-products-pack/"&gt;https://blog.jetbrains.com/ja/blog/2022/06/29/increased-subscription-pricing-for-ides-net-tools-and-the-all-products-pack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の IDE や .NET ツール、All Products Pack のサブスクリプションの価格が改訂されるというアナウンス。&lt;/p&gt;
&lt;p&gt;ReSharper や Rider を含む、多くの JetBrains 製品のサブスクリプションの価格が改訂され値上がりとなる。この新しい価格は2022年10月1日から適用される。&lt;/p&gt;
&lt;p&gt;個人向けのプランでは最大2年または3年の、法人向けプランでは最大2年の現行の価格での先払いが可能となっている。&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;製品 (個人向け)&lt;/th&gt;
&lt;th&gt;現行価格 (税込; 1年目)&lt;/th&gt;
&lt;th&gt;改定後価格 (税込; 1年目)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;All Products Pack&lt;/td&gt;
&lt;td&gt;31,570 円&lt;/td&gt;
&lt;td&gt;38,148 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dotUltimate (Rider + ReSharper)&lt;/td&gt;
&lt;td&gt;18,920 円&lt;/td&gt;
&lt;td&gt;22,308 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReSharper&lt;/td&gt;
&lt;td&gt;16,390 円&lt;/td&gt;
&lt;td&gt;18,348 円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rider&lt;/td&gt;
&lt;td&gt;17,600 円&lt;/td&gt;
&lt;td&gt;19,668 円&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="corewcf-1.1.0-and-project-templates.net-blog"&gt;CoreWCF 1.1.0 and project templates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/corewcf-1-1-0-and-project-templates/"&gt;https://devblogs.microsoft.com/dotnet/corewcf-1-1-0-and-project-templates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoreWCF 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;HTTP 上のトランスポートセキュリティーでの偽装や WebHttpBinding で生成する Swagger ファイルを変更するための新しい API といった小さな改善が含まれている。&lt;/p&gt;
&lt;p&gt;記事ではこのリリースで追加されたプロジェクトテンプレートについても紹介している。&lt;/p&gt;
&lt;h3 id="release-release-v2.47.0-grpcgrpc-dotnet"&gt;Release Release v2.47.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.47.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.47.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;grpc-dotnet 2.47.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;HttpClientBuilder で AddCallCredentials に CallCredentials を受け取るオーバーロードの追加のほかいくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="net-data-frameworks-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;.NET Data Frameworks Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework を含むデータフレームワークの隔週更新情報の7月7日分。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 で値オブジェクトのサポートとマップされていない型に対する生 SQL クエリーのサポートがカットされたとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/ajcvickers/status/1545089731385491458?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;EF Core Biweekly Update&lt;br&gt;&lt;br&gt;Unfortunately, we have had to make some painful cuts for EF7. Most notably, value objects and raw SQL for unmapped types are cut. 😢&lt;br&gt;&lt;br&gt;In better news, interceptors for query expressions and concurrency exceptions are now merged! 🦄&lt;a href="https://t.co/4RGMEMJtB4"&gt;https://t.co/4RGMEMJtB4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Arthur Vickers (&amp;#64;ajcvickers) &lt;a href="https://twitter.com/ajcvickers/status/1545089731385491458?ref_src=twsrc%5Etfw"&gt;July 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-c-10-ref-field"&gt;(C#) C# 10でも ref field したい - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/07/02/203741"&gt;https://ikorin2.hatenablog.jp/entry/2022/07/02/203741&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入される ref field と同様なことを &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; で実現するというテクニックについての記事。&lt;/p&gt;
&lt;h3 id="azure-sdk-for.net-defaultazurecredential-tech.guitarrapc.com"&gt;Azure SDK for .NET の認証を DefaultAzureCredential にそろえる - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/07/06/012351"&gt;https://tech.guitarrapc.com/entry/2022/07/06/012351&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure SDK for .NET に古くからの &lt;code&gt;AzureCredentials&lt;/code&gt; と現在推奨される &lt;code&gt;DefaultAzureCredential&lt;/code&gt; があり、それを &lt;code&gt;DefaultAzureCredential&lt;/code&gt; で共通に扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="manage.net-microservices-apis-with-apache-apisix-api-gateway"&gt;Manage .NET Microservices APIs with Apache APISIX API Gateway&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/apisix/manage-net-microservices-apis-with-apache-apisix-api-gateway-2cbk"&gt;https://dev.to/apisix/manage-net-microservices-apis-with-apache-apisix-api-gateway-2cbk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache APISIX API Gateway を使用して .NET の Web API を扱う例についての記事。&lt;/p&gt;
&lt;h3 id="back-to-basics-custom-http-response-header-manipulation-in-asp.net-core-rick-strahls-web-log"&gt;Back to Basics: Custom HTTP Response Header Manipulation in ASP.NET Core - Rick Strahl's Web Log&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Jul/07/Back-to-Basics-Custom-HTTP-Response-Header-Manipulation-in-ASPNET-Core"&gt;https://weblog.west-wind.com/posts/2022/Jul/07/Back-to-Basics-Custom-HTTP-Response-Header-Manipulation-in-ASPNET-Core&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core でカスタム HTTP レスポンスヘッダーを取り扱う方法についてのおさらい記事。MVC のアクションの中、ミドルウェア、Web.config といったものを説明している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-july-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | July 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/07/05/net-annotated-monthly-july-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/07/05/net-annotated-monthly-july-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連情報のまとめ、7月号。&lt;/p&gt;
&lt;h3 id="graphql-for.net"&gt;GraphQL For .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/drminnaar/graphql-for-net-38lc"&gt;https://dev.to/drminnaar/graphql-for-net-38lc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL の API サーバーを構築する方法をステップバイステップで解説している記事。&lt;/p&gt;
&lt;p&gt;サーバーの構築からミューテーション、Entity Framework Core の利用やクエリープロジェクションといったことに触れている。&lt;/p&gt;
&lt;h3 id="asp.net-core-web-qiita"&gt;複数のASP.NET Core Webアプリーションでセッション情報を共有する方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Shuji_Kitamura/items/e8fa20c30b8bb52d5d84"&gt;https://qiita.com/Shuji_Kitamura/items/e8fa20c30b8bb52d5d84&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;複数の ASP.NET Core アプリケーション間でセッション情報を共有する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Redis を使用してアプリケーション間でセッションを共有する構成を解説している。&lt;/p&gt;
&lt;h3 id="monodigit-separator-qiita"&gt;MonoでDigit Separator (桁区切り文字)にハメられた話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ktz_alias/items/42359f5fe76f2cf21ac9"&gt;https://qiita.com/ktz_alias/items/42359f5fe76f2cf21ac9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono の mcs (C# コンパイラー) では Digit Separators (桁区切り文字; 数字区切り文字) の処理に不具合があり、不正な値となる問題があるという記事。&lt;/p&gt;
&lt;p&gt;Roslyn では問題がないため、Mono かつ mcs を使用している場合に影響を受けるので外部のサービスなどで注意が必要なケースがある(Mono には Roslyn の csc も含まれている)。&lt;/p&gt;
&lt;h3 id="maui"&gt;MAUI で独自のコントロールを作る方法のメモ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/maui-custom-control"&gt;https://zenn.dev/okazuki/articles/maui-custom-control&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI でネイティブのコントロールを使用するカスタムコントロールを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-generic-attributes-more-than-syntax-sugar"&gt;C# 11 Generic Attributes More Than Syntax Sugar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gsferreira.com/archive/2022/csharp-11-generic-attributes-more-than-syntax-sugar/"&gt;https://gsferreira.com/archive/2022/csharp-11-generic-attributes-more-than-syntax-sugar/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入されるジェネリック属性についての記事。&lt;/p&gt;
&lt;p&gt;簡単なコード例でどのような形で利用できるのかといったことを紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-ui-july-outlook-clone"&gt;.NET MAUI UI July: Outlook Clone&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://goforgoldman.com/2022/06/30/outlook-clone.html"&gt;https://goforgoldman.com/2022/06/30/outlook-clone.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で Outlook の UI を再現してみるという記事。&lt;/p&gt;
&lt;h3 id="distribute-visual-studio-project-templates"&gt;Distribute Visual Studio project templates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pieterjandeclippel.medium.com/distribute-visual-studio-project-templates-1788324cc842"&gt;https://pieterjandeclippel.medium.com/distribute-visual-studio-project-templates-1788324cc842&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio (.NET SDK) のプロジェクトテンプレートを配布する方法についての記事。&lt;/p&gt;
&lt;h3 id="creating-a-treeview-control-in.net-maui"&gt;Creating a TreeView control in .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/icebeam7/creating-a-treeview-control-in-net-maui-49mp"&gt;https://dev.to/icebeam7/creating-a-treeview-control-in-net-maui-49mp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI でツリービューコントロールを実装するという記事。&lt;/p&gt;
&lt;h3 id="containerizing-a-running-application-with-aws-app2container-bill-the-vest-guy"&gt;Containerizing a Running Application with AWS App2Container - Bill, the Vest Guy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://billthevestguy.com/2022/07/03/containerizing-a-running-application-with-aws-app2container/"&gt;https://billthevestguy.com/2022/07/03/containerizing-a-running-application-with-aws-app2container/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework で実装されたアプリケーションを AWS App2Container でコンテナー化する方法についての記事。&lt;/p&gt;
&lt;h3 id="the-best.net-decompiler-comparison-guide-free-and-paid"&gt;The Best .NET Decompiler Comparison Guide ✅ (Free and Paid)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/best-dotnet-decompilers/"&gt;https://blog.dotnetsafer.com/best-dotnet-decompilers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のデコンパイラー(有償および無償)を比較紹介している記事。&lt;/p&gt;
&lt;p&gt;記事では ildasm, ILSpy, DnSpy, 9Rays Spices.Net, Redgate .NET Reflector, JustDecompile, dotPeek のそれぞれの特徴を紹介している。&lt;/p&gt;
&lt;h3 id="returning-xml-from-minimal-apis-in.net-6"&gt;Returning XML from minimal APIs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/returning-xml-from-minimal-apis-in-dotnet-6/"&gt;https://andrewlock.net/returning-xml-from-minimal-apis-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal APIs で XML を返すリザルトを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では RecyclableMemoryStream を使用したバッファーのプーリングについても触れている。&lt;/p&gt;
&lt;h3 id="checking-orleans-with-the-pvs-studio-analyzer-dev-community"&gt;Checking Orleans with the PVS-Studio analyzer - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/unicorn_developer/checking-orleans-with-the-pvs-studio-analyzer-3id2"&gt;https://dev.to/unicorn_developer/checking-orleans-with-the-pvs-studio-analyzer-3id2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans を PVS-Studio Analyzer (有償の静的コードアナライザー) で解析して見つかった問題を紹介する記事。&lt;/p&gt;
&lt;p&gt;初期化の順番、重複したコードといった様々な問題が発見されている。&lt;/p&gt;
&lt;h3 id="story-about-graceful-termination-with-modern.net"&gt;Story about graceful termination with modern .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.kbegiedza.eu/dotnet-and-story-about-graceful-termination"&gt;https://blog.kbegiedza.eu/dotnet-and-story-about-graceful-termination&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションでコンテナーのシャットダウン要求のようなグレースフルな終了を実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.Extensions.Hosting の BackgroundService を使用した方法を紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-tech.guitarrapc.com"&gt;Visual Studio 2022 でインラインで型名やパラメーター名を表示する設定 - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2022/07/08/015920"&gt;https://tech.guitarrapc.com/entry/2022/07/08/015920&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で導入されたインラインヒント (ReSharper や Rider の Inlay hints と同様の機能) を有効にする方法を紹介する記事。&lt;/p&gt;
&lt;h3 id="tag-helper-for-display-templates-youve-been-haacked"&gt;Tag Helper for Display Templates | You've Been Haacked&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://haacked.com/archive/2022/07/08/display-template-tag-helper/"&gt;http://haacked.com/archive/2022/07/08/display-template-tag-helper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Html.DisplayFor(...)&lt;/code&gt; の代わりに &lt;code&gt;&amp;lt;display for=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; で呼び出せるタグヘルパーを実装するという記事。&lt;/p&gt;
&lt;h3 id="the-fastest.net-ever-the-latest-new-features-of.net-7-confirm-the-rumors"&gt;The FASTEST .NET Ever? The Latest New Features of .NET 7 Confirm the Rumors&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.dotnetsafer.com/dotnet-7-performance-features-benchmark-comparison/"&gt;https://blog.dotnetsafer.com/dotnet-7-performance-features-benchmark-comparison/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で達成されるといわれているパフォーマンス改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;リフレクション、On Stack Replacement、起動時間や AOT など。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="damianedwardsblazoridentity-an-exploration-of-recreating-the-asp.net-core-identity-ui-functionality-in-blazor-components"&gt;DamianEdwards/BlazorIdentity: An exploration of recreating the ASP.NET Core Identity UI functionality in Blazor components.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/DamianEdwards/BlazorIdentity"&gt;https://github.com/DamianEdwards/BlazorIdentity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で ASP.NET Core Identity の UI を再実装しているライブラリー。&lt;/p&gt;
&lt;h3 id="skater.net-obfuscator-index"&gt;Skater .NET Obfuscator - Index&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://skaterpro.net/"&gt;https://skaterpro.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有償の .NET 向け難読化ツール。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/tannergooding/status/1543456262230200320?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I should clarify no differences in &amp;quot;normal&amp;quot; single threaded code.&lt;br&gt;&lt;br&gt;You can pretty easily create observable differences in safe single threaded code if you know what you&amp;#39;re doing.&lt;br&gt;&lt;br&gt;It&amp;#39;s just expected most methods and ideas won&amp;#39;t do something like that so it wouldn&amp;#39;t be an issue&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1543456262230200320?ref_src=twsrc%5Etfw"&gt;July 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt; 修飾子をつけても値渡しと違いはないといったツイートから、実際には大きい構造体以外では複雑なコード生成によるパフォーマンスの悪化や、防衛的コピーやマルチスレッドでの問題の発生といったことがあるよというツッコミ。&lt;/p&gt;
&lt;!-- https://twitter.com/tannergooding/status/1545096402732167168?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This means that you need to consider `constexpr` in the face of &amp;quot;ref assembly&amp;quot;.&lt;br&gt;&lt;br&gt;You need to consider `constexpr` in the face of runtime differences or behaviors (say Roslyn runs on Mono and the user has set an environment variable opting into &amp;quot;fast math&amp;quot;, changing the result)&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1545096402732167168?ref_src=twsrc%5Etfw"&gt;July 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# では &lt;code&gt;Math.Floor(100/7)&lt;/code&gt; をコンパイル時定数化できないんですか?という問いに対して、JIT はできるかもしれないが C# (Roslyn) はその関数が決定論的に pure な関数であることを伝えることができないので無理という話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="arm64-server-throughput-address-many-core-scaling-challenges-issue-70528-dotnetruntime"&gt;[Arm64 Server Throughput] Address many-core scaling challenges · Issue #70528 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/70528#issuecomment-1171487696"&gt;https://github.com/dotnet/runtime/issues/70528#issuecomment-1171487696&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 のメニーコアサーバーでのスケーリングに関する Issue。&lt;/p&gt;
&lt;p&gt;.NET 7 では .NET 6 に比べて最大5倍のパフォーマンスを出せるようになったというコメント。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/07/01/updates</id>
		<title>2022-07-01: Uno Platform 4.4, Leveraging trimming to make the Microsoft Store faster and reduce its binary size, StackExchange.Redis 2.6.48</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/07/01/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-07-01T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="uno-platform-4.4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more"&gt;Uno Platform 4.4 – Wasm Threading+Exception Handling, Rich Animations, GamePad APIs and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/"&gt;https://platform.uno/blog/uno-platform-4-4-wasm-threadingexception-handling-rich-animations-gamepad-apis-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは Skottie 統合による Lottie アニメーションの再生、TextBlock の SkiaSharp での書き換え、テンプレートの更新、ゲームパッド API、パフォーマンス改善などが含まれている。&lt;/p&gt;
&lt;p&gt;また WebAssembly に関する強化も .NET 7 に先駆けて幾つか導入され WebAssembly 例外や WebAssembly スレッドのサポートが追加となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/06/29/uno-platform-4-4.aspx"&gt;Uno Platform Does WebAssembly Threading Months Ahead of .NET 7 -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size-ifdef-windows"&gt;Leveraging trimming to make the Microsoft Store faster and reduce its binary size - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/"&gt;https://devblogs.microsoft.com/ifdef-windows/leveraging-trimming-to-make-the-microsoft-store-faster-and-reduce-its-binary-size/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションをトリミングすることでパフォーマンス改善とバイナリサイズの削減を行ったことについての記事。&lt;/p&gt;
&lt;p&gt;最近更新された Microsoft Store アプリケーションは C# で書かれた UWP アプリケーションであり、.NET Native (Native AOT の前身的なもの) で AOT コンパイルされている。.NET Native は .NET SDK 同様 IL トリミングの機能があり、記事では IL トリミングをどのようにして有効にするか、有効にした場合にどのような落とし穴や壊れやすい部分があるのかといったことに触れている。&lt;/p&gt;
&lt;p&gt;ケーススタディーとして動的なプロパティーの取得や XAML のページレイアウトセレクターの型名の取得などといったコードでリフレクションをいかにして減らしたかを説明している。また、オープンソースの Windows Community Toolkit でのトリミングの問題解消に貢献したとのこと。&lt;/p&gt;
&lt;p&gt;トリミングによって Microsoft Store のアプリケーションバイナリサイズが 25% 程度削減できたとしている。&lt;/p&gt;
&lt;p&gt;まとめとしてトリミングの有効化は落とし穴や必要な作業も増えてしまうがとても価値があり、新しいコードを書くときは常にパフォーマンスとトリミングを念頭に置くことが重要であるとしている。これは後からトリミングを有効にした際のエラーを減らして時間を節約できることに繋がる他、(リフレクションなどによる)エラーの発生しにくいコードを書くことを強制されるためとしている。&lt;/p&gt;
&lt;h3 id="stackexchange.redis-2.6.48-is-now-deployed"&gt;StackExchange.Redis 2.6.48 is now deployed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/marcgravell/status/1541782061278789632"&gt;https://twitter.com/marcgravell/status/1541782061278789632&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StackExchange.Redis 2.6.48 がリリースされた。&lt;/p&gt;
&lt;p&gt;直前にリリースされたバージョン 2.6.45 でのバッチ/トランザクションハンドリングに問題があり、正しくトランザクションに入らない可能性があるため、2.6.45 を使用している場合には更新の必要がある。(2.6.45 は NuGet から取り下げ済)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/StackExchange.Redis/pull/2177"&gt;URGENT Fix error in batch/transaction handling by mgravell · Pull Request #2177 · StackExchange/StackExchange.Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/marcgravell/status/1541782061278789632?s=20&amp;t=iAAZQNQJkSxrjSRojc2y7g --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;StackExchange.Redis 2.6.48 is now deployed; this is considered a critical update if you&amp;#39;re using the recent 2.6.45 (if you&amp;#39;re not using that: no urgency) &lt;a href="https://t.co/ri2dIYXMdF"&gt;https://t.co/ri2dIYXMdF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marc Gravell (&amp;#64;marcgravell) &lt;a href="https://twitter.com/marcgravell/status/1541782061278789632?ref_src=twsrc%5Etfw"&gt;June 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="cosmos-db.net-qiita"&gt;Cosmos DBに対する .NET での再試行ロジック - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4"&gt;https://qiita.com/hamu502/items/2cc26723c010fa7e6ca4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cosmos DB の .NET クライアントでの再試行ロジックについて解説している記事。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clone-skipping-strings"&gt;High performance .NET: Building a Redis Clone – skipping strings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3"&gt;https://ayende.com/blog/197569-B/high-performance-net-building-a-redis-clone-skipping-strings?Key=bde50824-c368-4a40-a839-c677c368b1d3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis クローンを作るシリーズの記事。&lt;/p&gt;
&lt;p&gt;文字列をスキップしてバイト配列を保持するのに再利用可能なバッファーを作ることで文字列の確保を回避することについて。&lt;/p&gt;
&lt;h3 id="native-aot-and-ahead-of-time-compilation-in.net"&gt;Native AOT and Ahead-of-Time Compilation in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/"&gt;https://flerka.github.io/personal-blog/2022-06-21-ahead-of-time-compilation/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の Native AOT (事前コンパイル) についての記事。&lt;/p&gt;
&lt;p&gt;記事では仕組みや AOT でのメリットとデメリット、.NET 7 での Native AOT を利用してコンソールアプリケーションや AWS Lambda での実行とその効果といったものを紹介している。&lt;/p&gt;
&lt;h3 id="sneak-peek-and-edit-your-code-while-you-search-visual-studio-blog"&gt;Sneak Peek and Edit Your Code While You Search - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/"&gt;https://devblogs.microsoft.com/visualstudio/sneak-peek-and-edit-your-code-while-you-search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のプレビューで実装されている All-In-One 検索の 17.3 Preview 2 の新機能の紹介記事。&lt;/p&gt;
&lt;p&gt;17.3 Preview 2 では検索結果の一覧にコードプレビューから編集が可能となり、検索 UI から離れることなく完全なコード編集体験が提供される。&lt;/p&gt;
&lt;h3 id="creating-a-certificate-checker-with.net"&gt;Creating a Certificate Checker With .Net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da"&gt;https://betterprogramming.pub/creating-a-certificate-checker-with-net-3317b53f91da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core と HttpClient を使って証明書のチェックツールを作るという記事。&lt;/p&gt;
&lt;p&gt;記事では URL を POST すると、有効期限などを返却するような API を実装している。&lt;/p&gt;
&lt;h3 id="net-maui-qiita"&gt;【抄訳】.NET MAUI の使用を開始するための新しいリソース - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32"&gt;https://qiita.com/Azure_App_Innovation_team/items/2133fea31b7da7a56e32&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;New Resources to Get Started with .NET MAUI&lt;/a&gt; の翻訳記事。&lt;/p&gt;
&lt;h3 id="the-difference-between-null-check-with-is-instead-of-in-c"&gt;The difference between null check with ‘is’ instead of ‘==’ in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e"&gt;https://medium.com/&amp;#64;erickgallani/the-difference-between-null-check-with-is-instead-of-in-c-ed3d955a639e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; チェックにおいて &lt;code&gt;is&lt;/code&gt; を使用した場合と &lt;code&gt;==&lt;/code&gt; を使用した場合での違いについて解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; では &lt;code&gt;==&lt;/code&gt; オペレーターオーバーロードを考慮しない比較であることなど。&lt;/p&gt;
&lt;h3 id="using-refit-to-consume-apis-in-c-code-maze"&gt;Using Refit to Consume APIs in C# - Code Maze&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code-maze.com/using-refit-to-consume-apis-in-csharp/"&gt;https://code-maze.com/using-refit-to-consume-apis-in-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Refit を使用して REST クライアントを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-a.net-maui-windows-app-as-administrator-elevated"&gt;Running a .NET MAUI Windows App as Administrator (Elevated)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/"&gt;https://blog.verslu.is/maui/net-maui-windows-app-as-administrator-elevated/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションを管理者権限で起動する方法についての記事。&lt;/p&gt;
&lt;p&gt;package.appxmanifest と app.manifest で設定を指定することで可能となる。&lt;/p&gt;
&lt;h3 id="observing-all-http-requests-in-a.net-application-gerald-barre"&gt;Observing all http requests in a .NET application - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm"&gt;https://www.meziantou.net/observing-all-http-requests-in-a-dotnet-application.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpClient を使用したリクエストを DiagnosticSource と EventSource で監視する方法についての記事。&lt;/p&gt;
&lt;h3 id="multi-image-docker-images-using-copy-with-images-directly-from-registries"&gt;Multi-Image Docker Images: Using COPY with Images directly from registries&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed"&gt;https://dev.to/shandesai/multi-image-docker-images-using-copy-with-images-directly-from-registries-50ed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker イメージをビルド時に、複数の Docker イメージから COPY でファイルをコピーする方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET のイメージには特定のバージョンのランタイムのみが含まれるため、以前のバージョンを必要とする場合に複合的なイメージを自分で用意する必要がある。&lt;/p&gt;
&lt;h3 id="cppsharp-native-binding"&gt;CppSharp で Native Binding を楽に行う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/70d9dc73f8e663"&gt;https://zenn.dev/tan_y/articles/70d9dc73f8e663&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CppSharp を使用してネイティブライブラリーのヘッダーファイルからバインディングを生成し、C# から呼び出すことを解説する記事。&lt;/p&gt;
&lt;p&gt;記事では CppSharp の使用方法や C++ との連携、その他注意すべき点にも触れている。&lt;/p&gt;
&lt;h3 id="idbcontextfactory-qiita"&gt;IDbContextFactory を使って並列でクエリを実行する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/bc7407462f399da001ec"&gt;https://qiita.com/karuakun/items/bc7407462f399da001ec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で並列にクエリーを実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;DbContext は並列に操作を行うことができないため、 IDbContextFactory を使用して複数の DbContext を作ることで呼び出せるようにする。&lt;/p&gt;
&lt;h3 id="getting-started-with-devops-and.net-maui"&gt;Getting Started with DevOps and .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/devops-for-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の DevOps パイプラインを GitHub Actions と Azure DevOps を使用して構築することを説明している記事。&lt;/p&gt;
&lt;p&gt;macOS でのビルドと Windows でのビルドについてそれぞれ触れている。&lt;/p&gt;
&lt;h3 id="understanding-your-middleware-pipeline-in.net-6-with-the-middleware-analysis-package"&gt;Understanding your middleware pipeline in .NET 6 with the Middleware Analysis package&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/"&gt;https://andrewlock.net/understanding-your-middleware-pipeline-in-dotnet-6-with-the-middleware-analysis-package/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ミドルウェアの診断パッケージを使用してミドルウェアのパイプラインを理解することを説明している記事。&lt;/p&gt;
&lt;p&gt;Microsoft.AspNetCore.MiddlewareAnalysis と DiagnosticsAdapter を使用することでミドルウェアの呼び出しイベントを購読でき、記事ではそれらを使って呼び出しをログに出力するといったことを行っている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jcouv/status/1541818706249916419?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We merged a preview C# 11 feature into VS 17.3: `ref` fields.&lt;br&gt;&lt;br&gt;This allows adding `ref` fields inside `ref struct` types (to safely simplify some perf scenarios) and overriding lifetime defaults with the `scoped` modifier for variables.&lt;br&gt;&lt;br&gt;Spec: &lt;a href="https://t.co/RKtYbm8e3G"&gt;https://t.co/RKtYbm8e3G&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julien Couvreur (&amp;#64;jcouv) &lt;a href="https://twitter.com/jcouv/status/1541818706249916419?ref_src=twsrc%5Etfw"&gt;June 28, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;C# 11 のプレビュー機能である &lt;code&gt;ref&lt;/code&gt; fields が Visual Studio 2022 17.3 (プレビュー) にマージされたという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ufcpp.net/blog/2022/2/ref-field/"&gt;【C# 11候補】 ref field | ++C++; // 未確認飛行 C ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/jsnover/status/1541447375369097217?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After 22+ awesome years at Microsoft (18+ of which were awesome in a good way 😂 ), it is time for me to try something new.&lt;br&gt;&lt;br&gt;I feel blessed to have had the opportunity to work with such incredible people and to work on things that matter.&lt;br&gt;&lt;br&gt;My last day will be Friday, July 1st. &lt;a href="https://t.co/l2inatE2BM"&gt;pic.twitter.com/l2inatE2BM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeffrey Snover (&amp;#64;jsnover) &lt;a href="https://twitter.com/jsnover/status/1541447375369097217?ref_src=twsrc%5Etfw"&gt;June 27, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;PowerShell の生みの親であるところの Jeffrey Snover 氏が Microsoft を去るという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/24/updates</id>
		<title>2022-06-24: Incremental ASP.NET Migration Tooling Preview 2, gRPC Remove C# implementation, GitHub Copilot</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/24/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-24T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="incremental-asp.net-migration-tooling-preview-2.net-blog"&gt;Incremental ASP.NET Migration Tooling Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/incremental-asp-net-migration-tooling-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;段階的 ASP.NET 移行ツール Preview 2 についての記事。&lt;/p&gt;
&lt;p&gt;ASP.NET 移行ツール Preview 2 のリリースではコードの改善や ASP.NET/ASP.NET Core アプリケーション間の認証共有といったものが含まれる。記事では ASP.NET との認証の共有についてと実際の利用手順について触れている。&lt;/p&gt;
&lt;h3 id="release-release-v1.47.0-grpcgrpc"&gt;Release Release v1.47.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.47.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.47.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 がリリースされた(.NET 実装は含まれない)。&lt;/p&gt;
&lt;p&gt;gRPC 1.47.0 では C# 実装が削除され C-core のパッケージは 2.46.x としてメンテナンスになり、現行の実装は grpc-dotnet へと移行する。なおツールに関しては引き続きリポジトリーに残る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/grpc/grpc/pull/29225"&gt;Remove C# implementation (individual packages will continue to be maintained through v2.46.x patches or moved to grpc-dotnet) by jtattermusch · Pull Request #29225 · grpc/grpc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="github-copilot-is-generally-available-to-all-developers-the-github-blog"&gt;GitHub Copilot is generally available to all developers | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/"&gt;https://github.blog/2022-06-21-github-copilot-is-generally-available-to-all-developers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI ベースのコーディング支援ツールである GitHub Copilot が個人向けに一般公開された。&lt;/p&gt;
&lt;p&gt;月額 $10 または年額 $100 で利用可能で60日間のトライアルが可能。学生や人気のあるオープンソースプロジェクトのメンテナーは無料で利用できる。&lt;/p&gt;
&lt;p&gt;IDE は Visual Studio Code や Visual Studio, Rider などで利用できる。&lt;/p&gt;
&lt;h3 id="listen-up-visual-studio-has-a-new-feature-you-need-to-hear-about-visual-studio-blog"&gt;Listen Up, Visual Studio has a new feature you need to hear about! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/audio-cues-in-visual-studio-2022-17-3-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で導入されたオーディオキュー機能についての記事。&lt;/p&gt;
&lt;p&gt;オーディオキューはキャレットがエラーやブレークポイントのような特定行に移動したときに音を鳴らす機能。Visual Studio Code ですでに導入されている。&lt;/p&gt;
&lt;h3 id="improving.net-host-error-messages-and-supportability.net-blog"&gt;Improving .NET host error messages and supportability - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のホストやフレームワークがインストールされていない場合のエラーメッセージを .NET 7 Preview 6 で改善したことについての記事。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="dotnet-corenugetdocker-qiita"&gt;Dotnet CoreプロジェクトでプライベートNuGetフィードを使ってセキュアなDockerイメージを作る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/superriver/items/3a5e14bc1880b00d7415"&gt;https://qiita.com/superriver/items/3a5e14bc1880b00d7415&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET プロジェクトの Docker イメージをビルド時にプライベートの NuGet フィードを利用する必要がある場合の対応についての記事。&lt;/p&gt;
&lt;h3 id="a-gentle-introduction-to-c-11-list-patterns"&gt;A Gentle Introduction to C# 11 List Patterns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c"&gt;https://medium.com/&amp;#64;gsferreira/a-gentle-introduction-to-c-11-list-patterns-ed7807c5484c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 に入る予定のリストパターン記法についての記事。&lt;/p&gt;
&lt;h3 id="centralized-appsettings-for.net-apps-using-spring-cloud-config"&gt;Centralized appsettings for .NET apps using Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535"&gt;https://ed555009.medium.com/centralized-appsettings-for-net-apps-using-spring-cloud-config-d5835109b535&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud Config サーバーで .NET のアプリケーション構成 (appsettings) を保持し、利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="postgresql-14-breaks-the.net-and-java-drivers-for-postgresql"&gt;PostgreSQL 14 Breaks the .NET and Java Drivers for PostgreSQL&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/"&gt;https://www.infoq.com/news/2022/06/PostgreSQL-14-Breaking-Change/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL 14 では SQL 関数を作成する際に &lt;code&gt;BEGIN ATOMIC ... END&lt;/code&gt; を使用する場合に .NET のドライバーと互換性がない問題についての記事。&lt;/p&gt;
&lt;p&gt;Npgsql では Raw SQL モードが追加されているため、それを利用することで回避できる。&lt;/p&gt;
&lt;h3 id="high-performance.net-building-a-redis-clonenaively-ayende-rahien"&gt;High performance .NET: Building a Redis Clone–naively - Ayende &amp;#64; Rahien&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively"&gt;https://ayende.com/blog/197412-B/high-performance-net-building-a-redis-clone-naively&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で Redis クローンを実装してハイパフォーマンスなコードを書いていくシリーズ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197537-A/high-performance-net-building-a-redis-clone-the-wrong-optimization-path"&gt;High performance .NET: Building a Redis Clone– the wrong optimization path - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayende.com/blog/197505-C/high-performance-net-building-a-redis-clone-separation-of-computation-i-o"&gt;High performance .NET: Building a Redis Clone–separation of computation &amp;amp; I/O - Ayende &amp;#64; Rahien&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nuget-support-in-visual-studio-for-mac-17.0-matt-ward"&gt;NuGet Support in Visual Studio for Mac 17.0 - Matt Ward&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/"&gt;https://lastexitcode.com/blog/2022/06/19/NuGetSupportInVisualStudio17-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 での NuGet サポートの変更点についての記事。&lt;/p&gt;
&lt;p&gt;NuGet のバージョン変更や、設定ファイルの場所の変更、パスワードのキーチェーンへの格納など。&lt;/p&gt;
&lt;h3 id="the-perils-of-combining-multicast-delegates-with-tasks-in-c-endjin"&gt;The Perils of Combining Multicast Delegates with Tasks in C# | endjin&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html"&gt;https://endjin.com/blog/2022/06/the-perils-of-combining-multicast-delegates-with-tasks-in-csharp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マルチキャストデリゲートと Task の組み合わせについての記事。
マルチキャストデリゲートは最後のデリゲートの値を返すため、Task と組み合わせて使うと予期せぬ結果となる。&lt;/p&gt;
&lt;h3 id="net6-asp.net-core1asp.net-webapivue3-vite-qiita"&gt;.NET6 ASP.NET Coreで１つのプロジェクトで、ASP.NET WebAPI+Vue3 Viteの環境を作ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7"&gt;https://qiita.com/reimei2020/items/4e14e5c9ead4bbaa20d7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core プロジェクトで Vue と Vite を組み合わせた構成を構築する手順についての記事。&lt;/p&gt;
&lt;h3 id="multi-tenant-apps-with-ef-core-and-asp.net-core-the.net-tools-blog"&gt;Multi-tenant Apps With EF Core and ASP.NET Core | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/"&gt;https://blog.jetbrains.com/dotnet/2022/06/22/multi-tenant-apps-with-ef-core-and-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core と ASP.NET Core を使用してマルチテナントアプリケーションを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では一つのデータベースを共有する方法とテナントごとにデータベースを持つ方法での接続について触れている。&lt;/p&gt;
&lt;h3 id="feature-flags-in.net-from-simple-to-more-advanced"&gt;Feature Flags in .NET, from simple to more advanced&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og"&gt;https://dev.to/timdeschryver/feature-flags-in-net-from-simple-to-more-advanced-18og&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションにフィーチャーフラグを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では Microsoft.FeatureManagement.AspNetCore を使用してカスタマイズする方法などに触れている。&lt;/p&gt;
&lt;h3 id="consuming-anonymous-types-with-diagnosticlistener-in.net-6"&gt;Consuming anonymous types with DiagnosticListener in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/"&gt;https://andrewlock.net/consuming-anonymous-types-with-diagnosticlistener-in-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で DiagnosticListener を利用時に匿名型のデータが渡ってきた場合の処理についての記事。&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DiagnosticAdapter が利用できるが、更新されないステータスになっていることなどに触れている。&lt;/p&gt;
&lt;h3 id="resharper-rider-2022.2-eap6-has-just-been-released"&gt;ReSharper &amp;amp; Rider 2022.2 EAP6 has just been released!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;
&lt;a href="https://www.jetbrains.com/rider/nextversion/"&gt;https://www.jetbrains.com/rider/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2022.2 EAP6 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper では IL Viewer における高レベル/低レベル C# でコンパイル表示に対応し、Rider では Angular 14 のサポートとデータベースに関する機能が追加された。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1539936408403644417?s=12&amp;t=gFjBq0dbcfHQJcpAfvGndA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.2 EAP6 has just been released! This update contains an option to view decompiled high-level / low-level C# code in the IL Viewer. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/NoWHM5dBvi"&gt;https://t.co/NoWHM5dBvi&lt;/a&gt; &lt;a href="https://t.co/xJhY7cucLr"&gt;pic.twitter.com/xJhY7cucLr&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1539936408403644417?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1539940713416298497?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.2 EAP6 has just landed with support for Angular standalone components and 2 new models for resolving database objects. &lt;br&gt;Follow this link to learn more and download it:&lt;a href="https://t.co/HMvf9osthz"&gt;https://t.co/HMvf9osthz&lt;/a&gt; &lt;a href="https://t.co/1tKQZZ14k0"&gt;pic.twitter.com/1tKQZZ14k0&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1539940713416298497?ref_src=twsrc%5Etfw"&gt;June 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="ralfbiedertinteroptopus-the-polyglot-bindings-generator-for-your-library-c-c-python"&gt;ralfbiedert/interoptopus: The polyglot bindings generator for your library (C#, C, Python, …) 🐙&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ralfbiedert/interoptopus"&gt;https://github.com/ralfbiedert/interoptopus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rust の多言語向けバインディングを実装/生成するライブラリー。C# への対応がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/guilhermerochas/interop-your-net-application-with-rust-nk2"&gt;Interop your .NET application with Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1539715292368015360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One of the most exciting parts of this new release is support for managed code debugging. This includes support for managed stack frames and local variables! &lt;a href="https://t.co/3y6128jSQ0"&gt;https://t.co/3y6128jSQ0&lt;/a&gt; &lt;a href="https://t.co/w0wQxkQ2hl"&gt;pic.twitter.com/w0wQxkQ2hl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1539715292368015360?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview でマネージコードのデバッグでスタックフレームとローカル変数を確認できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonAWS/status/1539639350530641925 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The latest &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; Toolkit for Visual Studio 2022 has an updated Publish to AWS feature with a UX refresh. Get the AWS Toolkit for VS2022 at the link below, or update your existing version in VS using Extensions &amp;gt; Manage Extensions &amp;gt; Updates.&lt;a href="https://t.co/I4MJJphkDL"&gt;https://t.co/I4MJJphkDL&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1539639350530641925?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;AWS Toolkit for Visual Studio 2022 の AWS への発行 UX がリフレッシュされたものがリリースされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1539471033698177024 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Playing around with using static interface methods and the new IParsable&amp;lt;T&amp;gt; to make generic callsites for HTTP APIs.  Before .NET 7 there was no way to write generic code that did {Type}.TryParse/{Type}.Parse. The type system didn&amp;#39;t have a way to describe these contracts. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/hhlBOYQmGf"&gt;pic.twitter.com/hhlBOYQmGf&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1539471033698177024?ref_src=twsrc%5Etfw"&gt;June 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 7 以前は TryParse/Parse をジェネリックに書くことができなかったけど、static abstract members in interface と &lt;code&gt;IParsableT&lt;/code&gt; によってできるようなったという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-il-emit-support-for-methodinfo.invoke-and-friends-by-steveharter-pull-request-67917-dotnetruntime"&gt;Add IL Emit support for MethodInfo.Invoke() and friends by steveharter · Pull Request #67917 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67917"&gt;https://github.com/dotnet/runtime/pull/67917&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MethodInfo.Invoke()&lt;/code&gt; のような動的メソッド呼び出しのコードで IL を出力するようにしてパフォーマンスを向上するという PR&lt;/p&gt;
&lt;!-- https://twitter.com/kzu/status/1538935462831718401?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL: using MethodInto.Invoke() is fine again. Add IL Emit support for MethodInfo.Invoke() and friends by steveharter  &lt;a href="https://t.co/BCEV5Eo2fG"&gt;https://t.co/BCEV5Eo2fG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Cazzulino 🇦🇷 (&amp;#64;kzu) &lt;a href="https://twitter.com/kzu/status/1538935462831718401?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="tier0r2r-instrumented-tier0-optimized-tier1-by-egorbo-pull-request-70941-dotnetruntime"&gt;tier0/R2R - instrumented tier0 - optimized tier1 by EgorBo · Pull Request #70941 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/70941"&gt;https://github.com/dotnet/runtime/pull/70941&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ready2Run → 階層化 JIT (Tier 0) → 階層化JIT (Tier 1; PGO による最適化) という流れで起動時からのパフォーマンスを上げていく PR。&lt;/p&gt;
&lt;p&gt;R2R を使用しないフル Dynamic PGO は最終的には最速のパフォーマンスが出るが初回リクエスト応答の時間がとても遅くなってしまうため、ハイブリッドなアプローチで R2R の初回応答性とフル Dynamic PGO のパフォーマンスの両方を得られるようにする。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1538851479942987777?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;A proposal to add a new tier in JIT - &amp;quot;instrumented tier0 after AOT&amp;quot; &lt;a href="https://t.co/WvS3IkI2Ga"&gt;https://t.co/WvS3IkI2Ga&lt;/a&gt; - should allow us to still do PGO for AOT&amp;#39;d (R2R) code. &lt;a href="https://t.co/ttpIxNxz3R"&gt;pic.twitter.com/ttpIxNxz3R&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1538851479942987777?ref_src=twsrc%5Etfw"&gt;June 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/18/updates</id>
		<title>2022-06-18: .NET 7 Preview 5, Arm64 Visual Studio, .NET 6.0.6 and .NET Core 3.1.26</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/18/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-18T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-5.net-blog"&gt;Announcing .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Preview 5 での改善点として下記のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オブザーバビリティ&lt;/li&gt;
&lt;li&gt;System.Text.Json
&lt;ul&gt;
&lt;li&gt;ポリモーフィズム&lt;/li&gt;
&lt;li&gt;Utf8JsonReader.CopyString&lt;/li&gt;
&lt;li&gt;ソースコード生成の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System.IO
&lt;ul&gt;
&lt;li&gt;ReadExactly, ReadAtLeast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RegexGenerator のための新しい Roslyn アナライザーと CodeFix&lt;/li&gt;
&lt;li&gt;Generic Math&lt;/li&gt;
&lt;li&gt;System.Reflection を利用したメソッド呼び出しのパフォーマンス向上&lt;/li&gt;
&lt;li&gt;ML.NET テキスト分類 API&lt;/li&gt;
&lt;li&gt;CodeGen (JIT)&lt;/li&gt;
&lt;li&gt;トリミングの有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="arm64-visual-studio-visual-studio-blog"&gt;Arm64 Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/arm64-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 2 で ARM64 環境での Visual Studio 自身のネイティブ実行サポートが追加された。&lt;/p&gt;
&lt;p&gt;現時点では重要なワークロードして C++ 開発 (MSBuild)、.NET Framework と .NET でのデスクトップ (WinForms, WPF) 開発、.NET による Web 開発がサポートされている。拡張機能の移行に関しては別途ブログで解説されるとのこと。&lt;/p&gt;
&lt;p&gt;インストーラーは x64 と共通となっているためプラットフォームに合わせてインストールされる。またインストールには既存のバージョンのアンインストールが必要となっている点に注意が必要。&lt;/p&gt;
&lt;h3 id="announcing-entity-framework-7-preview-5.net-blog"&gt;Announcing Entity Framework 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/"&gt;https://devblogs.microsoft.com/dotnet/announcing-ef7-preview5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 についての記事。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 5 では SQL Server での AT TIME ZONE コマンドやコマンドと接続のインターセプト、&lt;code&gt;DeleteBehavior&lt;/code&gt; 属性の追加などが行われているが、記事では Table-per-concrete-type (TPC) についてフォーカスして紹介している。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-5.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 5 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 5 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JWT 認証の改善と自動認証設定
&lt;ul&gt;
&lt;li&gt;認証構成の簡素化&lt;/li&gt;
&lt;li&gt;エンドポイントの許可ポリシー&lt;/li&gt;
&lt;li&gt;開発時の JWT の管理を行う &lt;code&gt;dotnet user-jwts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の引数リストのパラメーターバインディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-7-preview-5-generic-math.net-blog"&gt;.NET 7 Preview 5 - Generic Math - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-7-generic-math/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で提供される static abstract member in interface の活用である Generic Math についての記事。&lt;/p&gt;
&lt;p&gt;記事では Generic Math によってどのようなことが可能となるか、.NET 6 でのプレビューからの変更点、インターフェースをはじめとした API について紹介している。&lt;/p&gt;
&lt;h3 id="net-june-2022-updates.net-6.0.6-and.net-core-3.1.26.net-blog"&gt;.NET June 2022 Updates – .NET 6.0.6 and .NET Core 3.1.26 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/june-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/june-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.6 と .NET Core 3.1.26 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合とセキュリティーに関する修正が含まれている。
セキュリティーに関しては NuGet の認証情報が漏洩してしまうことがある問題が修正されている。&lt;/p&gt;
&lt;p&gt;記事では .NET 5 のサポートが終了していること、.NET Core 3.1 のサポートも2022年12月13日に終了することにも触れている。&lt;/p&gt;
&lt;h3 id="net-framework-june-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework June 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-june-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年6月の累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースには新しいセキュリティー修正は含まれておらず、GC やその他の問題に関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="visual-studio-for-mac-17.3-preview-2-is-now-available-visual-studio-blog"&gt;Visual Studio for Mac 17.3 Preview 2 is now available - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-17-3-preview-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio for Mac 17.3 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正や改善と MAUI のサポートの改善が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the-ml.net-text-classification-api-preview.net-blog"&gt;Introducing the ML.NET Text Classification API (preview) - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/"&gt;https://devblogs.microsoft.com/dotnet/introducing-the-ml-dotnet-text-classification-api-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET にプレビューとして追加されたテキスト分類 API についての紹介記事。&lt;/p&gt;
&lt;h3 id="vnext-license-changes-discussion-2151-sixlaborsimagesharp"&gt;VNext License Changes · Discussion #2151 · SixLabors/ImageSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SixLabors/ImageSharp/discussions/2151"&gt;https://github.com/SixLabors/ImageSharp/discussions/2151&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp のライセンスを現在の Apache License から商用利用向けのライセンス体系に変更を検討しているという Discussion。&lt;/p&gt;
&lt;h3 id="oneservice-journey-to.net-6.net-blog"&gt;OneService Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/one-service-journey-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OneService と呼ばれる Microsoft Start、Microsoft Edge、Windows などでのコンテンツ体験を提供するサービスを .NET Framework から .NET 6 に移行した事例紹介記事。&lt;/p&gt;
&lt;p&gt;事例のハイライトには次のものをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インフラストラクチャーコストの 29% 削減&lt;/li&gt;
&lt;li&gt;移行したサービスの CPU 使用率の平均 30% 向上&lt;/li&gt;
&lt;li&gt;主な API の P95 レイテンシーが 8～27% 改善&lt;/li&gt;
&lt;li&gt;技術的負債の解消により、毎年の継続的な .NET のアップグレード&lt;/li&gt;
&lt;li&gt;生産的なチーム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事では移行の流れや、その間に行われていた手法について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OneService について&lt;/li&gt;
&lt;li&gt;移行ステージ&lt;/li&gt;
&lt;li&gt;最初の移行の試み&lt;/li&gt;
&lt;li&gt;.NET Framework 上での ASP.NET Core 2.1 への移行&lt;/li&gt;
&lt;li&gt;.NET 6 への移行&lt;/li&gt;
&lt;li&gt;パフォーマンスの改善&lt;/li&gt;
&lt;li&gt;コスト削減&lt;/li&gt;
&lt;li&gt;その他の恩恵&lt;/li&gt;
&lt;li&gt;運用環境における A/B テスト&lt;/li&gt;
&lt;li&gt;運用環境のミラーリング
&lt;ul&gt;
&lt;li&gt;運用環境のトラフィック1%をミラーリングして処理するカナリアクラスター&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運用環境へのデプロイ&lt;/li&gt;
&lt;li&gt;ASP.NET から ASP.NET Core への移行
&lt;ul&gt;
&lt;li&gt;レスポンスの gzip/Brotli 圧縮が外れていて Azure Front Door/Akamai のコストが増えるまで気づかなかった話&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API 課題
&lt;ul&gt;
&lt;li&gt;OData&lt;/li&gt;
&lt;li&gt;ServicePointManager の非推奨化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="june-9-2022.net-data-biweekly-updates-2022"&gt;June 9, 2022 - .NET Data Biweekly Updates (2022)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のデータアクセス関連のアップデート 2022年6月9日号。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 でのアップデートを中心に取り上げている。&lt;/p&gt;
&lt;h3 id="maybe-its-time-to-rethink-our-project-structure-with.net-6"&gt;Maybe it's time to rethink our project structure with .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core の Minimal API に合わせてプロジェクト構成を再考してはどうかという記事。&lt;/p&gt;
&lt;h3 id="introducing-the-new-website-nuke"&gt;Introducing the New Website | NUKE&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuke.build/blog/2022/06/15/new-website/"&gt;https://nuke.build/blog/2022/06/15/new-website/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NUKE の新しい Web サイトが公開された。&lt;/p&gt;
&lt;h3 id="is-codelens-enabled"&gt;Is CodeLens Enabled?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/is-codelens-enabled-7p7"&gt;https://dev.to/calvinallen/is-codelens-enabled-7p7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の拡張から CodeLens が有効になっているかどうかを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-does-packagereference-work"&gt;How does PackageReference work?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dfederm.com/how-does-packagereference-work/"&gt;https://dfederm.com/how-does-packagereference-work/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PackageReference が内部でどのように処理され、情報が保持されているのかを解説する記事。&lt;/p&gt;
&lt;h3 id="troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox"&gt;Troubleshooting CPU and exceptions issues with Datadog toolbox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da"&gt;https://chnasarre.medium.com/troubleshooting-cpu-and-exceptions-issues-with-datadog-toolbox-6ec4b2481da&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog .NET Tracer を使用して Datadog APM 上で CPU や例外に関する問題のトラブルシュートについての記事。&lt;/p&gt;
&lt;h3 id="new-profiler-feature-in-visual-studio"&gt;New Profiler feature in Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/new-profiler-feature-in-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 で導入された新しいプロファイリングツールの紹介記事。&lt;/p&gt;
&lt;p&gt;新しいプロファイリングツールではファイル I/O に関するパフォーマンス情報を取得できるようになっている。&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor-server-without-cookie"&gt;ASP.NET Core Blazor Server でオレオレ認証を追加したい without Cookie&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3"&gt;https://zenn.dev/okazuki/articles/blazor-oreore-auth-part3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP｡NET Core Blazor Server で Cookie を使用せず認証を行い、セッション中は維持する方法についての記事。&lt;/p&gt;
&lt;h3 id="dependency-injection-for-native-aot"&gt;Dependency Injection for Native AOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395"&gt;https://codevision.medium.com/dependency-injection-for-native-aot-e6cc90bef395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT 環境下で DI を使用する場合に NativeAOT のリフレクションフリーモードでも正しく動作させるにはどうすればよいのかという記事。&lt;/p&gt;
&lt;h3 id="c-11-static-abstract-members-ndepend"&gt;C# 11 static abstract members - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/c-11-static-abstract-members"&gt;https://blog.ndepend.com/c-11-static-abstract-members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) の static abstract members in interfaces についての解説記事。&lt;/p&gt;
&lt;h3 id="new-resources-to-get-started-with.net-maui.net-blog"&gt;New Resources to Get Started with .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/learn-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI を始めるのに役立つリソースの紹介記事。&lt;/p&gt;
&lt;h3 id="whats-new-in-visual-studio-make-it-your-home-visual-studio-blog"&gt;What’s New in Visual Studio: Make it Your Home - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-vs/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1 以降で導入された、バージョンアップでの新機能などを紹介する What's New ページについて。&lt;/p&gt;
&lt;h3 id="preview.net-7c-11-generic-math"&gt;[Preview版] .NET 7(C# 11) で導入される Generic math&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/a355451cc7a4a3"&gt;https://zenn.dev/naminodarie/articles/a355451cc7a4a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入される Generic Math の簡単な例の紹介記事。&lt;/p&gt;
&lt;h3 id="a-brief-introduction-to-diagnosticsource"&gt;A brief introduction to DiagnosticSource&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-brief-introduction-to-diagnostic-source/"&gt;https://andrewlock.net/a-brief-introduction-to-diagnostic-source/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DiagnosticSource についての簡単な解説記事。&lt;/p&gt;
&lt;p&gt;他のロギングの仕組みとの違いやリッスンしてイベントを購読する方法などについて触れている。&lt;/p&gt;
&lt;h3 id="share-debug-configuration-between.net-ides-with-launch-profiles"&gt;Share debug configuration between .NET IDEs with launch profiles&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p"&gt;https://dev.to/kaylumah/share-debug-configuration-between-net-ides-with-launch-profiles-4k8p&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio や Rider といった IDE での起動プロファイルを使用したデバッグ起動時の設定についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnet-symbol-symbols-download-utility"&gt;dotnet-symbol: Symbols download utility&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/dotnet-symbol"&gt;https://www.nuget.org/packages/dotnet-symbol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;シンボルファイルをダウンロードするツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/symstore/tree/main/src/dotnet-symbol"&gt;Symbol downloader dotnet cli extension - symstore/src/dotnet-symbol at main · dotnet/symstore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/drasticactionsa/status/1537108758362480640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;DA&amp;#39;s useful tool of the day: dotnet-symbol&lt;a href="https://t.co/9pcqnTxP8O"&gt;https://t.co/9pcqnTxP8O&lt;/a&gt;&lt;br&gt;&lt;br&gt;Saved me tons of time getting symbols from the MS symbol servers for sideloading.&lt;/p&gt;&amp;mdash; Drastic Actions (&amp;#64;drasticactionSA) &lt;a href="https://twitter.com/drasticactionSA/status/1537108758362480640?ref_src=twsrc%5Etfw"&gt;June 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="pharringsettingsstoreexplorer-a-visual-studio-extension-with-a-tool-window-for-viewing-and-editing-the-contents-of-visual-studios-settings-store"&gt;pharring/SettingsStoreExplorer: A Visual Studio Extension with a tool window for viewing and editing the contents of Visual Studio's Settings Store.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pharring/SettingsStoreExplorer"&gt;https://github.com/pharring/SettingsStoreExplorer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の設定ストアを表示、編集する拡張。&lt;/p&gt;
&lt;h3 id="github-avanadebeef-business-entity-execution-framework"&gt;GitHub - Avanade/Beef: Business Entity Execution Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Avanade/Beef"&gt;https://github.com/Avanade/Beef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core をベースとしたコード生成による Web API 実装のためのフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/karamem0/articles/2022_06_15_200000"&gt;Avanade Beef のレイヤー構造を理解する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deepdive"&gt;DeepDive&lt;/h2&gt;
&lt;h3 id="api-proposal-unreachableexception-issue-35324-dotnetruntime"&gt;API Proposal: UnreachableException · Issue #35324 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/35324"&gt;https://github.com/dotnet/runtime/issues/35324&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コード上到達しないことを表す UnreachableException の導入。&lt;/p&gt;
&lt;p&gt;コードカバレッジツールでの到達不能コードの認識や JIT でのコールドパスとして扱うといったことが可能になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.diagnostics.unreachableexception?view=net-7.0"&gt;UnreachableException クラス (System.Diagnostics) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/tannergooding/status/1536735202327703554?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In .NET 7, `throw new System.Diagnostics.UnreachableException()` ;)&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1536735202327703554?ref_src=twsrc%5Etfw"&gt;June 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/09/updates</id>
		<title>2022-06-09: Windows App SDK 1.1.0, Exchange Online Journey to .NET Core, Appwrite Cloud Functions supports .NET Runtime</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/09/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-09T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-v1.1.0-microsoftwindowsappsdk"&gt;Release v1.1.0 · microsoft/WindowsAppSDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.1.0"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1 ではいくつかの新機能と安定性の向上やパフォーマンス改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーションで同じ UI スレッド上に WinUI 3 コンテンツを持つ複数のウィンドウを作成できるようになった&lt;/li&gt;
&lt;li&gt;Windows 11 の Mica とアクリル背景スタイルを使用できるようになった&lt;/li&gt;
&lt;li&gt;Z-オーダー、サイズ変更や高さのあるタイトルバーといったカスタムタイトルバーの新機能&lt;/li&gt;
&lt;li&gt;Windows App SDK を使用したアプリケーションの昇格した権限での実行のサポート&lt;/li&gt;
&lt;li&gt;依存も含めた自己完結型の展開を行うアプリケーションに Windows App SDK を含めることが可能になった&lt;/li&gt;
&lt;li&gt;新しい API で環境変数の &lt;code&gt;PATH&lt;/code&gt; と &lt;code&gt;PATHEXT&lt;/code&gt; を実行時に管理、追跡できるようになった&lt;/li&gt;
&lt;li&gt;アプリケーションの再起動を手動で行うことや、システム更新時に自動で行うことが可能になった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、詳しくはリリースノートを参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/windows/apps/windows-app-sdk/stable-channel#version-11-stable"&gt;バージョン 1.1 Stable - Windows App SDK の安定チャネルのリリース ノート - Windows apps | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exchange-online-journey-to.net-core.net-blog"&gt;Exchange Online Journey to .NET Core - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/exchange-online-journey-to-net-core/"&gt;https://devblogs.microsoft.com/dotnet/exchange-online-journey-to-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft 365 の Exchange Online の .NET Core/.NET への移行事例を紹介している記事。&lt;/p&gt;
&lt;p&gt;Microsoft 365 は Exchange に由来する Substrate (基盤) と呼ばれるサービスのセットを持っていて、それを .NET Framework から .NET Core へと移行するといった話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://petri.com/office-365-substrate/"&gt;Exploring the Office 365 Substrate | Petri IT Knowledgebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Substrate は大体3,400のC#プロジェクトを持つ非常に大きなプロダクトで .NET Core へと移行するモチベーションとしてはコスト効率の向上やアクティブな開発を終えた .NET Framework からの最新のフレームワークへの移行といった点があったとのこと。&lt;/p&gt;
&lt;p&gt;まずは PoC を兼ねてた移行として POP3 プロトコルを扱うサービスの移行から始めたとのこと。これは POP3 プロトコルが比較的小さく、依存するものが少なく収まるため。それでも140程度のアセンブリと NuGet パッケージを .NET Core へと移行する必要があった。&lt;/p&gt;
&lt;p&gt;.NET Core アプリケーションが使うアセンブリは .NET Core か .NET Standard をターゲットとしている必要があるためアセンブリの移行には順番を決める必要があり、そのためデイリービルドからプロトコルのアセンブリの依存から依存関係グラフを作るツールを開発し、何を移行すると Substrate の他のプロセスや AppPool に影響があるのかを見つけるようにした。&lt;/p&gt;
&lt;p&gt;この記事の時点では Substrate のリポジトリ内の1,061アセンブリが移行され、下記のサービスが .NET Core で実行されているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POP3 サービス&lt;/li&gt;
&lt;li&gt;IMAP4 サービス&lt;/li&gt;
&lt;li&gt;Mapi-Http app pool&lt;/li&gt;
&lt;li&gt;MSExchangeTransportLogSearch サービス&lt;/li&gt;
&lt;li&gt;MSExchangeTransportStreamingOptics サービス&lt;/li&gt;
&lt;li&gt;(進行中) EAS on http.sys (※多分 EAS は Exchange ActiveSync)&lt;/li&gt;
&lt;li&gt;テストと評価システム&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET Core への移行での重要なチャレンジの一つとして、かなり多くの数の NuGet パッケージ (Microsoft社内、社外共に) に依存していたため、.NET Standard や .NET Core に対応していない場合にパッケージ所有者を見つけることが必要となったので、パッケージの所有者のマッピングを最新に保つことの重要性を理解したとのこと。&lt;/p&gt;
&lt;p&gt;移行した結果のパフォーマンスもいくつか紹介している。&lt;/p&gt;
&lt;p&gt;まず POP3 は .NET Framework 4.7.2 からの比較で CPU、GC、メモリー使用量といったものが大きく改善されたとしている。またこの移行時点では Span といった新しい API への対応は行っていないとのこと。&lt;/p&gt;
&lt;p&gt;IMAP4 は移行の手順が異なったため、.NET Framework との比較ではなく .NET 5 と .NET 6 の比較を行っている。この比較では CPU とメモリー使用量が改善され、パフォーマンスに関わりそうなコードの変更も行ったが多くは .NET 6 によるものではないかとしている。&lt;/p&gt;
&lt;p&gt;Mapi Http は IIS の App Pool 上から Kestrel に移行されたアプリケーションで、メモリー使用量や CPU 効率が改善されたとのこと。&lt;/p&gt;
&lt;p&gt;最後に CSO と呼ばれる Exchange ストア上の .NET 6 の Kestrel ベース gRPC アプリケーションについて。CSO はデータセンター内のノード間通信に使用されるもので、.NET Framework 版はなく最初から .NET Core で作られていたため、メールボックスからページを取得するクエリーでのシナリオでの比較がされている。その比較では REST ベースの従来の仕組みに比べ、レイテンシーやCPU、データベース CPUといったものが改善されたとのこと。異なるサービスなので直接の比較はできないが多くは Kestrel や gRPC といったものによるものだろうとしている。&lt;/p&gt;
&lt;p&gt;まとめとして .NET Core への移行はパフォーマンス上の利点が大きく、目標として Substrate 全体を .NET Core と gRPC を使用した内部マイクロサービスへと移行を進めていくとしている。加えてビルドチームのインフラストラクチャーの変更により、.NET の最新バージョンを利用できるようになり、利用者にパフォーマンスを提供できるとしている。&lt;/p&gt;
&lt;h3 id="cloud-functions-using-the-new.net-runtime"&gt;Cloud Functions Using the New .NET Runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/appwrite/cloud-functions-using-the-new-net-runtime-4fkm"&gt;https://dev.to/appwrite/cloud-functions-using-the-new-net-runtime-4fkm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AppWrite (セルフホスト可能なオープンソースBaaS) の Cloud Functions のランタイムとして .NET がサポートされた。&lt;/p&gt;
&lt;p&gt;記事では実際に AppWrite 上に .NET で実装した Cloud Functions を動かす方法を紹介している。&lt;/p&gt;
&lt;h3 id="performance-improvements-in.net-maui.net-blog"&gt;Performance Improvements in .NET MAUI - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-dotnet-maui/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 のプレビューから .NET 6 / MAUI GA までに行われた様々なパフォーマンス改善について数多く解説している。プラットフォームを問わないものもあるものの、特に Android 向けの改善が多く含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;起動時のパフォーマンス改善
&lt;ul&gt;
&lt;li&gt;Android でのプロファイリング方法&lt;/li&gt;
&lt;li&gt;プロファイルを使った AOT&lt;/li&gt;
&lt;li&gt;単一ファイルアセンブリストア&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Hosting の削除&lt;/li&gt;
&lt;li&gt;など..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションサイズの改善&lt;/li&gt;
&lt;li&gt;.NET PodCast サンプルアプリケーションの改善&lt;/li&gt;
&lt;li&gt;その他実験的な機能と高度なオプション&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="this-project-is-on-hold-discussion-689-aaubryyamldotnet"&gt;This project is on hold · Discussion #689 · aaubry/YamlDotNet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aaubry/YamlDotNet/discussions/689"&gt;https://github.com/aaubry/YamlDotNet/discussions/689&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YamlDotNet の開発者である Antoine Aubry 氏が現在アクティブにプロジェクトに取り込むつもりがないという話。&lt;/p&gt;
&lt;p&gt;Antoine 氏は既に使用する機会がなくエネルギーを割くことができないので、メンテナーやその他提案を受け付けている状況とのこと。&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.1.2-are-now-available-the.net-tools-blog"&gt;ReSharper and Rider 2022.1.2 Are Now Available | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/03/resharper-rider-2022-1-2/"&gt;https://blog.jetbrains.com/dotnet/2022/06/03/resharper-rider-2022-1-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider 2022.1.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper は Ctrl+. ショートカットとパフォーマンスの修正、Rider は SQL Server の Windows 統合認証と Unity に関連する修正が行われている。&lt;/p&gt;
&lt;h3 id="release-8.0.0-preview-4-communitytoolkitdotnet"&gt;Release 8.0.0 Preview 4 · CommunityToolkit/dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/CommunityToolkit/dotnet/releases/tag/v8.0.0-preview4"&gt;https://github.com/CommunityToolkit/dotnet/releases/tag/v8.0.0-preview4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET CommunityToolkit 8.0.0 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの属性がリネームされ、クラスレベルでの適用が可能となるなどの変更が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="generic-math-c-11-c-c"&gt;【Generic Math】 C# 11 での演算子の新機能 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/oop/generic-math-operators/"&gt;https://ufcpp.net/study/csharp/oop/generic-math-operators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 (.NET 7) で導入される新しい演算子の機能の紹介記事。&lt;/p&gt;
&lt;p&gt;現状、符号なし右シフト(&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;)について紹介している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-june-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | June 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/06/07/net-annotated-monthly-june-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/06/07/net-annotated-monthly-june-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の .NET 関連情報まとめの6月号&lt;/p&gt;
&lt;h3 id="opentelemetry-in-a-c.net-application-implementation-guide-signoz"&gt;OpenTelemetry in a C# .NET application | Implementation guide | SigNoz&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-dotnet/"&gt;https://signoz.io/blog/opentelemetry-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンソースの APM である SigNoz と OpenTelemetry を組み合わせて .NET アプリケーションのモニタリングを行うことについての記事。&lt;/p&gt;
&lt;h3 id="using-pathbase-with.net-6s-webapplicationbuilder"&gt;Using PathBase with .NET 6's WebApplicationBuilder&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/using-pathbase-with-dotnet-6-webapplicationbuilder/"&gt;https://andrewlock.net/using-pathbase-with-dotnet-6-webapplicationbuilder/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の ASP.NET Core で PathBase を使用する方法について。&lt;/p&gt;
&lt;p&gt;UsePathBase によるミドルウェアの追加は Routing ミドルウェアよりも先に行う必要があり、.NET 5 まではすべてコントロールしていたので問題なかったが、.NET 6 の Minimal API では暗黙的に Routing ミドルウェアが追加されるようになったため注意が必要となったことを説明している。&lt;/p&gt;
&lt;h3 id="securing-razor-pages-applications-with-auth0"&gt;Securing Razor Pages Applications with Auth0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://auth0.com/blog/securing-razor-pages-applications-with-auth0/"&gt;https://auth0.com/blog/securing-razor-pages-applications-with-auth0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor ページアプリケーションを Auth0 で保護する方法についての記事。&lt;/p&gt;
&lt;h3 id="the-best-c.net-web-application-tech-stack-choosing-the-front-end-michaels-coding-spot"&gt;The Best C# .NET Web Application Tech Stack: Choosing The Front End - Michael's Coding Spot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://michaelscodingspot.com/web-application-tech-stack-front-end/"&gt;https://michaelscodingspot.com/web-application-tech-stack-front-end/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の Web アプリケーションのフロントエンドの現状の選択肢を紹介している記事。&lt;/p&gt;
&lt;p&gt;SPA, サーバーサイドでレンダリングするパターン、Blazor WebAssembly のようなクライアントパターンなど。&lt;/p&gt;
&lt;h3 id="runtime-c-code-compilation-revisited-for-roslyn"&gt;Runtime C# Code Compilation Revisited for Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#compilation-startup-performance"&gt;https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#compilation-startup-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn でランタイムに C# のソースコードをコンパイルすることについての記事。&lt;/p&gt;
&lt;p&gt;記事ではコンパイルに必要な手順をはじめ、スクリプティング API やそれを利用したライブラリーの紹介、依存関係の管理(ライブラリ参照)といった点に触れている。&lt;/p&gt;
&lt;h3 id="how-to-test-asp.net-core-minimal-apis"&gt;How to test ASP.NET Core Minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/06/07/how-test-aspnetcore-minimal-apis.html"&gt;https://blog.maartenballiauw.be/post/2022/06/07/how-test-aspnetcore-minimal-apis.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API を使用したアプリケーションのテストを記述する方法についての記事。&lt;/p&gt;
&lt;p&gt;エントリーポイントとなるクラスを可視化する、WebApplicationFactory を使用するといったことを説明している。&lt;/p&gt;
&lt;h3 id="deploying-existing.net-5-project-with-docker-to-aws-lambda"&gt;Deploying Existing .NET 5 Project with Docker to AWS Lambda&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;vhlnd/deploying-existing-net-5-project-with-docker-to-aws-lambda-a7e0d8f1382b"&gt;https://medium.com/&amp;#64;vhlnd/deploying-existing-net-5-project-with-docker-to-aws-lambda-a7e0d8f1382b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既存の ASP.NET Core (.NET 5) プロジェクトを Docker イメージにして AWS Lambda 上に移行する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-maui-graphicview-qiita"&gt;.NET MAUI のGraphicViewで描写テスト - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/390f1dbb044fb7403cea"&gt;https://qiita.com/hqf00342/items/390f1dbb044fb7403cea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI の GraphicView で描画する際のパフォーマンスを簡単にテストしてみたという記事。&lt;/p&gt;
&lt;p&gt;前の記事では AbsoluteLayout による配置でパフォーマンスが出なかったため、GraphicView による描画の正攻法との比較となっている。&lt;/p&gt;
&lt;h3 id="authorization-authentication-from-backend-perspective-pt1"&gt;Authorization &amp;amp; Authentication from backend perspective pt1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/andreyka26git/authorization-authentication-from-backend-perspective-pt1-2239"&gt;https://dev.to/andreyka26git/authorization-authentication-from-backend-perspective-pt1-2239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サーバーサイド (ASP.NET Core) での認証と認可についての記事。&lt;/p&gt;
&lt;p&gt;Part 1として Basic 認証とダイジェスト認証の実装について紹介している。&lt;/p&gt;
&lt;h3 id="release-system.commandline-v2.0.0-beta4.22272.1-dotnetcommand-line-api"&gt;Release System.CommandLine v2.0.0-beta4.22272.1 · dotnet/command-line-api&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/command-line-api/releases/tag/2.0.0-beta4.22272.1"&gt;https://github.com/dotnet/command-line-api/releases/tag/2.0.0-beta4.22272.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine v2.0.0-beta4.22272.1 がリリースされた。&lt;/p&gt;
&lt;h3 id="avalonia-platform-support-why-its-simple"&gt;Avalonia platform support - why it's simple&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/avalonia/avalonia-platform-support-why-its-simple-cjd"&gt;https://dev.to/avalonia/avalonia-platform-support-why-its-simple-cjd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia のプラットフォームについての記事。&lt;/p&gt;
&lt;p&gt;Avalonia プラットフォームと MAUI の違いや、構成について簡単に紹介している。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-devloopedchromium-run-a-portable-chromium-using-dotnet-6-and-nuget"&gt;GitHub - devlooped/chromium: Run a portable Chromium using dotnet 6 and nuget.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/devlooped/chromium"&gt;https://github.com/devlooped/chromium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET CLI Tools またはアプリケーションから利用するためのライブラリーとして Chromium を組み込むツール/ライブラリー。&lt;/p&gt;
&lt;p&gt;Playwright を利用したプロジェクトでブラウザー自動操作のために組み込み Chromium を利用したいというケースなどで役立つとのこと。&lt;/p&gt;
&lt;h3 id="github-awslabsdotnet-nativeaot-labs-a-place-to-learn-about-and-experiment-with.net-nativeaot-on-aws"&gt;GitHub - awslabs/dotnet-nativeaot-labs: A place to learn about and experiment with .NET NativeAOT on AWS.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/awslabs/dotnet-nativeaot-labs"&gt;https://github.com/awslabs/dotnet-nativeaot-labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda 上で .NET の NativeAOT の動作させることについて学ぶためのリポジトリ。&lt;/p&gt;
&lt;h3 id="mukai1011types-dotnet-type-definition-of.net"&gt;mukai1011/types-dotnet: Type definition of .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mukai1011/types-dotnet"&gt;https://github.com/mukai1011/types-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションに JavaScript エンジンを組み込む ClearScript で使うための .NET クラスライブラリーの TypeScript 型定義を作るというリポジトリ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mukai1011/items/e27e70d5eea3c74e790d"&gt;.NETの型定義を書こうとしてえらいことになってる（ClearScript） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1534530435543334914?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ICYMI - Did you know you can request AWS credits for your .NET open source project? We are excited to see what you build on AWS that fuels the .NET &lt;a href="https://twitter.com/hashtag/opensource?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#opensource&lt;/a&gt; community. Visit the link below to make your request.&lt;a href="https://t.co/JYTn2heO3q"&gt;https://t.co/JYTn2heO3q&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/OSS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#OSS&lt;/a&gt; &lt;a href="https://t.co/xmFjND1Nta"&gt;pic.twitter.com/xmFjND1Nta&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1534530435543334914?ref_src=twsrc%5Etfw"&gt;June 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;AWS がオープンソースプロジェクトにはクレジットを提供するという話(AWS の開発に利用できるということ)。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1532880744732758018?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today we had a meeting about experimenting with a green threads implementation in .NET. More info to come soon, exciting times! &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1532880744732758018?ref_src=twsrc%5Etfw"&gt;June 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET にグリーンスレッドを実装する試みがあるというような話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-http2-websockets-by-tratcher-pull-request-41558-dotnetaspnetcore"&gt;Implement Http/2 WebSockets by Tratcher · Pull Request #41558 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41558"&gt;https://github.com/dotnet/aspnetcore/pull/41558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 上の WebSocket サポートを実装する PR。&lt;/p&gt;
&lt;h3 id="add-document-outline-tool-window-by-emilyanas2323-pull-request-61784-dotnetroslyn"&gt;Add Document Outline Tool Window by emilyanas2323 · Pull Request #61784 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/61784"&gt;https://github.com/dotnet/roslyn/pull/61784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio にソースコードのドキュメントアウトラインを表示するツールウィンドウを実装する PR。&lt;/p&gt;
&lt;h3 id="aspnet-support-for-webtransport-issue-39583-dotnetaspnetcore"&gt;Aspnet support for webtransport · Issue #39583 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39583"&gt;https://github.com/dotnet/aspnetcore/issues/39583&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core (Kestrel) での WebTransport サポートの Issue。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/42097"&gt;[WIP] Adding the rest of WebTransport into Kestrel by Daniel-Genkin-MS-2 · Pull Request #42097 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41877"&gt;Adding WebTransport Handshake to Kestrel by Daniel-Genkin-MS-2 · Pull Request #41877 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/06/03/updates</id>
		<title>2022-06-03: Visual Studio at Microsoft Build 2022, Incremental ASP.NET to ASP.NET Core Migration</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/06/03/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-06-03T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-at-microsoft-build-2022.net-blog"&gt;Visual Studio at Microsoft Build 2022 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-at-microsoft-build-2022/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-at-microsoft-build-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Build 2022 での Visual Studio 関連の情報についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2022 17.3 Preview 1.1 と Visual Studio 2022 for Mac 17.3 Preview 1 で .NET MAUI のツーリングが利用可能に&lt;/li&gt;
&lt;li&gt;Microsoft Dev Box (Windows 365 の開発者向け版) のアナウンス&lt;/li&gt;
&lt;li&gt;Azure Deployment Environments のアナウンス&lt;/li&gt;
&lt;li&gt;ARM64 向け Visual Studio のアナウンス&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="incremental-asp.net-to-asp.net-core-migration.net-blog"&gt;Incremental ASP.NET to ASP.NET Core Migration - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/incremental-asp-net-to-asp-net-core-migration/"&gt;https://devblogs.microsoft.com/dotnet/incremental-asp-net-to-asp-net-core-migration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET を ASP.NET Core に段階的に移行する方法とそれを支援するツールやライブラリーについての記事。&lt;/p&gt;
&lt;p&gt;記事では大きなプロジェクトを段階的に移行する方法として System.Web アダプターライブラリーと YARP を使用した構成を構築し、一部のロジックを ASP.NET Core アプリケーションへと移行しトラフィックを流していく形でインクリメンタルに移行する手段を紹介している。&lt;/p&gt;
&lt;p&gt;またその構成を Visual Studio 上で簡単に構築できるマイグレーション用の拡張 (要 Visual Studio Preview) についても使用方法を含めて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/systemweb-adapters"&gt;dotnet/systemweb-adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=WebToolsTeam.aspnetprojectmigrations"&gt;Microsoft Project Migrations (Experimental) - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-may-2022-cumulative-update.net-blog"&gt;.NET Framework May 2022 Cumulative Update - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-may-2022-cumulative-update/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-may-2022-cumulative-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年5月の累積アップデートプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートでは WPF、WinForms、.NET ランタイム、ワークフローに関する品質と安定性の向上が含まれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="ccustom-github-action-yucchiys-note"&gt;C#でCustom GitHub Actionを書く | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/05/implement-custom-github-action-with-csharp/"&gt;https://blog.yucchiy.com/2022/05/implement-custom-github-action-with-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions のカスタム action を C# で記述する方法についての記事。&lt;/p&gt;
&lt;h3 id="vscodeunityuseglobalmono"&gt;【vscode/Unity】補完が消えた&amp;amp;useGlobalMonoがなくなって混乱している人へ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/leaf/articles/98f02a61440893"&gt;https://zenn.dev/leaf/articles/98f02a61440893&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code で使用する C# 拡張を使用している場合に Unity のプロジェクトのようなフルフレームワークプロジェクトで補完が効かなくなる問題についての記事。&lt;/p&gt;
&lt;p&gt;原因は C# 拡張の OmniSharp が .NET 6 で動作するようになったことで不完全な付属のミニマルな Mono と MSBuild Tools を削除となり、その結果として設定項目が変更されたことによる。(デフォルトでは .NET SDK を探しにいく)&lt;/p&gt;
&lt;p&gt;解決策は omnisharp.useModernNet を false にすることでインストールされた Mono を利用するようにする。&lt;/p&gt;
&lt;h3 id="page-navigation-in.net-maui-an-overview"&gt;Page Navigation in .NET MAUI: An Overview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/page-navigation-in-net-maui-an-overview-2bkm"&gt;https://dev.to/syncfusion/page-navigation-in-net-maui-an-overview-2bkm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI で利用できる2種類のページナビゲーションの簡単な説明記事。&lt;/p&gt;
&lt;h3 id="c-cswin32win32apipinvoke-qiita"&gt;[C#] CsWin32でWin32APIのプラットフォーム呼び出し(P/Invoke)コードを自動生成 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/a4509f9a44101fb2f30e"&gt;https://qiita.com/radian-jp/items/a4509f9a44101fb2f30e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows (Win32 API) 向けの P/Invoke の呼び出しコードを生成する Source Generator の CsWin32 の使い方についての記事。&lt;/p&gt;
&lt;h3 id="securing.net-app-secrets-with-aws-secrets-manager"&gt;Securing .NET App Secrets with AWS Secrets Manager&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/aws-builders/securing-net-app-secrets-with-aws-secrets-manager-2f4h"&gt;https://dev.to/aws-builders/securing-net-app-secrets-with-aws-secrets-manager-2f4h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションから AWS Secrets Manager にアクセスしてシークレットを取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="improved-doc-management-personalization"&gt;Improved doc management personalization&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/doc-management-personalization/"&gt;https://devblogs.microsoft.com/visualstudio/doc-management-personalization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で強化されたドキュメント(タブ)管理について紹介する記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タブの複数行配置&lt;/li&gt;
&lt;li&gt;非表示ドキュメント名の斜体表示&lt;/li&gt;
&lt;li&gt;変更済みインジケーターのアクセシビリティの向上&lt;/li&gt;
&lt;li&gt;閉じたタブの復元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="next.js-meets-asp.net-core-a-story-of-performance-and-love-at-long-tail"&gt;Next.js meets ASP .NET Core — a story of performance and love at long tail&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;david.nissimoff/next-js-meets-asp-net-core-a-story-of-performance-and-love-at-long-tail-41cf9231b2de"&gt;https://medium.com/&amp;#64;david.nissimoff/next-js-meets-asp-net-core-a-story-of-performance-and-love-at-long-tail-41cf9231b2de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core サーバーで Next.js の静的生成 (SSG) ページをホストするという試みについての記事。&lt;/p&gt;
&lt;h3 id="surprising-ways-to-profile-your.net-applications-the.net-tools-blog"&gt;Surprising Ways To Profile Your .NET Applications | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/31/surprising-ways-to-profile-your-net-applications/"&gt;https://blog.jetbrains.com/dotnet/2022/05/31/surprising-ways-to-profile-your-net-applications/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotTrace, dotMemory を使用してのプロファイリングは IDE やビルドパイプライン、ユニットテストやリモート環境といった様々な環境で行えることを紹介する記事。&lt;/p&gt;
&lt;h3 id="understanding-pathbase-in-asp.net-core"&gt;Understanding PathBase in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/understanding-pathbase-in-aspnetcore/"&gt;https://andrewlock.net/understanding-pathbase-in-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の HttpContext にある PathBase プロパティーがどういうものかを説明している記事。&lt;/p&gt;
&lt;p&gt;PathBase はリクエストのプレフィックスとなるパスを表すもので、リバースプロキシーの裏側にいる場合などに役立つ。&lt;/p&gt;
&lt;h3 id="unusual-optimizations-ref-foreach-and-ref-returns"&gt;Unusual optimizations; ref foreach and ref returns&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.marcgravell.com/2022/05/unusual-optimizations-ref-foreach-and.html"&gt;https://blog.marcgravell.com/2022/05/unusual-optimizations-ref-foreach-and.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;foreach で ref を使い、構造体のコピーを減らすことでパフォーマンスを向上させるテクニックについての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; は対象が構造体の列挙の場合、値を取り出すことがコピーとなるためパフォーマンスに影響が出る可能性がある。&lt;/p&gt;
&lt;p&gt;例として配列の要素に対するメソッド呼び出しには &lt;code&gt;foreach&lt;/code&gt; を使った場合は「配列からインデックスで値を取り出す」「ローカル変数に保存する」「ローカル変数のアドレスを取得する」の3ステップが必要となる一方、 &lt;code&gt;for&lt;/code&gt; の場合は「インデックスで値のアドレスを取り出す」だけでコピーが発生しない IL へとコンパイルされる。(ちなみに SharpLab で JIT 結果を見ると同じ結果になっているように見えるので単純なコードの場合差がない可能性がある)&lt;/p&gt;
&lt;p&gt;配列以外で似たようなことをするにはどうすればよいのかというところで &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;foreach (ref ...)&lt;/code&gt; を使用する方法があるとしている。リストであれば &lt;code&gt;foreach (ref var tmp in CollectionsMarshal.AsSpan(list)) { ... }&lt;/code&gt; のようにすることでコンパイラーと JIT での最適化で配列での &lt;code&gt;for&lt;/code&gt; と同じようなコピーしない操作結果を得られる。&lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; を使用できないとしても &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; などと同様に Enumerator.Current で &lt;code&gt;ref return&lt;/code&gt; するカスタム Enumerator を実装することもできる。&lt;/p&gt;
&lt;h3 id="may-26-2022.net-data-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;May 26, 2022 - .NET Data Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 関連の隔週のアップデート情報。5月26日分。&lt;/p&gt;
&lt;p&gt;コミュニティスタンドアップの紹介や EF Core 7 の実装状況などについて触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="vol.78-web-shell-mag"&gt;シェルスクリプトマガジンvol.78 Web掲載記事まとめ | shell-mag&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://shell-mag.com/vol-78-web/"&gt;https://shell-mag.com/vol-78-web/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 特集が組まれている。&lt;/p&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/runfaster2000/status/1531743163190128640?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Cool ... The MCR domain now does something useful. &lt;a href="https://t.co/UyELAGuv4E"&gt;https://t.co/UyELAGuv4E&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rich Lander (&amp;#64;runfaster2000) &lt;a href="https://twitter.com/runfaster2000/status/1531743163190128640?ref_src=twsrc%5Etfw"&gt;May 31, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft の公式コンテナーレジストリーのカタログページがあるので、.NET のイメージも探せるという話。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/26/updates</id>
		<title>2022-05-26: .NET MAUI GA, Visual Studio 2022 for Mac</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/26/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-26T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="introducing.net-maui-one-codebase-many-platforms"&gt;Introducing .NET MAUI - One Codebase, Many Platforms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/"&gt;https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クロスプラットフォーム開発フレームワークの .NET MAUI が一般提供となった。&lt;/p&gt;
&lt;p&gt;現時点では開発ツーリングとして Visual Studio 2022 の Preview が必要となる (ツーリングの GA は今年の後半予定)。&lt;/p&gt;
&lt;p&gt;記事ではネイティブ UI の各種対応(アクセシビリティやクロスプラットフォームな操作、カスタマイズなど)、モダンな開発者プロダクティビティ (新しいテンプレートやプロジェクト構成)、Blazor Hybird、パフォーマンスの最適化といったものを紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-is-now-available"&gt;Visual Studio 2022 for Mac is now available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac v17.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 では. NET 6 での開発サポートをはじめ、IDE の macOS ネイティブ UI 化や Apple SIlicon (ARM64) ネイティブでの動作の対応が行われている。&lt;/p&gt;
&lt;p&gt;また、同時に Preview 版となる 17.3 もリリースされ、.NET 7 プレビューと GA となった .NET MAUI 開発がサポートされている。&lt;/p&gt;
&lt;h3 id="create-next-generation-experiences-at-scale-with-windows-windows-developer-blog"&gt;Create Next Generation Experiences at Scale with Windows - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/"&gt;https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Build 2022 での Windows 向けの開発についてのアナウンス。&lt;/p&gt;
&lt;p&gt;WinUI 3 プラットフォームをベースとした Windows App SDK 1.1 のプレビュー版の提供や新しい API、Template Studio for WinUI と移行ツールの更新、.NET MAUI のリリースなど。&lt;/p&gt;
&lt;p&gt;その他、Microsoft Store では Win32 アプリケーションの配布に待ちリストへの登録が不要になったことや、ARM デバイスの開発を進めるための開発向けデバイスの Project Volterra や Visual Studio の ARM 版の提供予定などが発表されている。&lt;/p&gt;
&lt;h3 id="grpc-support-on-azure-app-service"&gt;gRPC support on Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html"&gt;https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service for Linux にて .NET Core 3.1 と .NET 6 で gRPC のサポートがプライベートプレビューの Early Updates Access Program で提供開始のアナウンス。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1528776801924698112 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;We are pleased to announce that gRPC is now available and supported on Azure App Service for Linux workloads. This was made possible by recent platform upgrades to the HTTP reverse proxy layer to leverage YARP and Kestrel.&amp;quot; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/imT7GHb2f5"&gt;https://t.co/imT7GHb2f5&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1528776801924698112?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="introducing-the-private-preview-of-port-tunneling-in-visual-studio-for-asp.net-core-projects"&gt;Introducing the private preview of port tunneling in Visual Studio for ASP.NET Core projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1.1 で ASP.NET Core の Web プロジェクトへのポートトンネリング機能 (プレビュー) が追加されたことについてのアナウンス。&lt;/p&gt;
&lt;p&gt;これはコールバックや Webhooks 、Power Platform のような外部からアクセスする必要があるアプリケーションを開発する際にインターネット側からアクセス可能にするトンネルを提供するものとなる。(類似のものでよく知られているものとしては ngrok がある)&lt;/p&gt;
&lt;p&gt;プライベートプレビューにサインインし、Preview 版でプレビュー機能を有効にし、launchSettings.json で指定することで Visual Studio からシームレスにトンネルを作成できるとのこと。&lt;/p&gt;
&lt;h3 id="uno-platform-4.3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more"&gt;Uno Platform 4.3 - Figma Plugin, Uno Extensions, Material Design 3 Support, New Sample App and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/"&gt;https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Figma プラグインと Material Design 3 テーマサポート、Uno Extensions、.NET 6 モバイル RTM のサポートなどが行われている。&lt;/p&gt;
&lt;h3 id="the-journey-of-moving-from-cwinrt-to-c-in-the-microsoft-store"&gt;The journey of moving from C++/WinRT to C# in the Microsoft Store&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/"&gt;https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションを C++/WinRT から C# へと移行したことについての記事。&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションは HoloLens や Surface Hub をターゲットとしている都合 UWP アプリケーションであり .NET Native (特殊な AOT) でビルドされているという事情があることで、パッケージマネージャーの WinRT API との相互運用にいくつかのハードルがありそれを乗り越える必要があったことが説明されている。&lt;/p&gt;
&lt;h3 id="the-stack-overflow-journey-to.net-6"&gt;The Stack Overflow journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/"&gt;https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 へ移行したことについての記事。&lt;/p&gt;
&lt;p&gt;3つの製品の共通コードベースがあること、本番環境へのデプロイまでの流れ、EF Core 2.2 から Entity Framework 5 へのアップグレード、.NET 6 への移行で発生した問題の対応、コネクションプールの問題(のように見えたもの)、移行の結果について書かれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="provide-default-configuration-to-your.net-applications"&gt;Provide default configuration to your .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications"&gt;https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; を使って、.NET アプリケーションの設定にデフォルト値を持たせる方法についての記事。&lt;/p&gt;
&lt;h3 id="temporary-breakpoint-new-feature-in-visual-studio-2022"&gt;Temporary breakpoint – New feature in Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/"&gt;https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一度だけブレークして消える、一時的なブレークポイント (Temporary Breakpoint) の紹介記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-1"&gt;ASP.NET Core MVC で 1 ページに複数個のフォームを置きたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page"&gt;https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のビューに複数のフォームを配置し、それぞれで送信とバリデーションを行いつつ、両方のデータを保持する方法についての記事。&lt;/p&gt;
&lt;h3 id="asp.net"&gt;ASP.NET でのパスワード格納&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/6ef107ad173f39"&gt;https://zenn.dev/masakura/articles/6ef107ad173f39&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET/ASP.NET Core 標準のユーザーパスワード格納時のハッシュ化処理で、アルゴリズムやストレッチングなどどのような手法がとられているかについての記事。&lt;/p&gt;
&lt;h3 id="investigating-the-performance-benefits-of-ef-core-6.0-compiled-models-feature"&gt;Investigating the performance benefits of EF Core 6.0 compiled models feature&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e"&gt;https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6.0 のコンパイル済みモデルによる起動パフォーマンス向上についての記事。&lt;/p&gt;
&lt;p&gt;実際にプロジェクトで試してみたところ初回のインスタンス作成時間が4倍程度短縮されたとのこと。&lt;/p&gt;
&lt;h3 id="direct2dsvg"&gt;Direct2DでSVGファイルを画像化する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/udaken/articles/svg-rendering-with-direct2d"&gt;https://zenn.dev/udaken/articles/svg-rendering-with-direct2d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P/Invoke で Direct2D を呼び出し、SVG のサブセットを描画する方法についての記事。&lt;/p&gt;
&lt;h3 id="breaking-change-actionresultt-set-statuscode-to-200-issue-485-aspnetannouncements"&gt;[Breaking change]: ActionResult&amp;lt;T&amp;gt; set StatusCode to 200 · Issue #485 · aspnet/Announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/485"&gt;https://github.com/aspnet/Announcements/issues/485&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 以前の ASP.NET Core では &lt;code&gt;ActionResult&amp;lt;T&amp;gt;&lt;/code&gt; を返した場合、 Response.StatusCode が尊重されていたが常に 200 が返るようになったという破壊的変更のアナウンス。&lt;/p&gt;
&lt;h3 id="macos-environment-setup-for-maui-development-the.net-tools-blog"&gt;macOS Environment Setup For MAUI Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/"&gt;https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 EAP でサポートされた .NET MAUI の開発を macOS 環境上で行うためのセットアップについての記事。&lt;/p&gt;
&lt;h3 id="extending-visual-studio-codelens-functionality"&gt;Extending Visual Studio CodeLens Functionality&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f"&gt;https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の CodeLens を拡張して独自の CodeLens Provider を実装する方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master/CodeLensOopSample"&gt;VSSDK-Extensibility-Samples/CodeLensOopSample at master · microsoft/VSSDK-Extensibility-Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exploring-the-f-frontend-landscape"&gt;Exploring The F# Frontend Landscape&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa"&gt;https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# でのフロントエンド開発のフレームワークを紹介している記事。&lt;/p&gt;
&lt;h3 id="how-we-used-dotmemory-to-optimize-dotmemory-the.net-tools-blog"&gt;How We Used dotMemory to Optimize dotMemory | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/"&gt;https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotMemory のドミネーターツリーのパフォーマンスを dotMemory と dotTrace で改善したドッグフーディングの記事。&lt;/p&gt;
&lt;p&gt;当初、しばらく実行すると物理メモリーを使い果たして動かなくなってしまうほどであったが、ドミネーターツリーの構築アルゴリズムの変更やデータ構造の変更といったことを行った結果現実的な時間とメモリー使用量になったとのこと。&lt;/p&gt;
&lt;h3 id="bringing-webassembly-to-the.net-mainstream-steve-sanderson-microsoft-youtube"&gt;Bringing WebAssembly to the .NET Mainstream - Steve Sanderson, Microsoft - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PIeYw7kJUIg"&gt;https://www.youtube.com/watch?v=PIeYw7kJUIg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アセンブリを WebAssembly で動かすということについてのプレゼンテーション。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは Blazor WebAssembly ではなく、WASI を使用した .NET アプリケーションの WebAssembly 化の可能性についてを話している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk"&gt;SteveSandersonMS/dotnet-wasi-sdk: Packages for building .NET projects as standalone WASI-compliant modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpgrpcwebsocketbridge-yet-another-grpc-over-http1-using-websocket-implementation-primarily-targets.net-platform"&gt;Cysharp/GrpcWebSocketBridge: Yet Another gRPC over HTTP/1 using WebSocket implementation, primarily targets .NET platform.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/GrpcWebSocketBridge"&gt;https://github.com/Cysharp/GrpcWebSocketBridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC のトランスポートとして HTTP/2 の代わりに WebSocket を利用することで Unity WebGL や Blazor WebAssembly から gRPC (Unary/Streaming) を利用できるようにする ASP.NET Core と .NET クライアント向けのブリッジライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1528883407337295874?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We just released a new version of WinDbg Preview! Lots of new stuff to talk about, but most excitingly it&amp;#39;s on .NET 6! If you&amp;#39;re running on ARM64, you&amp;#39;ll definitely love the perf improvements we got from moving to .NET 6&lt;a href="https://t.co/8mjsz8Czwy"&gt;https://t.co/8mjsz8Czwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1528883407337295874?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview の新バージョンで .NET 6 へと移行して ARM64 で動くようになった話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="extended-nameof-parameter-scope-by-billwagner-pull-request-29549-dotnetdocs"&gt;Extended nameof parameter scope by BillWagner · Pull Request #29549 · dotnet/docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/docs/pull/29549"&gt;https://github.com/dotnet/docs/pull/29549&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nameof&lt;/code&gt; が使える範囲が C# 11 で広がるのでそのドキュメント更新の PR。&lt;/p&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
	<entry>
		<id>/2022/05/19/updates</id>
		<title>2022-05-19: Unity and .NET, Azure Cosmos DB Journey to .NET 6, Regular Expression Improvements in .NET 7</title>
		<author>
			<name>Mayuki Sawatari</name>
		</author>
		<link href="/2022/05/19/updates" />
		<link rel="enclosure" type="image" href="/img/logo.png" />
		<updated>2022-05-19T00:00:00Z</updated>
		<content>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="unity-and.net-whats-next-unity-blog"&gt;Unity and .NET, what’s next? | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/unity-and-net-whats-next"&gt;https://blog.unity.com/technology/unity-and-net-whats-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の .NET に関する今後の方針についての解説記事。&lt;/p&gt;
&lt;p&gt;Unity は現在までに Mono のアップデートなどを経て C# の言語サポートの向上などを行ってきたが、一方で .NET エコシステム自体も進化し NuGet や最新のランタイムやツールといったものを Unity と共に利用したいというニーズが高まっていること。今後 Unity は .NET SDK やランタイム、MSBuild といったものを活用できるよう Mono から CoreCLR へと移行していく。&lt;/p&gt;
&lt;p&gt;ランタイムの移行についてはまずデスクトップのスタンドアローンプレイヤーで CoreCLR サポートを行う (2023年中)、その後 2024年に Unity Editor を CoreCLR へと移植し .NET 7/8 の API アクセスが可能となるようにする。&lt;/p&gt;
&lt;p&gt;その他、現在進行中のモダナイズとして async/await のサポートの改善や &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; によるメモリーの割り当てとコピーの改善といったことを進めているとのこと。&lt;/p&gt;
&lt;h3 id="the-azure-cosmos-db-journey-to.net-6.net-blog"&gt;The Azure Cosmos DB Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/"&gt;https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Cosmos DB を .NET 6 へ移行したという事例紹介記事。&lt;/p&gt;
&lt;p&gt;API ゲートウェイでは .NET のアップグレードを経て、継続的にパフォーマンス改善の恩恵を受けていたこと、ゲートウェイを HttpListener (HTTP.sys) から Kestrel へ移行することでスループットを大幅に改善したことなど。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Span&lt;/code&gt; をはじめとした新しい API によりオーバーヘッドの削減とガベージコレクションの軽減、&lt;code&gt;ConcurrentDictionary&lt;/code&gt; の &lt;code&gt;GetOrUpdate&lt;/code&gt; メソッドのコンテキスト利用などでのアロケーションオーバーヘッドの軽減といった効果により、.NET Framework から .NET Core へ移行した結果、待機時間が5倍改善された顧客もいた。&lt;/p&gt;
&lt;p&gt;複数の NUMA ノードを持つ強力な VM で稼働するプロセスの動作を最適化するため、プロセスを特定の NUMA ノードに関連付けるプロセッサーアフィニティーを設定したこと、非同期コードの処理が改善されたことで .NET のアップグレードで性能が向上したことなども触れている。&lt;/p&gt;
&lt;h3 id="regular-expression-improvements-in.net-7.net-blog"&gt;Regular Expression Improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での正規表現の改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 7 で強化される様々な機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バックトラッキング (&lt;code&gt;RegexOptions.NonBacktracking&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;DFA エンジン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringSyntaxAttribute.Regex&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 上での文字列内での IntelliSense やシンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大文字小文字を区別しないマッチング (&lt;code&gt;RegexOptions.IgnoreCase&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ソースジェネレーション
&lt;ul&gt;
&lt;li&gt;Source Generator によるマッチングの生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Span
&lt;ul&gt;
&lt;li&gt;Span を受け入れる API とそれを利用したマッチの列挙など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベクトル化
&lt;ul&gt;
&lt;li&gt;Boyer-Moore アルゴリズムからの変更など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自動アトミック化とバックトラッキング&lt;/li&gt;
&lt;li&gt;文字クラス(セット)最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-grpc-json-transcoding-for.net.net-blog"&gt;Announcing gRPC JSON transcoding for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC JSON トランスコーディングについてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET 7 で gRPC サービスを JSON の RESTful API として表現するトランスコーディングの仕組みが提供される。&lt;/p&gt;
&lt;p&gt;JSON トランスコーディングは grpc-web と異なり、ASP.NET Core の内部で Protobuf と JSON を相互変換し gRPC サービスの呼び出しに変換するため、ブラウザー側に特別なクライアントが不要となり一般的な JSON を受け付ける RESTful API のように使用できる。&lt;/p&gt;
&lt;h3 id="rider-2022.2-roadmap-the.net-tools-blog"&gt;Rider 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトごとの設定の新しい既定値&lt;/li&gt;
&lt;li&gt;メインツールバーの変更&lt;/li&gt;
&lt;li&gt;MAUI 実行構成のサポートの追加&lt;/li&gt;
&lt;li&gt;Xamarin と Unity の新しいツールバー&lt;/li&gt;
&lt;li&gt;Razor ビューでの JavaScript 再フォーマット&lt;/li&gt;
&lt;li&gt;Windows での .NET Core への移行&lt;/li&gt;
&lt;li&gt;リモート開発&lt;/li&gt;
&lt;li&gt;Windows Subsystem for Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="resharper-2022.2-roadmap-the.net-tools-blog"&gt;ReSharper 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言語サポートと改善&lt;/li&gt;
&lt;li&gt;仮想コードスタイルとその他のコードフォーマッターの更新&lt;/li&gt;
&lt;li&gt;プロファイラの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rider 同様 EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="whats-new-with-ml.net-automated-ml-automl-and-tooling"&gt;What's new with ML.NET Automated ML (AutoML) and tooling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET AutoML の更新についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AutoML の更新
&lt;ul&gt;
&lt;li&gt;Experimental API&lt;/li&gt;
&lt;li&gt;検索スペースとスイープ可能な推定器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モデルビルダーと ML.NET CLI の更新
&lt;ul&gt;
&lt;li&gt;時系列予測シナリオ (プレビュー)&lt;/li&gt;
&lt;li&gt;新しいバージョンの ML.NET CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノートブックのショートカット&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、今後の予定としてディープラーニング、.NET DataFrame、MLOps といったものについても触れている。&lt;/p&gt;
&lt;h3 id="release-release-v2.46.0-grpcgrpc-dotnet"&gt;Release Release v2.46.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpd-dotnet) の 2.46.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正のほか、リゾルバーのリトライや呼び出し資格情報をクライアントファクトリーで追加するといった機能の追加が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-httpexample.comfoobar-sub-path-qiita"&gt;Blazor アプリケーションを &amp;quot;http://example.​com/foo/bar/&amp;quot; のような Sub Path に配置するために必要な実装 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94"&gt;https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly アプリケーションを特定のパス以下に配置する方法についての記事。&lt;/p&gt;
&lt;h3 id="new-features-in-c-1011-speaker-deck"&gt;New Features in C# 10/11 - Speaker Deck&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/chack411/11"&gt;https://speakerdeck.com/chack411/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10/11 での新機能についてのまとめスライド。&lt;/p&gt;
&lt;h3 id="docker-multi-architecture.net-6.0-and-opencvsharp"&gt;Docker multi-architecture, .NET 6.0 and OpenCVSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd"&gt;https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で OpenCVSharp を利用するアプリケーションをマルチアーキテクチャー (x64, arm32, aarch64) Docker コンテナーイメージにする方法についての記事。&lt;/p&gt;
&lt;h3 id="migrating-mr.gestures-from-xamarin.forms-to.net-maui-xamarin-blog"&gt;Migrating MR.Gestures from Xamarin.Forms to .NET MAUI - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/"&gt;https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MR.Gestures (商用ジェスチャーライブラリー) を Xamarin.Forms から .NET MAUI に移行したことについての記事。&lt;/p&gt;
&lt;h3 id="all-in-one-search-is-getting-slicker-visual-studio-blog"&gt;All-In-One Search Is Getting Slicker - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/"&gt;https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 でプレビューとして導入された All-In-One 検索の改善についての記事。&lt;/p&gt;
&lt;h3 id="chttps-qiita"&gt;【C#】非同期HTTPSサーバー通信アプリを作ってみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a"&gt;https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;組み込み機器などのテストのために HTTPS サーバーを自作するという記事。&lt;/p&gt;
&lt;h3 id="ienumerable-visualizer-in-visual-studio-2022.net-core-tutorials"&gt;IEnumerable Visualizer In Visual Studio 2022 - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/"&gt;https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-qiita"&gt;.NET Framework でもタダでカバレッジをとりたい！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52"&gt;https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="case-study-how-the-profilers-uncover-critical-issues-that-mimic-apps-normal-behavior-the.net-tools-blog"&gt;Case Study – How the Profilers Uncover Critical Issues That Mimic Apps’ Normal Behavior | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/"&gt;https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-use-biometric-authentication-in.net-maui-andreas-nesheim"&gt;How to use biometric authentication in .NET MAUI - Andreas Nesheim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/"&gt;https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-http-security-header"&gt;ASP.NET Core Http Security Header&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8"&gt;https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mvvm-toolkit-messenger-qiita"&gt;MVVM Toolkit の Messenger を使うときに購読解除を共通化する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3"&gt;https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-html-css"&gt;Blazor で HTML と CSS で画面作りたくないよぉ…&lt;/h3&gt;
&lt;p&gt;Blazor で利用できる UI ツールキットの紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/and-blazor-lab"&gt;Blazor で HTML と CSS で画面作りたくないよぉ… AntDesign 編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/i-dont-want-to-use-html-to-create-ui"&gt;Blazor で画面作るために HTML 使いたくないよぉ… Fluent UI 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net6guidreadonly-struct"&gt;.NET6でいつの間にかGuidがreadonly structになっていた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/c5881dccd6ae25"&gt;https://zenn.dev/nin_neko/articles/c5881dccd6ae25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で &lt;code&gt;System.Guid&lt;/code&gt; が &lt;code&gt;readonly struct&lt;/code&gt; へと変更されていたことについての記事。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-action-optimizing-database-operations"&gt;OpenTelemetry in Action: Optimizing Database Operations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377"&gt;https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;API の呼び出し中のデータベースアクセスに関する情報を OpenTelemetry で追いかけて改善する方法についての記事。&lt;/p&gt;
&lt;h3 id="automated-accessibility-testing-in-playwright.net-with-axe"&gt;Automated accessibility testing in Playwright .NET with Axe.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08"&gt;https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Playwright と Axe で .NET からアクセシビリティテストを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="telegram-bot-qiita"&gt;Telegram Botを使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d"&gt;https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Telegram.Bot を使用した Telegram のボットの作成についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnetsystemweb-adapters"&gt;dotnet/systemweb-adapters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/systemweb-adapters"&gt;https://github.com/dotnet/systemweb-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 上で .NET Framework の ASP.NET の System.Web と同様の機能を提供するアダプターライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rla4/status/1524736823645327360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Yesterday we finished the .NET 5 -&amp;gt; .NET 6 upgrade! Stack Overflow is now running on .NET 6 across all servers 🥳 &lt;br&gt;&lt;br&gt;Worth mentioning that it was a much smoother move than upgrading from .NET 3.1 -&amp;gt; .NET 5&lt;/p&gt;&amp;mdash; Roberta Arcoverde (&amp;#64;rla4) &lt;a href="https://twitter.com/rla4/status/1524736823645327360?ref_src=twsrc%5Etfw"&gt;May 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 に移行した(.NET Core 3.1 から .NET 5 よりもスムーズだった)という話。&lt;/p&gt;
&lt;!-- https://twitter.com/sinclairinat0r/status/1526034052209418245?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;👀👀 Alright Jeremy, where are you going with this?&amp;quot;&lt;br&gt;&lt;br&gt;Yo fam... &lt;br&gt;&lt;br&gt;What if I told you that I could do something like run Fiddler and have it load using the Arm64 .NET Framework Clr?!&lt;br&gt;&lt;br&gt;   Before                                               After &lt;a href="https://t.co/L1rLVPMdi8"&gt;pic.twitter.com/L1rLVPMdi8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeremy Sinclair (&amp;#64;sinclairinat0r) &lt;a href="https://twitter.com/sinclairinat0r/status/1526034052209418245?ref_src=twsrc%5Etfw"&gt;May 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt; コマンドには起動したいアーキテクチャーを指定できる &lt;code&gt;/machine&lt;/code&gt; オプションがあるので、ARM64 マシン上で AnyCPU でビルドされたアプリケーションを &lt;code&gt;/machine arm64&lt;/code&gt; で実行することで ARM64 版 .NET Framework でアプリケーションを起動できることがあるというテクニック。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-segmentedhashsett-by-sharwell-pull-request-54574-dotnetroslyn"&gt;✨ Implement SegmentedHashSet&amp;lt;T&amp;gt; by sharwell · Pull Request #54574 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/54574"&gt;https://github.com/dotnet/roslyn/pull/54574&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn の内部コレクションの話。&lt;code&gt;HashSet&lt;/code&gt; の持つバケットを &lt;code&gt;SegmentedArray&lt;/code&gt; (これは断片化された Array で Sequence のようなもの)にすることで Large Object Heap を使わないようにするという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/50156"&gt;Implement SegmentedDictionary&amp;lt;TKey, TValue&amp;gt; by sharwell · Pull Request #50156 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET 関連の情報をほぼ週刊配信</summary>
	</entry>
</feed>