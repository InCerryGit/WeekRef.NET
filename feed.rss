<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Sat, 05 Mar 2022 02:17:39 GMT</pubDate>
		<lastBuildDate>Sat, 05 Mar 2022 02:17:39 GMT</lastBuildDate>
		<item>
			<title>2022-03-05: Early peek at C# 11 features, 2FA on NuGet.org, ILSpy 7.2</title>
			<link>/2022/03/05/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/05/updates</guid>
			<pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="early-peek-at-c-11-features.net-blog"&gt;Early peek at C# 11 features - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/"&gt;https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 と .NET SDK 6.0.200 以降で利用できるようになった C# 11 プレビュー機能の紹介記事。&lt;/p&gt;
&lt;p&gt;記事では有効にする方法と次の機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列補完の中の改行&lt;/li&gt;
&lt;li&gt;リストパターン&lt;/li&gt;
&lt;li&gt;パラメーター &lt;code&gt;null&lt;/code&gt; チェック&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="requiring-two-factor-authentication-on-nuget.org-the-nuget-blog"&gt;Requiring two-factor authentication on NuGet.org - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/"&gt;https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.org が3月8日から二要素認証 (2FA) を必須にするというアナウンス。&lt;/p&gt;
&lt;p&gt;サプライチェーンセキュリティの強化のためログインに二要素認証が必須となる。二要素認証は Microsoft アカウントまたは職場または学校のアカウント (Azure Active Directory) のものが使用され、サインイン時にそれらがサポートするいずれかの二要素認証が要求される。&lt;/p&gt;
&lt;p&gt;ユーザーログインは3月8日からすべてのアカウントに対して有効となり、API キーは今後二要素認証コンテキストで作成されていないものが無効とされる予定。無効化を実施する30日前には通知される。&lt;/p&gt;
&lt;h3 id="release-ilspy-7.2-icsharpcodeilspy"&gt;Release ILSpy 7.2 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v7.2"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 7.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# のパターンマッチングやネストされた stackalloc のコンテキスト、SkipLocalInit のようないくつかの機能に対応し、多くの改善や修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-release-v2.43.0-grpcgrpc-dotnet"&gt;Release Release v2.43.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) 2.43.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 での deflate 圧縮やヘルスチェックのマッピング設定といった機能の追加といくつかの改善と修正が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the.net-6-runtime-for-aws-lambda-amazon-web-services"&gt;Introducing the .NET 6 runtime for AWS Lambda | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/"&gt;https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda における .NET 6 ランタイムサポートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロギングの改善&lt;/li&gt;
&lt;li&gt;JSON シリアライズのための Source Generator&lt;/li&gt;
&lt;li&gt;トップレベルステートメント&lt;/li&gt;
&lt;li&gt;ASP.NET Core Minimal API&lt;/li&gt;
&lt;li&gt;オープンソース Lambda ランタイムクライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="edge-developer-tools-visual-studio-marketplace"&gt;Edge Developer Tools - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools"&gt;https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio に Edge と Developer Tools を統合して ASP.NET / ASP.NET Core アプリケーションを開発時にシームレスにあつかえるようにする拡張がプレビューリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="efcoredbcontextnew-enrike3"&gt;EFCoreに深入り(DbContextをnewするあたり) - enrike3のブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://enrike3.hatenablog.com/entry/2022/02/20/163821"&gt;https://enrike3.hatenablog.com/entry/2022/02/20/163821&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で DbContext が作成するのに必要な要素がどのように用意されているのかについての記事。&lt;/p&gt;
&lt;h3 id="c-vectort-qiita"&gt;[C#] Vector&amp;lt;T&amp;gt;で配列の最大値を高速取得 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/186862f355ac5625a704"&gt;https://qiita.com/radian-jp/items/186862f355ac5625a704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SIMD が有効になる &lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; を使用することで配列の最大要素の高速に取得するという記事。&lt;/p&gt;
&lt;h3 id="c-10.0-c-c"&gt;【C# 10.0 変更点】 構造体のフィールド初期化子にはコンストラクター必須 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/"&gt;https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のフィールド初期化子を持つ場合コンストラクターが必須となる修正が Visual Studio 2022 17.1 以降で行われた件についての記事。&lt;/p&gt;
&lt;h3 id="serilog-5.0.0-2-qiita"&gt;Serilog 5.0.0 バージョンアップ時に引っかかった2点 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0"&gt;https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog を 4.1.0 から 5.0.0 へバージョンアップした際の発生した非互換の挙動に関する記事。&lt;/p&gt;
&lt;h3 id="how-to-access-configuration-values-from-appsettings.json-file-inside-validationattribute-class-nuthan-murarysetty-medium"&gt;How to access configuration values from appsettings.json file inside ValidationAttribute class? - Nuthan Murarysetty - Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a"&gt;https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidationAttribute&lt;/code&gt; から appsettings.json の設定値にアクセスする方法についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; メソッドに渡される &lt;code&gt;ValidateContext&lt;/code&gt; は &lt;code&gt;IServiceProvider&lt;/code&gt; を提供しているため、&lt;code&gt;GetService&amp;lt;IConfiguration&amp;gt;&lt;/code&gt; などで設定を取得できる。また、ユニットテストでは &lt;code&gt;ValidationContext&lt;/code&gt; を作成する際に &lt;code&gt;IServiceProvider&lt;/code&gt; のモックを渡すことでテストできる。&lt;/p&gt;
&lt;h3 id="comparing-iasyncenumerable-and-iobservable-for-event-streams-dev-community"&gt;Comparing IAsyncEnumerable and IObservable for event streams - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96"&gt;https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; と &lt;code&gt;IObservable&lt;/code&gt; の違いについての記事。&lt;/p&gt;
&lt;h3 id="net-build-tool-using-bullseye-and-simpleexec-dev-community"&gt;.NET build tool using Bullseye and SimpleExec - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe"&gt;https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAnt のようなビルドの仕組みをターゲット依存グラフの構築実行を実現する &lt;code&gt;Bullseye&lt;/code&gt; とコマンド実行ラッパーの &lt;code&gt;SimpleExec&lt;/code&gt; を利用して作るという記事。&lt;/p&gt;
&lt;p&gt;単純な二つのライブラリーを組みわせることで理解しやすい形でビルドツールを構築できるとしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/bullseye"&gt;adamralph/bullseye: 🎯 A .NET library for running a target dependency graph.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/simple-exec"&gt;adamralph/simple-exec: 🏃 A .NET library that runs external commands.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-deep-dive-into-cs-cancellationtoken-by-mitesh-shah-feb-2022-medium"&gt;A Deep Dive into C#’s CancellationToken | by Mitesh Shah | Feb, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f"&gt;https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CancellationToken が提供している機能やそれらを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="recommended-container-limits-for-dotnet-monitor"&gt;Recommended container limits for dotnet-monitor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor"&gt;https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-monitor&lt;/code&gt; をコンテナー環境で動かす場合の推奨されるリソース設定についての記事。&lt;/p&gt;
&lt;h3 id="creating-a-clean-style-library-for-xamarin.forms"&gt;Creating a clean Style Library for Xamarin.Forms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde"&gt;https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms でクリーンなスタイルライブラリーを構築することについての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-webapplicationfactory"&gt;[ASP.NET Core 6] WebApplicationFactoryの利用の互換性が失われることに対処する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/372d16077ecdf6"&gt;https://zenn.dev/shimat/articles/372d16077ecdf6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 6 (.NET 6) で WebApplicationFactory を利用する場合に .NET 5 やそれ以前のバージョンとの構成が異なることによる問題についての記事。&lt;/p&gt;
&lt;h3 id="net-github-actions-intro-to-github-actions-for.net.net-blog"&gt;.NET 💜 GitHub Actions: intro to GitHub Actions for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの GitHub Actions での利用について紹介している記事。&lt;/p&gt;
&lt;h3 id="postgresql-ef-corejson-qiita"&gt;PostgreSQL EF CoreでのJsonの処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47"&gt;https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7.0 プレビューと PostgreSQL (Npgsql) での JSON をマッピングを試してみたという記事。&lt;/p&gt;
&lt;h3 id="building.net-project-docs-with-docfx-on-github-pages-james-croft"&gt;Building .NET project docs with DocFX on GitHub Pages - James Croft&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/"&gt;https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DocFX を使って .NET プロジェクトのドキュメントを生成し、GitHub Pages にアップロードする方法についての記事。カスタマイズなどにも触れている。&lt;/p&gt;
&lt;h3 id="blazor-webassemblymudblazorpie-chart-qiita"&gt;Blazor WebAssemblyでMudBlazorを使ってPie Chartを表示してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/michimichix521/items/208b89a8750f8d9b962c"&gt;https://qiita.com/michimichix521/items/208b89a8750f8d9b962c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly で MudBlazor のチャート機能で Pie Chart を表示してみるという記事。&lt;/p&gt;
&lt;h3 id="c-2022"&gt;【競プロ】C#: 競技プログラミング環境構築 2022年版&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/1ff02beff572d2"&gt;https://zenn.dev/naminodarie/articles/1ff02beff572d2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で競技プログラミング固有の事情に合わせた環境構築についての記事。&lt;/p&gt;
&lt;h3 id="please-stop-lying-about.net-standard-2.0-support"&gt;Please stop lying about .NET Standard 2.0 support!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/stop-lying-about-netstandard-2-support/"&gt;https://andrewlock.net/stop-lying-about-netstandard-2-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一部のコアライブラリーは TFM として .NET Standard 2.0 をサポートしているように見えるが、.NET Core 2.1 や .NET Core 3.0 のようなサポートの終了しているランタイムではビルドエラーとなる問題についての記事。&lt;/p&gt;
&lt;p&gt;それらのランタイムはサポートが終了しているが積極的にブロックするのは .NET Standard の約束を破るものではないかという筆者の主張。&lt;/p&gt;
&lt;h3 id="migrating-from-redis-64-to-memurai"&gt;Migrating from Redis-64 to Memurai&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1"&gt;https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows で Redis を使用したい場合、Redis-64 に代わる Memurai という Windows ネイティブな Redis 5.0 フォークがあるのでそれに移行するという記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-in-local-containers-with-vs-code-red-hat-developer"&gt;Debug .NET applications running in local containers with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code"&gt;https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカルのコンテナーで動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-on-kubernetes-with-vs-code-red-hat-developer"&gt;Debug .NET applications running on Kubernetes with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code"&gt;https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes で動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6http-client-sdk"&gt;.NET 6によるHTTP Client SDKの作成と利用&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/"&gt;https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP クライアント SDK を作る上でのポイントを解説している記事(日本語)。&lt;/p&gt;
&lt;p&gt;HttpClient のカスタムや IHttpClientFactory との統合、拡張性やテストについて。Refit や NSwag を使用した実装についても触れている。&lt;/p&gt;
&lt;h3 id="training-a-ml.net-model-with-azure-ml.net-blog"&gt;Training a ML.NET Model with Azure ML - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/"&gt;https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Machine Learning を使用して ML.NET のモデルをトレーニングするという記事。&lt;/p&gt;
&lt;h3 id="sharing-code-between-asp.net-and-asp.net-core.net-blog"&gt;Sharing code between ASP.NET and ASP.NET Core - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/"&gt;https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET と ASP.NET Core でコードを共有するための Tips の記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-march-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | March 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-6-dapr-1-qiita"&gt;.NET 6 と Daprを使った分散サービス開発 その1 環境構築 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b"&gt;https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-send-emails-using-c.net-with-azure-functions-and-sendgrid-bindings"&gt;How to Send Emails using C# .NET with Azure Functions and SendGrid Bindings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings"&gt;https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions で SendGrid Bindings を利用してメールを送信する方法についての記事。&lt;/p&gt;
&lt;h3 id="distributed-locks-manager-c-and-redis"&gt;Distributed Locks Manager (C# and Redis)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250"&gt;https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis を使用した分散ロックを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では RedLock.net を使用した例が紹介されている。&lt;/p&gt;
&lt;h3 id="using-aws-ecs-service-discovery-for-communication-between-microservices-in.net-c"&gt;Using AWS ECS Service Discovery for communication between Microservices in .NET &amp;amp; C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71"&gt;https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon ECS で動作するアプリケーションでサービス間の通信のために AWS Cloud Map を使用して Service Discovery を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="building-a-c-blazor-app-with-nosql-and-sql-using-harperdb"&gt;Building a C# Blazor App with NoSQL and SQL Using HarperDB&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc"&gt;https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor アプリケーションで HarperDB と呼ばれる NoSQL/SQL をサポートするデータベースを使用する方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="alias-an-approach-to.net-assembly-conflict-resolution"&gt;Alias: An approach to .NET Assembly Conflict Resolution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution"&gt;https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アセンブリーの競合を解決するためのコマンドラインツール Alias の紹介記事。&lt;/p&gt;
&lt;p&gt;複数のバージョンの Newtonsoft.Json.dll や Unity での UPM からインストールされるパッケージの System.Memory.dll, System.Buffers.dll などで発生するバージョンの競合を解決するため、依存関係も含めてエイリアスのパッチを当てるツール。Sentry for Unity SDK で実際に使用されている。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;MyLibrary.dll&lt;/code&gt; が &lt;code&gt;System.Memory.dll&lt;/code&gt;, &lt;code&gt;System.Buffers.dll&lt;/code&gt; に依存している場合、&lt;code&gt;MyLibrary.&lt;/code&gt; をプレフィックスとしてパッチを当てると、&lt;code&gt;internal&lt;/code&gt; 化された &lt;code&gt;MyLibrary.System.Memory.dll&lt;/code&gt; と &lt;code&gt;MyLibrary.System.Buffers.dll&lt;/code&gt; が生成され、&lt;code&gt;MyLibrary.dll&lt;/code&gt; からはそれらを参照するようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getsentry/dotnet-assembly-alias"&gt;getsentry/dotnet-assembly-alias: Tool to rename .NET assemblies and references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bflattenedbflat-c-as-you-know-it-but-with-go-inspired-tooling-small-selfcontained-and-native-executables"&gt;bflattened/bflat: C# as you know it but with Go-inspired tooling (small, selfcontained, and native executables)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bflattened/bflat"&gt;https://github.com/bflattened/bflat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT と Roslyn を統合して golang のように直接ネイティブ実行バイナリーを出力するというツール。&lt;/p&gt;
&lt;p&gt;なおライセンスは AGPL となっているため注意が必要。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1495625804159811586?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;bflat, my take on C# with Go-like tooling, is now open source. New builds coming as soon as I write the Github actions to create them. You can build it from source in the meantime: &lt;a href="https://t.co/VWiqKUjDgk"&gt;https://t.co/VWiqKUjDgk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1495625804159811586?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="create-json-web-apis-from-grpc"&gt;Create JSON Web APIs from gRPC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC を JSON ベースの HTTP Web API として公開できる実験的なライブラリー Microsoft.AspNetCore.Grpc.HttpApi についての記事。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/funcofjoe/status/1495168840510042117?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;To celebrate .NET&amp;#39;s 20 year anniversary, I&amp;#39;ve put up a mirror of Chris Brumme&amp;#39;s weblog: &lt;a href="https://t.co/wP5JGEnegI"&gt;https://t.co/wP5JGEnegI&lt;/a&gt; &lt;a href="https://t.co/l4h5vxBTUz"&gt;pic.twitter.com/l4h5vxBTUz&lt;/a&gt;&lt;/p&gt;&amp;mdash; J☁e Duffy (&amp;#64;funcOfJoe) &lt;a href="https://twitter.com/funcOfJoe/status/1495168840510042117?ref_src=twsrc%5Etfw"&gt;February 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET CLR の開発者であった Chris Brumme 氏のブログ (濃い話が書かれている) を20周年を記念してミラーサイトとして用意したという話。Chris Brumme 氏は5年前に亡くなっているそう。&lt;/p&gt;
&lt;!-- https://twitter.com/stevensanderson/status/1497230826739834883?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;What&amp;#39;s this - is it a completely normal &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core application?&lt;br&gt;&lt;br&gt;No, it&amp;#39;s &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core running on WASI (WebAssembly on the server)! Just got a prototype working this week. &lt;a href="https://t.co/Hd4rrqSmLA"&gt;pic.twitter.com/Hd4rrqSmLA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steve Sanderson (&amp;#64;stevensanderson) &lt;a href="https://twitter.com/stevensanderson/status/1497230826739834883?ref_src=twsrc%5Etfw"&gt;February 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WASI で ASP.NET Core が動作するプロトタイプができたという話。つまり Blazor ではない ASP.NET Core を WebAssembly で動かせている。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1496469980661096452?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And what if Key doesn&amp;#39;t exist? Our .𝗡𝗘𝗧 𝗶𝗻 𝗣𝗶𝗰𝘁𝘂𝗿𝗲𝘀 infographic will explain! 🧐&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/B6zZHhsSZu"&gt;pic.twitter.com/B6zZHhsSZu&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1496469980661096452?ref_src=twsrc%5Etfw"&gt;February 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1495745477433827332?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New week, new .Net in Pictures! Let&amp;#39;s get a break from .NET Diagnostics Expert and take a look at our new collection of infographics ✨&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/4Ytud17h5N"&gt;pic.twitter.com/4Ytud17h5N&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1495745477433827332?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dictionary の内部に関するインフォグラフィック。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1495673553529749507?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that Compiler Explorer lets you see C# .NET outputs for different Operating Systems and Architectures?&lt;br&gt;&lt;br&gt;Example: &lt;a href="https://t.co/1wKb7G7FM1"&gt;https://t.co/1wKb7G7FM1&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/vw3AiKCnGo"&gt;pic.twitter.com/vw3AiKCnGo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1495673553529749507?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Compiler Explorer では様々な OS とアーキテクチャー向けの逆アセンブル結果を確認できるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="speed-up-contended-http2-frame-writing-500-grpc-h2-70x1-improvement-by-halter73-pull-request-40407-dotnetaspnetcore"&gt;Speed up contended HTTP/2 frame writing (500% gRPC h2 70x1 improvement) by halter73 · Pull Request #40407 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40407"&gt;https://github.com/dotnet/aspnetcore/pull/40407&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 のフレーム書き込みを高速化するという PR。&lt;/p&gt;
&lt;p&gt;これにより TLS 上の HTTP/2 で一つのコネクションに70ストリーム持った場合、500%程度高速になるという。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-19: .NET 20th Anniversary, .NET 7 Preview 1, Visual Studio 2022 17.1</title>
			<link>/2022/02/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/19/updates</guid>
			<pubDate>Sat, 19 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="happy-20th-anniversary.net.net-blog"&gt;Happy 20th Anniversary, .NET! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/happy-20th-anniversary-net/"&gt;https://devblogs.microsoft.com/dotnet/happy-20th-anniversary-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET (Visual Studio .NET) のリリースから20周年を迎えたことについての記事。&lt;/p&gt;
&lt;p&gt;2002年2月13日に Visual Studio .NET が正式にリリースされ、それから20年の間にコミュニティーによって支えられ、オープンソース化などを経て、これから .NET 7 へ向かっていくといった話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=67tCWKnweso"&gt;.NET 20th Anniversary - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet-presentations/dotNET20th"&gt;GitHub - dotnet-presentations/dotNET20th: .NET 20th Anniversary creative and digital swag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/uikou/items/adf5980f409a316d3978"&gt;Happy Birthday！.NET、20 歳になりましたよ。君だけの dotnet-bot くんを作ろうぜ！＃dotNETLovesMe - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.azure.moe/2022/02/15/net-20th-anniversary/"&gt;.NET 20th anniversary | ブチザッキ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-7-preview-1.net-blog"&gt;Announcing .NET 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 では Microsoft.Extensions.* ライブラリーの Null 許容参照型の対応の拡充や JIT コンパイラーの最適化、Activity や System.Text.Json などの API の更新、ホットリロードの改善などが含まれている。&lt;/p&gt;
&lt;p&gt;このプレビューは Visual Studio 2022 17.2 Preview 1 でテストされているため、試用には Preview Channel が推奨されている。また、Visual Studio for Mac でのサポートは近日中となるとのこと。&lt;/p&gt;
&lt;p&gt;.NET 7 での破壊的な変更についてのドキュメントも公開されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/compatibility/7.0"&gt;.NET 7 での破壊的変更 - .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-1.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 における ASP.NET Core の更新についての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 では次のエリアの強化にフォーカスしているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンス: 更なる速度と効率の向上&lt;/li&gt;
&lt;li&gt;HTTP/3: 機能の実装完了とデフォルトで有効化&lt;/li&gt;
&lt;li&gt;Minimal API: エンドポイントフィルターやルートグルーピング、認証認可のサポートなど&lt;/li&gt;
&lt;li&gt;gRPC: gRPC JSON トランスコーディング&lt;/li&gt;
&lt;li&gt;SignalR: 型付きクライアントの生成、クライアント呼び出しからの結果の受け取り&lt;/li&gt;
&lt;li&gt;Razor: コンパイラーの改善によるパフォーマンス向上やツーリングの向上&lt;/li&gt;
&lt;li&gt;Blazor: MAUI, WPF, Windows Forms 向けの Blazor Hybrid サポートの後、mixed-mode AOT, マルチスレッディング, WebCrypto など多くの強化&lt;/li&gt;
&lt;li&gt;MVC: エンドポイントルーティング、リンク生成、パラメータバインディングの改善&lt;/li&gt;
&lt;li&gt;Orleans: .NET 7 に合わせた Orleans 4 のリリース。シンプルさ、保守性、パフォーマンスに焦点を当てた改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET 7 Preview 1 では次のような改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimal API 改善&lt;/li&gt;
&lt;li&gt;SignalR クライアント Source Generator&lt;/li&gt;
&lt;li&gt;MVC のビューと Razor Pages での nullable モデルのサポート&lt;/li&gt;
&lt;li&gt;バリデーションエラーでの JSON プロパティ名の使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet weatch&lt;/code&gt; のコンソール出力の改善&lt;/li&gt;
&lt;li&gt;大きな修正時に常に再起動する &lt;code&gt;dotnet watch&lt;/code&gt; の設定&lt;/li&gt;
&lt;li&gt;ValidationAttribute での Dependency Injection&lt;/li&gt;
&lt;li&gt;ヘッダーの読み書きの高速化&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-1.net-blog"&gt;Announcing Entity Framework 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 は現在 .NET 6 をターゲットとしているが、.NET 7 のリリースが近づいた時には .NET 7 へとアップグレードされる。また、.NET Framework への対応は行われない。&lt;/p&gt;
&lt;h3 id="announcing.net-maui-preview-13.net-blog"&gt;Announcing .NET MAUI Preview 13 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-13/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-13/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Preview 13 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは品質向上や Label.FormattedText のようないくつかの新しい実装が含まれている。&lt;/p&gt;
&lt;p&gt;そのほかアプリケーションの起動時間を短縮するため、Microsoft.Extensions.Hosting の依存の削除が行われている。アプリケーションの起動のためのコードは引き続きビルダーパターンを使用でき、記事では構成についてや DI について触れている。&lt;/p&gt;
&lt;p&gt;このリリースは Visual Studio 17.2 Preview 1 に含まれているため、試用には Preview Channel のインストールが必要。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.1-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.1 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-1-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-1-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;ファイルのインデックス作成による検索速度の向上(プレビュー機能)、フォーカスを失ったときに自動保存する機能が実装された。Git 関連の機能も強化され、ブランチ間の差分表示やデタッチされた HEAD のチェックアウトなどに対応している。&lt;/p&gt;
&lt;p&gt;そのほかソリューションフィルター使用時にプロジェクトの依存を確認してまとめて更新できるようになった。&lt;/p&gt;
&lt;p&gt;17.1 がリリースされたことで Professional/Enterprise のユーザーは 17.0 を LTSC として構成することで2023年7月までセキュリティー修正のサポートを受けられる。Community Edition のユーザーは Current Channel のみとなる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/productinfo/vs-servicing#long-term-servicing-channel-ltsc-support"&gt;Visual Studio の製品ライフサイクルとサービス | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#1710--visual-studio-2022-version-171-newreleasebutton"&gt;Visual Studio 2022 version 17.1 Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-version-17.2-preview-1"&gt;Visual Studio 2022 version 17.2 Preview 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1720-pre10--visual-studio-2022-version-172-preview-1"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1720-pre10--visual-studio-2022-version-172-preview-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 11 の Raw String リテラルの対応や &lt;code&gt;StringSyntaxAttribute&lt;/code&gt; への対応など。そのほか Git の行ステージングの対応など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/line-staging-interactive-staging/"&gt;Line-staging (interactive staging) - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-6-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 6 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-6/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではクラッシュなどの問題が多く修正されているほか、環境設定画面などの UI がネイティブ UI へと移植されている。&lt;/p&gt;
&lt;h3 id="net-framework-february-2022-cumulative-update-preview.net-blog"&gt;.NET Framework February 2022 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-february-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-february-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年2月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートではセキュリティー修正は含まれず、品質と安定性の向上のための修正が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLS 1.3 でネゴシエーションする際にクライアント証明書を使用するとハングする問題の修正&lt;/li&gt;
&lt;li&gt;.NET Framework 4.8 で導入された IRawElementProviderSimple のメモリーリークの修正。AppSwitch でオプトインする必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introducing-compatible-packages-on-nuget.org-the-nuget-blog"&gt;Introducing Compatible Packages on NuGet.org - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/"&gt;https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.org のパッケージ詳細ページで改善されたターゲットフレームワーク関連の表示についての記事。&lt;/p&gt;
&lt;p&gt;パッケージ詳細ページに新たにパッケージがサポートしている最小のターゲットフレームワークのバッジが表示されるようになり、対応しているフレームワークが一目でわかるようになった。&lt;/p&gt;
&lt;p&gt;例えばパッケージのターゲットフレームワークとして &lt;code&gt;net6.0&lt;/code&gt;, &lt;code&gt;net5.0&lt;/code&gt;, &lt;code&gt;netstandard2.1&lt;/code&gt;, &lt;code&gt;netstandard2.0&lt;/code&gt; が指定されている場合、.NET ファミリーでは最小が &lt;code&gt;.NET 5.0&lt;/code&gt;、.NET Standard ファミリーでは最小が &lt;code&gt;.NET Standard 2.0&lt;/code&gt; となり、それらがバッジとして表示される。&lt;/p&gt;
&lt;p&gt;また Frameworks タブではそのターゲットフレームワークから導かれる、実際に対応しているフレームワークの一覧を確認できるようになっている。これは例えば &lt;code&gt;net6.0&lt;/code&gt; がターゲットであれば &lt;code&gt;net6.0&lt;/code&gt; だけでなく &lt;code&gt;net6.0-windows&lt;/code&gt; や &lt;code&gt;net6.0-ios&lt;/code&gt; なども対象となる。&lt;/p&gt;
&lt;p&gt;記事では .NET Framework, .NET Core, Xamarin, .NET Standard, .NET の違いやターゲットフレームワークについても触れている。&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.1-eap-3"&gt;ReSharper and Rider 2022.1 EAP 3&lt;/h3&gt;
&lt;p&gt;ReSharper と Rider の 2022.1 EAP 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper は型のファイルへの移動の向上や Source Generator 使用時のパフォーマンスの向上、Rider は Visual Studio 2022 キーバインドの追加や Docker fast モード対応など。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1494301871556767747?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 EAP3 has landed with better Move to file, faster work with source generators, disabling dotCover for certain lines of code, keyboard navigation in dotTrace Home, and more. Check out our website for details and download: &lt;a href="https://t.co/dcxG4qkrri"&gt;https://t.co/dcxG4qkrri&lt;/a&gt; &lt;a href="https://t.co/pXuJ9cEhq3"&gt;pic.twitter.com/pXuJ9cEhq3&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1494301871556767747?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1494327772633702414?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.1 EAP3 is now available with new keymaps, Docker fast mode, and adding web references in .NET Core projects. Learn more at &lt;a href="https://t.co/l7wKSJLun6"&gt;https://t.co/l7wKSJLun6&lt;/a&gt; &lt;a href="https://t.co/zUQY3fZjlR"&gt;pic.twitter.com/zUQY3fZjlR&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1494327772633702414?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-release-v1.44.0-grpcgrpc"&gt;Release Release v1.44.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.44.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.44.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.44.0 (NuGet パッケージバージョン 2.44.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 向けの変更として &lt;code&gt;AsyncUnaryCall&lt;/code&gt; と &lt;code&gt;AsyncClientStreamingCall&lt;/code&gt; で &lt;code&gt;ConfigureAwait&lt;/code&gt; をサポートするようになった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-7-webassembly-plans-mixed-mode-aot-multi-threading-web-crypto-visual-studio-magazine"&gt;.NET 7 WebAssembly Plans: Mixed-Mode AOT, Multi-Threading, Web Crypto -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/02/18/net-7-webassembly.aspx"&gt;https://visualstudiomagazine.com/articles/2022/02/18/net-7-webassembly.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の WebAssembly (Blazor) の対応予定についてまとめている記事。&lt;/p&gt;
&lt;h3 id="unity-2021.2-il2cpp-unity-blog"&gt;機能ハイライト：Unity 2021.2 における IL2CPP ランタイムのパフォーマンス改善 | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/ja/technology/feature-highlight-il2cpp-runtime-performance-improvements-in-unity-20212"&gt;https://blog.unity.com/ja/technology/feature-highlight-il2cpp-runtime-performance-improvements-in-unity-20212&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2021.2 での IL2CPP ランタイム (AOT 実行)でのパフォーマンス改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;デリゲートの呼び出し、不必要なボックス化のチェック、ジェネリック仮想メソッドの呼び出し、 Enum.HasFlag、制約された呼び出しといった部分の改善について紹介している。&lt;/p&gt;
&lt;h3 id="net-beyond-vmware-tanzu-developer-center"&gt;.NET Beyond | VMWare Tanzu Developer Center&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tanzu.vmware.com/developer/tv/dotnet-beyond"&gt;https://tanzu.vmware.com/developer/tv/dotnet-beyond&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VMWare による .NET に関するオンラインイベント。&lt;/p&gt;
&lt;h3 id="c-11-null"&gt;【C# 11 候補】 引数の null チェック&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/parameter-null-check/"&gt;https://ufcpp.net/blog/2022/2/parameter-null-check/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入予定のパラメーターの null チェックについての記事。&lt;/p&gt;
&lt;h3 id="cache-aside-pattern-using-c-adnan-rafiqs-blog-memories-and-opinions"&gt;Cache Aside Pattern using C# | Adnan Rafiq's Blog, Memories and Opinions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://adnanrafiq.com/blog/cache-aside-pattern-csharp/"&gt;https://adnanrafiq.com/blog/cache-aside-pattern-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Caching と Redis でキャッシュを扱う手法についての記事。&lt;/p&gt;
&lt;h3 id="why-making-umbraco-headless-makes-sense"&gt;Why making Umbraco headless makes sense&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikcio/why-making-umbraco-headless-makes-sense-2acd"&gt;https://dev.to/nikcio/why-making-umbraco-headless-makes-sense-2acd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Umbraco CMS を GraphQL ベースの Headless CMS として使う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-and-c-versions-20th-anniversary"&gt;.NET and C# Versions - 20th Anniversary ♥&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nietras.com/2022/02/13/dotnet-and-csharp-versions/"&gt;https://nietras.com/2022/02/13/dotnet-and-csharp-versions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET と C# の20年の間に導入された機能などを一枚の画像にまとめたもの。&lt;/p&gt;
&lt;h3 id="microsoftyarp"&gt;MicrosoftがYARPをリリース - もう一つのリバースプロキシ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/news/2022/02/microsoft-releases-yarp/"&gt;https://www.infoq.com/jp/news/2022/02/microsoft-releases-yarp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft が開発したリバースプロキシーのためのライブラリー YARP についての記事。&lt;/p&gt;
&lt;h3 id="cstatiq-qiita"&gt;C#製の静的サイトジェネレータ「Statiq」でブログを書く - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamaccu/items/6ea0e09954bec8474a19"&gt;https://qiita.com/yamaccu/items/6ea0e09954bec8474a19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で書かれた静的サイトジェネレーターの Statiq でブログを書くための使い方を紹介している記事。(ちなみに WeekRef.NET も Statiq で生成しています)&lt;/p&gt;
&lt;h3 id="await"&gt;イベントを await で受け取る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/zuishin/articles/2022-02-15-01"&gt;https://zenn.dev/zuishin/articles/2022-02-15-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イベントハンドラーによるイベントを &lt;code&gt;await&lt;/code&gt; できるように変換するという方法についての記事。&lt;/p&gt;
&lt;h3 id="waiting-for-your-asp.net-core-app-to-be-ready-from-an-ihostedservice-in.net-6"&gt;Waiting for your ASP.NET Core app to be ready from an IHostedService in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/finding-the-urls-of-an-aspnetcore-app-from-a-hosted-service-in-dotnet-6/"&gt;https://andrewlock.net/finding-the-urls-of-an-aspnetcore-app-from-a-hosted-service-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の &lt;code&gt;IHostedService&lt;/code&gt; のコードから ASP.NET Core アプリケーションが起動するのを待機する方法についての記事。&lt;/p&gt;
&lt;p&gt;ASP.NET Core がリッスンしているアドレスを取得したいといった場合は Kestrel (ASP.NET Core) の起動が完了を待つ必要があるため、&lt;code&gt;IHostApplicationLifetime&lt;/code&gt; を使用する。&lt;/p&gt;
&lt;h3 id="how-to-write-your-own-discord-bot-on.net-6"&gt;How to write your own discord bot on .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/how-to-write-your-own-discord-bot-on-net-6-ac96e40467b8"&gt;https://medium.com/medialesson/how-to-write-your-own-discord-bot-on-net-6-ac96e40467b8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Discord.Net を試用して Discord のボットを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6.0alpine-qiita"&gt;.NET 6.0とAlpineのバージョンアップで遭遇した問題二つ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/ac6cfd5e0bc52ce5bea6"&gt;https://qiita.com/karuakun/items/ac6cfd5e0bc52ce5bea6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 から .NET 6 と Docker イメージの Alpine のバージョンを上げた際に発生した問題についての記事。&lt;/p&gt;
&lt;p&gt;一つは OS と Aurora での TLS のバージョンの問題、もう一つは Async MySQL Connector のバージョンが上がったことでの Aurora との相性問題。&lt;/p&gt;
&lt;h3 id="c-c-c"&gt;C# 中の埋め込み言語 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/embedded-languages"&gt;https://ufcpp.net/blog/2022/2/embedded-languages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現在実装が進んでいる C# のコード内に JSON や正規表現のような別な言語を埋め込む場合のシンタックスハイライトに関する機能についての記事。&lt;/p&gt;
&lt;h3 id="typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model-visual-studio-blog"&gt;Typing Less, Coding More: How we delivered IntelliCode whole line completions with a transformer model - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model/"&gt;https://devblogs.microsoft.com/visualstudio/typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の IntelliCode (学習ベースのコード補完) の技術的な解説記事。&lt;/p&gt;
&lt;h3 id="host-your.net-packages-with-a-private-nuget-feed"&gt;Host your .NET packages with a private NuGet feed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bytesafe.dev/posts/secure-dotnet-package-dependencies-with-private-nuget-feeds/"&gt;https://bytesafe.dev/posts/secure-dotnet-package-dependencies-with-private-nuget-feeds/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bytesafe を使用して、プライベートな NuGet フィードでパッケージをホストする方法についての記事。&lt;/p&gt;
&lt;p&gt;Bytesafe は NuGet や npm, Maven のプライベートなパッケージレジストリーをホストするサービスで、有料プランではライセンスコンプライアンスやポリシーを定義できる。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/madnan_rafiq/status/1493346509240381445?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET Hosted Services are available to use in &lt;a href="https://t.co/QC5rnmJRtI"&gt;https://t.co/QC5rnmJRtI&lt;/a&gt; Host &amp;amp; share the same process&lt;br&gt;IT enables features like in-memory long-running tasks and accessing main process memory&lt;br&gt;&lt;br&gt;Handle exception in your Hosted Service, or change the default so the server does not stop. &lt;a href="https://t.co/f3Qye1ZfuZ"&gt;pic.twitter.com/f3Qye1ZfuZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; adnan (&amp;#64;madnan_rafiq) &lt;a href="https://twitter.com/madnan_rafiq/status/1493346509240381445?ref_src=twsrc%5Etfw"&gt;February 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;IHostedService&lt;/code&gt; で例外が発生した場合にデフォルトではアプリケーション(のホスト)が停止するが、&lt;code&gt;HostOption.BackgroundServiceExceptionBehavior&lt;/code&gt; の設定で無視できるという Tips。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1494235372548669440?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And what about resizing the List&amp;lt; T &amp;gt;? We&amp;#39;ve got you covered, or more precisely .NET in Pictures does 😎&lt;br&gt;&lt;br&gt;Expect more tomorrow!&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/list?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#list&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/hcKcOMzfIq"&gt;pic.twitter.com/hcKcOMzfIq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1494235372548669440?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; に要素が追加されて内部がリサイズされるときの様子を図にしたもの。&lt;/p&gt;
&lt;!-- https://twitter.com/gsferreira/status/1493546029504999426?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;You can use Fluent Assertions &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; to assert that no one introduces unwanted dependencies.&lt;br&gt;&lt;br&gt;See how 👇&lt;br&gt;&lt;br&gt;Extremely useful since .NET References are transitive. &lt;br&gt;&lt;br&gt;It&amp;#39;s the kind of change that often goes unseen in a PR review. &lt;a href="https://t.co/f3lvBkUdAM"&gt;pic.twitter.com/f3lvBkUdAM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Guilherme Ferreira (&amp;#64;gsferreira) &lt;a href="https://twitter.com/gsferreira/status/1493546029504999426?ref_src=twsrc%5Etfw"&gt;February 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;FluentAssertions には特定のアセンブリーを参照していないことを確認する &lt;code&gt;NotReference&lt;/code&gt; というものがある。&lt;/p&gt;
&lt;!-- https://twitter.com/skitoy4321/status/1494617343892541445 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;System.Threading.RateLimitingに関して調べた事あれこれ。rcか正式版リリースになったら記事にするかなー。&lt;br&gt;ConcurrencyとSemaphoreが違うのは待つときに重み?のようなものを付けられることらしい。&lt;a href="https://t.co/6ra3TkFPdp"&gt;https://t.co/6ra3TkFPdp&lt;/a&gt;&lt;/p&gt;&amp;mdash; skitoy4321 (&amp;#64;skitoy4321) &lt;a href="https://twitter.com/skitoy4321/status/1494617343892541445?ref_src=twsrc%5Etfw"&gt;February 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;System.Threading.RateLimiting&lt;/code&gt; について調べたメモ。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-support-for-windows-io-completions-to-the-portable-thread-pool-by-kouvel-pull-request-64834-dotnetruntime"&gt;Add support for Windows IO completions to the portable thread pool by kouvel · Pull Request #64834 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64834"&gt;https://github.com/dotnet/runtime/pull/64834&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Portable ThreadPool に Winfows の IOCP サポートを追加するという PR。&lt;/p&gt;
&lt;h3 id="add-nullable.getvaluerefordefaultref-api-by-sergio0694-pull-request-64677-dotnetruntime"&gt;Add Nullable.GetValueRefOrDefaultRef API by Sergio0694 · Pull Request #64677 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64677"&gt;https://github.com/dotnet/runtime/pull/64677&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nullable&amp;lt;T&amp;gt;&lt;/code&gt; の値をコピーせず取得するための &lt;code&gt;Nullable.GetValueRefOrDefaultRef&lt;/code&gt; を追加する PR。&lt;/p&gt;
&lt;h3 id="add-request-decompression-middleware-by-david-acker-pull-request-40279-dotnetaspnetcore"&gt;Add Request Decompression middleware by david-acker · Pull Request #40279 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40279"&gt;https://github.com/dotnet/aspnetcore/pull/40279&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core にリクエストの圧縮を展開するミドルウェアを追加するという PR。&lt;/p&gt;
&lt;h3 id="api-diff-between-6.0-and-7.0-preview1-by-carlossanlop-pull-request-7211-dotnetcore"&gt;API-diff between 6.0 and 7.0-preview1 by carlossanlop · Pull Request #7211 · dotnet/core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/pull/7211"&gt;https://github.com/dotnet/core/pull/7211&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/tannergooding/status/1494497088490532866?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;re interested in the API diff between .NET 6 and .NET 7 Preview 1: &lt;a href="https://t.co/PrIvLdaKdC"&gt;https://t.co/PrIvLdaKdC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1494497088490532866?ref_src=twsrc%5Etfw"&gt;February 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 と .NET 7 Preview 1 の間の API の差分についての PR とツイートでいくつか紹介している。&lt;/p&gt;
&lt;h3 id="all-te-benchmarks-regressed-on-arm64-issue-65272-dotnetruntime"&gt;All TE benchmarks regressed on ARM64 · Issue #65272 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/65272"&gt;https://github.com/dotnet/runtime/issues/65272&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 の TechEmpower ベンチマークでパフォーマンス低下が起こっているという Issue。&lt;/p&gt;
&lt;p&gt;実際のところは ARM64 だけでなく Intel でもパフォーマンス低下しており、原因はクライアントとなる Linux マシンのカーネルを 4.15.0 から 5.16.9 へ更新したことで Spectre などの脆弱性緩和の影響でパフォーマンス低下が引き起こされていたとのこと。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-12: .NET 6.0.2 and 5.0.14, ImageSharp 2.0.0, Visual Studio support lifecycle</title>
			<link>/2022/02/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/12/updates</guid>
			<pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-february-2022-updates-6.0.2-and-5.0.14.net-blog"&gt;.NET February 2022 Updates – 6.0.2 and 5.0.14 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/february-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/february-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5.0.14 と 6.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合と脆弱性の対応が行われている。&lt;/p&gt;
&lt;p&gt;脆弱性の対応は Kestrel の HTTP/2 および HTTP/3 に関する DoS となるもので、.NET 5 と 6 共に影響を受ける。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/208"&gt;.NET February 2022 Updates · Issue #208 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="six-labors-announcing-imagesharp-2.0.0"&gt;Six Labors : Announcing ImageSharp 2.0.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sixlabors.com/posts/announcing-imagesharp-200/"&gt;https://sixlabors.com/posts/announcing-imagesharp-200/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp 2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;WebP、Tiff、Pbm といった画像フォーマットの対応が追加され、XMP メタデータの対応や様々なパフォーマンス改善が行われた。&lt;/p&gt;
&lt;p&gt;特にパフォーマンスは Sustem.Drawing の最大3倍程度高速となったとしている。&lt;/p&gt;
&lt;h3 id="support-ends-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Support ends for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/"&gt;https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旧バージョンの Visual Studio のサポート終了についての記事。&lt;/p&gt;
&lt;p&gt;Visual Studio 2012 から 2019 までの各バージョンについてのサポート期間について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2012&lt;/strong&gt;: 2023年1月9日にサポート終了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2017&lt;/strong&gt;: 2022年4月12日にメインストリームサポートが終了し、2027年4月まで延長サポートでセキュリティー修正が提供される。サポートを受けるために 15.9 への移行を推奨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2019 version 16.7&lt;/strong&gt;: 2022年4月12日にサポート終了。引き続きサポートを受けるためには 16.11 か Visual Studio 2022 への移行を推奨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2019 Preview Channel&lt;/strong&gt;: 2022年4月以降 Visual Studio 2019 の Preview Channel は更新されなくなるため Release Channel か Visual Studio 2022 Preview への移行を推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-february-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework February 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-february-2022-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-february-2022-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年2月のセキュリティーと品質ロールアップ更新がリリースされた。&lt;/p&gt;
&lt;p&gt;GC の稀にクラッシュする不具合と WPF の不具合がいくつか修正されている。&lt;/p&gt;
&lt;h3 id="plan-for-nuget-in-2022-issue-11571-nugethome"&gt;Plan for NuGet in 2022 · Issue #11571 · NuGet/Home&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/NuGet/Home/issues/11571"&gt;https://github.com/NuGet/Home/issues/11571&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet の .NET 7 に向けてのプランについての Issue。&lt;/p&gt;
&lt;p&gt;パッケージバージョンの一元管理のようなツーリングに関するものや、ギャラリーでの TFM 互換性表示などがトップリクエストとして上がっている。&lt;/p&gt;
&lt;h3 id="rider-2022.1-roadmap-the.net-tools-blog"&gt;Rider 2022.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/09/rider-2022-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/02/09/rider-2022-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.1 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;ゲーム開発の強化、パラレルスタック、Docker &amp;quot;Fast Mode&amp;quot;、ツールバーのカスタマイズと強化、バージョン管理での diff、エディターの強化、Code With Me でのリモート開発などがあげられている。&lt;/p&gt;
&lt;h3 id="resharper-2022.1-roadmap-the.net-tools-blog"&gt;ReSharper 2022.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/09/resharper-2022-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/02/09/resharper-2022-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;一般的な機能強化とバグ修正 、Entity Framework Select N+1 Analysis、Visual Studio 2022 との相互運用の改善、ローカリゼーションマネージャーでの Google 翻訳、エンドポイントの検出機能の強化、プロファイラの更新が含まれるとしている。&lt;/p&gt;
&lt;h3 id="dotnet-community-twitter"&gt;dotnet Community / Twitter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/i/communities/1488624124817666051"&gt;https://twitter.com/i/communities/1488624124817666051&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter の .NET に関するトピックの Community が作成された。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-11-ref-field-c-c"&gt;【C# 11候補】 ref field | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/ref-field/"&gt;https://ufcpp.net/blog/2022/2/ref-field/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 / .NET 7 で導入を目指す、参照を持つことのできる &lt;code&gt;ref&lt;/code&gt; フィールドについての記事。&lt;/p&gt;
&lt;h3 id="background-process-with-hangfire-and.net-6"&gt;Background process with Hangfire and .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://arslanmurat06.github.io/posts/hangfire/"&gt;https://arslanmurat06.github.io/posts/hangfire/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バックグラウンド処理に Hangfire を使用する方法と簡単な利点についての記事。&lt;/p&gt;
&lt;h3 id="net-6.0-readytorun"&gt;.NET 6.0 にアップグレードすると ReadyToRun ビルドが失敗するようになったのを直す - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220212/1644602915"&gt;https://blog.shibayan.jp/entry/20220212/1644602915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で変更された ReadyToRun (部分的 AOT) のビルドと発行についての記事。&lt;/p&gt;
&lt;p&gt;ReadyToRun のビルドと発行を &lt;code&gt;--no-restore&lt;/code&gt; で行う場合には &lt;code&gt;dotnet restore&lt;/code&gt; 時にも明示的に &lt;code&gt;PublishReadyToRun&lt;/code&gt; を指定する必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/publish-readytorun-requires-restore-change"&gt;Breaking change: Publish ReadyToRun with --no-restore requires changes - .NET | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="creating-and-using-http-client-sdks-in.net-6"&gt;Creating and Using HTTP Client SDKs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/creating-http-sdks-dotnet-6/"&gt;https://www.infoq.com/articles/creating-http-sdks-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP クライアント SDK を作る上でのポイントを解説している記事。&lt;/p&gt;
&lt;p&gt;HttpClient のカスタムや IHttpClientFactory との統合、拡張性やテストについて。Refit や NSwag を使用した実装についても触れている。&lt;/p&gt;
&lt;h3 id="asp.net-core-2"&gt;ASP.NET Core で素の認証に時間ベースの２段階認証を追加する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/karuakun/articles/4943d2a2d14419"&gt;https://zenn.dev/karuakun/articles/4943d2a2d14419&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity を使用していない ASP.NET Core アプリケーションに時間ベースの二要素認証 (TOTP) を導入する方法についての記事。&lt;/p&gt;
&lt;h3 id="writing-native-windbg-extensions-in-c"&gt;Writing native WinDbg extensions in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec"&gt;https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClrMD と NativeAOT を使用して WinDbg の拡張を実装する記事。&lt;/p&gt;
&lt;p&gt;NativeAOT を使用することでネイティブライブラリーとして出力して、WinDbg に拡張として読み込ませている。&lt;/p&gt;
&lt;h3 id="vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice"&gt;Vulnerabilities due to XML files processing: XXE in C# applications in theory and in practice&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/_sergvasiliev_/vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice-3a67"&gt;https://dev.to/_sergvasiliev_/vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice-3a67&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET での XML外部実体攻撃についてと、BlogEngine.NET での実例を紹介した記事。&lt;/p&gt;
&lt;h3 id="a-javascript-rules-engine-in.net-6"&gt;A JavaScript Rules Engine in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devgenius.io/a-javascript-rules-engine-in-net-6-fb092cdc44c"&gt;https://blog.devgenius.io/a-javascript-rules-engine-in-net-6-fb092cdc44c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jint を使用してユーザー定義による JavaScript のルールエンジンを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="unix-domain-sockets-in.net-6-basics-and-real-world-examples"&gt;Unix Domain Sockets in .NET 6 — Basics and Real-World Examples&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fzankl.medium.com/unix-domain-sockets-in-net-6-basics-and-real-world-examples-8982898ab293"&gt;https://fzankl.medium.com/unix-domain-sockets-in-net-6-basics-and-real-world-examples-8982898ab293&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UNIX ドメインソケットを使用して通信する方法についての記事。&lt;/p&gt;
&lt;p&gt;ASP.MET Core での使用をはじめ、HttpClient や gRPC での使用などを紹介している。&lt;/p&gt;
&lt;h3 id="net-parallel-unit-test"&gt;.NET で parallel unit test&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/f6d3144492ec59"&gt;https://zenn.dev/masakura/articles/f6d3144492ec59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユニットテストを並列で実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;NUnit と xUnit での方法とそれぞれの違いについて触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="netescapades.enumgenerators-a-source-generator-for-enum-performance"&gt;NetEscapades.EnumGenerators: a source generator for enum performance&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/netescapades-enumgenerators-a-source-generator-for-enum-performance/"&gt;https://andrewlock.net/netescapades-enumgenerators-a-source-generator-for-enum-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enum に関する拡張メソッドを生成する Source Generator の紹介記事。&lt;/p&gt;
&lt;p&gt;あらかじめ文字列や switch などを生成しておくことで ToString や IsDefined 相当の機能を高速に行えるようにできる。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/bricelambs/status/1491134363945570305?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Using &lt;a href="https://twitter.com/hashtag/SQLite?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SQLite&lt;/a&gt; in &lt;a href="https://twitter.com/hashtag/Blazor?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Blazor&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WebAssembly?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WebAssembly&lt;/a&gt; just got easier: It&amp;#39;s built into SQLitePCLRaw&amp;#39;s latest prerelease! Try it today with amazing libraries like &lt;a href="https://twitter.com/hashtag/EFCore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#EFCore&lt;/a&gt;, sqlite-net, Dapper, and Akavache and let me know how it goes. &lt;a href="https://t.co/wgMOQgfWVk"&gt;pic.twitter.com/wgMOQgfWVk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brice Lambson🦄 (&amp;#64;bricelambs) &lt;a href="https://twitter.com/bricelambs/status/1491134363945570305?ref_src=twsrc%5Etfw"&gt;February 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;SQLitePCLRaw のプレリリース版を使用すると Blazor WebAssembly で SQLite を使用できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/msftorleans/status/1491419815814189057?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Orleans docs are now available on &lt;a href="https://t.co/6x90XhJWXM"&gt;https://t.co/6x90XhJWXM&lt;/a&gt;! &lt;a href="https://t.co/ANZWt41AZV"&gt;https://t.co/ANZWt41AZV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Microsoft Orleans (&amp;#64;msftorleans) &lt;a href="https://twitter.com/msftorleans/status/1491419815814189057?ref_src=twsrc%5Etfw"&gt;February 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Orleans のドキュメントが docs.microsoft.com で閲覧できるようになったという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-default-method-support-to-virtual-statics-by-davidwrighton-pull-request-64717-dotnetruntime"&gt;Add default method support to virtual statics by davidwrighton · Pull Request #64717 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64717"&gt;https://github.com/dotnet/runtime/pull/64717&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="initial-roll-out-of-by-stephentoub-pull-request-64720-dotnetruntime"&gt;Initial roll out of !! by stephentoub · Pull Request #64720 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64720"&gt;https://github.com/dotnet/runtime/pull/64720&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 のパラメーター null チェック &lt;code&gt;!!&lt;/code&gt; をコアライブラリーに導入するという PR。&lt;/p&gt;
&lt;h3 id="streamline-bool.tryparseformat-by-stephentoub-pull-request-64782-dotnetruntime"&gt;Streamline bool.TryParse/Format by stephentoub · Pull Request #64782 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64782"&gt;https://github.com/dotnet/runtime/pull/64782&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boolean の &lt;code&gt;TryParse&lt;/code&gt; や &lt;code&gt;Format&lt;/code&gt; で &lt;code&gt;Char&lt;/code&gt; を使用する代わりに数値をバイト列のようなものとして直接書き込んだり比較することで高速化するという PR。例えば &lt;code&gt;True&lt;/code&gt; は UTF-16 のバイト列を Int64 (リトルエンディアン) で表現すると &lt;code&gt;0x65007500720054&lt;/code&gt; となるので、それを書き込んだり比較したりする。&lt;/p&gt;
&lt;h3 id="improve-vectorization-of-string.split-by-yesmey-pull-request-64899-dotnetruntime"&gt;Improve vectorization of String.Split by yesmey · Pull Request #64899 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64899"&gt;https://github.com/dotnet/runtime/pull/64899&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String.Split をベクトル化 (SIMD) で高速化するという PR。&lt;/p&gt;
&lt;h3 id="proposal-remove-mauis-dependency-on-extensions.hosting-issue-4393-dotnetmaui"&gt;Proposal: Remove Maui's Dependency on Extensions.Hosting · Issue #4393 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/issues/4393"&gt;https://github.com/dotnet/maui/issues/4393&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI のアプリケーションの依存から Microsoft.Extensions.Hosting を外すという PR。
背景としてはモバイルアプリケーションのようなものをターゲット向けの機能ではないこと、依存によるサイズを減らすこと、起動時間の短縮などがあげられている。&lt;/p&gt;
&lt;h3 id="support-raw-utf8-string-literals-by-alekseyts-pull-request-59390-dotnetroslyn"&gt;Support raw UTF8 String Literals by AlekseyTs · Pull Request #59390 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/59390"&gt;https://github.com/dotnet/roslyn/pull/59390&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UTF-8 文字列リテラルのサポートを追加する PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-06: .NET 20th anniversary broadcast, ReSharper/Rider 2021.3.3, dotnet-script 1.3</title>
			<link>/2022/02/06/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/06/updates</guid>
			<pubDate>Sun, 06 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-20th-anniversary-broadcast"&gt;.NET 20th anniversary broadcast&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.microsoft.com/en-us/"&gt;https://dotnet.microsoft.com/en-us/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 20周年を記念して2月14日9時 (日本時間2月15日午前2時) に30分のライブストリーミングを行うとのこと。&lt;/p&gt;
&lt;p&gt;これに合わせて壁紙のようなデジタル Swag なども提供されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet-presentations/dotNET20th"&gt;dotnet-presentations/dotNET20th: .NET 20th Anniversary creative and digital swag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2021.3.3-and-rider-2021.3.3-released-the.net-tools-blog"&gt;ReSharper 2021.3.3 and Rider 2021.3.3 Released | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/31/resharper-rider-2021-3-3-released/"&gt;https://blog.jetbrains.com/dotnet/2022/01/31/resharper-rider-2021-3-3-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.3.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンの主な変更点はいくつかの不具合の修正となっている。Rider は Xcode 13.2.1 のサポートが追加された。&lt;/p&gt;
&lt;h3 id="riderresharper-2022.1-early-access-program"&gt;Rider/ReSharper 2022.1 Early Access Program&lt;/h3&gt;
&lt;p&gt;Rider と ReSharper の 2022.1 Early Access Program がリリースされた。&lt;/p&gt;
&lt;p&gt;Rider は Unreal Engine のサポートと Unity サポートの向上などが含まれている。 Resharper は今回 EAP 計画では機能の追加を初めに行うのではなく、問題の修正と各種品質の向上にフォーカスをするとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/02/rider-2022-1-eap/"&gt;Rider 2022.1 Early Access Program Is Open | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/02/resharper-2022-1-eap/"&gt;ReSharper 2022.1 Starts Early Access Program! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dotnet-script-1.3-is-out-with.net-6.0-support-strathweb.a-free-flowing-web-tech-monologue"&gt;dotnet-script 1.3 is out with .NET 6.0 support | StrathWeb. A free flowing web tech monologue.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.strathweb.com/2021/11/dotnet-script-1-3-is-out-with-net-6-0-support/"&gt;https://www.strathweb.com/2021/11/dotnet-script-1-3-is-out-with-net-6-0-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-script の 1.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンで .NET 6 がサポートされるようになった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="entity-framework-core-inside-rider-ui-way-the.net-tools-blog"&gt;Entity Framework Core Inside Rider: UI Way | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/31/entity-framework-core-inside-rider-ui-way/"&gt;https://blog.jetbrains.com/dotnet/2022/01/31/entity-framework-core-inside-rider-ui-way/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Entity Framework Core をサポートするための UI プラグインについての記事。&lt;/p&gt;
&lt;h3 id="c-asyncawait-objectdisposedexception-jsakamoto"&gt;[失敗談][C#] あえて async/await しないでドヤ顔してたら本番環境で ObjectDisposedException | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29073914/"&gt;https://devadjust.exblog.jp/29073914/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Task&lt;/code&gt;/&lt;code&gt;ValueTask&lt;/code&gt; を返すメソッドで同期的に書ける(&lt;code&gt;await&lt;/code&gt;せず直接返せる)パターンで &lt;code&gt;using&lt;/code&gt; をしていると、スコープを抜けたときに Dispose されて例外となってしまうという記事。&lt;/p&gt;
&lt;h3 id="nullable-c-c"&gt;nullable 警告もみ消し(来年までの我慢)の手段 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/nullable-property-disable/"&gt;https://ufcpp.net/blog/2022/1/nullable-property-disable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オブジェクト初期化子での初期化を明示する C# 11 で検討中の &lt;code&gt;required&lt;/code&gt; 修飾子 についてと、現状の回避策についての記事。&lt;/p&gt;
&lt;h3 id="ssl-qiita"&gt;任意のサイトのSSLサーバ証明書を取得する（新） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ShTair/items/cd26824a27dbd7620bc1"&gt;https://qiita.com/ShTair/items/cd26824a27dbd7620bc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の標準機能だけで任意のサーバーの証明書を取得して読み取る方法についての記事。&lt;/p&gt;
&lt;h3 id="databinding-with-the-oop-windows-forms-designer"&gt;Databinding with the OOP Windows Forms Designer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/databinding-with-the-oop-windows-forms-designer/"&gt;https://devblogs.microsoft.com/dotnet/databinding-with-the-oop-windows-forms-designer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しい Windows Forms の Out-of-Process モデルのデザイナーでのデータバインディングについての記事。&lt;/p&gt;
&lt;h3 id="c-11-readonlyspan-c-c"&gt;【C# 11 候補】 ReadOnlySpan 最適化 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/span-optimization/"&gt;https://ufcpp.net/blog/2022/2/span-optimization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードに定数的に埋め込まれた &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;byte&lt;/code&gt;/&lt;code&gt;sbyte&lt;/code&gt; とそれ以外の差を埋める改善についての話。&lt;/p&gt;
&lt;h3 id="optimally-configuring-open-telemetry-tracing-for-asp.net-core"&gt;Optimally Configuring Open Telemetry Tracing for ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/"&gt;https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で OpenTelemetry を使用するときの設定についての記事。&lt;/p&gt;
&lt;h3 id="inline-assembly-in-f.net-language"&gt;Inline Assembly in F#, .NET Language!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devgenius.io/inline-assembly-in-f-net-language-6d70ab9f58c1"&gt;https://blog.devgenius.io/inline-assembly-in-f-net-language-6d70ab9f58c1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# でインラインアセンブラーを書けるようにするという記事。&lt;/p&gt;
&lt;h3 id="building-message-oriented-microservices-with-google-pubsub-and.net-6"&gt;Building Message-Oriented Microservices with Google Pub/Sub and .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chrlschn.medium.com/building-message-oriented-microservices-with-google-pub-sub-and-net-6-476820335d92"&gt;https://chrlschn.medium.com/building-message-oriented-microservices-with-google-pub-sub-and-net-6-476820335d92&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で Google Pub/Sub を使用するという記事。&lt;/p&gt;
&lt;p&gt;記事の最後で Apple Silicon の Mac では gRPC のネイティブライブラリが別途必要なことに触れている。&lt;/p&gt;
&lt;h3 id="solving-the-source-generator-marker-attribute-problem-part-2-creating-a-source-generator-part-8"&gt;Solving the source generator 'marker attribute' problem - Part 2: Creating a source generator - Part 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/"&gt;https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソースジェネレーターのマーカー属性の問題についての記事。&lt;/p&gt;
&lt;h3 id="net-6-minimal-api-authentication-jwt-with-swagger-and-open-api"&gt;.Net 6 Minimal Api Authentication (JWT) with Swagger and Open API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/moe23/net-6-minimal-api-authentication-jwt-with-swagger-and-open-api-2chh"&gt;https://dev.to/moe23/net-6-minimal-api-authentication-jwt-with-swagger-and-open-api-2chh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API を使用して Swagger と Open API を JWT 認証を構成する方法についての記事。&lt;/p&gt;
&lt;h3 id="whats-up-with-timezoneinfo-on.net-6-part-1"&gt;What’s up with TimeZoneInfo on .NET 6? (Part 1)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/"&gt;https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NodaTime の作者の人による .NET 6 での TimeZoneInfo 周りの変更に関する記事。&lt;/p&gt;
&lt;h3 id="library-of-rd.xml-files-for-nativeaot"&gt;Library of RD.xml files for NativeAOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/library-of-rd-xml-files-for-nativeaot-174dcd2438e"&gt;https://codevision.medium.com/library-of-rd-xml-files-for-nativeaot-174dcd2438e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT でリフレクションに必要な RD.xml を共有するのはどうかという記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kant2002/RdXmlLibrary"&gt;kant2002/RdXmlLibrary: Library of RD.xml files for NativeAOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="usausaamazon-lambda-extension-source-generator-for-aws-lambda-http-api"&gt;usausa/amazon-lambda-extension: Source Generator for AWS Lambda HTTP API.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/amazon-lambda-extension"&gt;https://github.com/usausa/amazon-lambda-extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda の実装を行うためのサードパーティー製ソースジェネレーター。&lt;/p&gt;
&lt;h3 id="crontab.guru-the-cron-schedule-expression-editor"&gt;Crontab.guru - The cron schedule expression editor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://crontab.guru/"&gt;https://crontab.guru/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Crontab のスケジュール指定を人が読める形にして編集できるようにするサイト。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="net.net"&gt;トリミング用に .NET ライブラリを準備する - .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/deploying/trimming/prepare-libraries-for-trimming"&gt;https://docs.microsoft.com/ja-jp/dotnet/core/deploying/trimming/prepare-libraries-for-trimming&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/xoofx/status/1488570837418614784?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hopefully in the coming years, we should provide a direct support for NuGet with project SDK C# style projects. It will make UnityNuGet completely obsolete... but believe it or not, that will make me very happy! 😀&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1488570837418614784?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;うまいこと将来 Unity で SDK スタイルプロジェクトをサポートできるようになったら NuGet を直接サポートできるようになるね (UnityNuGet不要になる) という話。&lt;/p&gt;
&lt;!-- https://twitter.com/davkean/status/1489477275192279043?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Visual Studio 2022 is the first version of Visual Studio to ship with Server GC mode turned on.&lt;/p&gt;&amp;mdash; David Kean (&amp;#64;davkean) &lt;a href="https://twitter.com/davkean/status/1489477275192279043?ref_src=twsrc%5Etfw"&gt;February 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 では A/B テストなどの結果もあり、Server GC モードで動作するようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1489211096187777024?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;As of today, there is no official difference between string.Empty and &amp;quot;&amp;quot; in codegen after &lt;a href="https://t.co/eD0nTChbSr"&gt;https://t.co/eD0nTChbSr&lt;/a&gt; and &lt;a href="https://t.co/HosBheiq4q"&gt;https://t.co/HosBheiq4q&lt;/a&gt; 😅😅 &lt;a href="https://t.co/eIuJUjcrpG"&gt;pic.twitter.com/eIuJUjcrpG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1489211096187777024?ref_src=twsrc%5Etfw"&gt;February 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;JIT の結果 &lt;code&gt;String.Empty&lt;/code&gt; と &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; が差がなくなる変更が入ったという話。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-30: Visual Studio 2022 for Mac Preview 5, Proposed .NET 7 Breaking Changes</title>
			<link>/2022/01/30/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/30/updates</guid>
			<pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/"&gt;Visual Studio 2022 for Mac Preview 5 がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;このバージョンから Visual Studio for Mac 自体を動かすためのランタイムが Mono から .NET 6 (CLR) へと変更となっています。これにより Apple Silicon でのネイティブ実行やパフォーマンスの向上といった恩恵を受けることができるようになりました。&lt;/p&gt;
&lt;p&gt;実際に使用してみたところ M1 MacBook Air での実行はエミュレーションからネイティブへと変わったことで、体感できるほどに高速になっています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;.NET (Framework) がリリースされてから20年だそうで、最初の .NET Framework がリリースされたのは&lt;a href="https://rcpmag.com/articles/2002/01/16/microsoft-releases-net-framework-visual-studio-net.aspx"&gt;2002年1月15日頃だった&lt;/a&gt;ようです。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1485987070308982792?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Heard a rumor some fun stuff is happening on the most romantic day of the year! Celebrate with the &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; community by sharing your stories, memorabilia, pictures, videos on Twitter using the hashtag &lt;a href="https://twitter.com/hashtag/dotNETLovesMe?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETLovesMe&lt;/a&gt; &lt;a href="https://t.co/8RpyAAaGJB"&gt;pic.twitter.com/8RpyAAaGJB&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1485987070308982792?ref_src=twsrc%5Etfw"&gt;January 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-5"&gt;Visual Studio 2022 for Mac Preview 5&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 5 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでランタイムが Mono から .NET 6 (CoreCLR) へと変更された。これにより Apple Silicon へのネイティブ対応が実現したほか、パフォーマンスが大きく向上しているとしている。&lt;/p&gt;
&lt;p&gt;その他引き続きネイティブ UI への移行が行われ、ドキュメントアウトラインウィンドウやドキュメントスイッチャーダイアログがネイティブ UI となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.0.0-pre.5"&gt;Visual Studio 2022 for Mac Preview 5 - Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="proposed.net-7-breaking-changes-issue-7131-dotnetcore"&gt;Proposed .NET 7 Breaking Changes · Issue #7131 · dotnet/core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/issues/7131"&gt;https://github.com/dotnet/core/issues/7131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で行う破壊的変更のプロポーザルが Issue として作成された。&lt;/p&gt;
&lt;p&gt;現時点では下記の変更が検討されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-level lookup (複数の個所のインストールを探す) ものをデフォルト無効化&lt;/li&gt;
&lt;li&gt;PATH に 32-bit .NET へのパスの追加を廃止&lt;/li&gt;
&lt;li&gt;dotnet build/publish で RID が明確なアプリでは暗黙的な SDK RID をデフォルトで使用&lt;/li&gt;
&lt;li&gt;dotnet build/publish で RID が明確なアプリをデフォルトで生成&lt;/li&gt;
&lt;li&gt;dotnet build/publish で exe/apphost をデフォルトで生成しない&lt;/li&gt;
&lt;li&gt;dotnet publish/pack でリリースアセットを生成&lt;/li&gt;
&lt;li&gt;スタートアップパフォーマンスを向上するためにプリコンパイルに AVX2 (x64) または NEON (ARM64) を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="highlights-from-git-2.35-the-github-blog"&gt;Highlights from Git 2.35 | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-01-24-highlights-from-git-2-35/"&gt;https://github.blog/2022-01-24-highlights-from-git-2-35/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git 2.35 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; に &lt;code&gt;--staged&lt;/code&gt; オプションの追加、&lt;code&gt;git log&lt;/code&gt; の &lt;code&gt;--format&lt;/code&gt; における &lt;code&gt;describe&lt;/code&gt; のカスタマイズ、SSH 署名の改善、&lt;code&gt;merge.conflictStyle&lt;/code&gt; に &lt;code&gt;zdiff3&lt;/code&gt; モードの追加、&lt;code&gt;--histogram&lt;/code&gt;, &lt;code&gt;--color-moved&lt;/code&gt; のパフォーマンス改善、Windows での clean/smudge フィルター処理で4GB以上のファイルを扱えるようになった(Git for Windows 2.34には適用済み)、など。&lt;/p&gt;
&lt;h3 id="servicestack-v6-documentation"&gt;ServiceStack V6 | Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.servicestack.net/releases/v6"&gt;https://docs.servicestack.net/releases/v6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ServiceStack V6 がリリースされた。&lt;/p&gt;
&lt;p&gt;これまで有償ライセンスのみであったが、個人およびオープンソースプロジェクト向けの無償のライセンスが提供されるようになった。&lt;/p&gt;
&lt;h3 id="release-v6.0.3-npgsqlnpgsql"&gt;Release v6.0.3 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.3"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 6.0.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;コマンド実行中に接続が中断された場合に StackOverflowException が発生する問題の修正など様々なバグ修正が行われている。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.0.0-preview-1"&gt;Announcing .NET Community Toolkit v8.0.0 Preview 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-1/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.0.0 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;コマンドやプロパティ周りのコード生成を行う MVVM Toolkit source generators の追加と .NET 6 への対応が行われている。&lt;/p&gt;
&lt;h3 id="net-framework-january-2022-cumulative-update-preview"&gt;.NET Framework January 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-january-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-january-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年1月の累積アップデートプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートプレビューでは CLR がごく稀にクラッシュする問題や WPF の不具合がいくつか修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="optimizing-cpu-bound-and-memory-bound.net-applications-11-best-practices-michaels-coding-spot"&gt;Optimizing CPU-Bound and Memory-Bound .NET Applications: 11 Best Practices - Michael's Coding Spot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://michaelscodingspot.com/cpu-bound-memory-bound/"&gt;https://michaelscodingspot.com/cpu-bound-memory-bound/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU バウンドとメモリーバウンドな .NET アプリケーションを最適化するための11のベストプラクティスを紹介している記事。&lt;/p&gt;
&lt;h3 id="ef-core-6-features-part-2"&gt;EF Core 6 Features - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-2"&gt;https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6 の機能について紹介する記事 (Part 2)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-1"&gt;EF Core 6 Features - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="writing-automated-ui-tests-in.net-using-playwright-and-specflow"&gt;Writing Automated UI tests in .NET using Playwright and SpecFlow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/writing-automated-ui-tests-in-net-using-playwright-and-specflow-f923411a65bc"&gt;https://levelup.gitconnected.com/writing-automated-ui-tests-in-net-using-playwright-and-specflow-f923411a65bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpecFlow と Playwright で UI 自動テストを書く方法についての記事。&lt;/p&gt;
&lt;h3 id="why-your-ticket-may-end-up-in-a-different-tracker-the.net-tools-blog"&gt;Why Your Ticket May End Up in a Different Tracker | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/24/why-your-ticket-may-end-up-in-a-different-tracker/"&gt;https://blog.jetbrains.com/dotnet/2022/01/24/why-your-ticket-may-end-up-in-a-different-tracker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider の問題を報告したチケットが別なプロダクトのトラッカーに送られることがある理由についての記事。&lt;/p&gt;
&lt;p&gt;Rider は IntelliJ IDEA と ReSharper というコンポーネントの上に構築されていること、そのため Rider の問題として報告した場合でもそれぞれ依存先のコンポーネントへと送られることがある。&lt;/p&gt;
&lt;h3 id="generic-qiita"&gt;Generic型のインターフェイスの型をダイナミックに定義する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TsuyoshiUshio&amp;#64;github/items/b77b465a21a9e8d84239"&gt;https://qiita.com/TsuyoshiUshio&amp;#64;github/items/b77b465a21a9e8d84239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンジェネリック型から構築されたジェネリック型を作る &lt;code&gt;Type.MakeGenericType&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;記事ではネストされたジェネリック型での挙動についても触れている。&lt;/p&gt;
&lt;h3 id="colors-in.net-an-in-depth-guide"&gt;Colors in .NET: An In-Depth Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/colors-dotnet-guide/"&gt;https://www.infoq.com/articles/colors-dotnet-guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で色相、彩度、輝度といった色を扱うための要素とその操作についての記事。&lt;/p&gt;
&lt;h3 id="f-and-webassembly"&gt;F# and WebAssembly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/f-and-webassembly-n0a"&gt;https://dev.to/tunaxor/f-and-webassembly-n0a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly 上で F# のアプリケーションを動かす Web フレームワーク Bolero を使う方法についての記事。&lt;/p&gt;
&lt;h3 id="troubleshooting.net-performance-issues-with-datadog-toolbox"&gt;Troubleshooting .NET performance issues with Datadog toolbox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/troubleshooting-net-performance-issues-with-datadog-toolbox-3b9919792344"&gt;https://chnasarre.medium.com/troubleshooting-net-performance-issues-with-datadog-toolbox-3b9919792344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog の APM や新機能の .NET Continuous Profiler を使用してパフォーマンス問題を解決する方法についての記事。&lt;/p&gt;
&lt;h3 id="azure-devops-requires-tls-1.2-on-all-connections-including-visual-studio"&gt;Azure DevOps requires TLS 1.2 on all connections including Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/azure-devops-requires-tls-1-2-on-all-connections-including-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/azure-devops-requires-tls-1-2-on-all-connections-including-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure DevOps は1月31日から接続に TLS 1.2 を必要とするようになるため、Visual Studio を含め TLS 1.2 の有効化が必要となるというアナウンス。&lt;/p&gt;
&lt;h3 id="c-11-main-c-c"&gt;【C# 11 候補】 トップ レベル ステートメントの Main に属性を付ける | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/main-attribute/"&gt;https://ufcpp.net/blog/2022/1/main-attribute/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 候補となっているトップレベルステートメントの暗黙的な Main メソッドに属性をつける(つまり今はつける方法がない)という話についての記事。&lt;/p&gt;
&lt;h3 id="solving-the-source-generator-marker-attribute-problem-part-1-creating-a-source-generator-part-7"&gt;Solving the source generator 'marker attribute' problem - Part 1: Creating a source generator - Part 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/"&gt;https://andrewlock.net/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unity-unity-test-framework-2.0-ready-for-feedback"&gt;Unity - Unity Test Framework 2.0 ready for feedback&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forum.unity.com/threads/unity-test-framework-2-0-ready-for-feedback.1230126/"&gt;https://forum.unity.com/threads/unity-test-framework-2-0-ready-for-feedback.1230126/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の Unity Test Framework v2.0 のプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;非同期メソッドの対応などが行われている。v2.0 は 2022.2 からデフォルトとなるとのこと。&lt;/p&gt;
&lt;h3 id="how-to-lie-with-benchmarks"&gt;How to lie with Benchmarks&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://leveluppp.ghost.io/how-to-lie-with-benchmarks/"&gt;https://leveluppp.ghost.io/how-to-lie-with-benchmarks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ベンチマークで嘘をつく方法についての記事。&lt;/p&gt;
&lt;p&gt;ベンチマークは正しく行うことが難しいという話を紹介している。例えば簡単な例ではウォームアップの必要性、難しいものではメソッドのアドレスによる変化といったものがあるとしている。&lt;/p&gt;
&lt;h3 id="how-to-get-asp.net-core-server-urls"&gt;How to get ASP.NET Core server URLs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/swimburger/how-to-get-aspnet-core-server-urls-g8h"&gt;https://dev.to/swimburger/how-to-get-aspnet-core-server-urls-g8h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のアプリケーションがサーバーのアドレスを取得する方法についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IServerAddressesFeature&lt;/code&gt; を取得することでサーバーのアドレスを取得できる。&lt;/p&gt;
&lt;h3 id="performance-improvements-in-asp.net-core-6"&gt;Performance improvements in ASP.NET Core 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-6/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 6 で行われたパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事ではパフォーマンスが改善された部分をベンチマークとともに紹介している。&lt;/p&gt;
&lt;h3 id="c-moduleinitializer"&gt;(C#) ModuleInitializer からのみ呼べるメソッドを作る - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/01/26/034653"&gt;https://ikorin2.hatenablog.jp/entry/2022/01/26/034653&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の &lt;code&gt;ModuleInitializer&lt;/code&gt; 属性を付けたメソッドをユーザーコードから呼び出せなくする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;Obsolete&lt;/code&gt; 属性でのコンパイルエラーとする方法を紹介している。&lt;/p&gt;
&lt;h3 id="code-search-in-visual-studio-2022-is-about-to-get-much-faster"&gt;Code search in Visual Studio 2022 is about to get much faster&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/code-search-in-visual-studio-is-about-to-get-much-faster/"&gt;https://devblogs.microsoft.com/visualstudio/code-search-in-visual-studio-is-about-to-get-much-faster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 3 で導入されたインデックス化されたコード検索についての記事。&lt;/p&gt;
&lt;p&gt;95パーセンタイルで従来の3から10倍以上高速であるとしている。インデックスは Visual Studio のプロセスからは切り離され、優先度の低いバックグラウンドプロセスで作っているとのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="usausamunin-node-alternative-munin-node-alternative-implementation-by.net"&gt;usausa/munin-node-alternative: Munin node alternative implementation by .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/munin-node-alternative"&gt;https://github.com/usausa/munin-node-alternative&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Munin-node の C# (.NET) による代替実装。&lt;/p&gt;
&lt;!-- https://twitter.com/yamaokunousausa/status/1485264322112921605?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;自宅鯖の監視は完全に自作Munin-nodeに置き換えスマタ( ˙ω˙)&lt;a href="https://t.co/WqyXQsLjGm"&gt;https://t.co/WqyXQsLjGm&lt;/a&gt;&lt;/p&gt;&amp;mdash; 💖異世界アイドル🦋副業聖女🌼山奥通信 (&amp;#64;yamaokunousausa) &lt;a href="https://twitter.com/yamaokunousausa/status/1485264322112921605?ref_src=twsrc%5Etfw"&gt;January 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="microsoftfeaturemanagement-dotnet-microsoft.featuremanagement-provides-standardized-apis-for-enabling-feature-flags-within-applications.utilize-this-library-to-secure-a-consistent-experience-when-developing-applications-that-use-patterns-such-as-beta-access-rollout-dark-deployments-and-more"&gt;microsoft/FeatureManagement-Dotnet: Microsoft.FeatureManagement provides standardized APIs for enabling feature flags within applications. Utilize this library to secure a consistent experience when developing applications that use patterns such as beta access, rollout, dark deployments, and more.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/FeatureManagement-Dotnet"&gt;https://github.com/microsoft/FeatureManagement-Dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでフィーチャーフラグを実装するためのライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://procodeguide.com/programming/feature-flags-in-aspnet-core/"&gt;Microsoft Feature Management - Feature Flags in ASP.NET Core C# - Detailed Guide | Pro Code Guide&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;フィーチャーフラグ(フィーチャートグル)を実装するための Microsoft.FeatureManagement ライブラリーを使用して ASP.NET Core で機能の切り替えを実現する方法についての記事。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="giorgientityframework.exceptions-handle-database-errors-easily-when-working-with-entity-framework-core.supports-sqlserver-postgresql-sqlite-oracle-and-mysql"&gt;Giorgi/EntityFramework.Exceptions: Handle database errors easily when working with Entity Framework Core. Supports SQLServer, PostgreSQL, SQLite, Oracle and MySql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Giorgi/EntityFramework.Exceptions"&gt;https://github.com/Giorgi/EntityFramework.Exceptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core でクエリーを実行した際のエラーがすべて DbUpdateException となってしまい、取り扱いが不便な問題を解消するライブラリー。&lt;/p&gt;
&lt;p&gt;例えばユニークキー制約違反などが発生した場合は UniqueConstraintException に変換した後でスローするようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotnetcoretutorials.com/2022/01/29/better-exception-handling-with-entityframeworkcore-exceptions/"&gt;Better Exception Handling With EntityFrameworkCore Exceptions - .NET Core Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xoofxdotnet-releaser-easily-cross-compile-package-and-publish-your.net-application-to-nuget-and-github"&gt;xoofx/dotnet-releaser: Easily cross-compile, package and publish your .NET application to NuGet and GitHub.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/dotnet-releaser"&gt;https://github.com/xoofx/dotnet-releaser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを NuGet や GitHub に簡単にリリースするツール。&lt;/p&gt;
&lt;p&gt;クロスコンパイルからパッケージング、発行までをワンストップで行えるとのこと。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1485731573420814336?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now You can Attach to your .NET ( Framework. Core or 5+) for Windows App Service without a solution or project open. &lt;br&gt;Available from VS2022 17.1 Preview 1&lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://t.co/ntEWtZi9s9"&gt;pic.twitter.com/ntEWtZi9s9&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1485731573420814336?ref_src=twsrc%5Etfw"&gt;January 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 1 以降では Azure App Service (Windows) の .NET (Framework, Core, 5 以降)のプロセスにプロジェクトやソリューションなしでアタッチできるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1486171186627158017?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today we prototyped the first version of the long requested feature &amp;quot;client results&amp;quot; in SignalR. This feature has been on the backlog for *years* and we&amp;#39;re finally taking a look at implementing it. Here&amp;#39;s what a turn based game might look like &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt; &lt;a href="https://t.co/iySxjbaBCm"&gt;pic.twitter.com/iySxjbaBCm&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸💉💉💉 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1486171186627158017?ref_src=twsrc%5Etfw"&gt;January 26, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;SignalR でサーバーからクライアントを呼び出した際に戻り値を待機できるようにするというプロトタイプを検討中という話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="detect-license-changes-in-packages-issue-11520-nugethome"&gt;Detect license changes in packages · Issue #11520 · NuGet/Home&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/NuGet/Home/issues/11520"&gt;https://github.com/NuGet/Home/issues/11520&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet パッケージのライセンスが変更されたことを検出したいという Issue。&lt;/p&gt;
&lt;p&gt;特に互換性のないライセンスとなった場合に気が付かずインストールしてしまうとライセンス違反となってしまうのでそういった問題を防ぎたいという話。&lt;/p&gt;
&lt;h3 id="json-features-by-cyrusnajmabadi-pull-request-59034-dotnetroslyn"&gt;Json features by CyrusNajmabadi · Pull Request #59034 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/59034"&gt;https://github.com/dotnet/roslyn/pull/59034&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列リテラル内の JSON を認識してシンタックスハイライトなどを行えるようにするという PR。&lt;/p&gt;
&lt;p&gt;ReSharper の &lt;a href="https://www.jetbrains.com/help/resharper/Language_Injections.html#use-comments"&gt;Language injections&lt;/a&gt; のような &lt;code&gt;// lang=json&lt;/code&gt; といった形で認識される模様。&lt;/p&gt;
&lt;h3 id="design-proposal-bind-getsetafter-modifiers-issue-39837-dotnetaspnetcore"&gt;Design proposal: Bind get/set/after modifiers · Issue #39837 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39837"&gt;https://github.com/dotnet/aspnetcore/issues/39837&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の &lt;code&gt;&amp;#64;bind&lt;/code&gt; でバインドの前後や get/set を個別にバインドできるようにしたいという提案 Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-23: Visual Studio 2022 version 17.1 Preview 3, .NET MAUI Preview 12, gRPC (.NET) 2.42.0</title>
			<link>/2022/01/23/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/23/updates</guid>
			<pubDate>Sun, 23 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-version-17.1-preview-3"&gt;Visual Studio 2022 version 17.1 Preview 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1710-pre30--visual-studio-2022-version-171-preview-3-newreleasebutton"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1710-pre30--visual-studio-2022-version-171-preview-3-newreleasebutton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.1 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Azure Container Apps 向けの GitHub Actions ワークフローファイルの生成などパブリッシュに関する機能の改善が行われているほか、試験的な機能としてインデックスを使用した高速なファイル内検索機能が実装されているとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/__denizhan__/status/1484188965448007684?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did someone say faster code search performance? &lt;a href="https://twitter.com/hashtag/VisualStudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VisualStudio&lt;/a&gt; 2022 Preview 3 now supports indexed Find in Files searching! See how much faster Find in Files searching is for you in Preview 3 today!! &lt;a href="https://t.co/BxTolDjwN1"&gt;pic.twitter.com/BxTolDjwN1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Denizhan Yigitbas (&amp;#64;__denizhan__) &lt;a href="https://twitter.com/__denizhan__/status/1484188965448007684?ref_src=twsrc%5Etfw"&gt;January 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="announcing.net-maui-preview-12"&gt;Announcing .NET MAUI Preview 12&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-12/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-12/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Preview 12 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは下記の改善が行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーションライフサイクルなどの新しいドキュメント&lt;/li&gt;
&lt;li&gt;Android での FlyoutView ハンドラーの実装&lt;/li&gt;
&lt;li&gt;RelativeLayout/AbsoluteLayout の互換ハンドラーの実装&lt;/li&gt;
&lt;li&gt;Z インデックスの追加&lt;/li&gt;
&lt;li&gt;iOS の .NET 6 での型統合対応&lt;/li&gt;
&lt;li&gt;Windows でのタイトルバーへの拡張、&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、Flyout メニューとタブを使用するアプリケーションを簡単に実装するための Shell (AppShell) と呼ばれる仕組みが追加された。Shell は URI ベースのナビゲーションを提供し、アプリケーション内では &lt;code&gt;Shell.Current.GoToAsync($&amp;quot;{nameof(ShowDetailPage)}?Id={Show.Id}&amp;quot;)&lt;/code&gt; のような形でページ遷移できる。コンストラクターインジェクションによる DI もサポートしているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.200-preview.12"&gt;Release 6.0.200-preview.12 · dotnet/maui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.42.0-grpcgrpc-dotnet"&gt;Release Release v2.42.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.42.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.42.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) の 2.42.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;クライアントサイドロードバランシングに関するいくつかの改善と不具合修正が行われている。&lt;/p&gt;
&lt;p&gt;新たに ASP.NET Core でのヘルスチェックをサポートするための Grpc.AspNetCore.HealthChecks パッケージがリリースとなり NuGet にパブリッシュされるようになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/Grpc.AspNetCore.HealthChecks"&gt;NuGet Gallery | Grpc.AspNetCore.HealthChecks 2.42.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="facebook-sdk-v12.2-for-xamarin.ios-now-available"&gt;Facebook SDK v12.2 for Xamarin.iOS Now Available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/facebook-sdk-v12-2-for-xamarin-ios-now-available/"&gt;https://devblogs.microsoft.com/xamarin/facebook-sdk-v12-2-for-xamarin-ios-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Facebook SDK v12.2 for Xamarin.iOS がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは iOS 向けの Facebook SDK v12.2 に対応したバインディングを提供するようになった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="opentelemetry.net-2-asp.net-coreopentelemetry"&gt;OpenTelemetry .NETを理解する (2) ASP.NET CoreにOpenTelemetryをまずいれてみる - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-02"&gt;https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-02&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core に OpenTelemetry のパッケージを追加し、メトリクスを New Relic に送信するという記事。&lt;/p&gt;
&lt;h3 id="callerargumentexpression-qiita"&gt;CallerArgumentExpressionによる引数の式表現の文字列化 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/35e2506bedc11bf7a3f8"&gt;https://qiita.com/skitoy4321/items/35e2506bedc11bf7a3f8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引数の呼び出し式を取得できる &lt;code&gt;CallerArgumentExpression&lt;/code&gt; 属性の使用方法とその挙動についての記事。&lt;/p&gt;
&lt;h3 id="the-new-handlers-infrastructure-in.net-maui"&gt;The new handlers infrastructure in .NET MAUI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://thewissen.io/new-handlers-infrastructure-in-net-maui/"&gt;https://thewissen.io/new-handlers-infrastructure-in-net-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms のカスタムレンダラーに相当する MAUI のハンドラーについての記事。Xamarin.Forms と MAUI での実装の違いなどを解説している。&lt;/p&gt;
&lt;h3 id="saving-source-generator-output-in-source-control-creating-a-source-generator-part-6"&gt;Saving source generator output in source control: Creating a source generator - Part 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/"&gt;https://andrewlock.net/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator で生成するソースコードの出力をコントロールし、保存するといったことを行う方法についての記事。生成されたファイルをプロジェクトに追加した場合の問題の回避やターゲットフレームワーク別のファイルなどについても触れている。&lt;/p&gt;
&lt;h3 id="ef-core-6-features-part-1"&gt;EF Core 6 Features - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-1"&gt;https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6 の新しい機能についてのまとめ記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-configuration-adding-all-configs-at-one-line-of-code"&gt;ASP.NET Core Configuration: adding all configs at one line of code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;sergey.golovenchik/asp-net-core-configuration-adding-all-configs-at-one-line-of-code-9553b4773f87"&gt;https://medium.com/&amp;#64;sergey.golovenchik/asp-net-core-configuration-adding-all-configs-at-one-line-of-code-9553b4773f87&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Configuration の IConfigurationBuider にJSON ファイルの設定を複数まとめて追加するために拡張メソッドを用意することで簡潔に登録する手法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="fornevercesium-c-compiler-for-the-cli-platform"&gt;ForNeVeR/Cesium: C compiler for the CLI platform&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ForNeVeR/Cesium"&gt;https://github.com/ForNeVeR/Cesium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IL を出力する C コンパイラー実装。&lt;/p&gt;
&lt;!-- https://twitter.com/fvnever/status/1482752346966872067 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Not so long ago Cesium, a C17 compiler targeting .NET platform I develop, was able to compile a fully standard &amp;quot;Hello, world&amp;quot; program for the first time.&lt;br&gt;&lt;br&gt;Today, I&amp;#39;ve prepared some contributor documentation and laid out the further plans. Go, check it out! &lt;a href="https://t.co/boqBBfvZXD"&gt;https://t.co/boqBBfvZXD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Friedrich von Never (&amp;#64;fvnever) &lt;a href="https://twitter.com/fvnever/status/1482752346966872067?ref_src=twsrc%5Etfw"&gt;January 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="dotnetsafer-first.net-obfuscator-with-military-grade-protection-try-it-free-now"&gt;Dotnetsafer - First .NET OBFUSCATOR with Military-Grade Protection (Try it FREE NOW!)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.dotnetsafer.com/products/shield"&gt;https://www.dotnetsafer.com/products/shield&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET のアセンブリーを難読化する商用/有償 Obfuscator サービス。&lt;/p&gt;
&lt;p&gt;Shield はビルド時のタスクでサービス側で難読化を行うことでクライアントコンピューターにインストール不要で常に新しい仕組みを使用できるとしている。&lt;/p&gt;
&lt;h3 id="hangfireiocronos-fully-featured.net-library-for-working-with-cron-expressions.built-with-time-zones-in-mind-and-intuitively-handles-daylight-saving-time-transitions"&gt;HangfireIO/Cronos: Fully-featured .NET library for working with Cron expressions. Built with time zones in mind and intuitively handles daylight saving time transitions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/HangfireIO/Cronos"&gt;https://github.com/HangfireIO/Cronos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;crontab のスケジュール指定書式をパースするためのライブラリー。&lt;/p&gt;
&lt;h3 id="nuitsjpwpf.extensions.hosting"&gt;nuitsjp/Wpf.Extensions.Hosting&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nuitsjp/Wpf.Extensions.Hosting"&gt;https://github.com/nuitsjp/Wpf.Extensions.Hosting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションを Generic Host で実行するためのライブラリー。WPF アプリケーションであっても ASP.NET Core と同じように Microsoft.Extensions.* の恩恵を受けることができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/wpf-extensions-hosting"&gt;WPFをGeneric Host上で実行するためのライブラリ「Wpf.Extensions.Hosting」をリリースしました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="convert.tohexstring-method-system"&gt;Convert.ToHexString Method (System)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring?view=net-6.0"&gt;https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring?view=net-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バイト配列を16進数文字列(大文字)に変換するメソッド。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;string.Concat(hash.Select(x =&amp;gt; x.ToString(&amp;quot;X2&amp;quot;)))&lt;/code&gt; と同様の文字列が最小のコストで構築できる。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="support-basic-end-to-end-scenarios-for-converting-string-constants-to-utf8-byte-representation.by-alekseyts-pull-request-58849-dotnetroslyn"&gt;Support basic end-to-end scenarios for converting string constants to UTF8 byte representation. by AlekseyTs · Pull Request #58849 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58849"&gt;https://github.com/dotnet/roslyn/pull/58849&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UTF-8 文字列を byte 配列 (&lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt;) に変換する基本実装の PR。&lt;/p&gt;
&lt;h3 id="ref-field-support-in.net-runtimes-issue-63768-dotnetruntime"&gt;&lt;code&gt;ref&lt;/code&gt; field support in .NET runtimes · Issue #63768 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63768"&gt;https://github.com/dotnet/runtime/issues/63768&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ランタイムに &lt;code&gt;ref&lt;/code&gt; フィールドのサポートを追加する PR。&lt;/p&gt;
&lt;h3 id="wasm-startup-time-optimization-tracking-issue-issue-63809-dotnetruntime"&gt;WASM startup time optimization tracking issue · Issue #63809 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63809"&gt;https://github.com/dotnet/runtime/issues/63809&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WebAssembly の起動速度の最適化に向けての親 Issue。&lt;/p&gt;
&lt;h3 id="introduce-randomaccess.setlength-by-adamsitnik-pull-request-63992-dotnetruntime"&gt;Introduce RandomAccess.SetLength by adamsitnik · Pull Request #63992 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/63992"&gt;https://github.com/dotnet/runtime/pull/63992&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RandomAccess.GetLength&lt;/code&gt; メソッドの逆に相当する、ハンドルに対して長さをセットするメソッドを追加する PR。短い場合は拡張し、長い場合は切り詰めるような処理となる。*nix 系では ftruncate。&lt;/p&gt;
&lt;h3 id="support-u8-type-suffix-for-utf8-string-literals.by-alekseyts-pull-request-58991-dotnetroslyn"&gt;Support &lt;code&gt;u8&lt;/code&gt; type suffix for UTF8 string literals. by AlekseyTs · Pull Request #58991 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58991"&gt;https://github.com/dotnet/roslyn/pull/58991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UTF-8 文字列を表現する &lt;code&gt;u8&lt;/code&gt; サフィックスの実装の PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-14: ECMA C# draft standard, .NET Framework January Updates, State of the Windows Forms Designer</title>
			<link>/2022/01/14/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/14/updates</guid>
			<pubDate>Fri, 14 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="the-ecma-c-draft-standard-and-the-microsoft-c-spec-have-finally-converged"&gt;The ECMA C# draft standard and the Microsoft C# spec have finally converged.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/language-specification/readme"&gt;https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/language-specification/readme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ECMA 標準の C# のドラフトが Microsoft の C# 仕様と収束する形になり、docs.microsoft.com 上で閲覧できるようになった。現在ドラフトとして進行しているバージョンは C# 6 となっている。&lt;/p&gt;
&lt;!-- https://twitter.com/billwagner/status/1481308876272197634?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The ECMA C# draft standard and the Microsoft C# spec have finally converged. The ECMA draft for C# 6 is now live on &lt;a href="https://twitter.com/docsmsft?ref_src=twsrc%5Etfw"&gt;&amp;#64;docsmsft&lt;/a&gt; Check it out here: &lt;a href="https://t.co/VufFlgyRlD"&gt;https://t.co/VufFlgyRlD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bill Wagner (&amp;#64;billwagner) &lt;a href="https://twitter.com/billwagner/status/1481308876272197634?ref_src=twsrc%5Etfw"&gt;January 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="net-framework-january-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework January 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-january-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-january-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年1月のセキュリティー修正と品質ロールアップアップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DoS 脆弱性に対するセキュリティー修正といくつかの品質向上の不具合修正が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-21911"&gt;CVE-2022-21911 - Security Update Guide - Microsoft - .NET Framework Denial of Service Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="state-of-the-windows-forms-designer-for.net-applications.net-blog"&gt;State of the Windows Forms Designer for .NET Applications - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/state-of-the-windows-forms-designer-for-net-applications/"&gt;https://devblogs.microsoft.com/dotnet/state-of-the-windows-forms-designer-for-net-applications/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の .NET (Core 3.1, 5, 6) 向け Windows Forms アプリケーションのためのデザイナーの現状についての記事。&lt;/p&gt;
&lt;p&gt;現状、.NET Framework の Windows Forms 向けのデザイナーと .NET の Windows Forms 向けのデザイナーでは機能に差があり、その差を埋める作業が続いている。&lt;/p&gt;
&lt;p&gt;記事では何故新しいデザイナーが必要となったのか、新しいデザイナーは Out-of-Process モデルで動作する上でどのようにして Visual Studio と協調動作しているのかといったことが説明されている。その上でこれから対応予定の機能についても触れている。&lt;/p&gt;
&lt;h3 id="fair-trade-software-license-duende-software-blog"&gt;Fair Trade Software License | Duende Software Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20220111_fair_trade"&gt;https://blog.duendesoftware.com/posts/20220111_fair_trade&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IdentityServer の Community Edition の機能制限がなくなり Enterprise Edition 相当となった。&lt;/p&gt;
&lt;p&gt;多くのプロジェクトで採用されている認証フレームワークの IdentityServer は2年前にフリーソフトウェアから商用ライセンスモデルへと移行し、その後小規模収益企業や個人向けに以前のフリーソフトウェア版とほぼ同レベルの機能を持つ Community Edition をリリースした。今後 IdentityServer v6 以降の Community Edition が Enterprise Edition 相当の機能を提供するようになる。&lt;/p&gt;
&lt;p&gt;Dunde Software ではこの大きな収益を持つ企業や個人には支払いを求め、小規模な企業や個人は低価格または無料で始められるライセンスモデルをフェアトレードソフトウェアライセンスと呼んでいる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="visual-studio-naming-style-c-c"&gt;【Visual Studio】 Naming Style 設定 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/naming-style/"&gt;https://ufcpp.net/blog/2022/1/naming-style/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フィールドの命名規則として &lt;code&gt;_&lt;/code&gt; をつけるようなスタイルを EditorConfig に記述する方法についての記事。&lt;/p&gt;
&lt;h3 id="wpf-windows-app-sdk"&gt;WPF から Windows App SDK に移行を試してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/migrate-to-windowsappsdk-from-wpf"&gt;https://zenn.dev/okazuki/articles/migrate-to-windowsappsdk-from-wpf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 の WPF 製サンプルアプリで Windows App SDK への移行を行ってみたという記事。依存ライブラリーの代替や苦労した点について書かれている。&lt;/p&gt;
&lt;h3 id="feature-management-using-consul-kv-store-in-asp.net-core"&gt;Feature Management using Consul KV store in ASP.Net core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/niteshsinghal85/feature-management-using-consul-kv-store-in-aspnet-core-5a1d"&gt;https://dev.to/niteshsinghal85/feature-management-using-consul-kv-store-in-aspnet-core-5a1d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリから Consul KV に保存された設定を取得してフィーチャー切り替えを行うという記事。&lt;/p&gt;
&lt;h3 id="c-11-defaultable-value-type-c-c"&gt;【C# 11 候補】defaultable value type | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/defaultable/"&gt;https://ufcpp.net/blog/2022/1/defaultable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参照型で null を受け入れる null 許容型があるのと同様に、値型の default を受け入れる default 許容型を用意してフロー解析によってガードするという C# 11 候補の機能についての記事。&lt;/p&gt;
&lt;p&gt;ImmutableArray 構造体のように default のままでは困る型を取り扱いに使われる。&lt;/p&gt;
&lt;h3 id="ccollectionsmarshal"&gt;[C#]CollectionsMarshal の解説&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/a950920fe7d1a5"&gt;https://zenn.dev/naminodarie/articles/a950920fe7d1a5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 で導入された CollectionsMarshal クラスのメソッドについての記事。.NET 6 で追加されたメソッドについても触れている。&lt;/p&gt;
&lt;h3 id="bringing-code-cleanup-on-save-to-visual-studio-2022-17.1-preview-2"&gt;Bringing Code Cleanup on Save To Visual Studio 2022 17.1 Preview 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/bringing-code-cleanup-on-save-to-visual-studio-2022-17-1-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/bringing-code-cleanup-on-save-to-visual-studio-2022-17-1-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 2 で導入された保存時のコードフォーマットの設定とその動作の様子についての記事。&lt;/p&gt;
&lt;h3 id="membernotnull-c-c"&gt;MemberNotNull (値型) 判定 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/member-not-null/"&gt;https://ufcpp.net/blog/2022/1/member-not-null/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MemberNotNull&lt;/code&gt; 属性が非 null であるはずの値型のフィールドやプロパティーに対してもフロー解析を行っているということについての記事。&lt;/p&gt;
&lt;h3 id="diagnostics-on-kubernetes-obtaining-a-memory-dump"&gt;Diagnostics on Kubernetes: Obtaining a Memory Dump&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/damonjames/diagnostics-on-kubernetes-obtaining-a-memory-dump-kgb"&gt;https://dev.to/damonjames/diagnostics-on-kubernetes-obtaining-a-memory-dump-kgb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes の Pod で動いている .NET アプリケーションのメモリーダンプを取得することについての記事。&lt;/p&gt;
&lt;p&gt;記事では dotnet-gcdump ツールを使用して、Pod の中でダンプを取得した後ローカルにコピーするという方法が紹介されている。&lt;/p&gt;
&lt;h3 id="exploring-hosting-startup-assemblies-in-asp.net-core"&gt;Exploring hosting startup assemblies in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;saravananganesan/exploring-hosting-startup-assemblies-in-asp-net-core-c272c6827661"&gt;https://medium.com/&amp;#64;saravananganesan/exploring-hosting-startup-assemblies-in-asp-net-core-c272c6827661&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーション起動時に自動でアセンブリを読み込むホスティングスタートアップアセンブリの仕組みを使用して Application Insights のようにロギングの仕組みを自動で読み込ませる方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0"&gt;ASP.NET Core でホスティング スタートアップ アセンブリを使用する | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-data-frameworks-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;.NET Data Frameworks Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework などデータフレームワークの隔週アップデートの情報の2022年1月13日号。&lt;/p&gt;
&lt;p&gt;EF Core 7 のプランがあがっていることや EF Core 6.0.2 のリリースが来月を予定していることなどが書かれている。&lt;/p&gt;
&lt;h3 id="write-a-url-shortener-in-26-lines-of-code-with.net-minimal-apis"&gt;Write a URL Shortener in 26 Lines of Code with .NET Minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/infobipdev/write-a-url-shortener-in-26-lines-of-code-with-net-minimal-apis-52e110a07a25"&gt;https://medium.com/infobipdev/write-a-url-shortener-in-26-lines-of-code-with-net-minimal-apis-52e110a07a25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API で26行で短縮 URL サービスのサーバーを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="performance-analysis-of-efef-core-read-operation-with-or-without-asnotracking-using-benchmark.net"&gt;Performance analysis of EF/EF Core read operation with or without AsNoTracking() using Benchmark.net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;malikmutasim2121/performance-analysis-of-ef-ef-core-read-operation-with-or-without-asnotracking-using-benchmark-net-dd88ced3f6f1"&gt;https://medium.com/&amp;#64;malikmutasim2121/performance-analysis-of-ef-ef-core-read-operation-with-or-without-asnotracking-using-benchmark-net-dd88ced3f6f1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EF/EF Core で AsNoTracking した際の読み取りパフォーマンスについての記事。&lt;/p&gt;
&lt;p&gt;ベンチマーク結果としては AsNoTracking しているケースでパフォーマンスがよく、読み取り専用であれば価値はあるとしている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="c-to-dart-converter"&gt;C# to Dart Converter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.csharp2dart.com/"&gt;https://www.csharp2dart.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のクラス定義から Dart の JSON シリアライズ/デシリアライズのコードに変換するツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/pietervdw/introduction-csharp2dartcom-45k1"&gt;Introduction CSharp2Dart.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpwebserializer-convert-object-into-querystringformurlencodedcontent-for-c-httpclient-rest-request"&gt;Cysharp/WebSerializer: Convert Object into QueryString/FormUrlEncodedContent for C# HttpClient REST Request.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/WebSerializer/"&gt;https://github.com/Cysharp/WebSerializer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP のリクエストに使用するクエリーストリング(&lt;code&gt;?q=foo&amp;amp;bar=baz&lt;/code&gt;)をクラスなどから効率よく組み立てる仕組みを提供するライブラリー。文字列だけでなく HttpClient で使用できる HttpContent を生成する機能も提供している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/01/09_WebSerializer.html"&gt;neue cc - WebSerializer - オブジェクトからクエリストリングに変換するHttpClientリクエスト用シリアライザ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1480186594413920266?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;How to read and decode IL Code from a method in C#:&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/uEd9fniBJB"&gt;pic.twitter.com/uEd9fniBJB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1480186594413920266?ref_src=twsrc%5Etfw"&gt;January 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;リフレクションでメソッドの IL を取り出して読みだす方法について。&lt;/p&gt;
&lt;!-- https://twitter.com/steplyakov/status/1480983879938838530?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The Thread Pool is fully re-written in managed code in .net 6 with a really nice new feature: it can now detect a famous &amp;quot;sync over async&amp;quot; anti-pattern when a thread pool is blocked on Task.Wait or Task.GetAwaiter().GetResult() to add more threads quicker to unblock the app. &lt;a href="https://t.co/o8rJxKlaoJ"&gt;pic.twitter.com/o8rJxKlaoJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergey Teplyakov (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1480983879938838530?ref_src=twsrc%5Etfw"&gt;January 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 で Thread Pool がマネージドコードで書き直され、&amp;quot;sync over async&amp;quot; と呼ばれる非同期を同期待機するアンチパターンによるブロッキングを検出して新しいスレッドを立ち上げるようになった。(&amp;quot;sync over async&amp;quot; は待機スレッドがブロック状態となり、二つのスレッドがないと完了できなくなるためスレッドプール枯渇の原因となる)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/run-time-config/threading#thread-injection-in-response-to-blocking-work-items"&gt;作業項目のブロックに応じたスレッドの挿入 | スレッドの構成設定 - .NET | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/jamesnk/status/1481695358699061248?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;gRPC on .NET reached #1 in the latest benchmark results! 🚀 (by 13 whole req/s 😅)&lt;br&gt;&lt;br&gt;Enabling .NET 6&amp;#39;s profile-guided optimization pushed .NET over the top.&lt;a href="https://t.co/60yFyVmzpw"&gt;https://t.co/60yFyVmzpw&lt;/a&gt; &lt;a href="https://t.co/v9gluHUgdG"&gt;pic.twitter.com/v9gluHUgdG&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1481695358699061248?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の gRPC 実装が最新のベンチマークで1位を取ったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/ericlaw/status/1481652137411039236?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Building popular software is fun. &lt;a href="https://t.co/Okw2LhSQYa"&gt;pic.twitter.com/Okw2LhSQYa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eric Lawrence 🎻 (&amp;#64;ericlaw) &lt;a href="https://twitter.com/ericlaw/status/1481652137411039236?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft Edge のウィンドウタイトルの &amp;quot;Microsoft Edge&amp;quot; 部分にはゼロ幅スペースが含まれているという話。そのような奇妙なことをしている理由はタッチパッドのドライバーが Microsoft Edge をウィンドウタイトルで検出して EdgeHTML 版だと思って処理するものがあったため(つまり互換性のために引っかからないようにした)とのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/magicknet/status/1481731814884626442?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After adding &lt;a href="https://twitter.com/hashtag/ARM64?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ARM64&lt;/a&gt; support to &lt;a href="https://twitter.com/ImageMagick?ref_src=twsrc%5Etfw"&gt;&amp;#64;ImageMagick&lt;/a&gt; on &lt;a href="https://twitter.com/Windows?ref_src=twsrc%5Etfw"&gt;&amp;#64;Windows&lt;/a&gt; I promised that this would also be added to MagickNET and that was just completed! 🤩🤩🤩📣📣🤩🤩🤩. A new release with support for &lt;a href="https://twitter.com/hashtag/ARM64?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ARM64&lt;/a&gt; on &lt;a href="https://twitter.com/Windows?ref_src=twsrc%5Etfw"&gt;&amp;#64;Windows&lt;/a&gt; will be published soon. &lt;a href="https://t.co/SK5YNWtJQT"&gt;pic.twitter.com/SK5YNWtJQT&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🧙‍♂️Dirk Lemstra (&amp;#64;MagickNET) &lt;a href="https://twitter.com/MagickNET/status/1481731814884626442?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ImageMagick に ARM64 版 Windows の対応が入ったのち、Magick.NET も対応を行うとしていたがその準備ができたので近く Magick.NET の ARM64 向け対応をリリースするという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1481762647305428995?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Long time coming but in C# 11 method group to delegate conversions will be cached just as lambdas are today &lt;a href="https://t.co/0OnpClKfU4"&gt;https://t.co/0OnpClKfU4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1481762647305428995?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;メソッドグループのデリゲート変換のキャッシュを行うという PR がマージされ、C# 11 のコンパイラーに入るという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="proposal-string.splitasspan-issue-63497-dotnetruntime"&gt;[Proposal]: [String.SplitAsSpan] · Issue #63497 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63497"&gt;https://github.com/dotnet/runtime/issues/63497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列の &lt;code&gt;Split&lt;/code&gt; に &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;&lt;/code&gt; で返すものが欲しいという提案 Issue。&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit に Tokenize 拡張メソッドがあるのでそれが使える、行単位であれば .NET 6 には &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;.EnumerateLines()&lt;/code&gt; というメソッドがあるといったコメントがついている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/934"&gt;Add 'split' support for ReadOnlySpanchar similar to string · Issue #934 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CommunityToolkit/dotnet/blob/d3d9752364d6a153f52c826875b6de10fb214f4c/CommunityToolkit.HighPerformance/Extensions/StringExtensions.cs#L113"&gt;dotnet/StringExtensions.cs at main · CommunityToolkit/dotnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="enable-gc-regions-by-default-by-mangod9-pull-request-59283-dotnetruntime"&gt;Enable GC regions by default by mangod9 · Pull Request #59283 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/59283"&gt;https://github.com/dotnet/runtime/pull/59283&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GC のメモリー管理をセグメントからリージョンに変更したものをデフォルトにするという PR。一度マージされたがその後 NativeAOT で問題があり Revert された模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/43844"&gt;Epic: GC Regions Support · Issue #43844 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63778"&gt;Segfault in gc_heap::get_region_plan_gen_num for a frozen object · Issue #63778 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added-support-for-binding-the-raw-request-body-by-davidfowl-pull-request-39388-dotnetaspnetcore"&gt;Added support for binding the raw request body by davidfowl · Pull Request #39388 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39388"&gt;https://github.com/dotnet/aspnetcore/pull/39388&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API のバインディングに PipeReader, Stream, ReadOnlySequence といったボディーを直接読み取れるようにするものを追加するという PR。&lt;/p&gt;
&lt;h3 id="razor-support-results.page-etc.for-minimal-endpoints-issue-39431-dotnetaspnetcore"&gt;Razor Support (&lt;code&gt;Results.Page()&lt;/code&gt;, etc.) for Minimal Endpoints · Issue #39431 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39431"&gt;https://github.com/dotnet/aspnetcore/issues/39431&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API の戻り値として Razor ページを返せるようにしたいという Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-07: Visual Studio 17.1 Preview 2, MAUI Preview 11, Pinta 2.0, Amazon.Lambda.Annotations</title>
			<link>/2022/01/07/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/07/updates</guid>
			<pubDate>Fri, 07 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-17.1-preview-2-is-now-available"&gt;Visual Studio 17.1 Preview 2 is now available!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-17-1-preview-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-17-1-preview-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 17.1 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Preview 2 で導入された以下の新機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 関連の機能の向上
&lt;ul&gt;
&lt;li&gt;ブランチ間の比較&lt;/li&gt;
&lt;li&gt;デタッチした HEAD チェックアウト&lt;/li&gt;
&lt;li&gt;マルチリポジトリーサポートの向上&lt;/li&gt;
&lt;li&gt;行単位のステージング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コードの保存時自動クリーンナップ&lt;/li&gt;
&lt;li&gt;ファイルの自動保存
&lt;ul&gt;
&lt;li&gt;Visual Studio がフォーカスを失ったときに自動で保存する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET 関連の生産性向上
&lt;ul&gt;
&lt;li&gt;「定義に移動」で埋め込みソースまたはソースリンクのソースコード参照&lt;/li&gt;
&lt;li&gt;スタックトレースエクスプローラー&lt;/li&gt;
&lt;li&gt;EditorConfig の設定 UI に名前付けに関連する項目を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++ 関連の生産性向上
&lt;ul&gt;
&lt;li&gt;マイクロコントローラーと RTOS のペリフェラルレジスターの確認と操作を可能にするビューの追加&lt;/li&gt;
&lt;li&gt;macOS 上での開発サポートの向上
&lt;ul&gt;
&lt;li&gt;Linux と同様のリモートデバッグ関連の機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;タブの色設定
&lt;ul&gt;
&lt;li&gt;プロジェクトや拡張子によっての設定&lt;/li&gt;
&lt;li&gt;コンテキストメニューからの変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git 関連の機能の向上については別記事にて詳しく説明されているのでそちらも参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-new-git-features-to-visual-studio-2022/"&gt;Introducing new Git features to Visual Studio 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#17.1.0-pre.2.0"&gt;Summary of What's New in this Release of Visual Studio 2022 version 17.1 Preview 2 | Visual Studio 2022 Preview Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-preview-11"&gt;Announcing .NET MAUI Preview 11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-preview-11/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-preview-11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Preview 11 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 11 では Windows のコントロールに対する Fluent Design System のスタイルの適用、複数ウィンドウのサポート、ImplicitUsings を使用した新しい C# テンプレート、iOS, tvOS, macOS におけるネイティブ型の扱いの修正といったものが含まれている。&lt;/p&gt;
&lt;p&gt;iOS, tvOS, macOS におけるネイティブ型に関しては Xamarin が独自で提供していた &lt;code&gt;System.nint&lt;/code&gt;, &lt;code&gt;System.nuint&lt;/code&gt; を .NET 6 で削除したという Breaking Changes がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xamarin/xamarin-macios/issues/13087"&gt;[Announcement] Breaking changes in .NET 6 for iOS, tvOS and macOS · Issue #13087 · xamarin/xamarin-macios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-notes-2.0-pinta"&gt;Release Notes 2.0 - Pinta&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.pinta-project.com/releases/2-0"&gt;https://www.pinta-project.com/releases/2-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pinta 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Pinta はオープンソース、Linux, macOS, Windows, *BSD といったプラットフォームで動作するクロスプラットフォームのペイントソフト。&lt;/p&gt;
&lt;p&gt;Pinta 2.0 では GTK3 と .NET 6 への移行が行われた。これにより外観に関する変更や高 DPI のサポートの向上、Windows と macOS でのランタイムが不要となるといった恩恵を受けられるようになった。&lt;/p&gt;
&lt;h3 id="amazon.lambda.annotations"&gt;Amazon.Lambda.Annotations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/Amazon.Lambda.Annotations"&gt;https://www.nuget.org/packages/Amazon.Lambda.Annotations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon.Lambda.Annotations のプレビューパッケージが公開された。&lt;/p&gt;
&lt;p&gt;従来 Lambda 関数を実装するには Lambda 固有の API を使用したプログラミングモデルを必要としていたが、このパッケージを使用することでプレーンなメソッドやクラスに属性を指定して Lambda の関数を定義、実装できるようになる。これは Source Generator で必要とされるコードを生成することによって実現しているとのこと。&lt;/p&gt;
&lt;p&gt;README では次のようなコードが例示されている。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Functions
{
    [LambdaFunction]
    [RestApi(&amp;quot;/plus/{x}/{y}&amp;quot;)]
    public int Plus(int x, int y)
    {
        return x + y;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- https://twitter.com/dotnetonaws/status/1473699865817493504?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Lambda Annotations is a new, simplified programming model for writing REST and HTTP API &lt;a href="https://twitter.com/hashtag/Lambda?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Lambda&lt;/a&gt; functions in .NET 6. Check out the Lambda Annotations preview release.&lt;a href="https://t.co/ZQcbYtPLcA"&gt;https://t.co/ZQcbYtPLcA&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1473699865817493504?ref_src=twsrc%5Etfw"&gt;December 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-and-rider-2021.2.3-have-landed-the.net-tools-blog"&gt;ReSharper and Rider 2021.2.3 have landed | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/28/resharper-rider-2021-2-3/"&gt;https://blog.jetbrains.com/dotnet/2021/12/28/resharper-rider-2021-2-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかのバグ修正が行われている。また 2021.2.3 以降から JetBrains アカウントでのサインインが必要となるようになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/ja/blog/2021/09/30/moving-to-jetbrains-account-for-trials-of-ides-and-net-tools/"&gt;https://blog.jetbrains.com/ja/blog/2021/09/30/moving-to-jetbrains-account-for-trials-of-ides-and-net-tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2021.3.2-and-rider-2021.3.2-bug-fixes-are-here-the.net-tools-blog"&gt;ReSharper 2021.3.2 and Rider 2021.3.2 Bug Fixes Are Here | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/24/resharper-2021-3-2-and-rider-2021-3-2-bug-fixes/"&gt;https://blog.jetbrains.com/dotnet/2021/12/24/resharper-2021-3-2-and-rider-2021-3-2-bug-fixes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.3.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではコード解析等に関するいくつかのバグ修正が行われている。&lt;/p&gt;
&lt;h3 id="release-10.0.0-jbogardmediatr"&gt;Release 10.0.0 · jbogard/MediatR&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jbogard/MediatR/releases/tag/v10.0.0"&gt;https://github.com/jbogard/MediatR/releases/tag/v10.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MediatR 10.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET Standard 2.1 以降向けに &lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; のサポートが追加され、ストリーミングを扱う API のサポートが向上した。&lt;/p&gt;
&lt;h3 id="a-comprehensive-guide-to-port-from-ef6-to-ef-core"&gt;A Comprehensive Guide to Port from EF6 to EF Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/a-comprehensive-guide-to-port-from-ef6-to-ef-core/"&gt;https://devblogs.microsoft.com/dotnet/a-comprehensive-guide-to-port-from-ef6-to-ef-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework 6 (EF Core 6 ではない) から Entity Framework Core への移行を推奨する記事。この記事では移行のメリットと移行ガイドが新しくなったことについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/efcore-and-ef6/porting/"&gt;EF6 から EF Core へ移植 - EF | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="opentelemetry.net-1-opentelemetry"&gt;OpenTelemetry .NETを理解する (1) OpenTelemetryとは - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-01"&gt;https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メトリクスを取り扱う OpenTelemetry についてと .NET の対応の現状についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c"&gt;【C# 11 候補】 半自動プロパティ | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/semi-auto-property/"&gt;https://ufcpp.net/blog/2021/12/semi-auto-property/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されている自動プロパティーのバッキングフィールドを読み書きするための &lt;code&gt;field&lt;/code&gt; キーワードについての記事。利用シチュエーションやキーワードの取り扱われ方などにも触れている。&lt;/p&gt;
&lt;h3 id="c-11-utf-8-c-c"&gt;【C# 11 候補】 UTF-8 リテラル | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/utf8-literal"&gt;https://ufcpp.net/blog/2021/12/utf8-literal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 以降での .NET における UTF-8 文字列のリテラルの取り扱いのステータスについての記事。Utf8String の空気感とバイト配列などに変換できる UTF-8 文字列リテラルについてなど。&lt;/p&gt;
&lt;h3 id="c-11-vs-17.1-p2-c-c"&gt;【C# 11 候補】リスト パターン【VS 17.1 p2 で追加予定】 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/list-pattern/"&gt;https://ufcpp.net/blog/2021/12/list-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されている配列や &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; のようなものにマッチするリストパターン &lt;code&gt;[]&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="immutablearray-c-c"&gt;ImmutableArray に対してコレクション初期化子 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/immutable-array-init/"&gt;https://ufcpp.net/blog/2021/12/immutable-array-init/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImmutableArray&lt;/code&gt; に対するコレクション初期化子の挙動が一見して想定と異なる理由と課題についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c-1"&gt;【C# 11 候補】コレクション リテラル | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/collection-literal/"&gt;https://ufcpp.net/blog/2021/12/collection-literal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されているコレクション(配列やリストなど)で使えるコレクションリテラル &lt;code&gt;[]&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="c-11-countable-c-c"&gt;【C# 11 で再検討】Countable | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/countable"&gt;https://ufcpp.net/blog/2022/1/countable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Index&lt;/code&gt; サポートに Countable (Count または Length を持った型) を広げるという案についての記事。&lt;/p&gt;
&lt;h3 id="comet-development-on-macos"&gt;Comet Development on macOS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/davidortinau/comet-development-on-macos-1o38"&gt;https://dev.to/davidortinau/comet-development-on-macos-1o38&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;macOS 上で Comet (MAUI の MVU フレームワーク) を使用して、アプリケーションを実装してみるという記事。&lt;/p&gt;
&lt;h3 id="customising-generated-code-with-marker-attributes-creating-a-source-generator-part-4"&gt;Customising generated code with marker attributes: Creating a source generator - Part 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/"&gt;https://andrewlock.net/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator でマーカー属性を利用してコード生成をカスタマイズする方法について解説している記事。&lt;/p&gt;
&lt;p&gt;独自の属性に設定値を指定し、それを Source Generator から読み取ってコード生成をカスタマイズしている。&lt;/p&gt;
&lt;h3 id="secure-a-blazor-wasm-asp.net-core-hosted-app-using-bff-and-openiddict"&gt;Secure a Blazor WASM ASP.NET Core hosted APP using BFF and OpenIddict&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2022/01/03/secure-a-blazor-wasm-asp-net-core-hosted-app-using-bff-and-openiddict/"&gt;https://damienbod.com/2022/01/03/secure-a-blazor-wasm-asp-net-core-hosted-app-using-bff-and-openiddict/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly と ASP.NET Core アプリケーションで OpenIddict を使用した OpenID Connect 認証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="c-gitlab-code-quality"&gt;C# の静的コード解析から GitLab Code Quality まで&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/99ad5ac9637dea"&gt;https://zenn.dev/masakura/articles/99ad5ac9637dea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper Command Line Tools を使用してコードの静的解析を行い、GitLab Code Quality で Merge Request に解析結果を反映するといった手法についての記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-january-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | January 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/04/net-annotated-monthly-january-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/01/04/net-annotated-monthly-january-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の記事や情報のまとめ2022年1月号。&lt;/p&gt;
&lt;h3 id="blazordiscope-qiita"&gt;BlazorにおけるDIのScopeについて - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yoshi1220/items/4ebb2e2fc5528e16108b"&gt;https://qiita.com/yoshi1220/items/4ebb2e2fc5528e16108b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Server と Blazor WebAssembly の両環境における DI のスコープの挙動について解説している記事。&lt;/p&gt;
&lt;h3 id="ckagglerlightgbm-qiita"&gt;C#でKagglerに話題のLightGBMを使ってタイタニック号の生存者予測をしてみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TechNinja/items/2e9d9fca8f9a65258922"&gt;https://qiita.com/TechNinja/items/2e9d9fca8f9a65258922&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET と LightGBM を組み合わせて C# でタイタニック号の生存者予測を実行するという記事。&lt;/p&gt;
&lt;h3 id="incrementalsourcegenerator-qiita"&gt;IncrementalSourceGeneratorの開発＆デバッグ方法 序 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/WiZLite/items/48f37278cf13be899e40"&gt;https://qiita.com/WiZLite/items/48f37278cf13be899e40&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incremental Source Generator の開発とデバッグ手法についての記事。&lt;/p&gt;
&lt;h3 id="net6c-qiita"&gt;.NET6でブラウザ完結のC#開発環境を作る話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/4b9223a9b79179d2bc0d"&gt;https://qiita.com/Kujiro/items/4b9223a9b79179d2bc0d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly と Roslyn を使用してブラウザー上でコードをコンパイルして実行できる環境を実装したことについての記事。&lt;/p&gt;
&lt;p&gt;記事では高速化やブロッキング処理など、実装上での工夫などを取り上げている。&lt;/p&gt;
&lt;h3 id="metricseventsource-qiita"&gt;MetricsEventSourceを利用する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/36e1c693bc6719ec122a"&gt;https://qiita.com/skitoy4321/items/36e1c693bc6719ec122a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.Metrics.MetricsEventSource&lt;/code&gt; の利用方法を解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MetricsEventSource&lt;/code&gt; はメトリクスを &lt;code&gt;EventSource&lt;/code&gt; として扱うもののため、&lt;code&gt;dotnet-trace&lt;/code&gt; のような外部から取得することができる。&lt;/p&gt;
&lt;h3 id="net"&gt;.NET のオプション機能を完全に理解した。 - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2021/12/24/161443"&gt;https://tech.blog.aerie.jp/entry/2021/12/24/161443&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; の &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; といった ASP.NET Core のオプションパターンについての記事。&lt;/p&gt;
&lt;p&gt;コンフィギュレーションの更新を動的に行う必要があるケースでの &lt;code&gt;IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code&gt; の更新処理や &lt;code&gt;IConfigureOptions&amp;lt;T&amp;gt;&lt;/code&gt; について解説している。&lt;/p&gt;
&lt;h3 id="neue-cc-consoleappframework-v4-minimal-api-for-commandline-tool"&gt;neue cc - ConsoleAppFramework v4 - Minimal API for CommandLine tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2021/12/30.html"&gt;https://neue.cc/2021/12/30.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンソールアプリケーションを実装するフレームワーク ConsoleAppFramework v4 についての紹介と、そこで導入された Minimal API についての紹介している記事。&lt;/p&gt;
&lt;h3 id="visual-studio-yucchiys-note"&gt;Visual Studioで外部ソースを含めたデバッグを実行する | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/01/debugging-external-sources-with-vs/"&gt;https://blog.yucchiy.com/2022/01/debugging-external-sources-with-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 でデバッグ実行時に依存ライブラリなども含めて外部のソースコードをステップ実行する方法についての記事。&lt;/p&gt;
&lt;h3 id="system.text.json-features-in.net-6"&gt;System.Text.Json features in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/system-text-json-features-in-the-dotnet-6"&gt;https://blog.okyrylchuk.dev/system-text-json-features-in-the-dotnet-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の System.Text.Json に追加された機能の紹介記事。&lt;/p&gt;
&lt;p&gt;循環参照の無視、シリアライズ/デシリアライズの通知、プロパティーのシリアライズ順序、生 JSON 書き込み、&lt;code&gt;IAsyncEnumerable&lt;/code&gt; サポート、シリアライズ/デシリアライズの Stream サポート、オブジェクトモデルでの操作、といったものを紹介している。&lt;/p&gt;
&lt;h3 id="fast-file-io-with.net-6-adam-sitnik"&gt;Fast File IO with .NET 6 - Adam Sitnik&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://adamsitnik.com/files/Fast_File_IO_with_DOTNET_6.pdf"&gt;https://adamsitnik.com/files/Fast_File_IO_with_DOTNET_6.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのファイル IO についての変更点やパフォーマンス向上の Tips を紹介したスライド。&lt;/p&gt;
&lt;!-- https://twitter.com/sitnikadam/status/1478088413693857799?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Last but not least, &amp;quot;Fast File IO with .NET 6&amp;quot;: &lt;a href="https://t.co/RODoZdg5Rr"&gt;https://t.co/RODoZdg5Rr&lt;/a&gt; (the recording is not public yet) &lt;a href="https://t.co/gXBzFx7RFp"&gt;pic.twitter.com/gXBzFx7RFp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Sitnik (&amp;#64;SitnikAdam) &lt;a href="https://twitter.com/SitnikAdam/status/1478088413693857799?ref_src=twsrc%5Etfw"&gt;January 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="grpc-microsoft-docs"&gt;gRPC クライアント側の負荷分散 | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/grpc/loadbalancing?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/ja-jp/aspnet/core/grpc/loadbalancing?view=aspnetcore-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC クライアントのクライアントサイドロードバランシングについてのドキュメント。&lt;/p&gt;
&lt;p&gt;接続先を解決するリゾルバーと接続先を決定するロードバランサーについて解説している。組み込みのリゾルバーとロードバランサー以外にカスタム実装を行う方法についても触れている。&lt;/p&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/steplyakov/status/1478440520485466113?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL about `ExceptionDispatchInfo.SetCurrentStackTrace` that can be very useful for setting a stack trace before passing an exception to `TaskCompletionSource` or `ManualResetValueTaskSourceCore`. &lt;a href="https://t.co/WhA3ZDpNSc"&gt;pic.twitter.com/WhA3ZDpNSc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergey Teplyakov (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1478440520485466113?ref_src=twsrc%5Etfw"&gt;January 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;例外を &lt;code&gt;TaskCompletionSource&lt;/code&gt; などに渡すときに .NET 5 で追加された &lt;code&gt;ExceptionDispatchInfo.SetCurrentStackTrace&lt;/code&gt; でスタックトレースをセットしてから渡すことで発生位置を取れるようにできるというテクニック。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task Main()
{
    // ExceptionDispatchInfo.SetCurrentStackTrace なし
    try
    {
        await NantokaAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.StackTrace);
        // NantokaAsync を待機したところから始まる
        //   at Program.Main() in /path/to/Program.cs:line 0
    }

    // ExceptionDispatchInfo.SetCurrentStackTrace あり
    try
    {
        await NantokaWithStackTraceAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.StackTrace);
        // NantokaWithStackTraceAsync の中から始まる
        //   at Program.NantokaWithStackTraceAsync() in /path/to/Program.cs:line 0
        //   at Program.Main() in /path/to/Program.cs:line 0
    }
}

Task NantokaWithStackTraceAsync()
{
    var tsc = new TaskCompletionSource();
    tsc.SetException(ExceptionDispatchInfo.SetCurrentStackTrace(new Exception(&amp;quot;shinu&amp;quot;)));
    return tsc.Task;
}

Task NantokaAsync()
{
    var tsc = new TaskCompletionSource();
    tsc.SetException(new Exception(&amp;quot;shinu&amp;quot;));
    return tsc.Task;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.runtime.exceptionservices.exceptiondispatchinfo.setcurrentstacktrace?view=net-6.0"&gt;ExceptionDispatchInfo.SetCurrentStackTrace(Exception) メソッド (System.Runtime.ExceptionServices) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/drasticactionsa/status/1477513189872922625?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Very close to getting an MAUI app running inside the MacOS status bar! &lt;a href="https://t.co/LLovOBdjiM"&gt;pic.twitter.com/LLovOBdjiM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Drastic Actions (&amp;#64;drasticactionSA) &lt;a href="https://twitter.com/drasticactionSA/status/1477513189872922625?ref_src=twsrc%5Etfw"&gt;January 2, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;macOS のステータスバーから MAUI アプリケーションを表示できそうという話。&lt;/p&gt;
&lt;!-- https://twitter.com/timmisiak/status/1474506749839220736?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;re in the process of converting WinDbg to .Net 6, and in the meantime we&amp;#39;re also building against .Net 4.6.1 with the same project. It&amp;#39;s going to be so nice to do a pass through the code using new C# and .Net features that will simplify our code. Hopefully done in January...&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1474506749839220736?ref_src=twsrc%5Etfw"&gt;December 24, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg を .NET 6 への移行をしているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1479196214402990083?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that in .NET 6 System.Text.RegularExpressions.Capture has a ValueSpan property? So, now you can parse regular expressions match results without allocations😍 (&lt;a href="https://twitter.com/konradkokosa?ref_src=twsrc%5Etfw"&gt;&amp;#64;konradkokosa&lt;/a&gt; knows ;))&lt;a href="https://twitter.com/hashtag/net?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#net&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/memorymanagement?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#memorymanagement&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/memoryexpert?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#memoryexpert&lt;/a&gt; &lt;a href="https://t.co/4MdXjeEpRQ"&gt;pic.twitter.com/4MdXjeEpRQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1479196214402990083?ref_src=twsrc%5Etfw"&gt;January 6, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 で Regex のキャプチャーに &lt;code&gt;ValueSpan&lt;/code&gt; プロパティという &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;&lt;/code&gt; を返すプロパティが追加され、&lt;code&gt;Value&lt;/code&gt; プロパティと異なりアロケーションなしでキャプチャーした文字列を取得できるという話。(&lt;code&gt;Value&lt;/code&gt; プロパティは &lt;code&gt;Substring&lt;/code&gt; で切り出している)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.text.regularexpressions.capture.valuespan?view=net-6.0#System_Text_RegularExpressions_Capture_ValueSpan"&gt;Capture.ValueSpan プロパティ (System.Text.RegularExpressions) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1474405442612830212?s=20 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET 6 supports bot Windows and IANA time zones on all platforms.&lt;br&gt;&lt;br&gt;TimeZoneInfo.FindSystemTimeZoneById implicitly converts IANA IDs.&lt;br&gt;&lt;br&gt;New APIs in TimeZoneInfo type:&lt;br&gt;• TryConvertIanaIdToWindowsId&lt;br&gt;• TryConvertWindowsIdToIanaId&lt;br&gt;• HasIanaId&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/mk568qbLfK"&gt;pic.twitter.com/mk568qbLfK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1474405442612830212?ref_src=twsrc%5Etfw"&gt;December 24, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;TimeZoneInfo&lt;/code&gt; クラスに Windows のゾーン ID と IANA の ID を相互変換するためのメソッドが追加されたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="faster-parseheaders-by-egorbo-pull-request-39216-dotnetaspnetcore"&gt;Faster ParseHeaders by EgorBo · Pull Request #39216 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39216"&gt;https://github.com/dotnet/aspnetcore/pull/39216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kestrel の HTTP ヘッダーパーサーを最適化して高速化するという PR。現状 SSE2 での実装を試みている様子。&lt;/p&gt;
&lt;h3 id="faster-indexof-for-substrings-by-egorbo-pull-request-63285-dotnetruntime"&gt;Faster IndexOf for substrings by EgorBo · Pull Request #63285 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/63285"&gt;https://github.com/dotnet/runtime/pull/63285&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列の IndexOf を高速化するという PR。アルゴリズムは &lt;a href="http://0x80.pl/articles/simd-strfind.html"&gt;SIMD-friendly algorithms for substring searching&lt;/a&gt; というものとのこと。&lt;/p&gt;
&lt;h3 id="cache-the-delegate-for-static-method-group-conversions.by-pawchen-pull-request-58288-dotnetroslyn"&gt;Cache the delegate for static method group conversions. by pawchen · Pull Request #58288 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58288"&gt;https://github.com/dotnet/roslyn/pull/58288&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メソッドグループのデリゲート変換をキャッシュしたいという試みの PR。&lt;/p&gt;
&lt;h3 id="ancm-arm64-tracking-issue-39281-dotnetaspnetcore"&gt;ANCM + ARM64 Tracking · Issue #39281 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39281"&gt;https://github.com/dotnet/aspnetcore/issues/39281&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows の IIS で ASP.NET Core アプリケーションをホストする際に使用する ASP.NET Core Module を ARM64 版でもビルドできるようにするという話の Issue。&lt;/p&gt;
&lt;h3 id="add-compilergeneratedattribute-to-record-members-by-youssef1313-pull-request-58542-dotnetroslyn"&gt;Add CompilerGeneratedAttribute to record members by Youssef1313 · Pull Request #58542 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58542"&gt;https://github.com/dotnet/roslyn/pull/58542&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;レコード型の一部のメンバー (ToString や Equals, GetHashCode など) はコンパイラーが生成するものであるにもかかわらず &lt;code&gt;CompilerGeneratedAttribute&lt;/code&gt; がついていないのでつけるという PR。&lt;/p&gt;
&lt;h3 id="initial-support-for-semi-auto-properties-by-youssef1313-pull-request-57076-dotnetroslyn"&gt;Initial support for semi auto properties by Youssef1313 · Pull Request #57076 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/57076"&gt;https://github.com/dotnet/roslyn/pull/57076&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;半自動プロパティの初期サポート実装の PR。&lt;/p&gt;
&lt;h3 id="isopen-labelarch-loongarch64-issues-dotnetruntime-github"&gt;is:open label:arch-loongarch64 · Issues · dotnet/runtime · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/labels/arch-loongarch64"&gt;https://github.com/dotnet/runtime/labels/arch-loongarch64&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国発の CPU アーキテクチャー LoongArch に対応させたいという Issue (と PR)。&lt;/p&gt;
&lt;p&gt;この Issue と PR を出している Qiao さんは GitHub のプロフィールによれば所属は Loongson の模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shushanhf"&gt;shushanhf (Qiao)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/pulls?q=is%3Apr+is%3Aopen+label%3Aarch-loongarch64+"&gt;Pull requests · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-24: Npgsql 6.0.2, AWS Toolkit for Visual Studio 2022, MAUI 6.0.101-preview.11</title>
			<link>/2021/12/24/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/24/updates</guid>
			<pubDate>Fri, 24 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-v6.0.2-npgsqlnpgsql"&gt;Release v6.0.2 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.2"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 6.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;6.0.0 でパラメータ名のマッチングを case-sensitive に変更したが、いくつかのシナリオでパラメータプレースホルダーがカラム名として評価されデータの損失が発生する問題があったため差し戻されている。&lt;/p&gt;
&lt;h3 id="aws-toolkit-for-visual-studio-2022-visual-studio-marketplace"&gt;AWS Toolkit for Visual Studio 2022 - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022"&gt;https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Toolkit for Visual Studio 2022 がリリースされた。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonaws/status/1473359044421242886?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Upgrade your .NET on AWS developer experience. The AWS Toolkit for Visual Studio 2022 is out of preview and is now generally available. Download from the Visual Studio Marketplace.&lt;a href="https://t.co/nvBS1wSNSz"&gt;https://t.co/nvBS1wSNSz&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1473359044421242886?ref_src=twsrc%5Etfw"&gt;December 21, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-6.0.101-preview.11-dotnetmaui"&gt;Release 6.0.101-preview.11 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.101-preview.11.3"&gt;https://github.com/dotnet/maui/releases/tag/6.0.101-preview.11.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI 6.0.101-preview.11 がリリースされた。&lt;/p&gt;
&lt;p&gt;主な変更点は Windows での Fluent Design System のスタイリング、Android, iOS, macOS, Windows (experimental) でのマルチウィンドウ対応、テンプレートの更新など。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-serverfa-qiita"&gt;Blazor serverをラズパイに入れてFAしたい - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamaccu/items/9e86db8d8fa44f43dcc1"&gt;https://qiita.com/yamaccu/items/9e86db8d8fa44f43dcc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Pi で動作するアプリケーションの UI として Blazor を使用するという記事。&lt;/p&gt;
&lt;h3 id="integration-testing-and-nuget-packaging-creating-a-source-generator-part-3"&gt;Integration testing and NuGet packaging: Creating a source generator - Part 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-3-integration-testing-and-packaging/"&gt;https://andrewlock.net/creating-a-source-generator-part-3-integration-testing-and-packaging/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator の統合テストと NuGet パッケージ作成についての記事。&lt;/p&gt;
&lt;p&gt;統合テストでは Source Generator で生成したコード自体をテストするといったことを行っている。&lt;/p&gt;
&lt;h3 id="net-6priorityqueue-yucchiys-note"&gt;.NET 6に入ったPriorityQueueの紹介と、ダイクストラ法を書いてみる | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2021/12/priority-queue-dotnet6/"&gt;https://blog.yucchiy.com/2021/12/priority-queue-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で新たに導入された PriorityQueue クラスの紹介の記事。&lt;/p&gt;
&lt;p&gt;記事では PriorityQueue を使用してダイクストラ法を解く例を解説している。&lt;/p&gt;
&lt;h3 id="test-tools-for.net-and-cross-platform-apps"&gt;Test tools for .NET and cross-platform apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/"&gt;https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の .NET のテストツールに関する Tips 的な記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードからテストエクスプローラーで表示する機能&lt;/li&gt;
&lt;li&gt;テストが完了時に音を鳴らす機能&lt;/li&gt;
&lt;li&gt;Console.WriteLine の呼び出しをテストエクスプローラーで確認できる機能&lt;/li&gt;
&lt;li&gt;SSH や WSL などのリモートでテストを実行する機能&lt;/li&gt;
&lt;li&gt;Playwright の Web アプリケーションテストコードを生成する機能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uiexprazordom-qiita"&gt;自作UIフレームワークExprazorの紹介と仮想DOMの実装方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/WiZLite/items/6448185e5156efa348e2"&gt;https://qiita.com/WiZLite/items/6448185e5156efa348e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で動作する仮想 DOM を持つ C# による UI フレームワークを実装したという記事。&lt;/p&gt;
&lt;h3 id="net-6-ltslong-term-support-qiita"&gt;.NET 6 がLTS(Long-term Support)にふさわしい理由 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/proprogrammer0/items/0f828266e710eea86e09"&gt;https://qiita.com/proprogrammer0/items/0f828266e710eea86e09&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以前から要素としては提供されていたが、組み合わせることができなかったものが .NET 6 で解消したものについての記事。&lt;/p&gt;
&lt;p&gt;記事では「アセンブリのトリミングと System.Text.Json」と「Blazor コンポーネントと where 型制約」といったものが紹介され、.NET 6 でも未対応な組み合わせについても触れている。&lt;/p&gt;
&lt;h3 id="c-on.net6"&gt;(C#) メモリ確保ベンチマーク on .NET6 - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2021/12/20/225208"&gt;https://ikorin2.hatenablog.jp/entry/2021/12/20/225208&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加/変更された NativeMemory も含めてのマネージドなメモリー(配列)とアンマネージドなメモリー(ネイティブ)での確保時のベンチマークを取っている記事。&lt;/p&gt;
&lt;h3 id="blazor-webassembly-web-snow-catch-qiita"&gt;Blazor WebAssembly で作った Web アプリ &amp;quot;snow catch&amp;quot; ゲームを、🎮 ゲームパッド (ジョイスティック) で操作できるようにする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/4705be2e5c6c7f1fccc8"&gt;https://qiita.com/jsakamoto/items/4705be2e5c6c7f1fccc8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-compare-two-files-using.net-really-really-fast"&gt;How to compare two files using .NET, really really fast!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/emrahsungu/how-to-compare-two-files-using-net-really-really-fast-2pd9"&gt;https://dev.to/emrahsungu/how-to-compare-two-files-using-net-really-really-fast-2pd9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で二つのファイルを高速に比較する手法についての記事。&lt;/p&gt;
&lt;p&gt;記事では MD5 での比較に対してバイト単位での直接比較を行う中で、チャンク化や SIMD の使用といった手法での高速化を紹介している。&lt;/p&gt;
&lt;h3 id="net6.0linqapi-qiita"&gt;.NET6.0でのLINQの改善や新しいAPIを紹介 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/shun-shun123/items/235cf61ae03d402f46ce"&gt;https://qiita.com/shun-shun123/items/235cf61ae03d402f46ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で改善された LINQ のメソッドについてと、新しい API について紹介している記事。&lt;/p&gt;
&lt;p&gt;Index/Range をとるオーバーロードについてや TryGetNonEnumeratedCount メソッドについて触れている。&lt;/p&gt;
&lt;h3 id="blazor-componentsjavascript-qiita"&gt;Blazor ComponentsをJavaScriptからインスタンス化出来る機能のサンプルコードを追って拡張してみよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/7fcf645cfdc995990cce"&gt;https://qiita.com/yamachu/items/7fcf645cfdc995990cce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のコンポーネントを JavaScript (React) から生成する公式のサンプルコードを開設している記事。&lt;/p&gt;
&lt;p&gt;記事では解説のほか、コード生成部分を型情報を生成するといった修正なども行っている。&lt;/p&gt;
&lt;h3 id="net-6c-incremental-source-generator"&gt;.NET 6からのC# Incremental Source Generatorの開発入門&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/pcysl5edgo/articles/6d9be0dd99c008"&gt;https://zenn.dev/pcysl5edgo/articles/6d9be0dd99c008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 / .NET 6 からの Incremental Source Generator についての記事。&lt;/p&gt;
&lt;p&gt;記事ではファイルをコードに埋め込む Source Generator を題材として実装、パッケージングについてを解説している。Visual Studio 2019 との共存方法についても触れている。&lt;/p&gt;
&lt;h3 id="unity-cpublic-qiita"&gt;【Unity, C#】非publicな型やメンバにアクセスするには、多分これが一番手軽だと思います - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mob-sakai/items/37978a030d6a6e262065"&gt;https://qiita.com/mob-sakai/items/37978a030d6a6e262065&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity で internal な型やメンバーにアクセスする方法についてのまとめ記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;InternalsVisibleToAttribute&lt;/code&gt;, &lt;code&gt;.asmref&lt;/code&gt;, CSharpCompilerSettingsForUnity パッケージを使用する方法を紹介している。&lt;/p&gt;
&lt;h3 id="cswitch-qiita"&gt;C#のアプデでめちゃくちゃ便利になったswitch文（パターンマッチング）の紹介 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/toRisouP/items/18b31b024b117009137a"&gt;https://qiita.com/toRisouP/items/18b31b024b117009137a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 以降で強化された switch 式とステートメントについての記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#のプロパティによるパターンマッチングを使おう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/emoacht/items/dc1c40769dc6cdc1ef44"&gt;https://qiita.com/emoacht/items/dc1c40769dc6cdc1ef44&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 以降で使用できるプロパティー対するパターンマッチングについての記事。&lt;/p&gt;
&lt;h3 id="c-qiita-1"&gt;C# パターンマッチングのデコンパイルコードを確認する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sh1ch/items/cd8a418ec2bf7f3eafb2"&gt;https://qiita.com/sh1ch/items/cd8a418ec2bf7f3eafb2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パターンマッチングを行うコードが実際にどのような形でコンパイルされているのかを SharpLab でデコンパイルすることで調べている記事。&lt;/p&gt;
&lt;h3 id="an-overview-of-distributed-tracing-with-opentelemetry-in.net-6"&gt;An Overview of Distributed Tracing with OpenTelemetry in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aaronstannard.com/opentelemetry-dotnet6/"&gt;https://aaronstannard.com/opentelemetry-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c"&gt;【C#】マルチスレッド関連操作の詳説。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2021/12/23/124215"&gt;https://blog.neno.dev/entry/2021/12/23/124215&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# / .NET でのマルチスレッドに関連するアトミック性のような問題とそれに対するメモリバリアーといった対処に関して詳しく説明している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="filipnavaracodesign"&gt;filipnavara/CodeSign&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/filipnavara/CodeSign"&gt;https://github.com/filipnavara/CodeSign&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションバンドルと Mach-O 実行ファイルに Apple Code Signing の署名をするツール。&lt;/p&gt;
&lt;h3 id="githubsuper-linter-combination-of-multiple-linters-to-install-as-a-github-action"&gt;github/super-linter: Combination of multiple linters to install as a GitHub Action&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/super-linter"&gt;https://github.com/github/super-linter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions から様々な言語の Lint を実行するためのアクション。.NET は dotnet format に対応している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/mattak/articles/5ae354e525b9ed"&gt;dotnet formatでのlint checkをgithub actionsで実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpnativememoryarray-utilized-native-memory-backed-array-for.net-and-unity-over-the-2gb-limitation-and-support-the-modern-apiibufferwriter-readonlysequence-scattergather-io-etc"&gt;Cysharp/NativeMemoryArray: Utilized native-memory backed array for .NET and Unity - over the 2GB limitation and support the modern API(IBufferWriter, ReadOnlySequence, scatter/gather I/O, etc...).&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/NativeMemoryArray"&gt;https://github.com/Cysharp/NativeMemoryArray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ネイティブメモリーを使用することで .NET の配列の最大サイズを超えるような大きなデータを扱えるようにするライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2021/12/22.html"&gt;neue cc - NativeMemoryArray - .NET 6 APIをフル活用した2GB超えの巨大データを扱うライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/xoofx/status/1473579951731482629?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;D&amp;#39;oh! TIL that I can use monospace fonts on &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;&amp;#64;github&lt;/a&gt; issues/PR/comments (Settings, Appearance tab at the bottom), I can&amp;#39;t explain why it&amp;#39;s not the default 🤔 &lt;a href="https://t.co/9A48vq6g8o"&gt;pic.twitter.com/9A48vq6g8o&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1473579951731482629?ref_src=twsrc%5Etfw"&gt;December 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;GitHub.com の Issue や Pull request などで Markdown を記述するテキストエディター部分を等幅フォントに設定する項目があるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/rickbrewpdn/status/1472320987056132098?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;C++/CLI has been officially purged from the Paint​.NET codebase! I couldn&amp;#39;t have done it without &lt;a href="https://twitter.com/tannergooding?ref_src=twsrc%5Etfw"&gt;&amp;#64;tannergooding&lt;/a&gt; &amp;#39;s TerraFX​.Interop​.Windows package, which made it a breeze. Went way faster than I thought it would. &lt;a href="https://t.co/Si8MnJufsB"&gt;pic.twitter.com/Si8MnJufsB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rick Brewster (&amp;#64;rickbrewPDN) &lt;a href="https://twitter.com/rickbrewPDN/status/1472320987056132098?ref_src=twsrc%5Etfw"&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Paint.NET から C++/CLI のコードがなくなったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/vollragm/status/1472243008963854342?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I don&amp;#39;t recommend creating Kernel Mode drivers in C#, as it is highly experimental, but its possible.&lt;a href="https://t.co/1d1iwQ4gjv"&gt;https://t.co/1d1iwQ4gjv&lt;/a&gt;&lt;br&gt;&lt;br&gt;This is another example, a Driver with memory reading and writing capabilities communication over a hooked function.&lt;/p&gt;&amp;mdash; VollRagm (&amp;#64;vollragm) &lt;a href="https://twitter.com/vollragm/status/1472243008963854342?ref_src=twsrc%5Etfw"&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;NativeAOT を使用して C# でカーネルモードドライバーを作ってみたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="improve.net-productivity-inner-loop-performance-issue-58268-dotnetroslyn"&gt;Improve .NET Productivity inner-loop performance · Issue #58268 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/58268"&gt;https://github.com/dotnet/roslyn/issues/58268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn / Visual Studio の .NET 生産性機能周りのパフォーマンス改善の Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-17: Visual Studio 2022 v17.0.3 / 17.0.4 / for Mac Preview 4, Announcing the Plan for EF7</title>
			<link>/2021/12/17/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/17/updates</guid>
			<pubDate>Fri, 17 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-v17.0.3-17.0.4"&gt;Visual Studio 2022 v17.0.3 / 17.0.4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/releases/2022/release-notes#17030--visual-studio-2022-version-1704"&gt;https://docs.microsoft.com/ja-jp/visualstudio/releases/2022/release-notes#17030--visual-studio-2022-version-1704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の 17.0.3 と 17.0.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;17.0.3 では Unicode の双方向テキスト制御文字への対応といくつかの不具合修正が行われた。双方向テキスト制御文字対応はソースコード内に現れた場合にエディター上では文字の方向を変更する効力は持たず、プレースホルダーとして表示されるようになる。&lt;/p&gt;
&lt;p&gt;17.0.4 では Xcode 13.2 への対応が行われている。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-4"&gt;Visual Studio 2022 for Mac Preview 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;大きな変更点としてはエディターの各種ツールペインがドッキング可能となりソリューションエクスプローラー等の位置をドラッグアンドドロップにて移動できるようになったこと、検索結果画面がネイティブ UI になり結果のグルーピングなどができるようになったことがあげられている。その他、引き続きネイティブ UI への移行とバグ修正などが行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#1700-pre4--visual-studio-2022-for-mac-version-170-preview-4-newreleasebutton"&gt;Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-the-plan-for-ef7"&gt;Announcing the Plan for EF7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-plan-for-ef7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-plan-for-ef7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 (EF Core 7 あるいは EF7) に向けたプランのアナウンス記事。&lt;/p&gt;
&lt;p&gt;EF7 は2022年11月を目標に作業が進み .NET 7 と同時期にリリース予定。EF Core 6.1 のリリース予定はなく、EF7 は LTS ではないサポートリリースとなること、現時点では .NET 6 をターゲットにしているが .NET 7 に変わる可能性があるとのこと。&lt;/p&gt;
&lt;p&gt;記事では EF7 のテーマとして次のようなものをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多くの需要のある機能&lt;/li&gt;
&lt;li&gt;.NET プラットフォームとエコシステム&lt;/li&gt;
&lt;li&gt;Entity Framework 6 (レガシー) からの移行&lt;/li&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要のある機能では JSON カラムやバルクアップデート、Value Object やマップされていない型を使用する生 SQL (Dapper のような Ad-hoc クエリー)といったサポートがあがっており、プラットフォームとエコシステムでは分散トランザクション、新しい SQLServer のドライバー、トリミングや System.Linq.Expression の強化などがプランにあがっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/core/what-is-new/ef-core-7.0/plan"&gt;Plan for Entity Framework Core 7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-6-networking-improvements"&gt;.NET 6 Networking Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-6-networking-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-6-networking-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのネットワーク周りでの改善についての記事。記事では下記の項目について細かく解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;HTTP/2 Window Scaling&lt;/li&gt;
&lt;li&gt;HTTP/3 &amp;amp; QUIC&lt;/li&gt;
&lt;li&gt;HTTP リトライロジック&lt;/li&gt;
&lt;li&gt;SOCKS プロキシーサポート&lt;/li&gt;
&lt;li&gt;WinHTTP&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;コネクションプールの改善&lt;/li&gt;
&lt;li&gt;検証なしのヘッダー列挙&lt;/li&gt;
&lt;li&gt;HPack デコードの最適化&lt;/li&gt;
&lt;li&gt;ZLibStream の導入&lt;/li&gt;
&lt;li&gt;Cookie の列挙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソケット
&lt;ul&gt;
&lt;li&gt;Windows でのポート範囲自動再利用のサポート&lt;/li&gt;
&lt;li&gt;IPv6 グローバル無効化オプション&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Net.Sockets&lt;/code&gt; の &lt;code&gt;Span&lt;/code&gt; および Task ベースのオーバーロードのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セキュリティ
&lt;ul&gt;
&lt;li&gt;遅延クライアントネゴシエーション&lt;/li&gt;
&lt;li&gt;Windows でのユーザー偽装の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;診断
&lt;ul&gt;
&lt;li&gt;Activity のヘッダー伝搬のコントロール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URI
&lt;ul&gt;
&lt;li&gt;URI の正規化の無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-december-2021-updates-6.0.1-5.0.13-and-3.1.22"&gt;.NET December 2021 Updates – 6.0.1, 5.0.13 and 3.1.22&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/december-2021-updates/"&gt;https://devblogs.microsoft.com/dotnet/december-2021-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2021年12月の .NET の更新(.NET 6.0.1, 5.0.13, .NET Core 3.1.22)がリリースされた。&lt;/p&gt;
&lt;p&gt;それぞれいくつかのバグ修正やバックポートが含まれるほか、ASP.NET Core のセキュリティー修正が含まれている。&lt;/p&gt;
&lt;p&gt;ASP.NET Core のセキュリティー修正は ASP.NET Core Module (ANCM) と呼ばれる IIS で ASP.NET Core をホストする際に必要となるモジュールに関するものでこのリリースで権限昇格の脆弱性が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/206"&gt;Microsoft Security Advisory CVE-2021-43877 | ASP.NET Core Elevation of privilege Vulnerability · Issue #206 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/205"&gt;December 2021 .NET Updates · Issue #205 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="orleans-announcement-issue-7423-dotnetorleans"&gt;Orleans Announcement · Issue #7423 · dotnet/orleans&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/orleans/issues/7423"&gt;https://github.com/dotnet/orleans/issues/7423&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans を .NET チームに移管するというアナウンス。&lt;/p&gt;
&lt;p&gt;これに伴い Issue の管理やリリースといったプロセスを dotnet/aspnetcore と同様の形にするとのこと。&lt;/p&gt;
&lt;h3 id="release-release-v1.43.0-grpcgrpc"&gt;Release Release v1.43.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.43.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.43.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.43.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;C# に関連する変更として Grpc.Core.Api に null 許容参照型アノテーションが適用された。このパッケージは C-core と .NET 実装 (grpc-dotnet) の両方で使用される API サーフェースを定義したものであり、どちらの実装を使用する場合でも恩恵を受ける。NuGet パッケージでは 2.43.0 となるが&lt;strong&gt;現時点ではまだリリースされていない&lt;/strong&gt;ようなので注意。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-advent-calendar"&gt;.NET Advent Calendar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.christmas/"&gt;https://dotnet.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英語圏の .NET の Advent Calendar まとめサイト。&lt;/p&gt;
&lt;h3 id="c-advent-calendar-2021"&gt;C# Advent Calendar 2021&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csadvent.christmas/"&gt;https://csadvent.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英語圏の C# の Advent Calendar まとめサイト。&lt;/p&gt;
&lt;h3 id="testing-an-incremental-generator-with-snapshot-testing-creating-a-source-generator-part-2"&gt;Testing an incremental generator with snapshot testing: Creating a source generator - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/"&gt;https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を Verify というライブラリーを使用してスナップショットテストを行う方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/VerifyTests/Verify"&gt;VerifyTests/Verify: Verify is a snapshot tool that simplifies the assertion of complex data models and documents.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blazor-webassembly2gb4gb-qiita"&gt;Blazor WebAssemblyで2GBの壁を超え4GBへ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/a357ab72f76afa2802b6"&gt;https://qiita.com/yamachu/items/a357ab72f76afa2802b6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly で 4GB のメモリーを確保するにはという記事。&lt;/p&gt;
&lt;p&gt;記事では Native Dependency を駆使して Emscripten にビルドフラグを渡すことで 2GB の壁を超えるといった手法を紹介している。&lt;/p&gt;
&lt;h3 id="net-6efcore-qiita"&gt;.NET 6のトップレベルステートメントを使ったコンソールプロジェクトで、EFCoreのマイグレーションはなぜ動くのか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/d503fb1c9579eb27de18"&gt;https://qiita.com/karuakun/items/d503fb1c9579eb27de18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特定のメソッドがないと動かなかった EF Core のマイグレーションが EF Core 6 からはトップレベルステートメントを含めて動くようになった仕組みについての記事。&lt;/p&gt;
&lt;h3 id="net-history-timeline-its-not-finished-yet-so-if-you-find"&gt;.NET History Timeline. --- It's not finished yet, so if you find...&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/dotnet/comments/rcg391/net_history_timeline_its_not_finished_yet_so_if/"&gt;https://www.reddit.com/r/dotnet/comments/rcg391/net_history_timeline_its_not_finished_yet_so_if/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の年表(タイムライン)&lt;/p&gt;
&lt;h3 id="digging-into-the.net-dictionary-implementation"&gt;Digging into the .NET Dictionary implementation…&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/195651-B/digging-into-the-net-dictionary-implementation"&gt;https://ayende.com/blog/195651-B/digging-into-the-net-dictionary-implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dictionary の内部実装についての記事。&lt;code&gt;_buckets&lt;/code&gt; と &lt;code&gt;_entries&lt;/code&gt; のフィールドがあることなど。&lt;/p&gt;
&lt;h3 id="net6file-iolinuxmac-qiita"&gt;.NET6のFile IO改善はLinux&amp;amp;macでも改善されているか検証してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/KuriharaJun/items/5bab044c4b02dec2da3a"&gt;https://qiita.com/KuriharaJun/items/5bab044c4b02dec2da3a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのファイルの読み書きに関する改善を Linux と macOS および Windows で比較、検証した記事。&lt;/p&gt;
&lt;p&gt;記事ではすべてのケースで .NET 6 で結果が改善されていることが示されている。&lt;/p&gt;
&lt;h3 id="xamarin.froms.net6"&gt;Xamarin.Froms プロジェクトを .NET6 へアップグレードする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/proudust/articles/2021-12-12-xamarin-upgrade-to-dotnet6"&gt;https://zenn.dev/proudust/articles/2021-12-12-xamarin-upgrade-to-dotnet6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;従来の Xamarin の Xamarin.Forms のプロジェクトを .NET 6 の Xamarin.Forms へと移行する手順をまとめた記事。&lt;/p&gt;
&lt;h3 id="burstsimd-qiita"&gt;Burstでポータブルかつ確実にSIMD化を行うにはどうすればいいのか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Trapezoid/items/461c058a0feadb7ccefe"&gt;https://qiita.com/Trapezoid/items/461c058a0feadb7ccefe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の Burst Compiler で SIMD 化をコンパイラー任せではなく、コード上でコントロールすることで確実に SIMD 化する方法についての記事。&lt;/p&gt;
&lt;h3 id="c"&gt;【C#】デリゲートのコンパイル結果&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/5acc9f03f10296"&gt;https://zenn.dev/naminodarie/articles/5acc9f03f10296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デリゲートの記述方法別での実際にコンパイルされたときの形を調べている記事。&lt;/p&gt;
&lt;h3 id="tagwithtagwithcallsitesql-qiita"&gt;TagWithとTagWithCallSiteでSQLを発行したメソッドを特定する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/6d7280d7928af06cb1bc"&gt;https://qiita.com/karuakun/items/6d7280d7928af06cb1bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework Core のクエリーに調査目的などでタグをつけるための &lt;code&gt;TagWith&lt;/code&gt; と EF Core 6 で追加された呼び出し元名をタグとしてつける &lt;code&gt;TagWithCallSite&lt;/code&gt; についての解説記事。&lt;/p&gt;
&lt;h3 id="new-apis-in.net-6"&gt;20 New APIs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/20-new-apis-in-net-6"&gt;https://blog.okyrylchuk.dev/20-new-apis-in-net-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された API を20個、簡単に紹介している記事。&lt;/p&gt;
&lt;h3 id="windows-terminal-as-your-default-command-line-experience"&gt;Windows Terminal as your Default Command Line Experience&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/commandline/windows-terminal-as-your-default-command-line-experience/"&gt;https://devblogs.microsoft.com/commandline/windows-terminal-as-your-default-command-line-experience/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Terminal をデフォルトのコマンドライン環境とすることについての記事。&lt;/p&gt;
&lt;p&gt;将来の Windows 11 のバージョンでは Windows Terminal がデフォルトになる予定であるとのこと。&lt;/p&gt;
&lt;h3 id="machine-learning-in-xamarin.forms-with-onnx-runtime"&gt;Machine Learning in Xamarin.Forms with ONNX Runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/machine-learning-in-xamarin-forms-with-onnx-runtime/"&gt;https://devblogs.microsoft.com/xamarin/machine-learning-in-xamarin-forms-with-onnx-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms と ONNX Runtime でモバイルで機械学習を使用するという記事。&lt;/p&gt;
&lt;p&gt;記事では既にある画像に対して画像の分類をかけるといった処理を行うサンプルで解説している。&lt;/p&gt;
&lt;h3 id="whats-new-in.net-productivity-with-visual-studio-2022"&gt;What’s new in .NET Productivity with Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-in-net-productivity-with-visual-studio-2022/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-in-net-productivity-with-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の .NET の生産性に関する新機能について紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Link ナビゲーション&lt;/li&gt;
&lt;li&gt;Stack Trace Explorer&lt;/li&gt;
&lt;li&gt;EditorConfig UI での命名規則設定&lt;/li&gt;
&lt;li&gt;ソリューションエクスプローラーから名前空間の同期&lt;/li&gt;
&lt;li&gt;await の IntelliSense 補完&lt;/li&gt;
&lt;li&gt;新しいコードフィックスとリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお Stack Trace Explorer は現時点ではリリースされておらず、17.1 Preview 2 以降で提供されるとのこと。&lt;/p&gt;
&lt;h3 id="csealed"&gt;C#のsealedメソッドをオーバーライドする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/articles/overriding-sealed-methods-c-sharp/"&gt;https://www.infoq.com/jp/articles/overriding-sealed-methods-c-sharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メタデータを書き換えることでメソッドを置き換える黒魔術を解説している記事(日本語訳)。&lt;/p&gt;
&lt;h3 id="planned-work-for-system.text.regularexpressions-for-7.0.0-issue-62758-dotnetruntime"&gt;Planned work for System.Text.RegularExpressions for 7.0.0 · Issue #62758 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/62758"&gt;https://github.com/dotnet/runtime/issues/62758&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で予定されている正規表現関連の改修タスクの Issue。&lt;/p&gt;
&lt;h3 id="net-6-c-10-repl-qiita"&gt;.NET 6 の C# 10 を今すぐ REPL で試す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advanceboy/items/03f347cd773934fda8d5"&gt;https://qiita.com/advanceboy/items/03f347cd773934fda8d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Binder (Jupyter Notebook のホスト) と dotnet/interactive リポジトリを使用して、ブラウザー上でインスタントに .NET Interactive を起動して .NET を試す方法についての記事。&lt;/p&gt;
&lt;h3 id="qiita"&gt;コンテナ環境でのデータベースマイグレーション - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/6dc22d2cdbbb43c024e7"&gt;https://qiita.com/karuakun/items/6dc22d2cdbbb43c024e7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンテナー環境での Entity Framework Core のマイグレーションの実行についての記事。&lt;/p&gt;
&lt;p&gt;記事ではスクリプトを出力する方法、&lt;code&gt;dotnet ef database update&lt;/code&gt; を使用できるコンテナーイメージを作る方法、EF Core 6 から提供されているマイグレーションバンドルを使用する方法が紹介されている。&lt;/p&gt;
&lt;h3 id="interpreting-async-code-in-cpu-traces"&gt;Interpreting async code in CPU traces&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/interpreting-async-code-in-cpu-traces"&gt;https://www.poppastring.com/blog/interpreting-async-code-in-cpu-traces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロファイラーで非同期コードのパフォーマンスを確認する際に役立つ機能についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/profiling/analyze-async?view=vs-2022"&gt;.NET 非同期コードのパフォーマンスを分析する - Visual Studio (Windows) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="maui-qiita"&gt;MAUIのコントロールをカスタマイズする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/f-miyu/items/ca02ea3bcf7e88f6eeb7"&gt;https://qiita.com/f-miyu/items/ca02ea3bcf7e88f6eeb7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI でコントロールをカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="netwpfdihttp-qiita"&gt;.NET汎用ホストでWPFを動かしてDIしたりHTTPリクエストを受け付けたりした話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/miswil/items/3b9bd7e40209f1c5dce3"&gt;https://qiita.com/miswil/items/3b9bd7e40209f1c5dce3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF プロジェクトで Microsoft.Extensions.Hosting を使用して DI や Web アプリケーションをホストする方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c"&gt;【C# 11 候補】 {} 中の改行 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/newlines-in-interpolated-string/"&gt;https://ufcpp.net/blog/2021/12/newlines-in-interpolated-string/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列補完式の &lt;code&gt;{}&lt;/code&gt; の中でのコード的な改行の取り扱いが C# 11 で変更される予定があるという記事。&lt;/p&gt;
&lt;h3 id="feature-preview-il2cpp-full-generic-sharing-in-unity-2022.1-beta-unity-blog"&gt;Feature preview: IL2CPP Full Generic Sharing in Unity 2022.1 beta | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/feature-preview-il2cpp-full-generic-sharing-in-unity-20221-beta"&gt;https://blog.unity.com/technology/feature-preview-il2cpp-full-generic-sharing-in-unity-20221-beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2022.1 beta の IL2CPP (AOT) でジェネリクスの型パラメーターに値型を取る物に対するコード生成を一つのコードでカバーできる仕組みを導入したという記事。&lt;/p&gt;
&lt;p&gt;従来ジェネリクスの型パラメーターに値型を取る場合はその型固有のコードを生成する必要があり、何らかの理由で解析から漏れると実行エラーとなっていたがそれをカバーできるフォールバック的なコードを生成するようになった。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;Manager.SendMessage&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;IManager.SendMessage&amp;lt;T&amp;gt;&lt;/code&gt; のようなものがあり、インターフェースを経由して呼び出した場合(&lt;code&gt;IManager.SendMessage&amp;lt;AnyEnum&amp;gt;(...)&lt;/code&gt;)、&lt;code&gt;Manager.SendMessage&amp;lt;AnyEnum&amp;gt;&lt;/code&gt; をコンパイル時には検出できずコード生成が不完全となり実行時にエラーになるという例が挙げられている。このようなケースを Full Generic Sharing のコードでカバーする。&lt;/p&gt;
&lt;p&gt;また、すべてのコードを共通化することでコードサイズを抑えたい場合にも役立つといったことが書かれている。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1471254757792940033?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;ve seen 15% throughput degradation for generic heavy code (Entity Framework) with a similar tech in .NET Native. I call this code &amp;quot;Universal Shitty Code&amp;quot;. One really wants to run such code as little as possible. &lt;a href="https://t.co/2ULALO4uU3"&gt;https://t.co/2ULALO4uU3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1471254757792940033?ref_src=twsrc%5Etfw"&gt;December 15, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET Native (UWP の .NET の AOT コンパイラー) でも同じような実装があり、このパスを通ることでパフォーマンスが低下するといったことがあったという話。&lt;/p&gt;
&lt;p&gt;スレッドでは IL2CPP の記事を書いた Josh Peterson さんもこの共有コードを通る場合はパフォーマンスのオーバーヘッドがあるが、殆どのプロジェクトではこのパスを通らないので影響はほとんどないとのこと。もしパフォーマンスが重要なコードではこのパスを通らないようにしたほうがよいとしている。&lt;/p&gt;
&lt;h3 id="parallel.foreachasync-deep-dive"&gt;Parallel.ForEachAsync Deep Dive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.gregbair.dev/posts/parallel-foreachasync/"&gt;https://www.gregbair.dev/posts/parallel-foreachasync/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で導入された &lt;code&gt;Parallel.ForEachAsync&lt;/code&gt; の内部実装についての記事。&lt;/p&gt;
&lt;h3 id="system.text.json-qiita"&gt;System.Text.Jsonソースジェネレーターパフォーマンス調査 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/727ae10a2bc5a54404d5"&gt;https://qiita.com/skitoy4321/items/727ae10a2bc5a54404d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で導入された System.Text.Json の Source Generator によるコード生成を使用した場合のパフォーマンスについての記事。&lt;/p&gt;
&lt;p&gt;記事ではシリアライズとデシリアライズのパフォーマンスを比較している。&lt;/p&gt;
&lt;h3 id="were-upgrading-visual-studios-feedback"&gt;We’re upgrading Visual Studio’s feedback!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/were-upgrading-visual-studios-feedback/"&gt;https://devblogs.microsoft.com/visualstudio/were-upgrading-visual-studios-feedback/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のフィードバックのシステムをアップグレードしているという記事。&lt;/p&gt;
&lt;p&gt;このアップグレードの影響で Visual Studio からフィードバックするには 16.7 以降または LTSC リリースが必要となるとのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/sergiopedri/status/1469267425522712577?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Happy to announce that with the latest changes merged, both messenger types in the MVVM Toolkit are now completely allocation free on .NET 6! They are also both by far the fastest messenger/event-aggregator types across any other MVVM library that I could find! 🚀&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/KmgvDAc6uL"&gt;pic.twitter.com/KmgvDAc6uL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1469267425522712577?ref_src=twsrc%5Etfw"&gt;December 10, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 の MVVM Toolkit がアロケーションフリーになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jbevain/status/1469389090525114375?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Everybody is talking about log4j’s RCE, meanwhile &lt;a href="https://twitter.com/sailro?ref_src=twsrc%5Etfw"&gt;&amp;#64;sailro&lt;/a&gt; is using a NLog feature that will automatically load and execute binaries to inject his own code in Escape from Tarkov, the README is worth a read: &lt;a href="https://t.co/qSqhBc3Dsd"&gt;https://t.co/qSqhBc3Dsd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1469389090525114375?ref_src=twsrc%5Etfw"&gt;December 10, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;NLog にはアセンブリーと同じディレクトリーの NLog で始まる名前のアセンブリーを自動で読み込むという機能があり、改変なしでコードを注入するのに使用できてしまうという話(アプリケーション自体の改ざんをチェックしていても追加で読まれてしまう)。&lt;/p&gt;
&lt;!-- https://twitter.com/msdevjp/status/1468905769173143552?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;【完全に人間翻訳されたドキュメントのお知らせ｜ASP .NET 】&lt;br&gt;皆さまからのフィードバックをもとに、一部機械翻訳だった「ASP .NET ドキュメント」が、完全に人間による翻訳になりました！&lt;br&gt;自己学習の際にはぜひご活用ください。&lt;br&gt;&lt;br&gt;▼ドキュメントを読む&lt;a href="https://t.co/tNhqwBXBpj"&gt;https://t.co/tNhqwBXBpj&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/MSDocsJP?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MSDocsJP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Microsoft Tech (&amp;#64;msdevjp) &lt;a href="https://twitter.com/msdevjp/status/1468905769173143552?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET のドキュメントが完全に人間による翻訳になったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1470772350450819082?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;With .NET 6 apps, you can now get the # of bytes each thread has allocated so far using the new debugger pseudovariables “$threadSmallObjectHeapBytes and $threadUserOldHeapBytes”&lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/VS2022?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VS2022&lt;/a&gt; &lt;a href="https://t.co/Po0VAIfU5f"&gt;pic.twitter.com/Po0VAIfU5f&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1470772350450819082?ref_src=twsrc%5Etfw"&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 アプリケーションを Visual Studio でデバッグ中に &lt;code&gt;$threadSmallObjectHeapBytes&lt;/code&gt; と &lt;code&gt;$threadUserOldHeapBytes&lt;/code&gt; 擬似変数というスレッドでアロケートしたバイト数を確認できるというテクニック。&lt;/p&gt;
&lt;!-- https://twitter.com/wieslawsoltes/status/1470340515623276546?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Webassembly application written using C#/XAML .NET 6 using &lt;a href="https://twitter.com/hashtag/AvaloniaUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AvaloniaUI&lt;/a&gt; framework running on the web - total download size 8.4 MB ! &lt;a href="https://t.co/78jC6hDz2w"&gt;pic.twitter.com/78jC6hDz2w&lt;/a&gt;&lt;/p&gt;&amp;mdash; Wiesław Šoltés (&amp;#64;wieslawsoltes) &lt;a href="https://twitter.com/wieslawsoltes/status/1470340515623276546?ref_src=twsrc%5Etfw"&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Avalonia UI 向けのノードエディターのデモアプリを WebAssembly で動かせたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1471646768656154624?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;2/2 The most important question is - will it run DOOM as a .NET app? Yes it will. Source in this repo: &lt;a href="https://t.co/lm1R6l5uqW"&gt;https://t.co/lm1R6l5uqW&lt;/a&gt; &lt;a href="https://t.co/GVM7qALgss"&gt;pic.twitter.com/GVM7qALgss&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1471646768656154624?ref_src=twsrc%5Etfw"&gt;December 17, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft Visual C++ のコンパイラー &lt;code&gt;cl&lt;/code&gt; コマンドでは &lt;code&gt;/clr&lt;/code&gt; オプションをつけることで C++ のコードを C++/CLI としてコンパイルできるが、隠しオプションを使うことで C++ の代わりに C 言語のコードを .NET アプリケーションとしてコンパイルできるので DOOM を動かしたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="net-number-values-such-as-positive-and-negative-infinity-cannot-be-written-as-valid-json.issue-48926-dotnetruntime"&gt;.NET number values such as positive and negative infinity cannot be written as valid JSON. · Issue #48926 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/48926"&gt;https://github.com/dotnet/runtime/issues/48926&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json で &lt;code&gt;double.PositiveInfinity&lt;/code&gt;/&lt;code&gt;double.NegativeInfinity&lt;/code&gt; をシリアライズしようとすると例外がでるという Issue。&lt;/p&gt;
&lt;p&gt;JSON の仕様上表現できないためそのような挙動となっている。&lt;code&gt;JsonNumberHandling.AllowNamedFloatingPointLiterals&lt;/code&gt; をオプションに渡すことで回避できるがその場合は単に文字列として出力される。&lt;/p&gt;
&lt;h3 id="add-array.getmaxlengtht-by-huoyaoyuan-pull-request-43301-dotnetruntime"&gt;Add Array.GetMaxLength&amp;lt;T&amp;gt; by huoyaoyuan · Pull Request #43301 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/43301"&gt;https://github.com/dotnet/runtime/pull/43301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Array の最大長を取得するメソッドを追加する PR。&lt;/p&gt;
&lt;p&gt;元々バイト配列は &lt;code&gt;0X7FFFFFC7&lt;/code&gt;、それ以外は &lt;code&gt;0X7FEFFFFF&lt;/code&gt; が最大長だったので一貫した最大値を取る方法がほしいという話だった。ところが将来的にパフォーマンスに有利に働かせられるのではとその制限を残してきていたが、そういったこともなさそうなので &lt;code&gt;0X7FFFFFC7&lt;/code&gt; に統一されることになり、メソッドではなく &lt;code&gt;Array.MaxLength&lt;/code&gt; として定数で公開されることになった。&lt;/p&gt;
&lt;h3 id="reimplement-the-concurrency-limiter-middleware-to-use-the-new-abstractions-implementations-by-tratcher-pull-request-39040-dotnetaspnetcore"&gt;Reimplement the concurrency limiter middleware to use the new abstractions &amp;amp; implementations by Tratcher · Pull Request #39040 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39040"&gt;https://github.com/dotnet/aspnetcore/pull/39040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Concurrency Limiter ミドルウェアを新しい Rate Limiting API に置き換えるという PR。&lt;/p&gt;
&lt;h3 id="add-constantexpectedattribute-by-wzchua-pull-request-62436-dotnetruntime"&gt;Add ConstantExpectedAttribute by wzchua · Pull Request #62436 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/62436"&gt;https://github.com/dotnet/runtime/pull/62436&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メソッドの引数が受け取る値が定数であることを期待することを明示するマーカー属性を追加する PR。&lt;/p&gt;
&lt;p&gt;これは Intrisics なメソッドの場合、定数が渡っていることを期待している場合があるので Analzyer などで早期に間違いを発見したいというところから来ている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/33771"&gt;Pass constants to parameters marked as [ConstantExpected] · Issue #33771 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strange-regex-performance-in.net-5-issue-62902-dotnetruntime"&gt;Strange RegEx performance in .NET 5 · Issue #62902 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/62902"&gt;https://github.com/dotnet/runtime/issues/62902&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正規表現のパフォーマンスが .NET Core 3.1, .NET 5, .NET 6 で比較すると .NET 5 だけ良いので変ではという Issue。&lt;/p&gt;
&lt;p&gt;これは .NET 5 で最適化が入ったが特定のパターンで期待した結果とならないのでロールバックしたという話(つまり .NET 5 の正規表現だけ結果が異なる場合がある)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/56721"&gt;Regex: different result for Regex.Match in .NET 5.0 and .NET Framework 4.7.2 · Issue #56721 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="report-error-if-record-struct-constructor-calls-default-parameterless-constructor-by-cston-pull-request-58339-dotnetroslyn"&gt;Report error if 'record struct' constructor calls default parameterless constructor by cston · Pull Request #58339 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58339"&gt;https://github.com/dotnet/roslyn/pull/58339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;record struct&lt;/code&gt; にコンストラクターを定義した場合 &lt;code&gt;this&lt;/code&gt; でコンストラクターを呼び出すようにエラーが出るが、&lt;code&gt;this()&lt;/code&gt; とすると &lt;code&gt;InvalidProgramException&lt;/code&gt; がスローされてしまう問題を修正する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/58328"&gt;System.InvalidProgramException when constructing a record struct with parameter list and calling the default constructor · Issue #58328 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>