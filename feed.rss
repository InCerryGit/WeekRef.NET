<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Fri, 14 Jan 2022 06:54:46 GMT</pubDate>
		<lastBuildDate>Fri, 14 Jan 2022 06:54:46 GMT</lastBuildDate>
		<item>
			<title>2022-01-14: ECMA C# draft standard, .NET Framework January Updates, State of the Windows Forms Designer</title>
			<link>/2022/01/14/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/14/updates</guid>
			<pubDate>Fri, 14 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="the-ecma-c-draft-standard-and-the-microsoft-c-spec-have-finally-converged"&gt;The ECMA C# draft standard and the Microsoft C# spec have finally converged.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/language-specification/readme"&gt;https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/language-specification/readme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ECMA 標準の C# のドラフトが Microsoft の C# 仕様と収束する形になり、docs.microsoft.com 上で閲覧できるようになった。現在ドラフトとして進行しているバージョンは C# 6 となっている。&lt;/p&gt;
&lt;!-- https://twitter.com/billwagner/status/1481308876272197634?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The ECMA C# draft standard and the Microsoft C# spec have finally converged. The ECMA draft for C# 6 is now live on &lt;a href="https://twitter.com/docsmsft?ref_src=twsrc%5Etfw"&gt;&amp;#64;docsmsft&lt;/a&gt; Check it out here: &lt;a href="https://t.co/VufFlgyRlD"&gt;https://t.co/VufFlgyRlD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bill Wagner (&amp;#64;billwagner) &lt;a href="https://twitter.com/billwagner/status/1481308876272197634?ref_src=twsrc%5Etfw"&gt;January 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="net-framework-january-2022-security-and-quality-rollup-updates.net-blog"&gt;.NET Framework January 2022 Security and Quality Rollup Updates - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-january-2022-security-and-quality-rollup-updates/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-january-2022-security-and-quality-rollup-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年1月のセキュリティー修正と品質ロールアップアップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DoS 脆弱性に対するセキュリティー修正といくつかの品質向上の不具合修正が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-21911"&gt;CVE-2022-21911 - Security Update Guide - Microsoft - .NET Framework Denial of Service Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="state-of-the-windows-forms-designer-for.net-applications.net-blog"&gt;State of the Windows Forms Designer for .NET Applications - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/state-of-the-windows-forms-designer-for-net-applications/"&gt;https://devblogs.microsoft.com/dotnet/state-of-the-windows-forms-designer-for-net-applications/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の .NET (Core 3.1, 5, 6) 向け Windows Forms アプリケーションのためのデザイナーの現状についての記事。&lt;/p&gt;
&lt;p&gt;現状、.NET Framework の Windows Forms 向けのデザイナーと .NET の Windows Forms 向けのデザイナーでは機能に差があり、その差を埋める作業が続いている。&lt;/p&gt;
&lt;p&gt;記事では何故新しいデザイナーが必要となったのか、新しいデザイナーは Out-of-Process モデルで動作する上でどのようにして Visual Studio と協調動作しているのかといったことが説明されている。その上でこれから対応予定の機能についても触れている。&lt;/p&gt;
&lt;h3 id="fair-trade-software-license-duende-software-blog"&gt;Fair Trade Software License | Duende Software Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20220111_fair_trade"&gt;https://blog.duendesoftware.com/posts/20220111_fair_trade&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IdentityServer の Community Edition の機能制限がなくなり Enterprise Edition 相当となった。&lt;/p&gt;
&lt;p&gt;多くのプロジェクトで採用されている認証フレームワークの IdentityServer は2年前にフリーソフトウェアから商用ライセンスモデルへと移行し、その後小規模収益企業や個人向けに以前のフリーソフトウェア版とほぼ同レベルの機能を持つ Community Edition をリリースした。今後 IdentityServer v6 以降の Community Edition が Enterprise Edition 相当の機能を提供するようになる。&lt;/p&gt;
&lt;p&gt;Dunde Software ではこの大きな収益を持つ企業や個人には支払いを求め、小規模な企業や個人は低価格または無料で始められるライセンスモデルをフェアトレードソフトウェアライセンスと呼んでいる。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="visual-studio-naming-style-c-c"&gt;【Visual Studio】 Naming Style 設定 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/naming-style/"&gt;https://ufcpp.net/blog/2022/1/naming-style/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フィールドの命名規則として &lt;code&gt;_&lt;/code&gt; をつけるようなスタイルを EditorConfig に記述する方法についての記事。&lt;/p&gt;
&lt;h3 id="wpf-windows-app-sdk"&gt;WPF から Windows App SDK に移行を試してみた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/migrate-to-windowsappsdk-from-wpf"&gt;https://zenn.dev/okazuki/articles/migrate-to-windowsappsdk-from-wpf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.0 の WPF 製サンプルアプリで Windows App SDK への移行を行ってみたという記事。依存ライブラリーの代替や苦労した点について書かれている。&lt;/p&gt;
&lt;h3 id="feature-management-using-consul-kv-store-in-asp.net-core"&gt;Feature Management using Consul KV store in ASP.Net core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/niteshsinghal85/feature-management-using-consul-kv-store-in-aspnet-core-5a1d"&gt;https://dev.to/niteshsinghal85/feature-management-using-consul-kv-store-in-aspnet-core-5a1d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリから Consul KV に保存された設定を取得してフィーチャー切り替えを行うという記事。&lt;/p&gt;
&lt;h3 id="c-11-defaultable-value-type-c-c"&gt;【C# 11 候補】defaultable value type | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/defaultable/"&gt;https://ufcpp.net/blog/2022/1/defaultable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参照型で null を受け入れる null 許容型があるのと同様に、値型の default を受け入れる default 許容型を用意してフロー解析によってガードするという C# 11 候補の機能についての記事。&lt;/p&gt;
&lt;p&gt;ImmutableArray 構造体のように default のままでは困る型を取り扱いに使われる。&lt;/p&gt;
&lt;h3 id="ccollectionsmarshal"&gt;[C#]CollectionsMarshal の解説&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/a950920fe7d1a5"&gt;https://zenn.dev/naminodarie/articles/a950920fe7d1a5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 で導入された CollectionsMarshal クラスのメソッドについての記事。.NET 6 で追加されたメソッドについても触れている。&lt;/p&gt;
&lt;h3 id="bringing-code-cleanup-on-save-to-visual-studio-2022-17.1-preview-2"&gt;Bringing Code Cleanup on Save To Visual Studio 2022 17.1 Preview 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/bringing-code-cleanup-on-save-to-visual-studio-2022-17-1-preview-2/"&gt;https://devblogs.microsoft.com/visualstudio/bringing-code-cleanup-on-save-to-visual-studio-2022-17-1-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 2 で導入された保存時のコードフォーマットの設定とその動作の様子についての記事。&lt;/p&gt;
&lt;h3 id="membernotnull-c-c"&gt;MemberNotNull (値型) 判定 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/member-not-null/"&gt;https://ufcpp.net/blog/2022/1/member-not-null/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MemberNotNull&lt;/code&gt; 属性が非 null であるはずの値型のフィールドやプロパティーに対してもフロー解析を行っているということについての記事。&lt;/p&gt;
&lt;h3 id="diagnostics-on-kubernetes-obtaining-a-memory-dump"&gt;Diagnostics on Kubernetes: Obtaining a Memory Dump&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/damonjames/diagnostics-on-kubernetes-obtaining-a-memory-dump-kgb"&gt;https://dev.to/damonjames/diagnostics-on-kubernetes-obtaining-a-memory-dump-kgb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes の Pod で動いている .NET アプリケーションのメモリーダンプを取得することについての記事。&lt;/p&gt;
&lt;p&gt;記事では dotnet-gcdump ツールを使用して、Pod の中でダンプを取得した後ローカルにコピーするという方法が紹介されている。&lt;/p&gt;
&lt;h3 id="exploring-hosting-startup-assemblies-in-asp.net-core"&gt;Exploring hosting startup assemblies in ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;saravananganesan/exploring-hosting-startup-assemblies-in-asp-net-core-c272c6827661"&gt;https://medium.com/&amp;#64;saravananganesan/exploring-hosting-startup-assemblies-in-asp-net-core-c272c6827661&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーション起動時に自動でアセンブリを読み込むホスティングスタートアップアセンブリの仕組みを使用して Application Insights のようにロギングの仕組みを自動で読み込ませる方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0"&gt;ASP.NET Core でホスティング スタートアップ アセンブリを使用する | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-data-frameworks-biweekly-updates-2022-issue-27185-dotnetefcore"&gt;.NET Data Frameworks Biweekly Updates (2022) · Issue #27185 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/27185"&gt;https://github.com/dotnet/efcore/issues/27185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework などデータフレームワークの隔週アップデートの情報の2022年1月13日号。&lt;/p&gt;
&lt;p&gt;EF Core 7 のプランがあがっていることや EF Core 6.0.2 のリリースが来月を予定していることなどが書かれている。&lt;/p&gt;
&lt;h3 id="write-a-url-shortener-in-26-lines-of-code-with.net-minimal-apis"&gt;Write a URL Shortener in 26 Lines of Code with .NET Minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/infobipdev/write-a-url-shortener-in-26-lines-of-code-with-net-minimal-apis-52e110a07a25"&gt;https://medium.com/infobipdev/write-a-url-shortener-in-26-lines-of-code-with-net-minimal-apis-52e110a07a25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API で26行で短縮 URL サービスのサーバーを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="performance-analysis-of-efef-core-read-operation-with-or-without-asnotracking-using-benchmark.net"&gt;Performance analysis of EF/EF Core read operation with or without AsNoTracking() using Benchmark.net&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;malikmutasim2121/performance-analysis-of-ef-ef-core-read-operation-with-or-without-asnotracking-using-benchmark-net-dd88ced3f6f1"&gt;https://medium.com/&amp;#64;malikmutasim2121/performance-analysis-of-ef-ef-core-read-operation-with-or-without-asnotracking-using-benchmark-net-dd88ced3f6f1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EF/EF Core で AsNoTracking した際の読み取りパフォーマンスについての記事。&lt;/p&gt;
&lt;p&gt;ベンチマーク結果としては AsNoTracking しているケースでパフォーマンスがよく、読み取り専用であれば価値はあるとしている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="c-to-dart-converter"&gt;C# to Dart Converter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.csharp2dart.com/"&gt;https://www.csharp2dart.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のクラス定義から Dart の JSON シリアライズ/デシリアライズのコードに変換するツール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/pietervdw/introduction-csharp2dartcom-45k1"&gt;Introduction CSharp2Dart.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpwebserializer-convert-object-into-querystringformurlencodedcontent-for-c-httpclient-rest-request"&gt;Cysharp/WebSerializer: Convert Object into QueryString/FormUrlEncodedContent for C# HttpClient REST Request.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/WebSerializer/"&gt;https://github.com/Cysharp/WebSerializer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP のリクエストに使用するクエリーストリング(&lt;code&gt;?q=foo&amp;amp;bar=baz&lt;/code&gt;)をクラスなどから効率よく組み立てる仕組みを提供するライブラリー。文字列だけでなく HttpClient で使用できる HttpContent を生成する機能も提供している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/01/09_WebSerializer.html"&gt;neue cc - WebSerializer - オブジェクトからクエリストリングに変換するHttpClientリクエスト用シリアライザ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1480186594413920266?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;How to read and decode IL Code from a method in C#:&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/uEd9fniBJB"&gt;pic.twitter.com/uEd9fniBJB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1480186594413920266?ref_src=twsrc%5Etfw"&gt;January 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;リフレクションでメソッドの IL を取り出して読みだす方法について。&lt;/p&gt;
&lt;!-- https://twitter.com/steplyakov/status/1480983879938838530?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The Thread Pool is fully re-written in managed code in .net 6 with a really nice new feature: it can now detect a famous &amp;quot;sync over async&amp;quot; anti-pattern when a thread pool is blocked on Task.Wait or Task.GetAwaiter().GetResult() to add more threads quicker to unblock the app. &lt;a href="https://t.co/o8rJxKlaoJ"&gt;pic.twitter.com/o8rJxKlaoJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergey Teplyakov (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1480983879938838530?ref_src=twsrc%5Etfw"&gt;January 11, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 で Thread Pool がマネージドコードで書き直され、&amp;quot;sync over async&amp;quot; と呼ばれる非同期を同期待機するアンチパターンによるブロッキングを検出して新しいスレッドを立ち上げるようになった。(&amp;quot;sync over async&amp;quot; は待機スレッドがブロック状態となり、二つのスレッドがないと完了できなくなるためスレッドプール枯渇の原因となる)&lt;/p&gt;
&lt;!-- https://twitter.com/jamesnk/status/1481695358699061248?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;gRPC on .NET reached #1 in the latest benchmark results! 🚀 (by 13 whole req/s 😅)&lt;br&gt;&lt;br&gt;Enabling .NET 6&amp;#39;s profile-guided optimization pushed .NET over the top.&lt;a href="https://t.co/60yFyVmzpw"&gt;https://t.co/60yFyVmzpw&lt;/a&gt; &lt;a href="https://t.co/v9gluHUgdG"&gt;pic.twitter.com/v9gluHUgdG&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1481695358699061248?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET の gRPC 実装が最新のベンチマークで1位を取ったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/ericlaw/status/1481652137411039236?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Building popular software is fun. &lt;a href="https://t.co/Okw2LhSQYa"&gt;pic.twitter.com/Okw2LhSQYa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eric Lawrence 🎻 (&amp;#64;ericlaw) &lt;a href="https://twitter.com/ericlaw/status/1481652137411039236?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft Edge のウィンドウタイトルの &amp;quot;Microsoft Edge&amp;quot; 部分にはゼロ幅スペースが含まれているという話。そのような奇妙なことをしている理由はタッチパッドのドライバーが Microsoft Edge をウィンドウタイトルで検出して EdgeHTML 版だと思って処理するものがあったため(つまり互換性のために引っかからないようにした)とのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/magicknet/status/1481731814884626442?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After adding &lt;a href="https://twitter.com/hashtag/ARM64?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ARM64&lt;/a&gt; support to &lt;a href="https://twitter.com/ImageMagick?ref_src=twsrc%5Etfw"&gt;&amp;#64;ImageMagick&lt;/a&gt; on &lt;a href="https://twitter.com/Windows?ref_src=twsrc%5Etfw"&gt;&amp;#64;Windows&lt;/a&gt; I promised that this would also be added to MagickNET and that was just completed! 🤩🤩🤩📣📣🤩🤩🤩. A new release with support for &lt;a href="https://twitter.com/hashtag/ARM64?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ARM64&lt;/a&gt; on &lt;a href="https://twitter.com/Windows?ref_src=twsrc%5Etfw"&gt;&amp;#64;Windows&lt;/a&gt; will be published soon. &lt;a href="https://t.co/SK5YNWtJQT"&gt;pic.twitter.com/SK5YNWtJQT&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🧙‍♂️Dirk Lemstra (&amp;#64;MagickNET) &lt;a href="https://twitter.com/MagickNET/status/1481731814884626442?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ImageMagick に ARM64 版 Windows の対応が入ったのち、Magick.NET も対応を行うとしていたがその準備ができたので近く Magick.NET の ARM64 向け対応をリリースするという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jaredpar/status/1481762647305428995?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Long time coming but in C# 11 method group to delegate conversions will be cached just as lambdas are today &lt;a href="https://t.co/0OnpClKfU4"&gt;https://t.co/0OnpClKfU4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jared Parsons (&amp;#64;jaredpar) &lt;a href="https://twitter.com/jaredpar/status/1481762647305428995?ref_src=twsrc%5Etfw"&gt;January 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;メソッドグループのデリゲート変換のキャッシュを行うという PR がマージされ、C# 11 のコンパイラーに入るという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="proposal-string.splitasspan-issue-63497-dotnetruntime"&gt;[Proposal]: [String.SplitAsSpan] · Issue #63497 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63497"&gt;https://github.com/dotnet/runtime/issues/63497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列の &lt;code&gt;Split&lt;/code&gt; に &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;&lt;/code&gt; で返すものが欲しいという提案 Issue。&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit に Tokenize 拡張メソッドがあるのでそれが使える、行単位であれば .NET 6 には &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;.EnumerateLines()&lt;/code&gt; というメソッドがあるといったコメントがついている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/934"&gt;Add 'split' support for ReadOnlySpanchar similar to string · Issue #934 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CommunityToolkit/dotnet/blob/d3d9752364d6a153f52c826875b6de10fb214f4c/CommunityToolkit.HighPerformance/Extensions/StringExtensions.cs#L113"&gt;dotnet/StringExtensions.cs at main · CommunityToolkit/dotnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="enable-gc-regions-by-default-by-mangod9-pull-request-59283-dotnetruntime"&gt;Enable GC regions by default by mangod9 · Pull Request #59283 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/59283"&gt;https://github.com/dotnet/runtime/pull/59283&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GC のメモリー管理をセグメントからリージョンに変更したものをデフォルトにするという PR。一度マージされたがその後 NativeAOT で問題があり Revert された模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/43844"&gt;Epic: GC Regions Support · Issue #43844 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/63778"&gt;Segfault in gc_heap::get_region_plan_gen_num for a frozen object · Issue #63778 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added-support-for-binding-the-raw-request-body-by-davidfowl-pull-request-39388-dotnetaspnetcore"&gt;Added support for binding the raw request body by davidfowl · Pull Request #39388 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39388"&gt;https://github.com/dotnet/aspnetcore/pull/39388&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API のバインディングに PipeReader, Stream, ReadOnlySequence といったボディーを直接読み取れるようにするものを追加するという PR。&lt;/p&gt;
&lt;h3 id="razor-support-results.page-etc.for-minimal-endpoints-issue-39431-dotnetaspnetcore"&gt;Razor Support (&lt;code&gt;Results.Page()&lt;/code&gt;, etc.) for Minimal Endpoints · Issue #39431 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39431"&gt;https://github.com/dotnet/aspnetcore/issues/39431&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Minimal API の戻り値として Razor ページを返せるようにしたいという Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-07: Visual Studio 17.1 Preview 2, MAUI Preview 11, Pinta 2.0, Amazon.Lambda.Annotations</title>
			<link>/2022/01/07/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/07/updates</guid>
			<pubDate>Fri, 07 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-17.1-preview-2-is-now-available"&gt;Visual Studio 17.1 Preview 2 is now available!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-17-1-preview-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-17-1-preview-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 17.1 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では Preview 2 で導入された以下の新機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 関連の機能の向上
&lt;ul&gt;
&lt;li&gt;ブランチ間の比較&lt;/li&gt;
&lt;li&gt;デタッチした HEAD チェックアウト&lt;/li&gt;
&lt;li&gt;マルチリポジトリーサポートの向上&lt;/li&gt;
&lt;li&gt;行単位のステージング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コードの保存時自動クリーンナップ&lt;/li&gt;
&lt;li&gt;ファイルの自動保存
&lt;ul&gt;
&lt;li&gt;Visual Studio がフォーカスを失ったときに自動で保存する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET 関連の生産性向上
&lt;ul&gt;
&lt;li&gt;「定義に移動」で埋め込みソースまたはソースリンクのソースコード参照&lt;/li&gt;
&lt;li&gt;スタックトレースエクスプローラー&lt;/li&gt;
&lt;li&gt;EditorConfig の設定 UI に名前付けに関連する項目を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++ 関連の生産性向上
&lt;ul&gt;
&lt;li&gt;マイクロコントローラーと RTOS のペリフェラルレジスターの確認と操作を可能にするビューの追加&lt;/li&gt;
&lt;li&gt;macOS 上での開発サポートの向上
&lt;ul&gt;
&lt;li&gt;Linux と同様のリモートデバッグ関連の機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;タブの色設定
&lt;ul&gt;
&lt;li&gt;プロジェクトや拡張子によっての設定&lt;/li&gt;
&lt;li&gt;コンテキストメニューからの変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git 関連の機能の向上については別記事にて詳しく説明されているのでそちらも参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-new-git-features-to-visual-studio-2022/"&gt;Introducing new Git features to Visual Studio 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#17.1.0-pre.2.0"&gt;Summary of What's New in this Release of Visual Studio 2022 version 17.1 Preview 2 | Visual Studio 2022 Preview Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-preview-11"&gt;Announcing .NET MAUI Preview 11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-preview-11/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-preview-11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Preview 11 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 11 では Windows のコントロールに対する Fluent Design System のスタイルの適用、複数ウィンドウのサポート、ImplicitUsings を使用した新しい C# テンプレート、iOS, tvOS, macOS におけるネイティブ型の扱いの修正といったものが含まれている。&lt;/p&gt;
&lt;p&gt;iOS, tvOS, macOS におけるネイティブ型に関しては Xamarin が独自で提供していた &lt;code&gt;System.nint&lt;/code&gt;, &lt;code&gt;System.nuint&lt;/code&gt; を .NET 6 で削除したという Breaking Changes がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xamarin/xamarin-macios/issues/13087"&gt;[Announcement] Breaking changes in .NET 6 for iOS, tvOS and macOS · Issue #13087 · xamarin/xamarin-macios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-notes-2.0-pinta"&gt;Release Notes 2.0 - Pinta&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.pinta-project.com/releases/2-0"&gt;https://www.pinta-project.com/releases/2-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pinta 2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Pinta はオープンソース、Linux, macOS, Windows, *BSD といったプラットフォームで動作するクロスプラットフォームのペイントソフト。&lt;/p&gt;
&lt;p&gt;Pinta 2.0 では GTK3 と .NET 6 への移行が行われた。これにより外観に関する変更や高 DPI のサポートの向上、Windows と macOS でのランタイムが不要となるといった恩恵を受けられるようになった。&lt;/p&gt;
&lt;h3 id="amazon.lambda.annotations"&gt;Amazon.Lambda.Annotations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/Amazon.Lambda.Annotations"&gt;https://www.nuget.org/packages/Amazon.Lambda.Annotations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon.Lambda.Annotations のプレビューパッケージが公開された。&lt;/p&gt;
&lt;p&gt;従来 Lambda 関数を実装するには Lambda 固有の API を使用したプログラミングモデルを必要としていたが、このパッケージを使用することでプレーンなメソッドやクラスに属性を指定して Lambda の関数を定義、実装できるようになる。これは Source Generator で必要とされるコードを生成することによって実現しているとのこと。&lt;/p&gt;
&lt;p&gt;README では次のようなコードが例示されている。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Functions
{
    [LambdaFunction]
    [RestApi(&amp;quot;/plus/{x}/{y}&amp;quot;)]
    public int Plus(int x, int y)
    {
        return x + y;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- https://twitter.com/dotnetonaws/status/1473699865817493504?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Lambda Annotations is a new, simplified programming model for writing REST and HTTP API &lt;a href="https://twitter.com/hashtag/Lambda?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Lambda&lt;/a&gt; functions in .NET 6. Check out the Lambda Annotations preview release.&lt;a href="https://t.co/ZQcbYtPLcA"&gt;https://t.co/ZQcbYtPLcA&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1473699865817493504?ref_src=twsrc%5Etfw"&gt;December 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-and-rider-2021.2.3-have-landed-the.net-tools-blog"&gt;ReSharper and Rider 2021.2.3 have landed | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/28/resharper-rider-2021-2-3/"&gt;https://blog.jetbrains.com/dotnet/2021/12/28/resharper-rider-2021-2-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.2.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかのバグ修正が行われている。また 2021.2.3 以降から JetBrains アカウントでのサインインが必要となるようになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/ja/blog/2021/09/30/moving-to-jetbrains-account-for-trials-of-ides-and-net-tools/"&gt;https://blog.jetbrains.com/ja/blog/2021/09/30/moving-to-jetbrains-account-for-trials-of-ides-and-net-tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2021.3.2-and-rider-2021.3.2-bug-fixes-are-here-the.net-tools-blog"&gt;ReSharper 2021.3.2 and Rider 2021.3.2 Bug Fixes Are Here | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/24/resharper-2021-3-2-and-rider-2021-3-2-bug-fixes/"&gt;https://blog.jetbrains.com/dotnet/2021/12/24/resharper-2021-3-2-and-rider-2021-3-2-bug-fixes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.3.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではコード解析等に関するいくつかのバグ修正が行われている。&lt;/p&gt;
&lt;h3 id="release-10.0.0-jbogardmediatr"&gt;Release 10.0.0 · jbogard/MediatR&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jbogard/MediatR/releases/tag/v10.0.0"&gt;https://github.com/jbogard/MediatR/releases/tag/v10.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MediatR 10.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは .NET Standard 2.1 以降向けに &lt;code&gt;IAsyncEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; のサポートが追加され、ストリーミングを扱う API のサポートが向上した。&lt;/p&gt;
&lt;h3 id="a-comprehensive-guide-to-port-from-ef6-to-ef-core"&gt;A Comprehensive Guide to Port from EF6 to EF Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/a-comprehensive-guide-to-port-from-ef6-to-ef-core/"&gt;https://devblogs.microsoft.com/dotnet/a-comprehensive-guide-to-port-from-ef6-to-ef-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework 6 (EF Core 6 ではない) から Entity Framework Core への移行を推奨する記事。この記事では移行のメリットと移行ガイドが新しくなったことについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/efcore-and-ef6/porting/"&gt;EF6 から EF Core へ移植 - EF | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="opentelemetry.net-1-opentelemetry"&gt;OpenTelemetry .NETを理解する (1) OpenTelemetryとは - 銀の光と碧い空&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-01"&gt;https://tech.tanaka733.net/entry/2022/01/opentelemetry-dotnet-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メトリクスを取り扱う OpenTelemetry についてと .NET の対応の現状についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c"&gt;【C# 11 候補】 半自動プロパティ | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/semi-auto-property/"&gt;https://ufcpp.net/blog/2021/12/semi-auto-property/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されている自動プロパティーのバッキングフィールドを読み書きするための &lt;code&gt;field&lt;/code&gt; キーワードについての記事。利用シチュエーションやキーワードの取り扱われ方などにも触れている。&lt;/p&gt;
&lt;h3 id="c-11-utf-8-c-c"&gt;【C# 11 候補】 UTF-8 リテラル | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/utf8-literal"&gt;https://ufcpp.net/blog/2021/12/utf8-literal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 以降での .NET における UTF-8 文字列のリテラルの取り扱いのステータスについての記事。Utf8String の空気感とバイト配列などに変換できる UTF-8 文字列リテラルについてなど。&lt;/p&gt;
&lt;h3 id="c-11-vs-17.1-p2-c-c"&gt;【C# 11 候補】リスト パターン【VS 17.1 p2 で追加予定】 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/list-pattern/"&gt;https://ufcpp.net/blog/2021/12/list-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されている配列や &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; のようなものにマッチするリストパターン &lt;code&gt;[]&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="immutablearray-c-c"&gt;ImmutableArray に対してコレクション初期化子 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/immutable-array-init/"&gt;https://ufcpp.net/blog/2021/12/immutable-array-init/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImmutableArray&lt;/code&gt; に対するコレクション初期化子の挙動が一見して想定と異なる理由と課題についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c-1"&gt;【C# 11 候補】コレクション リテラル | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/collection-literal/"&gt;https://ufcpp.net/blog/2021/12/collection-literal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で検討されているコレクション(配列やリストなど)で使えるコレクションリテラル &lt;code&gt;[]&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;h3 id="c-11-countable-c-c"&gt;【C# 11 で再検討】Countable | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/countable"&gt;https://ufcpp.net/blog/2022/1/countable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Index&lt;/code&gt; サポートに Countable (Count または Length を持った型) を広げるという案についての記事。&lt;/p&gt;
&lt;h3 id="comet-development-on-macos"&gt;Comet Development on macOS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/davidortinau/comet-development-on-macos-1o38"&gt;https://dev.to/davidortinau/comet-development-on-macos-1o38&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;macOS 上で Comet (MAUI の MVU フレームワーク) を使用して、アプリケーションを実装してみるという記事。&lt;/p&gt;
&lt;h3 id="customising-generated-code-with-marker-attributes-creating-a-source-generator-part-4"&gt;Customising generated code with marker attributes: Creating a source generator - Part 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/"&gt;https://andrewlock.net/creating-a-source-generator-part-4-customising-generated-code-with-marker-attributes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator でマーカー属性を利用してコード生成をカスタマイズする方法について解説している記事。&lt;/p&gt;
&lt;p&gt;独自の属性に設定値を指定し、それを Source Generator から読み取ってコード生成をカスタマイズしている。&lt;/p&gt;
&lt;h3 id="secure-a-blazor-wasm-asp.net-core-hosted-app-using-bff-and-openiddict"&gt;Secure a Blazor WASM ASP.NET Core hosted APP using BFF and OpenIddict&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://damienbod.com/2022/01/03/secure-a-blazor-wasm-asp-net-core-hosted-app-using-bff-and-openiddict/"&gt;https://damienbod.com/2022/01/03/secure-a-blazor-wasm-asp-net-core-hosted-app-using-bff-and-openiddict/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly と ASP.NET Core アプリケーションで OpenIddict を使用した OpenID Connect 認証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="c-gitlab-code-quality"&gt;C# の静的コード解析から GitLab Code Quality まで&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/99ad5ac9637dea"&gt;https://zenn.dev/masakura/articles/99ad5ac9637dea&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper Command Line Tools を使用してコードの静的解析を行い、GitLab Code Quality で Merge Request に解析結果を反映するといった手法についての記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-january-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | January 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/04/net-annotated-monthly-january-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/01/04/net-annotated-monthly-january-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の記事や情報のまとめ2022年1月号。&lt;/p&gt;
&lt;h3 id="blazordiscope-qiita"&gt;BlazorにおけるDIのScopeについて - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yoshi1220/items/4ebb2e2fc5528e16108b"&gt;https://qiita.com/yoshi1220/items/4ebb2e2fc5528e16108b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor Server と Blazor WebAssembly の両環境における DI のスコープの挙動について解説している記事。&lt;/p&gt;
&lt;h3 id="ckagglerlightgbm-qiita"&gt;C#でKagglerに話題のLightGBMを使ってタイタニック号の生存者予測をしてみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TechNinja/items/2e9d9fca8f9a65258922"&gt;https://qiita.com/TechNinja/items/2e9d9fca8f9a65258922&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET と LightGBM を組み合わせて C# でタイタニック号の生存者予測を実行するという記事。&lt;/p&gt;
&lt;h3 id="incrementalsourcegenerator-qiita"&gt;IncrementalSourceGeneratorの開発＆デバッグ方法 序 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/WiZLite/items/48f37278cf13be899e40"&gt;https://qiita.com/WiZLite/items/48f37278cf13be899e40&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incremental Source Generator の開発とデバッグ手法についての記事。&lt;/p&gt;
&lt;h3 id="net6c-qiita"&gt;.NET6でブラウザ完結のC#開発環境を作る話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/4b9223a9b79179d2bc0d"&gt;https://qiita.com/Kujiro/items/4b9223a9b79179d2bc0d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly と Roslyn を使用してブラウザー上でコードをコンパイルして実行できる環境を実装したことについての記事。&lt;/p&gt;
&lt;p&gt;記事では高速化やブロッキング処理など、実装上での工夫などを取り上げている。&lt;/p&gt;
&lt;h3 id="metricseventsource-qiita"&gt;MetricsEventSourceを利用する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/36e1c693bc6719ec122a"&gt;https://qiita.com/skitoy4321/items/36e1c693bc6719ec122a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.Metrics.MetricsEventSource&lt;/code&gt; の利用方法を解説している記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MetricsEventSource&lt;/code&gt; はメトリクスを &lt;code&gt;EventSource&lt;/code&gt; として扱うもののため、&lt;code&gt;dotnet-trace&lt;/code&gt; のような外部から取得することができる。&lt;/p&gt;
&lt;h3 id="net"&gt;.NET のオプション機能を完全に理解した。 - 鷲ノ巣&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.blog.aerie.jp/entry/2021/12/24/161443"&gt;https://tech.blog.aerie.jp/entry/2021/12/24/161443&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; の &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; といった ASP.NET Core のオプションパターンについての記事。&lt;/p&gt;
&lt;p&gt;コンフィギュレーションの更新を動的に行う必要があるケースでの &lt;code&gt;IOptionsMonitor&amp;lt;T&amp;gt;&lt;/code&gt; の更新処理や &lt;code&gt;IConfigureOptions&amp;lt;T&amp;gt;&lt;/code&gt; について解説している。&lt;/p&gt;
&lt;h3 id="neue-cc-consoleappframework-v4-minimal-api-for-commandline-tool"&gt;neue cc - ConsoleAppFramework v4 - Minimal API for CommandLine tool&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2021/12/30.html"&gt;https://neue.cc/2021/12/30.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンソールアプリケーションを実装するフレームワーク ConsoleAppFramework v4 についての紹介と、そこで導入された Minimal API についての紹介している記事。&lt;/p&gt;
&lt;h3 id="visual-studio-yucchiys-note"&gt;Visual Studioで外部ソースを含めたデバッグを実行する | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/01/debugging-external-sources-with-vs/"&gt;https://blog.yucchiy.com/2022/01/debugging-external-sources-with-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 でデバッグ実行時に依存ライブラリなども含めて外部のソースコードをステップ実行する方法についての記事。&lt;/p&gt;
&lt;h3 id="system.text.json-features-in.net-6"&gt;System.Text.Json features in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/system-text-json-features-in-the-dotnet-6"&gt;https://blog.okyrylchuk.dev/system-text-json-features-in-the-dotnet-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の System.Text.Json に追加された機能の紹介記事。&lt;/p&gt;
&lt;p&gt;循環参照の無視、シリアライズ/デシリアライズの通知、プロパティーのシリアライズ順序、生 JSON 書き込み、&lt;code&gt;IAsyncEnumerable&lt;/code&gt; サポート、シリアライズ/デシリアライズの Stream サポート、オブジェクトモデルでの操作、といったものを紹介している。&lt;/p&gt;
&lt;h3 id="fast-file-io-with.net-6-adam-sitnik"&gt;Fast File IO with .NET 6 - Adam Sitnik&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://adamsitnik.com/files/Fast_File_IO_with_DOTNET_6.pdf"&gt;https://adamsitnik.com/files/Fast_File_IO_with_DOTNET_6.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのファイル IO についての変更点やパフォーマンス向上の Tips を紹介したスライド。&lt;/p&gt;
&lt;!-- https://twitter.com/sitnikadam/status/1478088413693857799?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Last but not least, &amp;quot;Fast File IO with .NET 6&amp;quot;: &lt;a href="https://t.co/RODoZdg5Rr"&gt;https://t.co/RODoZdg5Rr&lt;/a&gt; (the recording is not public yet) &lt;a href="https://t.co/gXBzFx7RFp"&gt;pic.twitter.com/gXBzFx7RFp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Sitnik (&amp;#64;SitnikAdam) &lt;a href="https://twitter.com/SitnikAdam/status/1478088413693857799?ref_src=twsrc%5Etfw"&gt;January 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="grpc-microsoft-docs"&gt;gRPC クライアント側の負荷分散 | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/grpc/loadbalancing?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/ja-jp/aspnet/core/grpc/loadbalancing?view=aspnetcore-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC クライアントのクライアントサイドロードバランシングについてのドキュメント。&lt;/p&gt;
&lt;p&gt;接続先を解決するリゾルバーと接続先を決定するロードバランサーについて解説している。組み込みのリゾルバーとロードバランサー以外にカスタム実装を行う方法についても触れている。&lt;/p&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/steplyakov/status/1478440520485466113?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL about `ExceptionDispatchInfo.SetCurrentStackTrace` that can be very useful for setting a stack trace before passing an exception to `TaskCompletionSource` or `ManualResetValueTaskSourceCore`. &lt;a href="https://t.co/WhA3ZDpNSc"&gt;pic.twitter.com/WhA3ZDpNSc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergey Teplyakov (&amp;#64;STeplyakov) &lt;a href="https://twitter.com/STeplyakov/status/1478440520485466113?ref_src=twsrc%5Etfw"&gt;January 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;例外を &lt;code&gt;TaskCompletionSource&lt;/code&gt; などに渡すときに .NET 5 で追加された &lt;code&gt;ExceptionDispatchInfo.SetCurrentStackTrace&lt;/code&gt; でスタックトレースをセットしてから渡すことで発生位置を取れるようにできるというテクニック。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async Task Main()
{
    // ExceptionDispatchInfo.SetCurrentStackTrace なし
    try
    {
        await NantokaAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.StackTrace);
        // NantokaAsync を待機したところから始まる
        //   at Program.Main() in /path/to/Program.cs:line 0
    }

    // ExceptionDispatchInfo.SetCurrentStackTrace あり
    try
    {
        await NantokaWithStackTraceAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.StackTrace);
        // NantokaWithStackTraceAsync の中から始まる
        //   at Program.NantokaWithStackTraceAsync() in /path/to/Program.cs:line 0
        //   at Program.Main() in /path/to/Program.cs:line 0
    }
}

Task NantokaWithStackTraceAsync()
{
    var tsc = new TaskCompletionSource();
    tsc.SetException(ExceptionDispatchInfo.SetCurrentStackTrace(new Exception(&amp;quot;shinu&amp;quot;)));
    return tsc.Task;
}

Task NantokaAsync()
{
    var tsc = new TaskCompletionSource();
    tsc.SetException(new Exception(&amp;quot;shinu&amp;quot;));
    return tsc.Task;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.runtime.exceptionservices.exceptiondispatchinfo.setcurrentstacktrace?view=net-6.0"&gt;ExceptionDispatchInfo.SetCurrentStackTrace(Exception) メソッド (System.Runtime.ExceptionServices) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/drasticactionsa/status/1477513189872922625?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Very close to getting an MAUI app running inside the MacOS status bar! &lt;a href="https://t.co/LLovOBdjiM"&gt;pic.twitter.com/LLovOBdjiM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Drastic Actions (&amp;#64;drasticactionSA) &lt;a href="https://twitter.com/drasticactionSA/status/1477513189872922625?ref_src=twsrc%5Etfw"&gt;January 2, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;macOS のステータスバーから MAUI アプリケーションを表示できそうという話。&lt;/p&gt;
&lt;!-- https://twitter.com/timmisiak/status/1474506749839220736?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;re in the process of converting WinDbg to .Net 6, and in the meantime we&amp;#39;re also building against .Net 4.6.1 with the same project. It&amp;#39;s going to be so nice to do a pass through the code using new C# and .Net features that will simplify our code. Hopefully done in January...&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1474506749839220736?ref_src=twsrc%5Etfw"&gt;December 24, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg を .NET 6 への移行をしているという話。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1479196214402990083?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that in .NET 6 System.Text.RegularExpressions.Capture has a ValueSpan property? So, now you can parse regular expressions match results without allocations😍 (&lt;a href="https://twitter.com/konradkokosa?ref_src=twsrc%5Etfw"&gt;&amp;#64;konradkokosa&lt;/a&gt; knows ;))&lt;a href="https://twitter.com/hashtag/net?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#net&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/memorymanagement?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#memorymanagement&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/memoryexpert?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#memoryexpert&lt;/a&gt; &lt;a href="https://t.co/4MdXjeEpRQ"&gt;pic.twitter.com/4MdXjeEpRQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1479196214402990083?ref_src=twsrc%5Etfw"&gt;January 6, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 で Regex のキャプチャーに &lt;code&gt;ValueSpan&lt;/code&gt; プロパティという &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;&lt;/code&gt; を返すプロパティが追加され、&lt;code&gt;Value&lt;/code&gt; プロパティと異なりアロケーションなしでキャプチャーした文字列を取得できるという話。(&lt;code&gt;Value&lt;/code&gt; プロパティは &lt;code&gt;Substring&lt;/code&gt; で切り出している)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.text.regularexpressions.capture.valuespan?view=net-6.0#System_Text_RegularExpressions_Capture_ValueSpan"&gt;Capture.ValueSpan プロパティ (System.Text.RegularExpressions) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1474405442612830212?s=20 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET 6 supports bot Windows and IANA time zones on all platforms.&lt;br&gt;&lt;br&gt;TimeZoneInfo.FindSystemTimeZoneById implicitly converts IANA IDs.&lt;br&gt;&lt;br&gt;New APIs in TimeZoneInfo type:&lt;br&gt;• TryConvertIanaIdToWindowsId&lt;br&gt;• TryConvertWindowsIdToIanaId&lt;br&gt;• HasIanaId&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/mk568qbLfK"&gt;pic.twitter.com/mk568qbLfK&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1474405442612830212?ref_src=twsrc%5Etfw"&gt;December 24, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;TimeZoneInfo&lt;/code&gt; クラスに Windows のゾーン ID と IANA の ID を相互変換するためのメソッドが追加されたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="faster-parseheaders-by-egorbo-pull-request-39216-dotnetaspnetcore"&gt;Faster ParseHeaders by EgorBo · Pull Request #39216 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39216"&gt;https://github.com/dotnet/aspnetcore/pull/39216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kestrel の HTTP ヘッダーパーサーを最適化して高速化するという PR。現状 SSE2 での実装を試みている様子。&lt;/p&gt;
&lt;h3 id="faster-indexof-for-substrings-by-egorbo-pull-request-63285-dotnetruntime"&gt;Faster IndexOf for substrings by EgorBo · Pull Request #63285 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/63285"&gt;https://github.com/dotnet/runtime/pull/63285&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列の IndexOf を高速化するという PR。アルゴリズムは &lt;a href="http://0x80.pl/articles/simd-strfind.html"&gt;SIMD-friendly algorithms for substring searching&lt;/a&gt; というものとのこと。&lt;/p&gt;
&lt;h3 id="cache-the-delegate-for-static-method-group-conversions.by-pawchen-pull-request-58288-dotnetroslyn"&gt;Cache the delegate for static method group conversions. by pawchen · Pull Request #58288 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58288"&gt;https://github.com/dotnet/roslyn/pull/58288&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メソッドグループのデリゲート変換をキャッシュしたいという試みの PR。&lt;/p&gt;
&lt;h3 id="ancm-arm64-tracking-issue-39281-dotnetaspnetcore"&gt;ANCM + ARM64 Tracking · Issue #39281 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39281"&gt;https://github.com/dotnet/aspnetcore/issues/39281&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows の IIS で ASP.NET Core アプリケーションをホストする際に使用する ASP.NET Core Module を ARM64 版でもビルドできるようにするという話の Issue。&lt;/p&gt;
&lt;h3 id="add-compilergeneratedattribute-to-record-members-by-youssef1313-pull-request-58542-dotnetroslyn"&gt;Add CompilerGeneratedAttribute to record members by Youssef1313 · Pull Request #58542 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58542"&gt;https://github.com/dotnet/roslyn/pull/58542&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;レコード型の一部のメンバー (ToString や Equals, GetHashCode など) はコンパイラーが生成するものであるにもかかわらず &lt;code&gt;CompilerGeneratedAttribute&lt;/code&gt; がついていないのでつけるという PR。&lt;/p&gt;
&lt;h3 id="initial-support-for-semi-auto-properties-by-youssef1313-pull-request-57076-dotnetroslyn"&gt;Initial support for semi auto properties by Youssef1313 · Pull Request #57076 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/57076"&gt;https://github.com/dotnet/roslyn/pull/57076&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;半自動プロパティの初期サポート実装の PR。&lt;/p&gt;
&lt;h3 id="isopen-labelarch-loongarch64-issues-dotnetruntime-github"&gt;is:open label:arch-loongarch64 · Issues · dotnet/runtime · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/labels/arch-loongarch64"&gt;https://github.com/dotnet/runtime/labels/arch-loongarch64&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国発の CPU アーキテクチャー LoongArch に対応させたいという Issue (と PR)。&lt;/p&gt;
&lt;p&gt;この Issue と PR を出している Qiao さんは GitHub のプロフィールによれば所属は Loongson の模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shushanhf"&gt;shushanhf (Qiao)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/pulls?q=is%3Apr+is%3Aopen+label%3Aarch-loongarch64+"&gt;Pull requests · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-24: Npgsql 6.0.2, AWS Toolkit for Visual Studio 2022, MAUI 6.0.101-preview.11</title>
			<link>/2021/12/24/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/24/updates</guid>
			<pubDate>Fri, 24 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-v6.0.2-npgsqlnpgsql"&gt;Release v6.0.2 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.2"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 6.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;6.0.0 でパラメータ名のマッチングを case-sensitive に変更したが、いくつかのシナリオでパラメータプレースホルダーがカラム名として評価されデータの損失が発生する問題があったため差し戻されている。&lt;/p&gt;
&lt;h3 id="aws-toolkit-for-visual-studio-2022-visual-studio-marketplace"&gt;AWS Toolkit for Visual Studio 2022 - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022"&gt;https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Toolkit for Visual Studio 2022 がリリースされた。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetonaws/status/1473359044421242886?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Upgrade your .NET on AWS developer experience. The AWS Toolkit for Visual Studio 2022 is out of preview and is now generally available. Download from the Visual Studio Marketplace.&lt;a href="https://t.co/nvBS1wSNSz"&gt;https://t.co/nvBS1wSNSz&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotNETonAWS?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETonAWS&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET on AWS (&amp;#64;dotnetonAWS) &lt;a href="https://twitter.com/dotnetonAWS/status/1473359044421242886?ref_src=twsrc%5Etfw"&gt;December 21, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-6.0.101-preview.11-dotnetmaui"&gt;Release 6.0.101-preview.11 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.101-preview.11.3"&gt;https://github.com/dotnet/maui/releases/tag/6.0.101-preview.11.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI 6.0.101-preview.11 がリリースされた。&lt;/p&gt;
&lt;p&gt;主な変更点は Windows での Fluent Design System のスタイリング、Android, iOS, macOS, Windows (experimental) でのマルチウィンドウ対応、テンプレートの更新など。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-serverfa-qiita"&gt;Blazor serverをラズパイに入れてFAしたい - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamaccu/items/9e86db8d8fa44f43dcc1"&gt;https://qiita.com/yamaccu/items/9e86db8d8fa44f43dcc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Raspberry Pi で動作するアプリケーションの UI として Blazor を使用するという記事。&lt;/p&gt;
&lt;h3 id="integration-testing-and-nuget-packaging-creating-a-source-generator-part-3"&gt;Integration testing and NuGet packaging: Creating a source generator - Part 3&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-3-integration-testing-and-packaging/"&gt;https://andrewlock.net/creating-a-source-generator-part-3-integration-testing-and-packaging/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator の統合テストと NuGet パッケージ作成についての記事。&lt;/p&gt;
&lt;p&gt;統合テストでは Source Generator で生成したコード自体をテストするといったことを行っている。&lt;/p&gt;
&lt;h3 id="net-6priorityqueue-yucchiys-note"&gt;.NET 6に入ったPriorityQueueの紹介と、ダイクストラ法を書いてみる | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2021/12/priority-queue-dotnet6/"&gt;https://blog.yucchiy.com/2021/12/priority-queue-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で新たに導入された PriorityQueue クラスの紹介の記事。&lt;/p&gt;
&lt;p&gt;記事では PriorityQueue を使用してダイクストラ法を解く例を解説している。&lt;/p&gt;
&lt;h3 id="test-tools-for.net-and-cross-platform-apps"&gt;Test tools for .NET and cross-platform apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/"&gt;https://devblogs.microsoft.com/visualstudio/vs22-test-tools-for-net-and-cross-platform-apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の .NET のテストツールに関する Tips 的な記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コードからテストエクスプローラーで表示する機能&lt;/li&gt;
&lt;li&gt;テストが完了時に音を鳴らす機能&lt;/li&gt;
&lt;li&gt;Console.WriteLine の呼び出しをテストエクスプローラーで確認できる機能&lt;/li&gt;
&lt;li&gt;SSH や WSL などのリモートでテストを実行する機能&lt;/li&gt;
&lt;li&gt;Playwright の Web アプリケーションテストコードを生成する機能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uiexprazordom-qiita"&gt;自作UIフレームワークExprazorの紹介と仮想DOMの実装方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/WiZLite/items/6448185e5156efa348e2"&gt;https://qiita.com/WiZLite/items/6448185e5156efa348e2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で動作する仮想 DOM を持つ C# による UI フレームワークを実装したという記事。&lt;/p&gt;
&lt;h3 id="net-6-ltslong-term-support-qiita"&gt;.NET 6 がLTS(Long-term Support)にふさわしい理由 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/proprogrammer0/items/0f828266e710eea86e09"&gt;https://qiita.com/proprogrammer0/items/0f828266e710eea86e09&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以前から要素としては提供されていたが、組み合わせることができなかったものが .NET 6 で解消したものについての記事。&lt;/p&gt;
&lt;p&gt;記事では「アセンブリのトリミングと System.Text.Json」と「Blazor コンポーネントと where 型制約」といったものが紹介され、.NET 6 でも未対応な組み合わせについても触れている。&lt;/p&gt;
&lt;h3 id="c-on.net6"&gt;(C#) メモリ確保ベンチマーク on .NET6 - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2021/12/20/225208"&gt;https://ikorin2.hatenablog.jp/entry/2021/12/20/225208&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加/変更された NativeMemory も含めてのマネージドなメモリー(配列)とアンマネージドなメモリー(ネイティブ)での確保時のベンチマークを取っている記事。&lt;/p&gt;
&lt;h3 id="blazor-webassembly-web-snow-catch-qiita"&gt;Blazor WebAssembly で作った Web アプリ &amp;quot;snow catch&amp;quot; ゲームを、🎮 ゲームパッド (ジョイスティック) で操作できるようにする - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/4705be2e5c6c7f1fccc8"&gt;https://qiita.com/jsakamoto/items/4705be2e5c6c7f1fccc8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-compare-two-files-using.net-really-really-fast"&gt;How to compare two files using .NET, really really fast!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/emrahsungu/how-to-compare-two-files-using-net-really-really-fast-2pd9"&gt;https://dev.to/emrahsungu/how-to-compare-two-files-using-net-really-really-fast-2pd9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で二つのファイルを高速に比較する手法についての記事。&lt;/p&gt;
&lt;p&gt;記事では MD5 での比較に対してバイト単位での直接比較を行う中で、チャンク化や SIMD の使用といった手法での高速化を紹介している。&lt;/p&gt;
&lt;h3 id="net6.0linqapi-qiita"&gt;.NET6.0でのLINQの改善や新しいAPIを紹介 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/shun-shun123/items/235cf61ae03d402f46ce"&gt;https://qiita.com/shun-shun123/items/235cf61ae03d402f46ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で改善された LINQ のメソッドについてと、新しい API について紹介している記事。&lt;/p&gt;
&lt;p&gt;Index/Range をとるオーバーロードについてや TryGetNonEnumeratedCount メソッドについて触れている。&lt;/p&gt;
&lt;h3 id="blazor-componentsjavascript-qiita"&gt;Blazor ComponentsをJavaScriptからインスタンス化出来る機能のサンプルコードを追って拡張してみよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/7fcf645cfdc995990cce"&gt;https://qiita.com/yamachu/items/7fcf645cfdc995990cce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のコンポーネントを JavaScript (React) から生成する公式のサンプルコードを開設している記事。&lt;/p&gt;
&lt;p&gt;記事では解説のほか、コード生成部分を型情報を生成するといった修正なども行っている。&lt;/p&gt;
&lt;h3 id="net-6c-incremental-source-generator"&gt;.NET 6からのC# Incremental Source Generatorの開発入門&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/pcysl5edgo/articles/6d9be0dd99c008"&gt;https://zenn.dev/pcysl5edgo/articles/6d9be0dd99c008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 / .NET 6 からの Incremental Source Generator についての記事。&lt;/p&gt;
&lt;p&gt;記事ではファイルをコードに埋め込む Source Generator を題材として実装、パッケージングについてを解説している。Visual Studio 2019 との共存方法についても触れている。&lt;/p&gt;
&lt;h3 id="unity-cpublic-qiita"&gt;【Unity, C#】非publicな型やメンバにアクセスするには、多分これが一番手軽だと思います - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/mob-sakai/items/37978a030d6a6e262065"&gt;https://qiita.com/mob-sakai/items/37978a030d6a6e262065&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity で internal な型やメンバーにアクセスする方法についてのまとめ記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;InternalsVisibleToAttribute&lt;/code&gt;, &lt;code&gt;.asmref&lt;/code&gt;, CSharpCompilerSettingsForUnity パッケージを使用する方法を紹介している。&lt;/p&gt;
&lt;h3 id="cswitch-qiita"&gt;C#のアプデでめちゃくちゃ便利になったswitch文（パターンマッチング）の紹介 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/toRisouP/items/18b31b024b117009137a"&gt;https://qiita.com/toRisouP/items/18b31b024b117009137a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 以降で強化された switch 式とステートメントについての記事。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;C#のプロパティによるパターンマッチングを使おう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/emoacht/items/dc1c40769dc6cdc1ef44"&gt;https://qiita.com/emoacht/items/dc1c40769dc6cdc1ef44&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 8 以降で使用できるプロパティー対するパターンマッチングについての記事。&lt;/p&gt;
&lt;h3 id="c-qiita-1"&gt;C# パターンマッチングのデコンパイルコードを確認する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/sh1ch/items/cd8a418ec2bf7f3eafb2"&gt;https://qiita.com/sh1ch/items/cd8a418ec2bf7f3eafb2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パターンマッチングを行うコードが実際にどのような形でコンパイルされているのかを SharpLab でデコンパイルすることで調べている記事。&lt;/p&gt;
&lt;h3 id="an-overview-of-distributed-tracing-with-opentelemetry-in.net-6"&gt;An Overview of Distributed Tracing with OpenTelemetry in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aaronstannard.com/opentelemetry-dotnet6/"&gt;https://aaronstannard.com/opentelemetry-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c"&gt;【C#】マルチスレッド関連操作の詳説。 - ねののお庭。&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.neno.dev/entry/2021/12/23/124215"&gt;https://blog.neno.dev/entry/2021/12/23/124215&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# / .NET でのマルチスレッドに関連するアトミック性のような問題とそれに対するメモリバリアーといった対処に関して詳しく説明している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="filipnavaracodesign"&gt;filipnavara/CodeSign&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/filipnavara/CodeSign"&gt;https://github.com/filipnavara/CodeSign&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アプリケーションバンドルと Mach-O 実行ファイルに Apple Code Signing の署名をするツール。&lt;/p&gt;
&lt;h3 id="githubsuper-linter-combination-of-multiple-linters-to-install-as-a-github-action"&gt;github/super-linter: Combination of multiple linters to install as a GitHub Action&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/github/super-linter"&gt;https://github.com/github/super-linter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions から様々な言語の Lint を実行するためのアクション。.NET は dotnet format に対応している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/mattak/articles/5ae354e525b9ed"&gt;dotnet formatでのlint checkをgithub actionsで実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpnativememoryarray-utilized-native-memory-backed-array-for.net-and-unity-over-the-2gb-limitation-and-support-the-modern-apiibufferwriter-readonlysequence-scattergather-io-etc"&gt;Cysharp/NativeMemoryArray: Utilized native-memory backed array for .NET and Unity - over the 2GB limitation and support the modern API(IBufferWriter, ReadOnlySequence, scatter/gather I/O, etc...).&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/NativeMemoryArray"&gt;https://github.com/Cysharp/NativeMemoryArray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ネイティブメモリーを使用することで .NET の配列の最大サイズを超えるような大きなデータを扱えるようにするライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2021/12/22.html"&gt;neue cc - NativeMemoryArray - .NET 6 APIをフル活用した2GB超えの巨大データを扱うライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/xoofx/status/1473579951731482629?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;D&amp;#39;oh! TIL that I can use monospace fonts on &lt;a href="https://twitter.com/github?ref_src=twsrc%5Etfw"&gt;&amp;#64;github&lt;/a&gt; issues/PR/comments (Settings, Appearance tab at the bottom), I can&amp;#39;t explain why it&amp;#39;s not the default 🤔 &lt;a href="https://t.co/9A48vq6g8o"&gt;pic.twitter.com/9A48vq6g8o&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1473579951731482629?ref_src=twsrc%5Etfw"&gt;December 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;GitHub.com の Issue や Pull request などで Markdown を記述するテキストエディター部分を等幅フォントに設定する項目があるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/rickbrewpdn/status/1472320987056132098?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;C++/CLI has been officially purged from the Paint​.NET codebase! I couldn&amp;#39;t have done it without &lt;a href="https://twitter.com/tannergooding?ref_src=twsrc%5Etfw"&gt;&amp;#64;tannergooding&lt;/a&gt; &amp;#39;s TerraFX​.Interop​.Windows package, which made it a breeze. Went way faster than I thought it would. &lt;a href="https://t.co/Si8MnJufsB"&gt;pic.twitter.com/Si8MnJufsB&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rick Brewster (&amp;#64;rickbrewPDN) &lt;a href="https://twitter.com/rickbrewPDN/status/1472320987056132098?ref_src=twsrc%5Etfw"&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Paint.NET から C++/CLI のコードがなくなったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/vollragm/status/1472243008963854342?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I don&amp;#39;t recommend creating Kernel Mode drivers in C#, as it is highly experimental, but its possible.&lt;a href="https://t.co/1d1iwQ4gjv"&gt;https://t.co/1d1iwQ4gjv&lt;/a&gt;&lt;br&gt;&lt;br&gt;This is another example, a Driver with memory reading and writing capabilities communication over a hooked function.&lt;/p&gt;&amp;mdash; VollRagm (&amp;#64;vollragm) &lt;a href="https://twitter.com/vollragm/status/1472243008963854342?ref_src=twsrc%5Etfw"&gt;December 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;NativeAOT を使用して C# でカーネルモードドライバーを作ってみたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="improve.net-productivity-inner-loop-performance-issue-58268-dotnetroslyn"&gt;Improve .NET Productivity inner-loop performance · Issue #58268 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/58268"&gt;https://github.com/dotnet/roslyn/issues/58268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn / Visual Studio の .NET 生産性機能周りのパフォーマンス改善の Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-17: Visual Studio 2022 v17.0.3 / 17.0.4 / for Mac Preview 4, Announcing the Plan for EF7</title>
			<link>/2021/12/17/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/17/updates</guid>
			<pubDate>Fri, 17 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-v17.0.3-17.0.4"&gt;Visual Studio 2022 v17.0.3 / 17.0.4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/releases/2022/release-notes#17030--visual-studio-2022-version-1704"&gt;https://docs.microsoft.com/ja-jp/visualstudio/releases/2022/release-notes#17030--visual-studio-2022-version-1704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の 17.0.3 と 17.0.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;17.0.3 では Unicode の双方向テキスト制御文字への対応といくつかの不具合修正が行われた。双方向テキスト制御文字対応はソースコード内に現れた場合にエディター上では文字の方向を変更する効力は持たず、プレースホルダーとして表示されるようになる。&lt;/p&gt;
&lt;p&gt;17.0.4 では Xcode 13.2 への対応が行われている。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-4"&gt;Visual Studio 2022 for Mac Preview 4&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-4/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;大きな変更点としてはエディターの各種ツールペインがドッキング可能となりソリューションエクスプローラー等の位置をドラッグアンドドロップにて移動できるようになったこと、検索結果画面がネイティブ UI になり結果のグルーピングなどができるようになったことがあげられている。その他、引き続きネイティブ UI への移行とバグ修正などが行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#1700-pre4--visual-studio-2022-for-mac-version-170-preview-4-newreleasebutton"&gt;Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-the-plan-for-ef7"&gt;Announcing the Plan for EF7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-the-plan-for-ef7/"&gt;https://devblogs.microsoft.com/dotnet/announcing-the-plan-for-ef7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7 (EF Core 7 あるいは EF7) に向けたプランのアナウンス記事。&lt;/p&gt;
&lt;p&gt;EF7 は2022年11月を目標に作業が進み .NET 7 と同時期にリリース予定。EF Core 6.1 のリリース予定はなく、EF7 は LTS ではないサポートリリースとなること、現時点では .NET 6 をターゲットにしているが .NET 7 に変わる可能性があるとのこと。&lt;/p&gt;
&lt;p&gt;記事では EF7 のテーマとして次のようなものをあげている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多くの需要のある機能&lt;/li&gt;
&lt;li&gt;.NET プラットフォームとエコシステム&lt;/li&gt;
&lt;li&gt;Entity Framework 6 (レガシー) からの移行&lt;/li&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要のある機能では JSON カラムやバルクアップデート、Value Object やマップされていない型を使用する生 SQL (Dapper のような Ad-hoc クエリー)といったサポートがあがっており、プラットフォームとエコシステムでは分散トランザクション、新しい SQLServer のドライバー、トリミングや System.Linq.Expression の強化などがプランにあがっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/core/what-is-new/ef-core-7.0/plan"&gt;Plan for Entity Framework Core 7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-6-networking-improvements"&gt;.NET 6 Networking Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-6-networking-improvements/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-6-networking-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのネットワーク周りでの改善についての記事。記事では下記の項目について細かく解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;HTTP/2 Window Scaling&lt;/li&gt;
&lt;li&gt;HTTP/3 &amp;amp; QUIC&lt;/li&gt;
&lt;li&gt;HTTP リトライロジック&lt;/li&gt;
&lt;li&gt;SOCKS プロキシーサポート&lt;/li&gt;
&lt;li&gt;WinHTTP&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;コネクションプールの改善&lt;/li&gt;
&lt;li&gt;検証なしのヘッダー列挙&lt;/li&gt;
&lt;li&gt;HPack デコードの最適化&lt;/li&gt;
&lt;li&gt;ZLibStream の導入&lt;/li&gt;
&lt;li&gt;Cookie の列挙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソケット
&lt;ul&gt;
&lt;li&gt;Windows でのポート範囲自動再利用のサポート&lt;/li&gt;
&lt;li&gt;IPv6 グローバル無効化オプション&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Net.Sockets&lt;/code&gt; の &lt;code&gt;Span&lt;/code&gt; および Task ベースのオーバーロードのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セキュリティ
&lt;ul&gt;
&lt;li&gt;遅延クライアントネゴシエーション&lt;/li&gt;
&lt;li&gt;Windows でのユーザー偽装の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;診断
&lt;ul&gt;
&lt;li&gt;Activity のヘッダー伝搬のコントロール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URI
&lt;ul&gt;
&lt;li&gt;URI の正規化の無効化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-december-2021-updates-6.0.1-5.0.13-and-3.1.22"&gt;.NET December 2021 Updates – 6.0.1, 5.0.13 and 3.1.22&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/december-2021-updates/"&gt;https://devblogs.microsoft.com/dotnet/december-2021-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2021年12月の .NET の更新(.NET 6.0.1, 5.0.13, .NET Core 3.1.22)がリリースされた。&lt;/p&gt;
&lt;p&gt;それぞれいくつかのバグ修正やバックポートが含まれるほか、ASP.NET Core のセキュリティー修正が含まれている。&lt;/p&gt;
&lt;p&gt;ASP.NET Core のセキュリティー修正は ASP.NET Core Module (ANCM) と呼ばれる IIS で ASP.NET Core をホストする際に必要となるモジュールに関するものでこのリリースで権限昇格の脆弱性が修正されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/206"&gt;Microsoft Security Advisory CVE-2021-43877 | ASP.NET Core Elevation of privilege Vulnerability · Issue #206 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/205"&gt;December 2021 .NET Updates · Issue #205 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="orleans-announcement-issue-7423-dotnetorleans"&gt;Orleans Announcement · Issue #7423 · dotnet/orleans&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/orleans/issues/7423"&gt;https://github.com/dotnet/orleans/issues/7423&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Orleans を .NET チームに移管するというアナウンス。&lt;/p&gt;
&lt;p&gt;これに伴い Issue の管理やリリースといったプロセスを dotnet/aspnetcore と同様の形にするとのこと。&lt;/p&gt;
&lt;h3 id="release-release-v1.43.0-grpcgrpc"&gt;Release Release v1.43.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.43.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.43.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.43.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;C# に関連する変更として Grpc.Core.Api に null 許容参照型アノテーションが適用された。このパッケージは C-core と .NET 実装 (grpc-dotnet) の両方で使用される API サーフェースを定義したものであり、どちらの実装を使用する場合でも恩恵を受ける。NuGet パッケージでは 2.43.0 となるが&lt;strong&gt;現時点ではまだリリースされていない&lt;/strong&gt;ようなので注意。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-advent-calendar"&gt;.NET Advent Calendar&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.christmas/"&gt;https://dotnet.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英語圏の .NET の Advent Calendar まとめサイト。&lt;/p&gt;
&lt;h3 id="c-advent-calendar-2021"&gt;C# Advent Calendar 2021&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://csadvent.christmas/"&gt;https://csadvent.christmas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英語圏の C# の Advent Calendar まとめサイト。&lt;/p&gt;
&lt;h3 id="testing-an-incremental-generator-with-snapshot-testing-creating-a-source-generator-part-2"&gt;Testing an incremental generator with snapshot testing: Creating a source generator - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/"&gt;https://andrewlock.net/creating-a-source-generator-part-2-testing-an-incremental-generator-with-snapshot-testing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator を Verify というライブラリーを使用してスナップショットテストを行う方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/VerifyTests/Verify"&gt;VerifyTests/Verify: Verify is a snapshot tool that simplifies the assertion of complex data models and documents.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blazor-webassembly2gb4gb-qiita"&gt;Blazor WebAssemblyで2GBの壁を超え4GBへ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamachu/items/a357ab72f76afa2802b6"&gt;https://qiita.com/yamachu/items/a357ab72f76afa2802b6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly で 4GB のメモリーを確保するにはという記事。&lt;/p&gt;
&lt;p&gt;記事では Native Dependency を駆使して Emscripten にビルドフラグを渡すことで 2GB の壁を超えるといった手法を紹介している。&lt;/p&gt;
&lt;h3 id="net-6efcore-qiita"&gt;.NET 6のトップレベルステートメントを使ったコンソールプロジェクトで、EFCoreのマイグレーションはなぜ動くのか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/d503fb1c9579eb27de18"&gt;https://qiita.com/karuakun/items/d503fb1c9579eb27de18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特定のメソッドがないと動かなかった EF Core のマイグレーションが EF Core 6 からはトップレベルステートメントを含めて動くようになった仕組みについての記事。&lt;/p&gt;
&lt;h3 id="net-history-timeline-its-not-finished-yet-so-if-you-find"&gt;.NET History Timeline. --- It's not finished yet, so if you find...&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/dotnet/comments/rcg391/net_history_timeline_its_not_finished_yet_so_if/"&gt;https://www.reddit.com/r/dotnet/comments/rcg391/net_history_timeline_its_not_finished_yet_so_if/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の年表(タイムライン)&lt;/p&gt;
&lt;h3 id="digging-into-the.net-dictionary-implementation"&gt;Digging into the .NET Dictionary implementation…&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ayende.com/blog/195651-B/digging-into-the-net-dictionary-implementation"&gt;https://ayende.com/blog/195651-B/digging-into-the-net-dictionary-implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dictionary の内部実装についての記事。&lt;code&gt;_buckets&lt;/code&gt; と &lt;code&gt;_entries&lt;/code&gt; のフィールドがあることなど。&lt;/p&gt;
&lt;h3 id="net6file-iolinuxmac-qiita"&gt;.NET6のFile IO改善はLinux&amp;amp;macでも改善されているか検証してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/KuriharaJun/items/5bab044c4b02dec2da3a"&gt;https://qiita.com/KuriharaJun/items/5bab044c4b02dec2da3a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのファイルの読み書きに関する改善を Linux と macOS および Windows で比較、検証した記事。&lt;/p&gt;
&lt;p&gt;記事ではすべてのケースで .NET 6 で結果が改善されていることが示されている。&lt;/p&gt;
&lt;h3 id="xamarin.froms.net6"&gt;Xamarin.Froms プロジェクトを .NET6 へアップグレードする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/proudust/articles/2021-12-12-xamarin-upgrade-to-dotnet6"&gt;https://zenn.dev/proudust/articles/2021-12-12-xamarin-upgrade-to-dotnet6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;従来の Xamarin の Xamarin.Forms のプロジェクトを .NET 6 の Xamarin.Forms へと移行する手順をまとめた記事。&lt;/p&gt;
&lt;h3 id="burstsimd-qiita"&gt;Burstでポータブルかつ確実にSIMD化を行うにはどうすればいいのか - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Trapezoid/items/461c058a0feadb7ccefe"&gt;https://qiita.com/Trapezoid/items/461c058a0feadb7ccefe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の Burst Compiler で SIMD 化をコンパイラー任せではなく、コード上でコントロールすることで確実に SIMD 化する方法についての記事。&lt;/p&gt;
&lt;h3 id="c"&gt;【C#】デリゲートのコンパイル結果&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/5acc9f03f10296"&gt;https://zenn.dev/naminodarie/articles/5acc9f03f10296&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デリゲートの記述方法別での実際にコンパイルされたときの形を調べている記事。&lt;/p&gt;
&lt;h3 id="tagwithtagwithcallsitesql-qiita"&gt;TagWithとTagWithCallSiteでSQLを発行したメソッドを特定する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/6d7280d7928af06cb1bc"&gt;https://qiita.com/karuakun/items/6d7280d7928af06cb1bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework Core のクエリーに調査目的などでタグをつけるための &lt;code&gt;TagWith&lt;/code&gt; と EF Core 6 で追加された呼び出し元名をタグとしてつける &lt;code&gt;TagWithCallSite&lt;/code&gt; についての解説記事。&lt;/p&gt;
&lt;h3 id="new-apis-in.net-6"&gt;20 New APIs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/20-new-apis-in-net-6"&gt;https://blog.okyrylchuk.dev/20-new-apis-in-net-6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された API を20個、簡単に紹介している記事。&lt;/p&gt;
&lt;h3 id="windows-terminal-as-your-default-command-line-experience"&gt;Windows Terminal as your Default Command Line Experience&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/commandline/windows-terminal-as-your-default-command-line-experience/"&gt;https://devblogs.microsoft.com/commandline/windows-terminal-as-your-default-command-line-experience/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Terminal をデフォルトのコマンドライン環境とすることについての記事。&lt;/p&gt;
&lt;p&gt;将来の Windows 11 のバージョンでは Windows Terminal がデフォルトになる予定であるとのこと。&lt;/p&gt;
&lt;h3 id="machine-learning-in-xamarin.forms-with-onnx-runtime"&gt;Machine Learning in Xamarin.Forms with ONNX Runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/machine-learning-in-xamarin-forms-with-onnx-runtime/"&gt;https://devblogs.microsoft.com/xamarin/machine-learning-in-xamarin-forms-with-onnx-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms と ONNX Runtime でモバイルで機械学習を使用するという記事。&lt;/p&gt;
&lt;p&gt;記事では既にある画像に対して画像の分類をかけるといった処理を行うサンプルで解説している。&lt;/p&gt;
&lt;h3 id="whats-new-in.net-productivity-with-visual-studio-2022"&gt;What’s new in .NET Productivity with Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/whats-new-in-net-productivity-with-visual-studio-2022/"&gt;https://devblogs.microsoft.com/visualstudio/whats-new-in-net-productivity-with-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の .NET の生産性に関する新機能について紹介している記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Link ナビゲーション&lt;/li&gt;
&lt;li&gt;Stack Trace Explorer&lt;/li&gt;
&lt;li&gt;EditorConfig UI での命名規則設定&lt;/li&gt;
&lt;li&gt;ソリューションエクスプローラーから名前空間の同期&lt;/li&gt;
&lt;li&gt;await の IntelliSense 補完&lt;/li&gt;
&lt;li&gt;新しいコードフィックスとリファクタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお Stack Trace Explorer は現時点ではリリースされておらず、17.1 Preview 2 以降で提供されるとのこと。&lt;/p&gt;
&lt;h3 id="csealed"&gt;C#のsealedメソッドをオーバーライドする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/articles/overriding-sealed-methods-c-sharp/"&gt;https://www.infoq.com/jp/articles/overriding-sealed-methods-c-sharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メタデータを書き換えることでメソッドを置き換える黒魔術を解説している記事(日本語訳)。&lt;/p&gt;
&lt;h3 id="planned-work-for-system.text.regularexpressions-for-7.0.0-issue-62758-dotnetruntime"&gt;Planned work for System.Text.RegularExpressions for 7.0.0 · Issue #62758 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/62758"&gt;https://github.com/dotnet/runtime/issues/62758&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で予定されている正規表現関連の改修タスクの Issue。&lt;/p&gt;
&lt;h3 id="net-6-c-10-repl-qiita"&gt;.NET 6 の C# 10 を今すぐ REPL で試す - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advanceboy/items/03f347cd773934fda8d5"&gt;https://qiita.com/advanceboy/items/03f347cd773934fda8d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Binder (Jupyter Notebook のホスト) と dotnet/interactive リポジトリを使用して、ブラウザー上でインスタントに .NET Interactive を起動して .NET を試す方法についての記事。&lt;/p&gt;
&lt;h3 id="qiita"&gt;コンテナ環境でのデータベースマイグレーション - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/6dc22d2cdbbb43c024e7"&gt;https://qiita.com/karuakun/items/6dc22d2cdbbb43c024e7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンテナー環境での Entity Framework Core のマイグレーションの実行についての記事。&lt;/p&gt;
&lt;p&gt;記事ではスクリプトを出力する方法、&lt;code&gt;dotnet ef database update&lt;/code&gt; を使用できるコンテナーイメージを作る方法、EF Core 6 から提供されているマイグレーションバンドルを使用する方法が紹介されている。&lt;/p&gt;
&lt;h3 id="interpreting-async-code-in-cpu-traces"&gt;Interpreting async code in CPU traces&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/interpreting-async-code-in-cpu-traces"&gt;https://www.poppastring.com/blog/interpreting-async-code-in-cpu-traces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロファイラーで非同期コードのパフォーマンスを確認する際に役立つ機能についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/profiling/analyze-async?view=vs-2022"&gt;.NET 非同期コードのパフォーマンスを分析する - Visual Studio (Windows) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="maui-qiita"&gt;MAUIのコントロールをカスタマイズする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/f-miyu/items/ca02ea3bcf7e88f6eeb7"&gt;https://qiita.com/f-miyu/items/ca02ea3bcf7e88f6eeb7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI でコントロールをカスタマイズする方法についての記事。&lt;/p&gt;
&lt;h3 id="netwpfdihttp-qiita"&gt;.NET汎用ホストでWPFを動かしてDIしたりHTTPリクエストを受け付けたりした話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/miswil/items/3b9bd7e40209f1c5dce3"&gt;https://qiita.com/miswil/items/3b9bd7e40209f1c5dce3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF プロジェクトで Microsoft.Extensions.Hosting を使用して DI や Web アプリケーションをホストする方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11-c-c"&gt;【C# 11 候補】 {} 中の改行 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/newlines-in-interpolated-string/"&gt;https://ufcpp.net/blog/2021/12/newlines-in-interpolated-string/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列補完式の &lt;code&gt;{}&lt;/code&gt; の中でのコード的な改行の取り扱いが C# 11 で変更される予定があるという記事。&lt;/p&gt;
&lt;h3 id="feature-preview-il2cpp-full-generic-sharing-in-unity-2022.1-beta-unity-blog"&gt;Feature preview: IL2CPP Full Generic Sharing in Unity 2022.1 beta | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/feature-preview-il2cpp-full-generic-sharing-in-unity-20221-beta"&gt;https://blog.unity.com/technology/feature-preview-il2cpp-full-generic-sharing-in-unity-20221-beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2022.1 beta の IL2CPP (AOT) でジェネリクスの型パラメーターに値型を取る物に対するコード生成を一つのコードでカバーできる仕組みを導入したという記事。&lt;/p&gt;
&lt;p&gt;従来ジェネリクスの型パラメーターに値型を取る場合はその型固有のコードを生成する必要があり、何らかの理由で解析から漏れると実行エラーとなっていたがそれをカバーできるフォールバック的なコードを生成するようになった。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;Manager.SendMessage&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code&gt;IManager.SendMessage&amp;lt;T&amp;gt;&lt;/code&gt; のようなものがあり、インターフェースを経由して呼び出した場合(&lt;code&gt;IManager.SendMessage&amp;lt;AnyEnum&amp;gt;(...)&lt;/code&gt;)、&lt;code&gt;Manager.SendMessage&amp;lt;AnyEnum&amp;gt;&lt;/code&gt; をコンパイル時には検出できずコード生成が不完全となり実行時にエラーになるという例が挙げられている。このようなケースを Full Generic Sharing のコードでカバーする。&lt;/p&gt;
&lt;p&gt;また、すべてのコードを共通化することでコードサイズを抑えたい場合にも役立つといったことが書かれている。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1471254757792940033?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We&amp;#39;ve seen 15% throughput degradation for generic heavy code (Entity Framework) with a similar tech in .NET Native. I call this code &amp;quot;Universal Shitty Code&amp;quot;. One really wants to run such code as little as possible. &lt;a href="https://t.co/2ULALO4uU3"&gt;https://t.co/2ULALO4uU3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1471254757792940033?ref_src=twsrc%5Etfw"&gt;December 15, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET Native (UWP の .NET の AOT コンパイラー) でも同じような実装があり、このパスを通ることでパフォーマンスが低下するといったことがあったという話。&lt;/p&gt;
&lt;p&gt;スレッドでは IL2CPP の記事を書いた Josh Peterson さんもこの共有コードを通る場合はパフォーマンスのオーバーヘッドがあるが、殆どのプロジェクトではこのパスを通らないので影響はほとんどないとのこと。もしパフォーマンスが重要なコードではこのパスを通らないようにしたほうがよいとしている。&lt;/p&gt;
&lt;h3 id="parallel.foreachasync-deep-dive"&gt;Parallel.ForEachAsync Deep Dive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.gregbair.dev/posts/parallel-foreachasync/"&gt;https://www.gregbair.dev/posts/parallel-foreachasync/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で導入された &lt;code&gt;Parallel.ForEachAsync&lt;/code&gt; の内部実装についての記事。&lt;/p&gt;
&lt;h3 id="system.text.json-qiita"&gt;System.Text.Jsonソースジェネレーターパフォーマンス調査 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/727ae10a2bc5a54404d5"&gt;https://qiita.com/skitoy4321/items/727ae10a2bc5a54404d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で導入された System.Text.Json の Source Generator によるコード生成を使用した場合のパフォーマンスについての記事。&lt;/p&gt;
&lt;p&gt;記事ではシリアライズとデシリアライズのパフォーマンスを比較している。&lt;/p&gt;
&lt;h3 id="were-upgrading-visual-studios-feedback"&gt;We’re upgrading Visual Studio’s feedback!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/were-upgrading-visual-studios-feedback/"&gt;https://devblogs.microsoft.com/visualstudio/were-upgrading-visual-studios-feedback/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のフィードバックのシステムをアップグレードしているという記事。&lt;/p&gt;
&lt;p&gt;このアップグレードの影響で Visual Studio からフィードバックするには 16.7 以降または LTSC リリースが必要となるとのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/sergiopedri/status/1469267425522712577?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Happy to announce that with the latest changes merged, both messenger types in the MVVM Toolkit are now completely allocation free on .NET 6! They are also both by far the fastest messenger/event-aggregator types across any other MVVM library that I could find! 🚀&lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/KmgvDAc6uL"&gt;pic.twitter.com/KmgvDAc6uL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1469267425522712577?ref_src=twsrc%5Etfw"&gt;December 10, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 の MVVM Toolkit がアロケーションフリーになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/jbevain/status/1469389090525114375?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Everybody is talking about log4j’s RCE, meanwhile &lt;a href="https://twitter.com/sailro?ref_src=twsrc%5Etfw"&gt;&amp;#64;sailro&lt;/a&gt; is using a NLog feature that will automatically load and execute binaries to inject his own code in Escape from Tarkov, the README is worth a read: &lt;a href="https://t.co/qSqhBc3Dsd"&gt;https://t.co/qSqhBc3Dsd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jb Evain (&amp;#64;jbevain) &lt;a href="https://twitter.com/jbevain/status/1469389090525114375?ref_src=twsrc%5Etfw"&gt;December 10, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;NLog にはアセンブリーと同じディレクトリーの NLog で始まる名前のアセンブリーを自動で読み込むという機能があり、改変なしでコードを注入するのに使用できてしまうという話(アプリケーション自体の改ざんをチェックしていても追加で読まれてしまう)。&lt;/p&gt;
&lt;!-- https://twitter.com/msdevjp/status/1468905769173143552?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;【完全に人間翻訳されたドキュメントのお知らせ｜ASP .NET 】&lt;br&gt;皆さまからのフィードバックをもとに、一部機械翻訳だった「ASP .NET ドキュメント」が、完全に人間による翻訳になりました！&lt;br&gt;自己学習の際にはぜひご活用ください。&lt;br&gt;&lt;br&gt;▼ドキュメントを読む&lt;a href="https://t.co/tNhqwBXBpj"&gt;https://t.co/tNhqwBXBpj&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/MSDocsJP?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#MSDocsJP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Microsoft Tech (&amp;#64;msdevjp) &lt;a href="https://twitter.com/msdevjp/status/1468905769173143552?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ASP.NET のドキュメントが完全に人間による翻訳になったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1470772350450819082?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;With .NET 6 apps, you can now get the # of bytes each thread has allocated so far using the new debugger pseudovariables “$threadSmallObjectHeapBytes and $threadUserOldHeapBytes”&lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/VS2022?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VS2022&lt;/a&gt; &lt;a href="https://t.co/Po0VAIfU5f"&gt;pic.twitter.com/Po0VAIfU5f&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1470772350450819082?ref_src=twsrc%5Etfw"&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 アプリケーションを Visual Studio でデバッグ中に &lt;code&gt;$threadSmallObjectHeapBytes&lt;/code&gt; と &lt;code&gt;$threadUserOldHeapBytes&lt;/code&gt; 擬似変数というスレッドでアロケートしたバイト数を確認できるというテクニック。&lt;/p&gt;
&lt;!-- https://twitter.com/wieslawsoltes/status/1470340515623276546?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Webassembly application written using C#/XAML .NET 6 using &lt;a href="https://twitter.com/hashtag/AvaloniaUI?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AvaloniaUI&lt;/a&gt; framework running on the web - total download size 8.4 MB ! &lt;a href="https://t.co/78jC6hDz2w"&gt;pic.twitter.com/78jC6hDz2w&lt;/a&gt;&lt;/p&gt;&amp;mdash; Wiesław Šoltés (&amp;#64;wieslawsoltes) &lt;a href="https://twitter.com/wieslawsoltes/status/1470340515623276546?ref_src=twsrc%5Etfw"&gt;December 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Avalonia UI 向けのノードエディターのデモアプリを WebAssembly で動かせたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1471646768656154624?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;2/2 The most important question is - will it run DOOM as a .NET app? Yes it will. Source in this repo: &lt;a href="https://t.co/lm1R6l5uqW"&gt;https://t.co/lm1R6l5uqW&lt;/a&gt; &lt;a href="https://t.co/GVM7qALgss"&gt;pic.twitter.com/GVM7qALgss&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1471646768656154624?ref_src=twsrc%5Etfw"&gt;December 17, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Microsoft Visual C++ のコンパイラー &lt;code&gt;cl&lt;/code&gt; コマンドでは &lt;code&gt;/clr&lt;/code&gt; オプションをつけることで C++ のコードを C++/CLI としてコンパイルできるが、隠しオプションを使うことで C++ の代わりに C 言語のコードを .NET アプリケーションとしてコンパイルできるので DOOM を動かしたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="net-number-values-such-as-positive-and-negative-infinity-cannot-be-written-as-valid-json.issue-48926-dotnetruntime"&gt;.NET number values such as positive and negative infinity cannot be written as valid JSON. · Issue #48926 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/48926"&gt;https://github.com/dotnet/runtime/issues/48926&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json で &lt;code&gt;double.PositiveInfinity&lt;/code&gt;/&lt;code&gt;double.NegativeInfinity&lt;/code&gt; をシリアライズしようとすると例外がでるという Issue。&lt;/p&gt;
&lt;p&gt;JSON の仕様上表現できないためそのような挙動となっている。&lt;code&gt;JsonNumberHandling.AllowNamedFloatingPointLiterals&lt;/code&gt; をオプションに渡すことで回避できるがその場合は単に文字列として出力される。&lt;/p&gt;
&lt;h3 id="add-array.getmaxlengtht-by-huoyaoyuan-pull-request-43301-dotnetruntime"&gt;Add Array.GetMaxLength&amp;lt;T&amp;gt; by huoyaoyuan · Pull Request #43301 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/43301"&gt;https://github.com/dotnet/runtime/pull/43301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Array の最大長を取得するメソッドを追加する PR。&lt;/p&gt;
&lt;p&gt;元々バイト配列は &lt;code&gt;0X7FFFFFC7&lt;/code&gt;、それ以外は &lt;code&gt;0X7FEFFFFF&lt;/code&gt; が最大長だったので一貫した最大値を取る方法がほしいという話だった。ところが将来的にパフォーマンスに有利に働かせられるのではとその制限を残してきていたが、そういったこともなさそうなので &lt;code&gt;0X7FFFFFC7&lt;/code&gt; に統一されることになり、メソッドではなく &lt;code&gt;Array.MaxLength&lt;/code&gt; として定数で公開されることになった。&lt;/p&gt;
&lt;h3 id="reimplement-the-concurrency-limiter-middleware-to-use-the-new-abstractions-implementations-by-tratcher-pull-request-39040-dotnetaspnetcore"&gt;Reimplement the concurrency limiter middleware to use the new abstractions &amp;amp; implementations by Tratcher · Pull Request #39040 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/39040"&gt;https://github.com/dotnet/aspnetcore/pull/39040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Concurrency Limiter ミドルウェアを新しい Rate Limiting API に置き換えるという PR。&lt;/p&gt;
&lt;h3 id="add-constantexpectedattribute-by-wzchua-pull-request-62436-dotnetruntime"&gt;Add ConstantExpectedAttribute by wzchua · Pull Request #62436 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/62436"&gt;https://github.com/dotnet/runtime/pull/62436&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メソッドの引数が受け取る値が定数であることを期待することを明示するマーカー属性を追加する PR。&lt;/p&gt;
&lt;p&gt;これは Intrisics なメソッドの場合、定数が渡っていることを期待している場合があるので Analzyer などで早期に間違いを発見したいというところから来ている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/33771"&gt;Pass constants to parameters marked as [ConstantExpected] · Issue #33771 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="strange-regex-performance-in.net-5-issue-62902-dotnetruntime"&gt;Strange RegEx performance in .NET 5 · Issue #62902 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/62902"&gt;https://github.com/dotnet/runtime/issues/62902&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正規表現のパフォーマンスが .NET Core 3.1, .NET 5, .NET 6 で比較すると .NET 5 だけ良いので変ではという Issue。&lt;/p&gt;
&lt;p&gt;これは .NET 5 で最適化が入ったが特定のパターンで期待した結果とならないのでロールバックしたという話(つまり .NET 5 の正規表現だけ結果が異なる場合がある)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/56721"&gt;Regex: different result for Regex.Match in .NET 5.0 and .NET Framework 4.7.2 · Issue #56721 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="report-error-if-record-struct-constructor-calls-default-parameterless-constructor-by-cston-pull-request-58339-dotnetroslyn"&gt;Report error if 'record struct' constructor calls default parameterless constructor by cston · Pull Request #58339 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/58339"&gt;https://github.com/dotnet/roslyn/pull/58339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;record struct&lt;/code&gt; にコンストラクターを定義した場合 &lt;code&gt;this&lt;/code&gt; でコンストラクターを呼び出すようにエラーが出るが、&lt;code&gt;this()&lt;/code&gt; とすると &lt;code&gt;InvalidProgramException&lt;/code&gt; がスローされてしまう問題を修正する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/58328"&gt;System.InvalidProgramException when constructing a record struct with parameter list and calling the default constructor · Issue #58328 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-10: dot.net in Japanese and Simplified Chinese, ReSharper &amp; Rider 2021.3</title>
			<link>/2021/12/10/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/10/updates</guid>
			<pubDate>Fri, 10 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;.NET の公式サイトである &lt;a href="https://dot.net/"&gt;dot.net&lt;/a&gt; が日本語と簡体字に対応したそうです。まだすべてがすべて対応しきれていないとのことですが、大部分が日本語化されているようです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-website-translation-updates/"&gt;Announcing dot.net in Japanese and Simplified Chinese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/uikou/items/85bb9d445a5c7ef6c17f"&gt;.NET のページが日本語化されました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/portable-object-localization?view=aspnetcore-6.0"&gt;ASP.NET Core で Portable Object のローカライズを構成する | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;ReSharper と Rider の 2021.3 がリリースされました。&lt;/p&gt;
&lt;p&gt;どちらも .NET 6 / C# 10 の対応となるリリースで、特に Rider は macOS などでの開発には欠かせないものだけにリリースを待ち望んでいた方も多いかもしれません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/08/resharper-2021-3/"&gt;ReSharper 2021.3 Brings Visual Studio 2022 Support, More C# 10 Features, and Improved Support for Nullable Reference Types and C#! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/08/rider-2021-3-released/"&gt;Rider 2021.3: Support for .NET 6 SDK, Redesigned Main Toolbar and Debug Tab, and New Problems View Tab | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing-dot.net-in-japanese-and-simplified-chinese"&gt;Announcing dot.net in Japanese and Simplified Chinese&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-website-translation-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-website-translation-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の公式サイト dot.net が日本語と簡体字に対応した。&lt;/p&gt;
&lt;p&gt;記事では実際のローカライズにあたっての実装についても触れている。ローカライズの実装はいくつかのフェーズに分かれて行われたとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フェーズ1: サイトを ASP.NET Core Razor Pages のローカライズの仕組みを使用して多言語対応する&lt;/li&gt;
&lt;li&gt;フェーズ2: 各言語の Portable Object ファイルで用意して Orchard Core を使用して適用する&lt;/li&gt;
&lt;li&gt;フェーズ3: サイトでカルチャを検出し、適切に振り分ける仕組みを用意する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現時点ではローカライズが完全ではない部分もあるので今後拡充していく予定であり、もしサイトの動作に問題があるようであればフィードバックしてほしいとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/uikou/items/85bb9d445a5c7ef6c17f"&gt;.NET のページが日本語化されました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/portable-object-localization?view=aspnetcore-6.0"&gt;ASP.NET Core で Portable Object のローカライズを構成する | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2021.3-brings-visual-studio-2022-support-more-c-10-features-and-improved-support-for-nullable-reference-types-and-c-the.net-tools-blog"&gt;ReSharper 2021.3 Brings Visual Studio 2022 Support, More C# 10 Features, and Improved Support for Nullable Reference Types and C#! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/08/resharper-2021-3/"&gt;https://blog.jetbrains.com/dotnet/2021/12/08/resharper-2021-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2021.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper 2021.3 では次の新機能と改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2022 のサポート&lt;/li&gt;
&lt;li&gt;C# 10 に関する機能&lt;/li&gt;
&lt;li&gt;Nullable reference types のサポートの改善&lt;/li&gt;
&lt;li&gt;C# コード解析に関する全般的な改善&lt;/li&gt;
&lt;li&gt;継承に関するナビゲーションとユーザー定義の暗黙的変換に対する Find Usages 等&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LanguageInjection&lt;/code&gt; 属性によるメンバー等に対するコード補完の有効化&lt;/li&gt;
&lt;li&gt;Copy Code Reference のリデザイン
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/10/11/copy-code-reference-in-resharper-and-rider-2021-3-eap/"&gt;Copy Code Reference in ReSharper and Rider 2021.3 EAP | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AnalyzerConfig のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReSharper C++
&lt;ul&gt;
&lt;li&gt;C++ 20 や Unreal Engine クラスのサポートなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rider-2021.3-support-for.net-6-sdk-redesigned-main-toolbar-and-debug-tab-and-new-problems-view-tab-the.net-tools-blog"&gt;Rider 2021.3: Support for .NET 6 SDK, Redesigned Main Toolbar and Debug Tab, and New Problems View Tab | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/08/rider-2021-3-released/"&gt;https://blog.jetbrains.com/dotnet/2021/12/08/rider-2021-3-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2021.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Rider 2021.3 では次の新機能と改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 6 のサポートとホットリロード
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/10/25/hot-reload-for-net-6-in-rider-2021-3/"&gt;Hot Reload for .NET 6 in Rider 2021.3 | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/02/how-rider-hot-reload-works-under-the-hood/"&gt;How Rider Hot Reload Works Under the Hood | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新しい Run/Debug ウィジェットを持つリデザインされたメインツールバー&lt;/li&gt;
&lt;li&gt;デバッグ体験の向上&lt;/li&gt;
&lt;li&gt;Problems View ツールウィンドウの追加&lt;/li&gt;
&lt;li&gt;コード解析のアップデート
&lt;ul&gt;
&lt;li&gt;C# 10 に関する機能&lt;/li&gt;
&lt;li&gt;Nullable reference types のサポートの改善&lt;/li&gt;
&lt;li&gt;SQL 言語のサポートの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unity 向けのアップデート: Assembly Definition ファイルのサポート&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;Apple Silicon のサポート&lt;/li&gt;
&lt;li&gt;Xamarin 向けの Plist エディターでの Xcode 標準のスキームのサポートの向上&lt;/li&gt;
&lt;li&gt;.NET Framework プロジェクトでの NuGet パッケージのバインディングリダイレクトの生成&lt;/li&gt;
&lt;li&gt;F# 6 のサポート&lt;/li&gt;
&lt;li&gt;Reformat and Cleanup on Save 設定の追加&lt;/li&gt;
&lt;li&gt;新しい Bookmark ウィンドウ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-ix.net-v5.1.0-dotnetreactive"&gt;Release Ix.NET v5.1.0 · dotnet/reactive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/reactive/releases/tag/ixnet-v5.1.0"&gt;https://github.com/dotnet/reactive/releases/tag/ixnet-v5.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ix.NET (Interactive Extensions) の 5.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 の LINQ に追加された Min/Max/MinBy/MaxBy といったオペレーターが .NET 6 向けのビルドには含まれないようになるといった対応が行われている。&lt;/p&gt;
&lt;h3 id="aws-microservice-extractor-for.net"&gt;AWS Microservice Extractor for .NET のご紹介&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/11/aws-microservice-extractor-net/"&gt;https://aws.amazon.com/jp/about-aws/whats-new/2021/11/aws-microservice-extractor-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET (.NET Framework) のアプリケーションを解析し、マイクロサービス化された形に再構成などを行う AWS Microservice Extractor for .NET というツールがリリースされた。&lt;/p&gt;
&lt;p&gt;このツールは既存のアプリケーションを解析し、各種ロジックの呼び出しを抽出してリモート呼び出しの形にするための API/プロキシーを生成するといったアプリケーションを分割してデプロイできる形にすることを支援する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/jp/microservice-extractor/"&gt;.NET Microservices – AWS Microservice Extractor for .NET –  Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.classmethod.jp/articles/asp-net-modernization-microservice-extractor/"&gt;モノリシックなASP.​NETアプリケーションのモダナイゼーションを支援する AWS Microservice Extractor for .​NETを使ってみた #reinvent | DevelopersIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/gsaadeh/hello-aws-microservice-extractor-for-net-lets-work-on-that-legacy-app-27p8"&gt;Hello AWS Microservice Extractor for .NET, Let's Work on that Legacy App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-v6.0.1-npgsqlnpgsql"&gt;Release v6.0.1 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.1"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 6.0.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;新機能の追加はなくバグ修正といくつかの改善が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="system.text.json-on.net-6"&gt;System.Text.Json を試してみる on .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/system-text-json-on-dotnet6"&gt;https://zenn.dev/okazuki/articles/system-text-json-on-dotnet6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の System.Text.Json をソースジェネレーターを含めて使用する手順についての記事。&lt;/p&gt;
&lt;h3 id="dotnet-format-ci-tech.guitarrapc.com"&gt;dotnet format を CI で行って継続的にコードフォーマットしていく - tech.guitarrapc.cóm&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.guitarrapc.com/entry/2021/12/07/232921"&gt;https://tech.guitarrapc.com/entry/2021/12/07/232921&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のプロジェクトに対して CI で継続的にコードフォーマットをかける方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;dotnet format&lt;/code&gt; を GitHub Actions によって定期的に実行し、Pull request の形にするといった手法を解説している。&lt;/p&gt;
&lt;h3 id="c-10.0-activator"&gt;【C# 10.0 関連】引数なしコンストラクターの Activator バグ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/activator-net48"&gt;https://ufcpp.net/blog/2021/12/activator-net48&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10 では引数なしコンストラクターを持つ構造体を定義できるようになったが、.NET Framework 4.x ではその構造体を Activator によってインスタンスを生成すると正しく動作しないことがあることについての記事。&lt;/p&gt;
&lt;h3 id="net-xnt304-reinvent-developersio"&gt;[レポート] 用途に合わせたデータベースを使って.NETアプリケーションをモダナイズする #XNT304 #reinvent | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/reinvent-2021-report-xnt304/"&gt;https://dev.classmethod.jp/articles/reinvent-2021-report-xnt304/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS で使用可能なデータベースサービスと .NET アプリケーションの組み合わせについての re:Invent のセッションのまとめ記事。&lt;/p&gt;
&lt;h3 id="whats-new-for-grpc-in.net-6"&gt;What's new for gRPC in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/grpc-in-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/grpc-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 での gRPC の新機能についての記事。&lt;/p&gt;
&lt;p&gt;記事ではクライアントロードバランシングやリトライ、Protobuf のパフォーマンス向上、ダウンロード速度の向上、HTTP/3 の対応などについて触れている。なお、記事では触れていないがクライアントロードバランシングは現時点ではリリースされていない。&lt;/p&gt;
&lt;h3 id="githubsensitive-data"&gt;GitHub上のsensitive dataを削除するための手順と道のり&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://engineering.mercari.com/blog/entry/20211207-removing-sensitive-data-from-github/"&gt;https://engineering.mercari.com/blog/entry/20211207-removing-sensitive-data-from-github/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub に上げてしまったセンシティブな情報を削除するための手順とその中で得られた知見やサポートとのやり取りなどを解説している記事。&lt;/p&gt;
&lt;h3 id="pipelines.net-io-api-part-1-qiita"&gt;【翻訳記事】Pipelines - .Net の新しい IO API のツアーガイド, part 1 - - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hitoshi44/items/7a05c607a53dcad704f9"&gt;https://qiita.com/hitoshi44/items/7a05c607a53dcad704f9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.IO.Pipelines に関する Mark Gravell 氏のガイド記事(2018年)の翻訳。&lt;/p&gt;
&lt;p&gt;System.IO.Pipelines がどういったもので何ができるのかといった話が書かれている。ちなみにこの翻訳記事は Nim Advent Calendar 2021 の記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.marcgravell.com/2018/07/pipe-dreams-part-1.html"&gt;Code, code and more code.: Pipe Dreams, part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wpf-microsoft-store-be"&gt;WPF アプリを Microsoft Store に申請・登録する（開発者登録編） : 翔星 Be ランド日記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://shinta0806be.ldblog.jp/archives/10462152.html"&gt;https://shinta0806be.ldblog.jp/archives/10462152.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションを Microsoft Store でリリースするための申請と登録の手順に関する記事。&lt;/p&gt;
&lt;h3 id="regional-indicator"&gt;Regional Indicator (国旗絵文字)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/12/regional-indicator/"&gt;https://ufcpp.net/blog/2021/12/regional-indicator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;混沌としている国旗絵文字の仕様に関する記事。&lt;/p&gt;
&lt;h3 id="aws.net-xnt401-reinvent-developersio"&gt;[レポート] AWSで高性能の.NETサーバーレスアーキテクチャを構築する #XNT401 #reinvent | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/reinvent-2021-report-xnt401/"&gt;https://dev.classmethod.jp/articles/reinvent-2021-report-xnt401/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS の Lambda で .NET を使用した際にパフォーマンスを向上させるためのポイントを解説する re:Invent のセッションのまとめ記事。&lt;/p&gt;
&lt;h3 id="net6http3-qiita"&gt;.NET6でHTTP/3を扱ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nao-a/items/15de66d1d05146a04506"&gt;https://qiita.com/nao-a/items/15de66d1d05146a04506&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 環境で HTTP/3 を有効化し、実際にクライアントとサーバーを用意してアクセスするまでの手順をまとめた記事。&lt;/p&gt;
&lt;h3 id="cffmepg-api1-qiita"&gt;【C#】FFmepg APIで動画プレーヤーを１からつくってみる(前編) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/78956f5906538b718ffb"&gt;https://qiita.com/Kujiro/items/78956f5906538b718ffb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FFmpeg の API を直接使用して動画をデコードして WPF 上で再生できるようにするまでの手順とコードを解説した記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/Kujiro/items/932a4372dbc597ce4d52"&gt;【C#】FFmepg APIで動画プレーヤーを１からつくってみる(後編) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-asyncawait"&gt;(C#) async/await を理解する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2021/12/05/072126"&gt;https://ikorin2.hatenablog.jp/entry/2021/12/05/072126&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# の async/await の処理の流れについて主に UniTask (Unity) の視点で解説した記事。&lt;/p&gt;
&lt;h3 id="vscode.net-interactive-powerfx-qiita"&gt;VSCode + .NET Interactive で PowerFx を体験してみよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/5e34b341e7418dcbea72"&gt;https://qiita.com/karuakun/items/5e34b341e7418dcbea72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Code 上の .NET Interactive で PowerFx を動かして試してみるという記事。&lt;/p&gt;
&lt;h3 id="neue-cc.net-6anglesharpc"&gt;neue cc - .NET 6とAngleSharpによるC#でのスクレイピング技法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://neue.cc/2021/12/04.html"&gt;https://neue.cc/2021/12/04.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Web サイトをスクレイピングするにあたって AngleSharp の使用方法についての解説記事。&lt;/p&gt;
&lt;p&gt;ウォッチウィンドウのような実装時のデバッグ手法といった点にも触れている。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;【C#】知られざる比較の高速化戦略 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/e687b089a0348d989f1b"&gt;https://qiita.com/Kujiro/items/e687b089a0348d989f1b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String (文字列)の比較速度についての記事。&lt;/p&gt;
&lt;p&gt;記事では純粋な for で比較するところから .NET ランタイムの文字列比較実装のパフォーマンスに近づけるために、どのような実装が行われているのかを確認しながら深掘りしている。&lt;/p&gt;
&lt;h3 id="pythonnet-qiita"&gt;pythonnetについて - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ppza53893/items/ea129ce7c6dd90ce120e"&gt;https://qiita.com/ppza53893/items/ea129ce7c6dd90ce120e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python から .NET Framework (または Mono) を呼び出すためのライブラリーを紹介している記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-december-2021-the.net-tools-blog"&gt;.NET Annotated Monthly | December 2021 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/09/net-annotated-monthly-december-2021/"&gt;https://blog.jetbrains.com/dotnet/2021/12/09/net-annotated-monthly-december-2021/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の記事や情報のまとめの12月号。&lt;/p&gt;
&lt;h3 id="net-6-vs.net-4.8-gc-stats-64-shorter-max-gc-pause-times-due-to-1-letter-removed-in-runtime"&gt;.NET 6 vs .NET 4.8 GC stats - ~64% shorter max GC pause times (due to 1 letter removed in runtime)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nietras.com/2021/11/26/dotnet-6-vs-4-8-gc-stats/"&gt;https://nietras.com/2021/11/26/dotnet-6-vs-4-8-gc-stats/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 と .NET Framework 4.8 での GC の比較で .NET 6 では性能が改善されているが、特に停止時間のワーストケースがとても小さくなっていることについての記事。&lt;/p&gt;
&lt;p&gt;これはハイジャックされたスレッドから戻ってくることに関連したパラメータを1文字変更した(10ms→1ms)ことで早期に戻れるようになったのが影響しているとのこと。&lt;/p&gt;
&lt;h3 id="dont-do-that-do-this-the.net-6-edition"&gt;Don't Do That, Do This: The .NET 6 Edition&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.daveabrock.com/2021/12/08/do-this-not-that-the-net-6-edition/"&gt;https://www.daveabrock.com/2021/12/08/do-this-not-that-the-net-6-edition/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 ですべきでないこと、すべきことをまとめた記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大きなコレクションをチャンクにする場合には自前処理ではなく LINQ の Chunk を使用する&lt;/li&gt;
&lt;li&gt;日付が必要なだけであれば DateOnly を使用する&lt;/li&gt;
&lt;li&gt;HTTP のログを取るには独自のミドルウェアではなく組み込みの AddHttpLogging を使用する&lt;/li&gt;
&lt;li&gt;Blazor では ErrorBoundary を使用する&lt;/li&gt;
&lt;li&gt;Kestrel のログを制御して吐くようにするのであればサブカテゴリーを使用する&lt;/li&gt;
&lt;li&gt;file-scoped namespaces や拡張プロパティパターンを使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="eventcounter-qiita"&gt;EventCounterについて - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/0b68e03f82ae214bf572"&gt;https://qiita.com/skitoy4321/items/0b68e03f82ae214bf572&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の組み込みの統計情報収集の仕組みの EventCounter についての解説記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-identity-2fa-with-google-authenticator"&gt;ASP.NET Core Identity 2FA with Google Authenticator&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mohammedahmed/aspnet-core-identity-2fa-with-google-authenticator-i13"&gt;https://dev.to/mohammedahmed/aspnet-core-identity-2fa-with-google-authenticator-i13&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity で二要素認証 (Google Authenticator) を使用する実装についての記事。&lt;/p&gt;
&lt;h3 id="creating-an-incremental-generator-creating-a-source-generator-part-1"&gt;Creating an incremental generator: Creating a source generator - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/"&gt;https://andrewlock.net/creating-a-source-generator-part-1-creating-an-incremental-source-generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 / Visual Studio 2022 でサポートされた Incremental Source Generator (&lt;code&gt;IIncrementalGenerator&lt;/code&gt;) を実装する方法についてステップバイステップで解説している記事。&lt;/p&gt;
&lt;h3 id="dotnet-6.0nativeaot-qiita"&gt;dotnet-6.0におけるNativeAOTについて - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaju/items/d5a771f3f00672aa19ff"&gt;https://qiita.com/yaju/items/d5a771f3f00672aa19ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 での NativeAOT (Experimetal) を使用してネイティブバイナリーを出力する手順について解説している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="rickbrewpointertoolkit-provides-structs-that-wrap-pointers-and-unsafe-methods-for-converting-to-and-from-ref-pointers-of-any-type"&gt;rickbrew/PointerToolkit: Provides structs that wrap pointers, and Unsafe methods for converting to and from &lt;code&gt;ref&lt;/code&gt; pointers of any type.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/rickbrew/PointerToolkit"&gt;https://github.com/rickbrew/PointerToolkit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ポインターのラッパーやユーティリティーを提供するライブラリー。Paint.NET で COM との相互運用に利用するために用意したライブラリーとのこと。&lt;/p&gt;
&lt;h3 id="vzarytovskiiinteractive-ilkernel-il-kernel-for.net-interactive"&gt;vzarytovskii/interactive-ilkernel: IL Kernel for .NET Interactive&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/vzarytovskii/interactive-ilkernel"&gt;https://github.com/vzarytovskii/interactive-ilkernel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Interactive で MSIL を扱えるようにするカーネル。&lt;/p&gt;
&lt;!-- https://twitter.com/vzarytovskii/status/1467870333642453004?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Is writing IL in .NET Interactive exactly what you wanted your whole life? &lt;br&gt;Good news! Now you can (very much experimental though, highlighting, data sharing, diagnostics are still TBD). &lt;br&gt;Based on amazing work by &lt;a href="https://twitter.com/konradkokosa?ref_src=twsrc%5Etfw"&gt;&amp;#64;konradkokosa&lt;/a&gt; (Mobius.ILASM):&lt;a href="https://t.co/8INILatD6N"&gt;https://t.co/8INILatD6N&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/zdeYiByD79"&gt;pic.twitter.com/zdeYiByD79&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vlæd Za (&amp;#64;vzarytovskii) &lt;a href="https://twitter.com/vzarytovskii/status/1467870333642453004?ref_src=twsrc%5Etfw"&gt;December 6, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="vincenth-netcsharpformarkup-build.net-browser-native-ui-in-declarative-c"&gt;VincentH-Net/CSharpForMarkup: Build .NET browser / native UI in declarative C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/VincentH-Net/CSharpForMarkup"&gt;https://github.com/VincentH-Net/CSharpForMarkup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Declarative な形で WinUI や UnoPlatform 向けの UI を組み立てることのできるライブラリー。&lt;/p&gt;
&lt;!-- https://twitter.com/vincenth_net/status/1466430908572094474?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In case you missed the announcement of&lt;br&gt;📢C# Markup 2 for WinUI + Uno Platform&lt;br&gt;at UNOCONF, here it is:&lt;a href="https://t.co/2ukYE96JV7"&gt;https://t.co/2ukYE96JV7&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/CSharpForMarkup?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CSharpForMarkup&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WinUI3?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WinUI3&lt;/a&gt; &lt;a href="https://twitter.com/UnoPlatform?ref_src=twsrc%5Etfw"&gt;&amp;#64;UnoPlatform&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/unoconf?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#unoconf&lt;/a&gt; &lt;a href="https://t.co/bG5tN8xpWx"&gt;pic.twitter.com/bG5tN8xpWx&lt;/a&gt;&lt;/p&gt;&amp;mdash; VincentH.NET (&amp;#64;vincenth_net) &lt;a href="https://twitter.com/vincenth_net/status/1466430908572094474?ref_src=twsrc%5Etfw"&gt;December 2, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="c-c"&gt;C# の歴史 - C# ガイド&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/csharp-version-history"&gt;https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/csharp-version-history&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 9 までの歴史をなぞっていくドキュメント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/cezary_piatek/status/1467104498493575169?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;TIL: Templates installed with `dotnet new --install` are available in the &lt;a href="https://twitter.com/hashtag/VisualStudio?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#VisualStudio&lt;/a&gt;.  &lt;br&gt;&lt;br&gt;The really cool thing is the auto-generated UI for filling template parameters&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetcore&lt;/a&gt; &lt;a href="https://t.co/ZCVsNy5noC"&gt;pic.twitter.com/ZCVsNy5noC&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🛠 Cezary Piatek (&amp;#64;cezary_piatek) &lt;a href="https://twitter.com/cezary_piatek/status/1467104498493575169?ref_src=twsrc%5Etfw"&gt;December 4, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio で &lt;code&gt;dotnet new --install&lt;/code&gt; でインストールされたテンプレートからプロジェクトを作ると、テンプレートパラメーターを設定するための UI が自動で組み立てられるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/neuecc/status/1466673448202424322?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;.NET 6のASP .NET Minimal APIをLINQPadで立てると、さっくりとテスト用のエコーサーバーが作れて便利。LINQPadでの ASP .NET Coreの有効化はQuery Propertiesの右下のチェックボックスから（デフォはオフ）。Set as default for new queriesにはよく使うNuGetライブラリも登録しておくとより便利。 &lt;a href="https://t.co/vm8tleAnx5"&gt;pic.twitter.com/vm8tleAnx5&lt;/a&gt;&lt;/p&gt;&amp;mdash; neuecc (&amp;#64;neuecc) &lt;a href="https://twitter.com/neuecc/status/1466673448202424322?ref_src=twsrc%5Etfw"&gt;December 3, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;LINQPad で ASP.NET Core の Minimal API を使用する方法とデフォルトパッケージを設定する方法。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1468927628518244355?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Pinnable object pattern in C# / .NET is this neat little trick to pin (fix) almost any kind of object without having to specify its concrete bitable field to pin on.&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/fgkbl5hja5"&gt;pic.twitter.com/fgkbl5hja5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1468927628518244355?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;あらゆるオブジェクトを無理やりピン(固定)するテクニック。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-proposal-implementation-directoryinfo.copy-directory.copy-by-deeprobin-pull-request-62375-dotnetruntime"&gt;API proposal implementation: DirectoryInfo.Copy / Directory.Copy by deeprobin · Pull Request #62375 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/62375"&gt;https://github.com/dotnet/runtime/pull/62375&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ディレクトリーをコピーする API を追加する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/60903"&gt;[API Proposal]: DirectoryInfo.Copy / Directory.Copy · Issue #60903 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="support-for-devirtualizing-array-interface-methods-by-andyayersms-pull-request-62497-dotnetruntime"&gt;Support for devirtualizing array interface methods by AndyAyersMS · Pull Request #62497 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/62497"&gt;https://github.com/dotnet/runtime/pull/62497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配列のインターフェースアクセスに対する devirtualize をサポートする PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/62457"&gt;Array interface method devirtualization · Issue #62457 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="incremental-generator-work-tracking-api-implementation-by-jkoritzinsky-pull-request-55469-dotnetroslyn"&gt;Incremental Generator Work Tracking API Implementation by jkoritzinsky · Pull Request #55469 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/55469"&gt;https://github.com/dotnet/roslyn/pull/55469&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incremental Source Generator のステップ間で増分などの状態を追跡できるようにする仕組み。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/issues/54832"&gt;Incremental Generator Work Tracking APIs · Issue #54832 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-unnecessary-unicode-control-characters-by-omajid-pull-request-38900-dotnetaspnetcore"&gt;Remove unnecessary unicode control characters by omajid · Pull Request #38900 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/38900"&gt;https://github.com/dotnet/aspnetcore/pull/38900&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の一部のソースコードに紛れ込んでいる Unicode 制御文字を削除する PR。&lt;/p&gt;
&lt;p&gt;最近 Unicode 制御文字によってコードに脆弱性を埋め込めるといった話題がでていて、GitHub 上でも該当ファイルに警告が出ている。&lt;/p&gt;
&lt;h3 id="s.io.stringreader-use-readonlyspan.indexofany-in-readline-for-performance-by-nietras-pull-request-60463-dotnetruntime"&gt;S.IO.StringReader: Use ReadOnlySpan.IndexOfAny in ReadLine() for performance by nietras · Pull Request #60463 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/60463"&gt;https://github.com/dotnet/runtime/pull/60463&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.IO.StringReader での ReadLine で &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;.IndexOfAny&lt;/code&gt; を使うようにしてパフォーマンスを改善したという PR。&lt;/p&gt;
&lt;h3 id="add-support-for-per-request-inputoutput-results-cache-files-by-xoofx-pull-request-7121-dotnetmsbuild"&gt;Add support for per request input/output results cache files by xoofx · Pull Request #7121 · dotnet/msbuild&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/msbuild/pull/7121"&gt;https://github.com/dotnet/msbuild/pull/7121&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ファイルの I/O 周りをキャッシュして並列化できるようにしたところ100プロジェクトのビルドが3～10倍ぐらいまで高速化できたというご提案 PR。&lt;/p&gt;
&lt;!-- https://twitter.com/xoofx/status/1466767515208593414?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I have further improved msbuild by forking it and making it possible to use input/output caches on msbuild nodes. It compiles 100 interdependent C# projects in 3s while Visual Studio/raw msbuild would take a bit more than 7s to 10s, that&amp;#39;s pretty cool! 😎&lt;a href="https://t.co/qvO3lh1xu8"&gt;https://t.co/qvO3lh1xu8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1466767515208593414?ref_src=twsrc%5Etfw"&gt;December 3, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-12-03: Visual Studio 2022 v17.0.2, Cake v2.0.0, Uno Platform 4.0</title>
			<link>/2021/12/03/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/12/03/updates</guid>
			<pubDate>Fri, 03 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;今年も Advent Calendar の時期がやってきました。Qiita の Advent Calendar には .NET 関連ではいくつか作られています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/advent-calendar/2021/csharplang"&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/advent-calendar/2021/fsharp"&gt;F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/advent-calendar/2021/unity"&gt;Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/advent-calendar/2021/blazor"&gt;Blazor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/advent-calendar/2021/xamarin"&gt;Xamarin / MAUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/microsoft"&gt;日本マイクロソフトのサポートする Advent Calendar&lt;/a&gt;もあり今年は .NET 6 がメインテーマです。いくつかのカレンダーはまだ若干数枠があるようですので興味のある方は参加してみるとよさそうです。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-version-17.0.2"&gt;Visual Studio 2022 version 17.0.2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.0.2.0"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.0.2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;機能的な変更としては Python ワークロードが脆弱性対応のために 3.7.8 が削除され 3.9.7 となった。その他 Blazor/Razor の IntelliSense に関する問題などを含むバグ修正が行われた。&lt;/p&gt;
&lt;h3 id="cake-cake-v2.0.0-released"&gt;Cake - Cake v2.0.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuild.net/blog/2021/11/cake-v2.0.0-released"&gt;https://cakebuild.net/blog/2021/11/cake-v2.0.0-released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake 2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;主な変更点は下記の通りとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# 10 と .NET 6 の対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet&lt;/code&gt; エイリアスへの対応の改善&lt;/li&gt;
&lt;li&gt;GitHub Actions と Azure Pipelines の統合の改善&lt;/li&gt;
&lt;li&gt;.NET Framework と .NET Core の Cake runner の削除&lt;/li&gt;
&lt;li&gt;ターゲットフレームワークの更新&lt;/li&gt;
&lt;li&gt;Docker イメージの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cake 2.0 から .NET Framework と .NET Core 1.x, 2.x, 3.0 のサポートが削除され、.NET Core 3.1 以上が必要となっているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cakebuild.net/blog/2021/10/sunsetting-runners"&gt;Cake - Sunsetting of .NET Framework and .NET Core runners in Cake 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-uno-platform-4-0.four-major-components-added"&gt;Announcing Uno Platform 4-0. Four major components added.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/announcing-uno-platform-4-0-four-major-components-added/"&gt;https://platform.uno/blog/announcing-uno-platform-4-0-four-major-components-added/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.0 がアナウンスされた。&lt;/p&gt;
&lt;p&gt;Uno Platform 4.0 では新たに Visual Studio Code 統合、Figma 統合、Uno Platform Extensions、Uno Toolkit (UI Toolkit) の4つのプラットフォーム要素が追加となる。&lt;/p&gt;
&lt;p&gt;Visual Studio Code 統合は Visual Studio Code と GitHub Codespaces や GitPod での開発を可能とする拡張(プレビュー)。Windows, Linux, macOS を開発環境としてサポートし、XAML のコード補完やプレビューやホットリロードといった開発支援も提供する。&lt;/p&gt;
&lt;p&gt;Uno Platform Extensions は Microsoft Extensions (ロギング、ホスティング等) をベースとした形で Uno Platform の共通基盤を提供する。&lt;/p&gt;
&lt;p&gt;Figma 統合は Figma でデザインしたものを XAML としてエクスポートするための Figma プラグイン。&lt;/p&gt;
&lt;p&gt;Uno Toolkit は WinUI では標準で備わっていないようなコンポーネントを提供する。これには NavigationBar や TabBar といったものが含まれる。&lt;/p&gt;
&lt;p&gt;記事ではその他 Breaking Changes、Surface Duo や Android Foldable、Windows Community Toolkit for WinUI についても触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unoplatform/uno/releases/tag/4.0.7"&gt;Release 4.0.7 · unoplatform/uno&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-2.1.0-mysql-netmysqlconnector"&gt;Release 2.1.0 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.1.0"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySQLConnector 2.1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンではプールからのコネクションを開く際のパフォーマンスが2倍になったとのこと。ただし Amazon Aurora RDS では失敗する可能性があり、明示的に無効にする場合には &lt;code&gt;Pipelining = False;&lt;/code&gt; を Connection String に記述する必要がある。&lt;/p&gt;
&lt;p&gt;その他に MySQL 8.0 のクエリー属性のサポートの追加(8.0.23 以降またはプリペアードステートメントを使う場合は 8.0.26 以降が必要)、MySqlDecimal 型サポートの追加、&lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; のロギングでロガー名としてデフォルトで &lt;code&gt;MySqlConnector.&lt;/code&gt; プレフィックスをつけるようになった、などの改善が含まれている。&lt;/p&gt;
&lt;h3 id="resharper-2021.3-goes-beta-the.net-tools-blog"&gt;ReSharper 2021.3 Goes Beta! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/01/resharper-2021-3-beta/"&gt;https://blog.jetbrains.com/dotnet/2021/12/01/resharper-2021-3-beta/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2021.3 Beta がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper 2021.3 では C# 10 と Visual Studio 2022 の対応をはじめとして、幾つかの改善が行われている。今回 EAP から Beta となった。&lt;/p&gt;
&lt;h3 id="rider-2021.3-goes-beta-the.net-tools-blog"&gt;Rider 2021.3 Goes Beta | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/01/rider-2021-3-goes-beta/"&gt;https://blog.jetbrains.com/dotnet/2021/12/01/rider-2021-3-goes-beta/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2021.3 Beta がリリースされた。&lt;/p&gt;
&lt;p&gt;Rider 2021.3 では C# 10 と .NET 6 の対応、メインツールバーをはじめとする UI のリフレッシュ、デバッガーのアップデートなど様々な改善が行われている。ReSharper と同様に EAP から Beta となった。&lt;/p&gt;
&lt;h3 id="release-support-for-installation-of-multiple-versions-warnings-for-deprecated-versions-actionssetup-dotnet"&gt;Release Support for installation of multiple versions, warnings for deprecated versions · actions/setup-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/actions/setup-dotnet/releases/tag/v1.9.0"&gt;https://github.com/actions/setup-dotnet/releases/tag/v1.9.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions のアクション &lt;code&gt;actions/setup-dotnet&lt;/code&gt; の 1.9.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンから複数の .NET を一度にインストールできるようになった。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;- uses: actions/setup-dotnet&amp;#64;v1
  with:
    dotnet-version: | 
      3.1.x
      5.0.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また廃止されたバージョンをインストールした場合に警告を出力するようにもなったとのこと。&lt;/p&gt;
&lt;h3 id="clangsharp-and-llvmsharp-issue-184-dotnet-foundationprojects"&gt;ClangSharp and LLVMSharp · Issue #184 · dotnet-foundation/projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet-foundation/projects/issues/184"&gt;https://github.com/dotnet-foundation/projects/issues/184&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClanSharp と LLVMSharp のリポジトリーが Microsoft 配下から .NET Foundation 配下へと移管された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/ClangSharp"&gt;dotnet/ClangSharp: Clang bindings for .NET and Mono written in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/LLVMSharp"&gt;dotnet/LLVMSharp: LLVM bindings for .NET Standard written in C# using ClangSharp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-diagnostics-release-v6.0.257301-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.257301 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.257301"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.257301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断ツール v6.0.257301 がリリースされた。&lt;/p&gt;
&lt;p&gt;各種ツールにいくつかの改善が行われ、新たに &lt;code&gt;dotnet-dsrouter&lt;/code&gt; ツールが追加された。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-dsrouter&lt;/code&gt; は Android や iOS, tvOS といったデバイスで動作をはじめ、リモートで動作している .NET ランタイムに各種診断ツール (&lt;code&gt;dotnet-monitor&lt;/code&gt;, &lt;code&gt;dotnet-counter&lt;/code&gt; など) を接続するための通信転送ツール。各種診断ツールは IPC (Unix Domain Socket) を使用して接続するので &lt;code&gt;dotnet-dsrouter&lt;/code&gt; が IPC で待ち受けて、何らかの通信経路でクライアントと接続してデータを転送する仕組みを提供する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-dsrouter&lt;/code&gt; のドキュメントでは Android の .NET アプリケーションのトレースを &lt;code&gt;adb&lt;/code&gt; 経由でローカルコンピューターから吸い上げる方法などが書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dsrouter"&gt;dotnet-dsrouter - .NET | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release.net-5.0.12-dotnetefcore"&gt;Release .NET 5.0.12 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/releases/tag/v5.0.12"&gt;https://github.com/dotnet/efcore/releases/tag/v5.0.12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 に対応する Entity Framework Core 5 の更新バージョン 5.0.12 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 5 SDK とのバージョン合わせのリリースとなるが、1点だけバグ修正が 6.0 からバックポートされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/efcore/pull/26241"&gt;[5.0.x] Fix context pooling concurrency issue by roji · Pull Request #26241 · dotnet/efcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="targetframework-net5.0.net-6"&gt;TargetFramework net5.0 なコードを .NET 6 ランタイムで動かす&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/11/latestmajor/"&gt;https://ufcpp.net/blog/2021/11/latestmajor/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プロジェクトビルド時のターゲットフレームワークよりも上位のバージョンのランタイムで動かす RollForward についての解説記事。&lt;/p&gt;
&lt;p&gt;例えば .NET 5 でビルドされたアプリケーションを再コンパイルなしで .NET 6 のランタイムで動作させるといったことが可能になる。その際設定方法や注意点など。&lt;/p&gt;
&lt;h3 id="azure-functions-v4-dynamic-pgo-readytorun"&gt;Azure Functions v4 における Dynamic PGO と ReadyToRun の使い分け - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20211130/1638265857"&gt;https://blog.shibayan.jp/entry/20211130/1638265857&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions v4 での .NET 6 の Dynamic PGO と ReadyToRun の効果とその使い分けについての記事。&lt;/p&gt;
&lt;p&gt;Azure Functions という特性から踏まえた選択についてと実際の設定方法、効果の比較をしている。&lt;/p&gt;
&lt;h3 id="net-6linq-qiita"&gt;.NET 6でLINQに追加されたメソッド - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/RyotaMurohoshi/items/14efd4492ac14ee635cd"&gt;https://qiita.com/RyotaMurohoshi/items/14efd4492ac14ee635cd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された LINQ のメソッドを紹介している記事。&lt;/p&gt;
&lt;p&gt;新規に追加されたメソッドに加えて、SingleOrDefault/FirstOrDefault に追加されたオーバーロードについても触れている。&lt;/p&gt;
&lt;h3 id="deploy-a.net-api-to-heroku-through-github-actions"&gt;Deploy a .NET API to Heroku through GitHub Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/cristofima/deploy-a-net-api-to-heroku-through-github-actions-39fg"&gt;https://dev.to/cristofima/deploy-a-net-api-to-heroku-through-github-actions-39fg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で実装した API アプリケーションを GitHub Actions を使用して Heroku にデプロイする方法についての記事。&lt;/p&gt;
&lt;h3 id="validated-strongly-typed-ioptions"&gt;Validated Strongly Typed IOptions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/validated-strongly-typed-ioptions-400021f23136"&gt;https://medium.com/c-sharp-progarmming/validated-strongly-typed-ioptions-400021f23136&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extension.Configurations の &lt;code&gt;IOptions&lt;/code&gt; を使用する際に System.ComponentModel.DataAnnotations の属性を使用して、設定値のバリデーションを行うことについての記事。&lt;/p&gt;
&lt;h3 id="running-a.net-6-service-on-a-specific-port"&gt;Running a .NET 6 Service on a Specific Port&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jeremybytes.blogspot.com/2021/11/running-net-6-service-on-specific-port.html"&gt;https://jeremybytes.blogspot.com/2021/11/running-net-6-service-on-specific-port.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 / ASP.NET Core 6 でコードから指定したポートでアプリケーションを起動することについての記事。&lt;/p&gt;
&lt;p&gt;従来 &lt;code&gt;UseUrls&lt;/code&gt; を使用してバインドする URL を指定できたが、.NET 6 の WebApplicationBuilder の WebHost に対して &lt;code&gt;UseUrls&lt;/code&gt; を指定しても効果がない。代わりに &lt;code&gt;ConfigureKestrel&lt;/code&gt; で直接リッスンするポートを指定することで動作するとのこと。&lt;/p&gt;
&lt;h3 id="get-to-know-ef-core-6"&gt;Get to Know EF Core 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/get-to-know-ef-core-6/"&gt;https://devblogs.microsoft.com/dotnet/get-to-know-ef-core-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6 のお役立ち記事や動画のまとめ記事。&lt;/p&gt;
&lt;h3 id="uploading-files-with-asp.net-minimal-apis"&gt;Uploading files with ASP.NET Minimal APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/gsferreira/uploading-files-with-aspnet-minimal-apis-2036"&gt;https://dev.to/gsferreira/uploading-files-with-aspnet-minimal-apis-2036&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="reinvent-2021.net-amazon-web-services"&gt;re:Invent 2021 .NET セッション | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/news/net-at-reinvent-2021/"&gt;https://aws.amazon.com/jp/blogs/news/net-at-reinvent-2021/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon re:Invent 2021 (12/3 まで開催のオンラインイベント) での .NET セッションの紹介記事。&lt;/p&gt;
&lt;h3 id="datatable-on.net-6"&gt;DataTable からデータ抽出方法の性能比較 on .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/performance-of-datatable-on-dotnet"&gt;https://zenn.dev/okazuki/articles/performance-of-datatable-on-dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 での DataTable のパフォーマンスについての記事。&lt;/p&gt;
&lt;p&gt;意外にもベンチマークを取った多くのケースで .NET Framework 4.8 のほうがパフォーマンスが良いという結果となっている。&lt;/p&gt;
&lt;h3 id="unityc"&gt;UnityでC#のアセンブラを見る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://notnullvariable.com/2021/jit-asm-for-unity/"&gt;https://notnullvariable.com/2021/jit-asm-for-unity/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の Mono での JIT コンパイラーの JIT 結果を見るツールの紹介記事。&lt;/p&gt;
&lt;h3 id="net6c10-json-jsonnode-qiita"&gt;.NET6/C#10 で動的にJsonパースする標準クラス JsonNode - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/6dd97a99c5c46c14e0e4"&gt;https://qiita.com/hqf00342/items/6dd97a99c5c46c14e0e4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;動的に JSON をパースするライブラリーの比較記事。&lt;/p&gt;
&lt;p&gt;JsonNode, System.Text.Json, DynaJson, DynamicJson, Utf8Json, JmesPath.Net での比較がなされている。&lt;/p&gt;
&lt;h3 id="net6-asp.net-react-typescript-qiita"&gt;.NET6 ASP.NET + React + TypeScriptでリアルタイムチャットアプリを作る - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/raycho/items/45a4f2f929d8a21b2fc3"&gt;https://qiita.com/raycho/items/45a4f2f929d8a21b2fc3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で ASP.NET Core SignalR と React 及び TypeScript を使用したサンプルアプリケーションを実装したことについての記事。&lt;/p&gt;
&lt;h3 id="net-6-web-apis-with-openapi-typescript-client-generation"&gt;.NET 6 Web APIs with OpenAPI TypeScript Client Generation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;chrlschn/net-6-web-apis-with-openapi-typescript-client-generation-a743e7f8e4f5"&gt;https://medium.com/&amp;#64;chrlschn/net-6-web-apis-with-openapi-typescript-client-generation-a743e7f8e4f5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の OpenAPI サポートを通じて、API へのアクセスのための TypeScript のコード生成などを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="validating-json-with-schema-in.net"&gt;Validating JSON with schema in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;niteshsinghal85/validating-json-with-schema-in-net-7bdc02b0ef3c"&gt;https://medium.com/&amp;#64;niteshsinghal85/validating-json-with-schema-in-net-7bdc02b0ef3c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NJsonSchema を使用して JSON を JSON Schema で検証する方法についての記事。&lt;/p&gt;
&lt;h3 id="upgrading-a.net-5-startup-based-app-to.net-6-exploring.net-core-6-part-12"&gt;Upgrading a .NET 5 &amp;quot;Startup-based&amp;quot; app to .NET 6: Exploring .NET Core 6 - Part 12&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-6-part-12-upgrading-a-dotnet-5-startup-based-app-to-dotnet-6/"&gt;https://andrewlock.net/exploring-dotnet-6-part-12-upgrading-a-dotnet-5-startup-based-app-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 の Startup クラスをベースにしたアプリケーションを .NET 6 の WebApplicationBuilder ベースへと書き換える上でのポイントを解説している記事。&lt;/p&gt;
&lt;h3 id="xunit.nettrait-qiita"&gt;xunit.netで、テストに対して独自の属性を付ける(Trait) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/69d1444a1e30826ce4a8"&gt;https://qiita.com/skitoy4321/items/69d1444a1e30826ce4a8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xUnit で独自の属性を持つテストケースを収集して実行できる仕組みがあり、その独自の Trait の実装方法についての記事。&lt;/p&gt;
&lt;h3 id="introducing-the-new-razor-editor-in-visual-studio-2022"&gt;Introducing the new Razor editor in Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-the-new-razor-editor-in-visual-studio-2022/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-the-new-razor-editor-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Language Server Protocol (LSP) ベースとなった Visual Studio 2022 の Razor エディターについての記事。&lt;/p&gt;
&lt;p&gt;新しい Razor エディターで使用できるようになった機能を紹介している。ホットリロードや Live Share のサポートも新しいエディターによるものとのこと。&lt;/p&gt;
&lt;p&gt;記事の最後では未サポートの機能とロードマップについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/razor-tooling/issues/5687"&gt;Razor 17.1 Roadmap · Issue #5687 · dotnet/razor-tooling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="aws-graviton2arm64.net-6-xnt303-reinvent-developersio"&gt;[レポート]AWS Graviton2(Arm64)で.NET 6のパフォーマンスを加速させる #XNT303 #reinvent | DevelopersIO&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/reinvent-2021-report-xnt303/"&gt;https://dev.classmethod.jp/articles/reinvent-2021-report-xnt303/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS re:Invent 2021 のセッション Accelerate .NET 6 performance with Arm64 on AWS Graviton2 のレポート記事。&lt;/p&gt;
&lt;h3 id="entity-framework-biweekly-status-updates-2021-issue-23884-dotnetefcore"&gt;Entity Framework Biweekly Status Updates (2021) · Issue #23884 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/23884#issuecomment-984797885"&gt;https://github.com/dotnet/efcore/issues/23884#issuecomment-984797885&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework の隔週のステータスアップデートまとめ。&lt;/p&gt;
&lt;p&gt;EF Core 7.0 のプランが近いうちにレビューされ公開される予定、品質向上のための作業が 6.0.2 に向けて進んでいる、など。&lt;/p&gt;
&lt;h3 id="net6-qiita"&gt;.NET6 が起動するまでのコードを追ってみよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/87e98261bb026298f207"&gt;https://qiita.com/up-hash/items/87e98261bb026298f207&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 においてアプリケーションが起動するまで(エントリーポイントが呼び出されるまで)の流れを追った .NET ランタイムホストについての解説記事。&lt;/p&gt;
&lt;p&gt;実際にアプリケーションが起動するまでの流れをソースコードと合わせながら解説している。&lt;/p&gt;
&lt;h3 id="how-rider-hot-reload-works-under-the-hood-the.net-tools-blog"&gt;How Rider Hot Reload Works Under the Hood | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/12/02/how-rider-hot-reload-works-under-the-hood/"&gt;https://blog.jetbrains.com/dotnet/2021/12/02/how-rider-hot-reload-works-under-the-hood/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider のホットリロードが裏側で何をしているのかということを解説している記事。&lt;/p&gt;
&lt;p&gt;Apply Changes を押した際に Roslyn から差分を受け取っていること、.NET 6 ではホットリロードのためのエージェントを読み込ませていて適用する仕組みになっているなど。&lt;/p&gt;
&lt;h3 id="net-conf-2021-recap-videos-slides-demos-and-more"&gt;.NET Conf 2021 Recap - Videos, Slides, Demos, and More&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-conf-2021-recap-videos-slides-demos-and-more/"&gt;https://devblogs.microsoft.com/dotnet/net-conf-2021-recap-videos-slides-demos-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2021 のまとめ記事。&lt;/p&gt;
&lt;h3 id="microsoft.maui.graphics"&gt;Microsoft.Maui.Graphics でクロスプラットフォームレンダリングしてみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/ee413cce02de17"&gt;https://zenn.dev/tan_y/articles/ee413cce02de17&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Drawing.Common の代わりとなる Microsoft.Maui.Graphics についての記事。&lt;/p&gt;
&lt;p&gt;記事では Windows Forms, WinUI, MAUI と異なるプラットフォーム/バックエンドで試してみた結果などもあげている。&lt;/p&gt;
&lt;h3 id="i-show-you-how-to-crack-a.net-application"&gt;I show you how to Crack a .NET Application&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/dotnetsafer/i-show-you-how-to-crack-a-net-application-f88ed2598f97"&gt;https://medium.com/dotnetsafer/i-show-you-how-to-crack-a-net-application-f88ed2598f97&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションをクラック(デコンパイルと書き換え)する方法についての記事。&lt;/p&gt;
&lt;p&gt;.NET アプリケーションに対しての解析と書き換えをはじめとして、Blazor や Xamarin (Android) アプリケーションに関しても触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-dotnetjitutils"&gt;GitHub - dotnet/jitutils&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/jitutils"&gt;https://github.com/dotnet/jitutils&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET ランタイムの JIT を開発する人向けのツール集。&lt;/p&gt;
&lt;h3 id="github-pakrymjab-c-source-generator-based-dependency-injection-container-implementation"&gt;GitHub - pakrym/jab: C# Source Generator based dependency injection container implementation.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pakrym/jab"&gt;https://github.com/pakrym/jab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# Source Generator を使用した Dependency Injection コンテナーのライブラリー。&lt;/p&gt;
&lt;p&gt;コンパイル時に確定できることでスタートアップや解決時のパフォーマンスを大きく改善できるとのこと。&lt;/p&gt;
&lt;!-- https://twitter.com/pakrym/status/1464640630508777475?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;A new version of Jab compile-time Dependency Injection is out! Now with incremental compilation support and other fixes. &lt;a href="https://t.co/Va7PV6fUVL"&gt;https://t.co/Va7PV6fUVL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pavel Krymets (&amp;#64;pakrym) &lt;a href="https://twitter.com/pakrym/status/1464640630508777475?ref_src=twsrc%5Etfw"&gt;November 27, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="microsoftdotnet-podcasts.net-6-reference-application-shown-at.net-conf-2021-featuring-asp.net-core-blazor.net-maui-microservices-and-more"&gt;microsoft/dotnet-podcasts: .NET 6 reference application shown at .NET Conf 2021 featuring ASP.NET Core, Blazor, .NET MAUI, Microservices, and more!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/dotnet-podcasts"&gt;https://github.com/microsoft/dotnet-podcasts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Conf 2021 で公開された .NET 6 のリファレンスアプリケーション。ASP.NET Core, Blazor, MAUI, マイクロサービスといった要素で構成されている。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/citizenmatt/status/1464245409195433986?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This is a great tip. And Rider 2021.3 (coming soon!) will help editing the .asmdef file! Shows version of the installed package, and highlights when a condition isn&amp;#39;t met. Also gives package completion, define symbol completion + validation, and… (1/2) &lt;a href="https://t.co/z1qSWQpCee"&gt;https://t.co/z1qSWQpCee&lt;/a&gt; &lt;a href="https://t.co/9OuFZkqw3K"&gt;pic.twitter.com/9OuFZkqw3K&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Ellis (&amp;#64;citizenmatt) &lt;a href="https://twitter.com/citizenmatt/status/1464245409195433986?ref_src=twsrc%5Etfw"&gt;November 26, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Rider 2021.3 では asmdef のパワフルな補完がついてくるという話。インストール済みのパッケージや有効になっているシンボル定数のハイライト、シンボル定数名の補完など。&lt;/p&gt;
&lt;!-- https://twitter.com/sayedihashimi/status/1466462336252887046?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Daily &lt;a href="https://twitter.com/hashtag/TemplateTip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#TemplateTip&lt;/a&gt; number 2:&lt;br&gt;&lt;br&gt;If you use some language besides C# for most projects, you can configure the default lang for projects created in dotnet new with the env var: DOTNET_NEW_PREFERRED_LANG&lt;br&gt;&lt;br&gt;Take a look after I set that to F#, I get F# projects by default. &lt;a href="https://t.co/uIP1ssIHsU"&gt;pic.twitter.com/uIP1ssIHsU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sayed I. Hashimi #BlackLivesMatter (&amp;#64;sayedihashimi) &lt;a href="https://twitter.com/sayedihashimi/status/1466462336252887046?ref_src=twsrc%5Etfw"&gt;December 2, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;DOTNET_NEW_PREFERRED_LANG&lt;/code&gt; 環境変数を設定しておくと、新しいプロジェクトを作るときにその言語をデフォルトで使用できるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/neuecc/status/1465952053918781443?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;私がよくやるのはウォッチウィンドウプログラミング。結果も確認しやすいし、式の再利用/再評価もしやすいので、これがあればEvaluate WindowもImmediate Windowもいらない。 &lt;a href="https://t.co/Ek3doORDZa"&gt;pic.twitter.com/Ek3doORDZa&lt;/a&gt;&lt;/p&gt;&amp;mdash; neuecc (&amp;#64;neuecc) &lt;a href="https://twitter.com/neuecc/status/1465952053918781443?ref_src=twsrc%5Etfw"&gt;December 1, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio のウォッチウィンドウでは IntelliSense も使用でき、今ではラムダ式なども書けるのでデバッグ時のイミディエイトウィンドウや評価ウィンドウなどの代わりに使えるというテクニック。&lt;/p&gt;
&lt;p&gt;ちなみにウォッチウィンドウは Non-public なメンバーも IntelliSense には出てこないものの指定すると表示できる。(&lt;code&gt;obj._privateMember&lt;/code&gt;のように)&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-proposal-support-for-multiset-multimap-in-system.collections.generic-issue-61892-dotnetruntime"&gt;[API Proposal]: Support for MultiSet &amp;amp; MultiMap in System.Collections.Generic · Issue #61892 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61892"&gt;https://github.com/dotnet/runtime/issues/61892&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一つのキーで複数の値が持てる MultiSet や MultiMap が欲しいという提案。やりたいこととしては次のようなことが挙げられている。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var c = new MultiSet&amp;lt;int&amp;gt;();
c.Add(42);
c.Add(42);
Console.WriteLine(c[42]); // =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これに対して .NET 6 であれば MultiSet に関しては CollectionMarshal と Dictionary で完結できるので十分ではなど。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var counts = new Dictionary&amp;lt;string, int&amp;gt;();
foreach (string input in source)
{
    CollectionsMarshal.GetValueRefOrAddDefault(counts, input, out _)++;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="support-unloadability-in-dispatchproxy.by-teo-tsirpanis-pull-request-62095-dotnetruntime"&gt;Support unloadability in &lt;code&gt;DispatchProxy&lt;/code&gt;. by teo-tsirpanis · Pull Request #62095 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/62095"&gt;https://github.com/dotnet/runtime/pull/62095&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DispatchProxy&lt;/code&gt; で生成したアセンブリをアンロードできるようにするという PR。&lt;/p&gt;
&lt;h3 id="proposal-roles-and-extensions-issue-5497-dotnetcsharplang"&gt;[Proposal]: Roles and extensions · Issue #5497 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/issues/5497"&gt;https://github.com/dotnet/csharplang/issues/5497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既存の型に関する拡張の roles と extensions の提案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ufcpp.net/blog/2018/7/pickuproslyn0714/"&gt;ピックアップRoslyn 7/14: Roles, extension interfaces, and static interface members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-razor-compiler-from-aspnetcore-by-pranavkm-pull-request-38706-dotnetaspnetcore"&gt;Remove razor-compiler from aspnetcore by pranavkm · Pull Request #38706 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/38706"&gt;https://github.com/dotnet/aspnetcore/pull/38706&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor のコンパイラーが ASP.NET Core のリポジトリーから分離されたため削除した PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/razor-compiler"&gt;dotnet/razor-compiler: This repo houses the Razor Compiler, which is part of the .NET SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="happy-holidays-everyone-responses-for-issues-may-be-delayed-till-early-january-issue-38711-dotnetaspnetcore"&gt;🎅 🎄 Happy Holidays, everyone! Responses for issues may be delayed till early January · Issue #38711 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/38711"&gt;https://github.com/dotnet/aspnetcore/issues/38711&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ホリデーシーズンということでチームのメンバーがお休みしていることもあり、Issue や PR、コメントが来年まで遅れるかもしれないという話。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-11-27: Pyjion, Evergine, paint.net 4.3.3</title>
			<link>/2021/11/27/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/11/27/updates</guid>
			<pubDate>Sat, 27 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="pyjion-a-python-jit-compiler"&gt;Pyjion - A Python JIT Compiler&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.trypyjion.com/"&gt;https://www.trypyjion.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPython に .NET ランタイムの JIT コンパイラーを組み込み利用することで高速化するというライブラリ。&lt;/p&gt;
&lt;p&gt;Python のコードの変更は有効化する一行程度で対応可能で、&lt;code&gt;pyjion&lt;/code&gt; コマンドによる直接実行もサポートしている。&lt;/p&gt;
&lt;p&gt;元々は Microsoft の Organization で開発されていたが、現在は Anthony Shaw 氏 (Microsoft の Python Advocate) の個人リポジトリーに移動して開発が続き、リリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tonybaloney/Pyjion"&gt;tonybaloney/Pyjion: Pyjion - A JIT for Python based upon CoreCLR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="discover-evergine.more-than-ever-evergine"&gt;Discover Evergine... more than ever! - Evergine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://evergine.com/discover-evergine/"&gt;https://evergine.com/discover-evergine/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wave Engine という名前の 3D グラフィックスエンジンが Evergine という名前でリブランディングした。&lt;/p&gt;
&lt;p&gt;Evergine は C# と .NET をベースとしたエンジンでクロスプラットフォームに対応している。このリリースでは .NET 6 と C# 10, Visual Studio 2022 への対応が含まれるとのこと。&lt;/p&gt;
&lt;h3 id="paint.net-4.3.3-is-now-available"&gt;paint.net 4.3.3 is now available!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forums.getpaint.net/topic/118933-paintnet-433-is-now-available/"&gt;https://forums.getpaint.net/topic/118933-paintnet-433-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paint.NET 4.3.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンで .NET 6 への移行が行われ、レンダリングや起動のパフォーマンスの向上の他、プラグインの C# 10 での実装が可能となった。また、COM 以外の相互運用コードを TerraFX.Interop.Windows に移行し、今後 COＭ 相互運用コードも移行することで C++/CLI を排除でき、crossgen2/ReadyToRun の恩恵を受けられるようになるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/terrafx/terrafx.interop.windows"&gt;terrafx/terrafx.interop.windows: Interop bindings for Windows.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="callerargumentexpression-and-throw-helpers-exploring.net-core-6-part-11"&gt;[CallerArgumentExpression] and throw helpers: Exploring .NET Core 6 - Part 11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-6-part-11-callerargumentexpression-and-throw-helpers/"&gt;https://andrewlock.net/exploring-dotnet-6-part-11-callerargumentexpression-and-throw-helpers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された &lt;code&gt;CallerArgumentExpression&lt;/code&gt; 属性についてとそれを使用した例外を投げるヘルパーについての記事。&lt;/p&gt;
&lt;p&gt;例外ヘルパーによる利点として、メソッドのコードが簡素になる、JIT でインライン化しやすくなるといった点にも触れている。&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;【C#】本物の関数ポインタの使い方と関数アドレスの取り方 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/9e442b0e9fb98ad904d8"&gt;https://qiita.com/Kujiro/items/9e442b0e9fb98ad904d8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 9 で導入された関数ポインター型 (&lt;code&gt;delegate*&lt;/code&gt;) についてとその使用方法について。&lt;/p&gt;
&lt;h3 id="configuring-dotnet-monitor-with-prometheus-and-grafana-dotnetos"&gt;Configuring dotnet-monitor with Prometheus and Grafana - Dotnetos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetos.org/blog/2021-11-22-dotnet-monitor-grafana/"&gt;https://dotnetos.org/blog/2021-11-22-dotnet-monitor-grafana/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-monitor&lt;/code&gt; を Prometheus と Grafana を組み合わせて .NET のメトリクスを視覚化する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事ではサンプルアプリケーションを使用して Prometheus に &lt;code&gt;dotnet-monitor&lt;/code&gt; のデータを格納し、Grafana で視覚化するまでをステップバイステップで説明している。&lt;/p&gt;
&lt;h3 id="c-10.0"&gt;【C# 10.0】 トップ レベル ステートメントの変更点&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/11/top-level-csharp10/"&gt;https://ufcpp.net/blog/2021/11/top-level-csharp10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10 のトップレベルステートメントに関する記事。&lt;/p&gt;
&lt;p&gt;C# 9 からの変更点として空ステートメントについてとトップレベルステートメントを含むクラス名について触れている。&lt;/p&gt;
&lt;h3 id="unityunityengine.object-null"&gt;【Unity】UnityEngine.Object の Null チェックまとめ - コガネブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://baba-s.hatenablog.com/entry/2021/11/16/090000"&gt;https://baba-s.hatenablog.com/entry/2021/11/16/090000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の UnityEngine.Object は比較演算子のオーバーロードを持ち、null に対する独特な比較を実装しているため、その挙動についてまとめた記事。&lt;/p&gt;
&lt;p&gt;オブジェクトを Destory した後のタイミングごとの結果や &lt;code&gt;??&lt;/code&gt; のような演算子での結果にも触れている。&lt;/p&gt;
&lt;h3 id="net-6-hot-reload-and-refused-to-connect-to-ws-because-it-violates-the-content-security-policy-directive-because-web-sockets"&gt;.NET 6 Hot Reload and &amp;quot;Refused to connect to ws: because it violates the Content Security Policy directive&amp;quot; because Web Sockets&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.hanselman.com/blog/net-6-hot-reload-and-refused-to-connect-to-ws-because-it-violates-the-content-security-policy-directive-because-web-sockets"&gt;https://www.hanselman.com/blog/net-6-hot-reload-and-refused-to-connect-to-ws-because-it-violates-the-content-security-policy-directive-because-web-sockets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Content Security Policy (CSP) を設定していることでホットリロードのための WebSocket 通信ができなくなってしまうという記事。&lt;/p&gt;
&lt;h3 id="quictlsopenssl"&gt;QUICスタックとTLSライブラリの関係とOpenSSLの状況&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/nttlabs/quic-tls-relation-and-openssl-circumstance-fca824169b46"&gt;https://medium.com/nttlabs/quic-tls-relation-and-openssl-circumstance-fca824169b46&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QUIC のスタックとそれに関連した TLS の位置づけと依存しているライブラリーの状況についての記事。&lt;/p&gt;
&lt;p&gt;QUIC での TLS の処理の流れや QUIC に必要な機能を OpenSSL に追加する必要がある中での現状などに触れている。&lt;/p&gt;
&lt;h3 id="net-6-blazor-webassembly"&gt;.NET 6 で Blazor WebAssembly 環境構築でエラーした話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/0fa46bf42b18e0"&gt;https://zenn.dev/naminodarie/articles/0fa46bf42b18e0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で Blazor WebAssembly の wasm-tools をインストールする際に Preview 版がインストールされているとエラーとなることがあるという話。&lt;/p&gt;
&lt;h3 id="winui3-desktop-windows-app-sdk-qiita"&gt;WinUI3 Desktopで開発したアプリのインストール戦略 (Windows App SDK) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hayashida-katsutoshi/items/eba4fe2e9332e87cdc8f"&gt;https://qiita.com/hayashida-katsutoshi/items/eba4fe2e9332e87cdc8f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WinUI 3 を使用したアプリケーションのインストール形態についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hayashida-katsutoshi/items/0d4e47d7c9e1a33c6f51"&gt;WinUI3 Desktopでダークモードに対応する (Windows App SDK) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hayashida-katsutoshi/items/c6c6190023874f0aa87b"&gt;WinUI3 Desktopでウィンドウのサイズを変更する (Windows App SDK) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c.net6blazor-webassemblyjs200-qiita"&gt;【C#】.NET6のBlazor WebAssemblyのJS呼び出しは200倍早い - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/0d6510525aa8d8289b01"&gt;https://qiita.com/Kujiro/items/0d6510525aa8d8289b01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 では Blazor WebAssembly 環境で .NET 側のコードから JavaScript 側にバイト列を渡す際に Uint8Array となったことでパフォーマンスが向上されたという話。&lt;/p&gt;
&lt;h3 id="c-10.0-appendliteral"&gt;【C# 10.0】 AppendLiteral(&amp;quot; &amp;quot;)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2021/11/AppendLiteral/"&gt;https://ufcpp.net/blog/2021/11/AppendLiteral/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10 / .NET 6 で改善された文字列補完式で使用される &lt;code&gt;DefaultInterpolatedStringHandler&lt;/code&gt; の &lt;code&gt;AppendLiteral&lt;/code&gt; メソッドについての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AppendLiteral(string)&lt;/code&gt; があって &lt;code&gt;AppendLiteral(char)&lt;/code&gt; がない理由について。&lt;/p&gt;
&lt;h3 id="entity-framework-core-c-sql-sql-jsakamoto"&gt;Entity Framework Core 上で C# の文字列補間を使って安全に SQL 文を実行するが、SQL 文そのものを動的に組み立てたい | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/28969310/"&gt;https://devadjust.exblog.jp/28969310/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core では &lt;code&gt;ExecuteSqlInterpolatedAsync&lt;/code&gt; メソッドを使用することで文字列補完で安全に SQL のパラメータを指定できる仕組みがあるが、そのメソッドに渡す文字列を動的に変更したい場合にはどうすればいいのかという記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;FormattableStringFactory.Create&lt;/code&gt; を使用して &lt;code&gt;FormattableString&lt;/code&gt; を生成する方法が紹介されている。&lt;/p&gt;
&lt;h3 id="meet-rider-2021.3s-new-problems-view-the.net-tools-blog"&gt;Meet Rider 2021.3’s new Problems View | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/11/24/meet-rider-2021-3-new-problems-view/"&gt;https://blog.jetbrains.com/dotnet/2021/11/24/meet-rider-2021-3-new-problems-view/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2021.3 で導入される Problems View の紹介記事。&lt;/p&gt;
&lt;p&gt;Problems View ではファイルの問題をはじめ、ソリューションやツールキットといったものの問題を一元的に確認できるビューになるとのこと。&lt;/p&gt;
&lt;h3 id="cstringspant-qiita"&gt;【C#】配列、stringの内部実装とSpan&amp;lt;T&amp;gt;のありがたみ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Kujiro/items/e1998b14176419b3ad1a"&gt;https://qiita.com/Kujiro/items/e1998b14176419b3ad1a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String の内部表現とデータを取り扱う上での &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; の必要性についての記事。&lt;/p&gt;
&lt;h3 id="manually-removing.net-sdks-from-macos"&gt;Manually Removing .NET SDKs from MacOS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/justinyoo/manually-removing-net-sdks-from-macos-4jce"&gt;https://dev.to/justinyoo/manually-removing-net-sdks-from-macos-4jce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;macOS で .NET SDK を削除する方法についての記事。ツールではなく手動で削除する方法について。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/install/remove-runtime-sdk-versions"&gt;.NET ランタイムと SDK を削除する | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-6.net-5-xmlserializerxml"&gt;.NET 6 と .NET 5 でXmlSerializerを用いたXML出力結果が異なる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/yukg/articles/d9c95e93d6932b"&gt;https://zenn.dev/yukg/articles/d9c95e93d6932b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の &lt;code&gt;XmlSerializer&lt;/code&gt; ではパフォーマンス向上を目的としてデフォルトのシリアライズ結果としてインデントなどが含まれなくなったことについての記事。&lt;/p&gt;
&lt;h3 id="datetime.minvalue-new-datetime-life-like-a-clown"&gt;DateTime.MinValue や new DateTime() は危険 - Life like a clown&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://clown.cube-soft.jp/entry/2021/11/26/datetime-trap"&gt;https://clown.cube-soft.jp/entry/2021/11/26/datetime-trap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DateTime.MinValue&lt;/code&gt; や &lt;code&gt;new DateTime()&lt;/code&gt; を扱うことについての危険性についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DateTime.MinValue&lt;/code&gt; と &lt;code&gt;new DateTime()&lt;/code&gt; は &lt;code&gt;1/1/0001 12:00:00 AM&lt;/code&gt; となるので、例えば JST から UTC に戻そうとして愚直に9時間を引くといったことをすると例外が発生する。記事ではこのようなケースを避けるために、最小の値としてアプリケーションで決めた固有の値を使用すること、&lt;code&gt;ToUniversalTime&lt;/code&gt; を使用すること、nullable にすることなどがあげられている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="elringusdotnetjs-use.net-in-any-javascript-environment-browsers-node.js-vs-code-web-extensions-etc"&gt;Elringus/DotNetJS: Use .NET in any JavaScript environment: browsers, Node.js, VS Code web extensions, etc.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Elringus/DotNetJS"&gt;https://github.com/Elringus/DotNetJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の WebAssembly 出力を Blazor ではなく、Node.js やブラウザーといった JavaScript ランタイムで動作させるためのライブラリー。.NET のコードを WebAssembly として出力し、JavaScript のコードとの相互での呼び出しが可能にする仕組みを提供する。&lt;/p&gt;
&lt;h3 id="xoofxsharpnng-sharpnng-is-a-lightweight-low-level-managed-wrapper-around-the-lightweight-messaging-library-nng"&gt;xoofx/SharpNng: SharpNng is a lightweight low-level managed wrapper around the Lightweight Messaging Library NNG&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/SharpNng"&gt;https://github.com/xoofx/SharpNng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;軽量メッセージングライブラリーの NNG の .NET のラッパーライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nng.nanomsg.org/"&gt;NNG - nanomsg-NG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/xoofx/status/1462118666485612548?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hey, while I haven&amp;#39;t been coding for a while, I just released a small .NET library called SharpNng &lt;a href="https://t.co/myy0LNs2rX"&gt;https://t.co/myy0LNs2rX&lt;/a&gt;, a low-level wrapper around NNG, a Lightweight Messaging Library &lt;a href="https://t.co/clsm5vuMJT"&gt;https://t.co/clsm5vuMJT&lt;/a&gt; 🤗&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1462118666485612548?ref_src=twsrc%5Etfw"&gt;November 20, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="string.replacelineendings-method-system-microsoft-docs"&gt;String.ReplaceLineEndings Method (System) | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.replacelineendings?view=net-6.0"&gt;https://docs.microsoft.com/en-us/dotnet/api/system.string.replacelineendings?view=net-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された改行を一括置換するメソッド。プラットフォーム間で異なる改行を使用していることで混在してしまった場合に正規化するといったことが可能。ドキュメントではプロトコルパーサーなどでは使用しないことが推奨されている(例えば HTTP/1 は CRLF と決められている)。&lt;/p&gt;
&lt;p&gt;改行として認識する文字は CR (U+000D), LF (U+000A), CRLF (U+000D U+000A), NEL (U+0085), LS (U+2028), FF (U+000C), PS (U+2029) となっている。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/resharper/status/1462724445227921410?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2021.3 EAP9 is here with some last minute improvements for C# support. Give it a try: &lt;a href="https://t.co/Sjxn3HzpeZ"&gt;https://t.co/Sjxn3HzpeZ&lt;/a&gt; &lt;a href="https://t.co/rV1EgkGDH4"&gt;pic.twitter.com/rV1EgkGDH4&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1462724445227921410?ref_src=twsrc%5Etfw"&gt;November 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1462748608479088645?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2021.3 EAP9 is available! The major release is coming, builds are getting more stable, and C# support is improving. Try it: &lt;a href="https://t.co/5BI4HI7lYX"&gt;https://t.co/5BI4HI7lYX&lt;/a&gt; &lt;a href="https://t.co/RirEDfL4cF"&gt;pic.twitter.com/RirEDfL4cF&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1462748608479088645?ref_src=twsrc%5Etfw"&gt;November 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;ReSharper と Rider の 2021.3 EAP9 がリリースされたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1462910668739330049?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In EF Core 6.0, value converters allow converting nulls.&lt;br&gt;&lt;br&gt;It&amp;#39;s useful when you have an enum with an unknown value, and it is represented as a nullable string column in a table.&lt;br&gt;&lt;br&gt;⚠️ But watch out, there are pitfalls with it. Details below.&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/efcore6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/7Rqxhsd9AN"&gt;pic.twitter.com/7Rqxhsd9AN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1462910668739330049?ref_src=twsrc%5Etfw"&gt;November 22, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Entity Framework Core 6 で ValueConverter が null をサポートできるようになったという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/core/what-is-new/ef-core-6.0/whatsnew#allow-value-converters-to-convert-nulls"&gt;値コンバーターによる null の変換を許可する | EF Core 6.0 の新機能 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1464316831922114567?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Starting with EF Core 2.2, you could add a tag to your query for better debug purposes.&lt;br&gt;&lt;br&gt;EF Core 6.0 went further, and now you can tag queries with the filename and line number of the LINQ code.&lt;br&gt;&lt;br&gt;Pretty cool, huh? 😎&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/efcore6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/XOfxfJgu9T"&gt;pic.twitter.com/XOfxfJgu9T&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1464316831922114567?ref_src=twsrc%5Etfw"&gt;November 26, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Entity Framework Core 6 では &lt;code&gt;TagWithCallSite&lt;/code&gt; を呼び出すことでクエリーのタグとしてファイル名と行番号を記録できるという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/core/what-is-new/ef-core-6.0/whatsnew#tag-queries-with-file-name-and-line-number"&gt;ファイル名と行番号でクエリにタグを付ける| EF Core 6.0 の新機能 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1463629177094131715?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Previously, EF Core translated string.IsNullOrWhiteSpace into a trimming of value before checking if it&amp;#39;s empty.&lt;a href="https://twitter.com/MarusykRoman?ref_src=twsrc%5Etfw"&gt;&amp;#64;MarusykRoman&lt;/a&gt; has fixed that in EF Core 6.0🙂&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/efcore6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/J1DTIWKQxH"&gt;pic.twitter.com/J1DTIWKQxH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1463629177094131715?ref_src=twsrc%5Etfw"&gt;November 24, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Entity Framework Core のクエリーで &lt;code&gt;String.IsNullOrWhitespace&lt;/code&gt; を使用したときに発行される SQL に &lt;code&gt;LTRIM&lt;/code&gt;, &lt;code&gt;RTRIM&lt;/code&gt; が使用されていたが EF Core 6 ではそれらの呼び出しがなくなり、ただの空文字との比較となるという話。&lt;/p&gt;
&lt;p&gt;これは SQL Server 向けの SQL トランスレーターの変更で SQL Server での文字列比較は文字列の長さが異なる場合は末尾にスペースをつけて長さを合わせての比較となる(ANSI/ISO SQL-92 に準拠した仕様)。そのため &lt;code&gt;'    ' = ''&lt;/code&gt; が等しいということになるのでトリムが不要となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/efcore/issues/22916"&gt;SqlServer: string.IsNullOrWhiteSpace translation is overly complex · Issue #22916 · dotnet/efcore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sql55.com/column/string-comparison.php"&gt;SQL Server - 後ろにスペースがある場合の文字列の比較について - SQL Server 入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/maoni0/status/1461896972038656009?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;GC realtime monitor is now available as a global .NET CLI tool thanks to &lt;a href="https://twitter.com/chnasarre?ref_src=twsrc%5Etfw"&gt;&amp;#64;chnasarre&lt;/a&gt;! install via &lt;br&gt;&lt;br&gt;dotnet tool install -g dotnet-gcmon&lt;br&gt;&lt;br&gt;very much appreciated, Christophe!!!&lt;/p&gt;&amp;mdash; Maoni Stephens (&amp;#64;maoni0) &lt;a href="https://twitter.com/maoni0/status/1461896972038656009?ref_src=twsrc%5Etfw"&gt;November 20, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;リアルタイムで GC の動作を確認できる dotnet-gcmon というツールがリリースされているという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="allow-runtimeconfig-startuphooks-and-environment-startuphooks-to-both-be-present-by-tomdegoede-pull-request-61461-dotnetruntime"&gt;Allow runtimeconfig StartupHooks and Environment StartupHooks to both be present by tomdegoede · Pull Request #61461 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61461"&gt;https://github.com/dotnet/runtime/pull/61461&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET にはスタートアップ時に実行するアセンブリを指定するスタートアップフックという仕組みがあるが、runtimeconfig と環境変数のどちらかしか設定できないという問題を修正する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/docs/design/features/host-startup-hook.md"&gt;runtime/host-startup-hook.md at main · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reduce-allocations-for-createdirectory-by-adamsitnik-pull-request-61777-dotnetruntime"&gt;Reduce allocations for CreateDirectory by adamsitnik · Pull Request #61777 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61777"&gt;https://github.com/dotnet/runtime/pull/61777&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CreateDirectory メソッドの内部でシステム API を呼ぶ際 string を P/Invoke 経由で渡すのではなく、一時的なバイト配列を通して渡すことでアロケーションを削減する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/Text/ValueUtf8Converter.cs"&gt;runtime/ValueUtf8Converter.cs at main · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="add-ratelimiting-apis-by-brennanconroy-pull-request-61788-dotnetruntime"&gt;Add RateLimiting APIs by BrennanConroy · Pull Request #61788 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61788"&gt;https://github.com/dotnet/runtime/pull/61788&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RateLimiting API を追加する PR。&lt;/p&gt;
&lt;h3 id="xxhash6432-incorrect-one-shot-implementation-issue-61878-dotnetruntime"&gt;XXHash64/32 incorrect one-shot implementation · Issue #61878 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61878"&gt;https://github.com/dotnet/runtime/issues/61878&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 とともにリリースされた System.IO.Hashing の xxHash32/64 のハッシュをとる静的メソッドが不正な結果を返すことがある問題の Issue。&lt;/p&gt;
&lt;p&gt;これは修正されてバックポート済みのため近いうちに新しいパッケージとしてリリース予定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61923"&gt;[release/6.0] Fix XXHash for stripe size by github-actions[bot] · Pull Request #61923 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="support-zero-byte-reads-on-http-response-streams-by-mihazupan-pull-request-61913-dotnetruntime"&gt;Support zero-byte reads on HTTP response streams by MihaZupan · Pull Request #61913 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61913"&gt;https://github.com/dotnet/runtime/pull/61913&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SocketsHttpHandler でゼロバイト読み込みをサポートしたいという Issue。&lt;/p&gt;
&lt;p&gt;元々は gRPC の Bidirectional streaming のような長い接続の場合、ストリームから読み取るためのバッファーが各所にあり GC ヒープの断片化を起こしてしまう。ゼロバイト読み込みが可能となれば実際にデータが必要になるまで上位ではバッファーを持つ必要がなくなるという話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61475"&gt;SocketsHttpHandler: Support zero-byte read on response streams · Issue #61475 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61223"&gt;[HTTP/2] Memory usage while reading from long running response streams · Issue #61223 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added-asreadonly-extension-methods-for-idictionaryt-u-and-ilistt-by-mrxx99-pull-request-61172-dotnetruntime"&gt;Added AsReadOnly extension methods for IDictionary&amp;lt;T, U&amp;gt; and IList&amp;lt;T&amp;gt; by Mrxx99 · Pull Request #61172 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61172"&gt;https://github.com/dotnet/runtime/pull/61172&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IDictionary&amp;lt;T, U&amp;gt;&lt;/code&gt; と &lt;code&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; に対する &lt;code&gt;AsReadOnly&lt;/code&gt; 拡張メソッドを追加する PR。&lt;/p&gt;
&lt;h3 id="memorystream.read-throws-argumentoutofrangexception-in.net-6-but-argumentexception-in.net-5-issue-61994-dotnetruntime"&gt;MemoryStream.Read() throws ArgumentOutOfRangexception in .NET 6 but ArgumentException in .NET 5 · Issue #61994 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61994"&gt;https://github.com/dotnet/runtime/issues/61994&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MemoryStream.Read&lt;/code&gt; が .NET 5 までは &lt;code&gt;ArgumentException&lt;/code&gt; をスローしていたが、.NET 6 では &lt;code&gt;ArgumentOutOfRangexception&lt;/code&gt; になっていたという Issue。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArgumentOutOfRangexception&lt;/code&gt; は &lt;code&gt;ArgumentException&lt;/code&gt; を継承した型なので変更は問題ないと考えているとのこと。ただしテストコードなどで &lt;code&gt;ArgumentException&lt;/code&gt; を明示していると問題となることがある。&lt;/p&gt;
&lt;h3 id="add-basic-implementation-of-new-rename-ui-by-ryzngard-pull-request-57686-dotnetroslyn"&gt;Add basic implementation of new rename UI by ryzngard · Pull Request #57686 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/57686"&gt;https://github.com/dotnet/roslyn/pull/57686&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しいリネームの UI の基本実装の PR。見た目は確定していないが今後実装される雰囲気をみることができる。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-11-19: Windows App SDK 1.0, Azure Active Directory's gateway is on .NET 6.0</title>
			<link>/2021/11/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/11/19/updates</guid>
			<pubDate>Fri, 19 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.0"&gt;Windows App SDK 1.0 がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;WinUI 3 も含まれており、モダンな Windows アプリケーションを作るための新しい SDK の大きなマイルストーンの一つに到達したという感じでしょうか。&lt;/p&gt;
&lt;p&gt;次期バージョンではマルチウィンドウや通知、Self-contained XCopy 配置などが計画されているとのことです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://portal.productboard.com/winappsdk/1-windows-app-sdk/tabs/2-planned"&gt;Planned - Windows App SDK | Product Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/azure-active-directorys-gateway-is-on-net-6-0/"&gt;Azure Active Directory のゲートウェイを .NET 6 に移行した話&lt;/a&gt;が公開されています。&lt;/p&gt;
&lt;p&gt;9月頃から .NET 5 から .NET 6 に移行して、CPU 使用率を 30% 削減できたそうです。.NET 6 になったことでサーバーも IIS でのホストから HTTP.sys を利用する形に移行し、アプリケーションのパフォーマンスの向上のために Dynamic PGO を有効にして高い効果を得られたそうです。&lt;/p&gt;
&lt;p&gt;Dynamic PGO はワークロードや計測結果次第ではありますが、アプリケーションのパフォーマンス向上に高い効果がある可能性があるので、起動直後の速度がある程度許容できるサーバーアプリケーションなどでは積極的に試してみる価値はあるかもしれません。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="release-1.0.0-microsoftwindowsappsdk-github"&gt;Release 1.0.0 · microsoft/WindowsAppSDK · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.0"&gt;https://github.com/microsoft/WindowsAppSDK/releases/tag/v1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.0 がリリースされた。このリリースには WinUI 3 も含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WinUI 3
&lt;ul&gt;
&lt;li&gt;新コントロールの追加とビジュアルの更新&lt;/li&gt;
&lt;li&gt;パッケージ化テンプレート&lt;/li&gt;
&lt;li&gt;Windows 10 Version 1809 以降での非パッケージデスクトップアプリ (msix を使用しないデプロイ) のサポート&lt;/li&gt;
&lt;li&gt;Windows 10 Version 1809 のサポート&lt;/li&gt;
&lt;li&gt;Visual Studio 2022 でのホットリロードとライブビジュアルツリーのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ウィンドウ
&lt;ul&gt;
&lt;li&gt;Win32, WPF, Windows Forms で利用可能なウィンドウを扱う高レベル API &lt;code&gt;AppWindow&lt;/code&gt; の追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;入力
&lt;ul&gt;
&lt;li&gt;Pointer API: XAML の入力 API でポインターイベント情報を取得をサポートする API&lt;/li&gt;
&lt;li&gt;InputPointerSource API: XAML の SwapChainPanel でポインターと入力イベントのハンドリングを提供する API&lt;/li&gt;
&lt;li&gt;Cursor API: カーソルのビットマップの変更を可能にする API&lt;/li&gt;
&lt;li&gt;GestureRecognizer API: ドラッグやホールド、クリックといったジェスチャーを取り扱う API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリのライフサイクル&lt;/li&gt;
&lt;li&gt;DWriteCore&lt;/li&gt;
&lt;li&gt;MRT Core&lt;/li&gt;
&lt;li&gt;デプロイ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsPackageType&lt;/code&gt; プロパティを指定することで Windows App SDK の初期化を行う仕組み&lt;/li&gt;
&lt;li&gt;非パッケージアプリ向けの Windows App SDK インストーラーの MSI や既存セットアップへの統合&lt;/li&gt;
&lt;li&gt;.NET の非パッケージアプリ向けのブートストラップ API のラッパー&lt;/li&gt;
&lt;li&gt;パッケージアプリ向けのインストールの検証を行うデプロイメント API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/kevintgallo/status/1460670079364788227?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;📢 Windows App SDK 1.0 Stable release is live! The WinAppSDK is focused on empowering developers to build the most productive apps on Windows and we&amp;#39;re looking forward to your feedback! Tag your tweets with &lt;a href="https://twitter.com/hashtag/WinAppSDK?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WinAppSDK&lt;/a&gt; to get the team&amp;#39;s attention! &lt;a href="https://t.co/q9CvT6eHEy"&gt;https://t.co/q9CvT6eHEy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kevin Gallo (&amp;#64;kevintgallo) &lt;a href="https://twitter.com/kevintgallo/status/1460670079364788227?ref_src=twsrc%5Etfw"&gt;November 16, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/microsoft-ui-xaml/issues/6325"&gt;Announcing: WinUI 3 in Windows App SDK 1.0! 🎆🎉🎇 · Issue #6325 · microsoft/microsoft-ui-xaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/apps/windows-app-sdk/stable-channel#version-10"&gt;Stable channel release notes for the Windows App SDK - Windows apps | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="azure-active-directorys-gateway-is-on.net-6.0"&gt;Azure Active Directory's gateway is on .NET 6.0!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/azure-active-directorys-gateway-is-on-net-6-0/"&gt;https://devblogs.microsoft.com/dotnet/azure-active-directorys-gateway-is-on-net-6-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Active Directory のゲートウェイサービスを .NET 5 から .NET 6 へと移行した話。&lt;/p&gt;
&lt;p&gt;Azure AD ゲートウェイは Azure Active Directory の表に立つリバースプロキシーサービスで、TLS終端やフェイルオーバー、ルーティングなどを行い、一日約1,850億リクエストを処理している。記事では2021年の9月にサービスのランタイムを .NET 5 から .NET 6 へと移行した結果の効果とその際どのようなことを行ったのか、学びのあったポイントなどに触れている。&lt;/p&gt;
&lt;p&gt;.NET 6 へと移行した効果としては CPU の使用率が33%低下し、アプリケーションの効率(&lt;code&gt;Request-per-second / CPU 使用率&lt;/code&gt;で求めた値)は50%向上した。&lt;/p&gt;
&lt;p&gt;.NET 6 へアップグレードする上で行ったことは大きく次の2点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IIS から HTTP.sys への移行 (.NET 6 になったことで対応できた)&lt;/li&gt;
&lt;li&gt;Dynamic PGO の有効化 (.NET 6 からの新機能)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IIS から HTTP.sys への移行は、以前 .NET Framework から .NET Core 3.1 へ移行した際に IIS を選択していたが .NET 6 への移行で HTTP.sys の利用を選択した。Kestrel は必要な TLS の機能が不足していたため選択しなかったとのこと。&lt;/p&gt;
&lt;p&gt;HTTP.sys への移行により受けた恩恵は下記の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;27% のアプリケーションの効率の向上&lt;/li&gt;
&lt;li&gt;決定論的キューイングモデル
&lt;ul&gt;
&lt;li&gt;HTTP.sys と IIS でそれぞれリクエストキューを持っていてパフォーマンスの問題が発生することがあったが、IIS がなくなったことで HTTP.sys のキューだけとなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デプロイとスケーリングの体験の向上
&lt;ul&gt;
&lt;li&gt;サイトを展開する前の IIS と ANCM (ASP.NET Core Module) のインストールと構成が不要となり、TLS の設定も HTTP.sys のものだけとなり簡潔になった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他移行時の変更点として、TLS の再ネゴシエーション (クライアント証明書)や IIS での TLS 設定の HTTP.sys へのマッピング、non-ASCII なヘッダーを受け入れる設定、モニタリングなどにふれている。&lt;/p&gt;
&lt;p&gt;Dynamic PGO (profile-guided optimization) の有効については次のような設定を行ったとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set DOTNET_TieredPGO=1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Tier0 コンパイル結果の動作で収集された情報を元に Tier1 コンパイルを行う設定。アプリケーションの効率はプレーンな .NET 6 と比較して 8.18% 向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set DOTNET_TC_QuickJitForLoops=1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;ループを含むメソッドでの階層化コンパイルを有効にする設定。アプリケーションの効率はプレーンな .NET 6 と比較して 10.2% 向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set DOTNET_ReadyToRun=0&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;ReadyToRun (AOT) を無効にする設定。上記二つと合わせてアプリケーションの効率はプレーンな .NET 6 と比較して 13.23% 向上&lt;/li&gt;
&lt;li&gt;.NET のコアライブラリーはデフォルトで ReadyToRun が有効な形で出荷されている(AOT 済みで起動パフォーマンスが良い形となっている)。これを無効化することで Dynamic PGO が必要とする Tier0 プロファイリングを可能とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他の学びとして次のようなものを挙げている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SocketsHttpHandler&lt;/code&gt; の .NET 6 での変更に関してのいくつかの問題
&lt;ul&gt;
&lt;li&gt;.NET チームとしてワークアラウンドを見つけたり、改善したりしている&lt;/li&gt;
&lt;li&gt;.NET 6 では新規接続の失敗時に複数のリクエストが影響を受ける。これは ConnectTimeout の値を調整することで対応できる可能性がある&lt;/li&gt;
&lt;li&gt;RST パケットで失敗したリクエストは自動でリトライされなくなり、&amp;quot;An existing connection was forcibly closed by remote host&amp;quot; が発生しやすくなっていた。ワークアラウンドとして HttpClient での再試行や PooledConnectionIdleTimeout を設定することでの RST パケットを減らすといったものがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP.sys サーバーでの挙動の変更や問題の修正など&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-version-17.0.1"&gt;Visual Studio 2022 version 17.0.1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.0.1.0"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#17.0.1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.0.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;バッチビルドや Xamarin.Forms プロジェクトでの XAML ホットリロードでのクラッシュの修正、プロファイラーの不具合の修正など。&lt;/p&gt;
&lt;h3 id="whats-new-in-windows-forms-in.net-6.0"&gt;What's new in Windows Forms in .NET 6.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-windows-forms-in-net-6-0/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-in-windows-forms-in-net-6-0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 における Windows Forms の改善点などをまとめた記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセシビリティ
&lt;ul&gt;
&lt;li&gt;UIA のサポートするコントロールの追加や読み上げの改善、いくつかのコントロールのコントラスト改善など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーションブートストラップ
&lt;ul&gt;
&lt;li&gt;アプリケーションワイドなデフォルトフォント設定を行う &lt;code&gt;Application.SetDefaultFont&lt;/code&gt; API の追加&lt;/li&gt;
&lt;li&gt;アプリケーションの初期設定を行う &lt;code&gt;ApplicationConfiguration.Initialize&lt;/code&gt; をコード生成するように。MSBuild のプロパティーを介して設定可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テンプレートの更新
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;global using&lt;/code&gt; などが使用されるようになり、より簡素なエントリーポイントに&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ランタイムのデザイナーの強化&lt;/li&gt;
&lt;li&gt;高 DPI とスケーリングの修正
&lt;ul&gt;
&lt;li&gt;PerMonitorV2 モードのサポートの改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Control.Invoke&lt;/code&gt; に &lt;code&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; を受けるオーバーロードの追加など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;コミュニティーからのコントリビュート
&lt;ul&gt;
&lt;li&gt;FolderBrowserDialog のプロパティの追加や MessageBox の Try Again/Continue ボタン対応など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-windows-11-insider-preview-build-22504"&gt;Announcing Windows 11 Insider Preview Build 22504&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windows-insider/2021/11/17/announcing-windows-11-insider-preview-build-22504/"&gt;https://blogs.windows.com/windows-insider/2021/11/17/announcing-windows-11-insider-preview-build-22504/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows 11 Insider Preview Build 22504 が Dev Channel にリリース。&lt;/p&gt;
&lt;p&gt;このリリースから .NET Conf でアナウンスされていた .NET Framework 4.8.1 が含まれており、.NET Framework が ARM64 をネイティブにサポートするようになった。&lt;/p&gt;
&lt;p&gt;現状 ARM64 サポートは x86, x64 と共に &lt;code&gt;%SystemRoot%\Microsoft.NET\FrameworkArm64&lt;/code&gt; にインストールされ、実行ファイルのプラットフォームが ARM64 としてビルドされている場合にのみ ARM64 向け .NET Framework が使用される。AnyCPU を含め、それ以外は今まで通り x86/x64 が使用されエミュレーションで動作する。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetlibhunt/status/1459795124393701384?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Scott Hunter announcing .NET Framework 4.8.1 with Arm64 support &lt;a href="https://t.co/vpzVBcPsiC"&gt;https://t.co/vpzVBcPsiC&lt;/a&gt;&lt;/p&gt;&amp;mdash; .Net LibHunt (&amp;#64;dotNetLibHunt) &lt;a href="https://twitter.com/dotNetLibHunt/status/1459795124393701384?ref_src=twsrc%5Etfw"&gt;November 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="infer-v1.2-interprocedural-memory-safety-analysis-for-c"&gt;Infer# v1.2: Interprocedural Memory Safety Analysis For C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/infer-v1-2-interprocedural-memory-safety-analysis-for-c/"&gt;https://devblogs.microsoft.com/dotnet/infer-v1-2-interprocedural-memory-safety-analysis-for-c/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Infer# v1.2 がリリースされた。Infer# は静的コード解析ツールの &lt;a href="https://fbinfer.com/"&gt;Infer&lt;/a&gt; で C# のコードを解析するためのフロントエンド。今年の3月に 1.0 として GA していた。&lt;/p&gt;
&lt;p&gt;今回のリリースではレースコンディションの検知やパフォーマンス向上、カバレッジの拡大などが含まれる。&lt;/p&gt;
&lt;h3 id="release-3.11.6-unoplatformuno"&gt;Release 3.11.6 · unoplatform/uno&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/unoplatform/uno/releases/tag/3.11.6"&gt;https://github.com/unoplatform/uno/releases/tag/3.11.6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 3.11.6 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 と Visual Studio 2022 の対応が含まれるほか、様々な改善とバグ修正が行われた。&lt;/p&gt;
&lt;p&gt;MAUI のリリースが延期された影響で Uno Platform のプロジェクトテンプレートは Xamain を使用した従来のものが含まれ、.NET 6 でのプロジェクトはプレビューサポートとなるとのこと。&lt;/p&gt;
&lt;h3 id="release-v1.42.0-grpcgrpc"&gt;Release v1.42.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.42.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.42.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC v1.42.0 がリリースされた。NuGet パッケージとしては 2.42.0 となる。&lt;/p&gt;
&lt;p&gt;.NET のライブラリ部分に関しては Xamarin のビルド関する不具合の修正や特定のケースでメタデータが破損する問題の修正など。&lt;/p&gt;
&lt;h3 id="calendar-for.net-6-ga.net-6-tips-pr-advent-calendar-2021-qiita"&gt;Calendar for 祝 .NET 6 GA！.NET 6 での開発 Tips や試してみたことなど、あなたの「いち推し」ポイントを教えてください【PR】日本マイクロソフト | Advent Calendar 2021 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/microsoft"&gt;https://qiita.com/advent-calendar/2021/microsoft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日本マイクロソフトがサポートしている .NET 6 をメインにした Advent Calendar。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="new-dependency-injection-features-in.net-6-exploring.net-core-6-part-10"&gt;New dependency injection features in .NET 6: Exploring .NET Core 6 - Part 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-6-part-10-new-dependency-injection-features-in-dotnet-6/"&gt;https://andrewlock.net/exploring-dotnet-6-part-10-new-dependency-injection-features-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.DependencyInjection の .NET 6 での変更点についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncDisposable&lt;/code&gt; をサポートするスコープの &lt;code&gt;AsyncServiceScope&lt;/code&gt;、Minimal API との組み合わせ、サービスが登録されているかどうかを取得できる &lt;code&gt;IServiceProviderIsService&lt;/code&gt;、診断の強化と TryAdd* のパフォーマンス向上などに触れている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IServiceProviderIsService&lt;/code&gt; については Minimal API ではラムダのパラメーターが暗黙的に DI コンテナーからの解決となる(Controller のメソッドの場合は &lt;code&gt;[FromService]&lt;/code&gt; が必要)が、その場合パラメータとして渡されるものが DI 由来なのか、値がバインドされたものなのかの区別がつかなくなってしまうため DI コンテナーに登録されているかどうかを取得するためのメカニズムとして用意されているという話。&lt;/p&gt;
&lt;h3 id="rider-2021.3-brand-new-main-toolbar-the.net-tools-blog"&gt;Rider 2021.3 Brand New Main Toolbar | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/11/16/rider-2021-3-brand-new-main-toolbar/"&gt;https://blog.jetbrains.com/dotnet/2021/11/16/rider-2021-3-brand-new-main-toolbar/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2021.3 で導入される新しいデザインのメインツールバーについての記事。&lt;/p&gt;
&lt;h3 id="powerupc-notnullvariable"&gt;PowerUpを使ってC#のアセンブラを見る – NotNullVariable&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://notnullvariable.com/2021/how-to-use-power-up/"&gt;https://notnullvariable.com/2021/how-to-use-power-up/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のコードが JIT された結果を逆アセンブル確認する PowerUp の使い方についての記事。&lt;/p&gt;
&lt;h3 id="c-c10"&gt;(C#) C#10 で構造体の既定のコンストラクタを禁止する - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2021/11/16/064305"&gt;https://ikorin2.hatenablog.jp/entry/2021/11/16/064305&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のパラメーターなしコンストラクターを C# 10 で記述できるようになったことで使用させないようにできるという記事。&lt;/p&gt;
&lt;h3 id="capture-logs-in-unit-tests"&gt;Capture Logs in Unit Tests&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://kaylumah.nl/2021/11/14/capture-logs-in-unit-tests.html"&gt;https://kaylumah.nl/2021/11/14/capture-logs-in-unit-tests.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユニットテストで &lt;code&gt;ILogger&lt;/code&gt; をキャプチャーするにはどのような方法があるかという記事。記事では &lt;code&gt;NullLogger&lt;/code&gt;, Moq を使う方法, xUnit の &lt;code&gt;ITestOutputHelper&lt;/code&gt; に流す方法が書かれている。&lt;/p&gt;
&lt;h3 id="overriding-sealed-methods-in-c"&gt;Overriding Sealed Methods in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/overriding-sealed-methods-c-sharp/"&gt;https://www.infoq.com/articles/overriding-sealed-methods-c-sharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sealed&lt;/code&gt; なメソッドをオーバーライドする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では実行時に動的にメタデータを書き換えることでメソッドを乗っ取るといういわゆる黒魔術的な手法が解説されている。&lt;/p&gt;
&lt;h3 id="where-are-my-favorite-extensions-in-visual-studio-2022"&gt;Where Are My Favorite Extensions in Visual Studio 2022?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/where-are-my-favorite-extensions-in-visual-studio-2022/"&gt;https://devblogs.microsoft.com/visualstudio/where-are-my-favorite-extensions-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;人気のある拡張が Visual Studio 2022 の Marketplace に見つからないといったケースがあるので、それらが何処かに移行したのか、統合されたのかといったことについて紹介している記事。&lt;/p&gt;
&lt;h3 id="dotnet-6.05.0-qiita"&gt;dotnet-6.0におけるシングルファイルアプリの変更点(5.0からの差分) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/skitoy4321/items/1cb78a42154622daa455"&gt;https://qiita.com/skitoy4321/items/1cb78a42154622daa455&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのシングルファイルアプリケーション発行の変更点についてのまとめた記事。&lt;/p&gt;
&lt;p&gt;ネイティブライブラリーの統合、ファイルの圧縮、TrimMode のデフォルト値の変更などについて触れている。&lt;/p&gt;
&lt;h3 id="unity2021.2c9-synamons-engineer-blog"&gt;Unity2021.2で使えるC#9の機能 - Synamon’s Engineer blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://synamon.hatenablog.com/entry/csharp-9-features-on-unity-2021-2"&gt;https://synamon.hatenablog.com/entry/csharp-9-features-on-unity-2021-2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 9.0 に対応した Unity 2021.2 で実際に利用可能な機能についてのまとめた記事。未サポートの機能についても触れている。&lt;/p&gt;
&lt;h3 id="monitoring-a.net-application-using-opentelemetry-gerald-barre"&gt;Monitoring a .NET application using OpenTelemetry - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/monitoring-a-dotnet-application-using-opentelemetry.htm"&gt;https://www.meziantou.net/monitoring-a-dotnet-application-using-opentelemetry.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを OpenTelemetry を通してモニタリングする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET アプリケーションから OpenTelemetry を通して Zipkin, Prometheus にデータを収集する形を紹介している。&lt;/p&gt;
&lt;h3 id="anomaly-detection-using-ml.net"&gt;Anomaly Detection Using ML.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://anileladag.medium.com/anomaly-detection-using-ml-net-c01e43774e44"&gt;https://anileladag.medium.com/anomaly-detection-using-ml-net-c01e43774e44&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET を使用して Anomaly Detection を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="dapr-a-code-based-approach-with-dotnet"&gt;DAPR: a code-based approach with DOTNET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://satyampushkar.medium.com/dapr-a-code-based-approach-with-dotnet-6570058da51a"&gt;https://satyampushkar.medium.com/dapr-a-code-based-approach-with-dotnet-6570058da51a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dapr を使用して分散した .NET アプリケーションを構成する方法についての記事。&lt;/p&gt;
&lt;h3 id="global-usings-a-look-at-new-language-features-in-c-10-the.net-tools-blog"&gt;Global Usings – A Look at New Language Features in C# 10 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/11/18/global-usings-in-csharp-10/"&gt;https://blog.jetbrains.com/dotnet/2021/11/18/global-usings-in-csharp-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10 の &lt;code&gt;global using&lt;/code&gt; についての解説と、ReSharper と Rider でのサポートについての記事。&lt;/p&gt;
&lt;h3 id="net-6-vs.net-5-up-to-40-speedup"&gt;.NET 6 vs .NET 5: up to 40% speedup!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://alexyakunin.medium.com/net-6-vs-net-5-up-to-40-speedup-ceca9112d298"&gt;https://alexyakunin.medium.com/net-6-vs-net-5-up-to-40-speedup-ceca9112d298&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core + Entity Framework Core のサンプルプロジェクトを .NET 5 から .NET 6 に移行して PGO を有効にした結果、40% 程度パフォーマンスが向上したという記事。&lt;/p&gt;
&lt;p&gt;PGO でループやキャッシュフレンドリーなロジックのようなものは 30% から 40%、IO に依存しないコードでは平均 15% 程度、Web サービスのような IO に依存する部分では 5% 程度のパフォーマンス向上がみられたとのこと。&lt;/p&gt;
&lt;h3 id="in-the-jungle-of.net-decompilers-ndepend"&gt;In the Jungle of .NET Decompilers - NDepend&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.ndepend.com/in-the-jungle-of-net-decompilers"&gt;https://blog.ndepend.com/in-the-jungle-of-net-decompilers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の逆コンパイラーについて紹介している記事。&lt;/p&gt;
&lt;p&gt;ILSpy, dotPeek, dnSpy, JustDecompile, Ildasm, .NET Reflector など、現在使用されているものから過去のものまで。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="theolivenbaumh5-the-next-generation-c-to-javascript-compiler"&gt;theolivenbaum/h5: 🚀 The next generation C# to JavaScript compiler&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/theolivenbaum/h5"&gt;https://github.com/theolivenbaum/h5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で書いたコードを JavaScript に Source Generator などで変換する SDK。Bridge の fork。&lt;/p&gt;
&lt;h3 id="damianedwardsminimalapis.extensions-a-set-of-extensions-and-helpers-for-working-with-asp.net-core-minimal-apis"&gt;DamianEdwards/MinimalApis.Extensions: A set of extensions and helpers for working with ASP.NET Core Minimal APIs.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/DamianEdwards/MinimalApis.Extensions"&gt;https://github.com/DamianEdwards/MinimalApis.Extensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API の拡張とヘルパーメソッド集。&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API ではカスタムの戻り値を提供するために &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.iresultextensions?view=aspnetcore-6.0"&gt;IResultExtensions&lt;/a&gt; というものがあり、拡張メソッドを用意することで &lt;code&gt;Results.Extensions.独自のリザルト()&lt;/code&gt; といった形でカスタム戻り値を返せるようになっている。&lt;/p&gt;
&lt;!-- https://twitter.com/damianedwards/status/1459415233559023622?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Trying out &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; Minimal APIs &amp;amp; like the idea of being able to unit-test your APIs &amp;amp; have them self-describe to Swagger (no attributes or metadata needed)? You might like my MinimalApis.Extension library: &lt;a href="https://t.co/3EliX3mCtQ"&gt;https://t.co/3EliX3mCtQ&lt;/a&gt;&lt;br&gt;In preview, pls log issues!&lt;br&gt;fyi &lt;a href="https://twitter.com/nickchapsas?ref_src=twsrc%5Etfw"&gt;&amp;#64;nickchapsas&lt;/a&gt;&lt;/p&gt;&amp;mdash; Damian Edwards #GetVaccinated (&amp;#64;DamianEdwards) &lt;a href="https://twitter.com/DamianEdwards/status/1459415233559023622?ref_src=twsrc%5Etfw"&gt;November 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="extensibility-essentials-2022-visual-studio-marketplace"&gt;Extensibility Essentials 2022 - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ExtensibilityEssentials2022"&gt;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ExtensibilityEssentials2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 の拡張を実装する上で便利なツールを提供する Visual Studio の拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/writing-extensions-just-got-easier/"&gt;Writing extensions just got easier - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="dynamic-pgo-in.net-6.0.md"&gt;Dynamic PGO in .NET 6.0.md&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/EgorBo/dc181796683da3d905a5295bfd3dd95b"&gt;https://gist.github.com/EgorBo/dc181796683da3d905a5295bfd3dd95b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dynamic PGO の動作内容と簡単なベンチマーク、アプリケーションで Dynamic PGO を有効にする設定方法、コミュニティーフィードバックを載せているドキュメント。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1459134952251871247?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Dynamic PGO in .NET 6.0 is 🚀, Please, help us to recognize the efforts Andy, David and the team made to implement this feature by sharing your numbers, read more here: &lt;a href="https://t.co/mskM4S3exi"&gt;https://t.co/mskM4S3exi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1459134952251871247?ref_src=twsrc%5Etfw"&gt;November 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="visual-studio"&gt;Visual Studioチャネルとリリースリズム&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/productinfo/release-rhythm"&gt;https://docs.microsoft.com/ja-jp/visualstudio/productinfo/release-rhythm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のリリースチャネルとそのリリースのリズムについてのドキュメント。&lt;/p&gt;
&lt;p&gt;リリース直後、プロダクト名に Current と表記されていたのは特定バージョンのサービスリリースを行う Long-Term Servicing Channel (LTSC) あることで、最新機能を提供するリリースとの区別のためだったとのこと。Current の表記は version 17.0.1 で削除された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developercommunity.visualstudio.com/t/why-is-the-visual-studio-2022-having-a-suffix-curr/1575387"&gt;Why is the Visual Studio 2022 having a suffix Current - Visual Studio Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="csharplanglanguage-version-history.md-at-main-dotnetcsharplang-github"&gt;csharplang/Language-Version-History.md at main · dotnet/csharplang · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/blob/main/Language-Version-History.md"&gt;https://github.com/dotnet/csharplang/blob/main/Language-Version-History.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のバージョンごとに追加された言語機能などについての歴史がまとまっているドキュメント。&lt;/p&gt;
&lt;h3 id="migrate-from-asp.net-core-3.1-to-6.0-microsoft-docs"&gt;Migrate from ASP.NET Core 3.1 to 6.0 | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/migration/31-to-60?view=aspnetcore-6.0&amp;amp;tabs=visual-studio"&gt;https://docs.microsoft.com/ja-jp/aspnet/core/migration/31-to-60?view=aspnetcore-6.0&amp;amp;tabs=visual-studio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 3.1 から 6.0 に移行するために何をすれば良いのかがまとまっているドキュメント。&lt;/p&gt;
&lt;h3 id="visual-studio-ide-visualstudio-tiktok-watch-visual-studio-ides-newest-tiktok-videos"&gt;Visual Studio IDE (&amp;#64;visualstudio) TikTok | Watch Visual Studio IDE's Newest TikTok Videos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tiktok.com/&amp;#64;visualstudio"&gt;https://www.tiktok.com/&amp;#64;visualstudio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の TikTok アカウント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/evocationist/status/1459185145794203684?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Solid .NET6 perf stats from tests I ran earlier today...&lt;br&gt;&lt;br&gt;We have a key throughput benchmark writing+reading UDP on loopback, that averages about a 200MB/sec throughput increase just by changing to .NET6! 🚀&lt;br&gt;&lt;br&gt;That&amp;#39;s amazing gain; nice one, runtime folks.&lt;a href="https://twitter.com/davidfowl?ref_src=twsrc%5Etfw"&gt;&amp;#64;davidfowl&lt;/a&gt; &lt;a href="https://twitter.com/terrajobst?ref_src=twsrc%5Etfw"&gt;&amp;#64;terrajobst&lt;/a&gt; &lt;a href="https://t.co/07KUjjA9ft"&gt;pic.twitter.com/07KUjjA9ft&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alistair Evans (&amp;#64;evocationist) &lt;a href="https://twitter.com/evocationist/status/1459185145794203684?ref_src=twsrc%5Etfw"&gt;November 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 5 から .NET 6 に移行しただけでローカルループバックでの UDP の送受信のパフォーマンスが向上したという話。&lt;/p&gt;
&lt;!-- https://twitter.com/marcel_wiessler/status/1459215837802467330?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that editing &lt;a href="https://twitter.com/unity?ref_src=twsrc%5Etfw"&gt;&amp;#64;unity&lt;/a&gt; asmdef files in &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; got a lot more powerful recently - no it is not automatically adding references yet 😅 - BUT &lt;br&gt;&lt;br&gt;adding references is fast and chill now and I love it 🥰&lt;br&gt;&lt;br&gt;thanks &lt;a href="https://twitter.com/citizenmatt?ref_src=twsrc%5Etfw"&gt;&amp;#64;citizenmatt&lt;/a&gt; &lt;a href="https://t.co/XVgAdvHJ1L"&gt;pic.twitter.com/XVgAdvHJ1L&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marcel Wiessler (&amp;#64;marcel_wiessler) &lt;a href="https://twitter.com/marcel_wiessler/status/1459215837802467330?ref_src=twsrc%5Etfw"&gt;November 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Rider で Unity の asmdef を編集すると、参照プロジェクトの補完や GUID への変更、Inlay-hints が表示されるといった手厚いサポートがあるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/marcgravell/status/1459577561084801027?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Got reminded of something on Friday (that I&amp;#39;ve fixed in at least 4 other code-bases in the past): many people now know that accessing the outcome of ValueTask[&amp;lt;T&amp;gt;] more than once us undefined behaviour (thanks to IVTS), but so is *not accessing it at all*; I&amp;#39;ve seen this in (1)&lt;/p&gt;&amp;mdash; Marc Gravell (&amp;#64;marcgravell) &lt;a href="https://twitter.com/marcgravell/status/1459577561084801027?ref_src=twsrc%5Etfw"&gt;November 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;次のような &lt;code&gt;ValueTask&lt;/code&gt; を &lt;code&gt;async&lt;/code&gt; で &lt;code&gt;await&lt;/code&gt; しない、ショートカットするようなコードを書いた時の罠の話(スレッド)。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;ValueTask FooAsync()
{
    if (pending.IsCompleteSuccessfully)
    {
        return default;
    }
    return Awaited(pending);
}

async ValueTask Awaited(ValueTask pending)
    =&amp;gt; await pending;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合 &lt;code&gt;pending&lt;/code&gt; を &lt;code&gt;await&lt;/code&gt; せずに終わるコードパスに流れた場合、内部の &lt;code&gt;IValueTaskSource&lt;/code&gt; の &lt;code&gt;GetResult&lt;/code&gt; が呼び出されないと &lt;code&gt;IValueTaskSource&lt;/code&gt; がプーリングを実装している場合には無駄なことになってしまうのではないのか、という話。これ自体の修正方法は &lt;code&gt;_ = pending.Result;&lt;/code&gt; のようにする。&lt;/p&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1459624577441705984?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;When you use inheritance in models, you can be not satisfied with the default EF Core columns order in the created tables.&lt;br&gt;&lt;br&gt;In EF Core 6.0, you can specify columns order with ColumnAttribute.&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/efcore6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#efcore6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/1VIhNwzOa4"&gt;pic.twitter.com/1VIhNwzOa4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1459624577441705984?ref_src=twsrc%5Etfw"&gt;November 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Entity Framework Core 6.0 では &lt;code&gt;Column&lt;/code&gt; 属性に &lt;code&gt;Order&lt;/code&gt; を指定できるようになって、データベースのテーブルのカラムの並びを指定できるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/magicknet/status/1459527515618357253?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Also found this &lt;a href="https://t.co/J5olfE9vIQ"&gt;https://t.co/J5olfE9vIQ&lt;/a&gt;. But it is kinda expensive&lt;a href="https://twitter.com/sinclairinat0r?ref_src=twsrc%5Etfw"&gt;&amp;#64;sinclairinat0r&lt;/a&gt; It looks like it is now available in the US?&lt;/p&gt;&amp;mdash; 🧙‍♂️Dirk Lemstra (&amp;#64;MagickNET) &lt;a href="https://twitter.com/MagickNET/status/1459527515618357253?ref_src=twsrc%5Etfw"&gt;November 13, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;US の Microsoft Store で Windows on ARM の Development Kit 的なマシンがひっそりと発売されていたという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1459790266877964289?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;This is what a modern basic scalable socket server looks like in .NET &lt;a href="https://t.co/jFhHqp9Rxn"&gt;https://t.co/jFhHqp9Rxn&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸💉💉💉 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1459790266877964289?ref_src=twsrc%5Etfw"&gt;November 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;モダンでスケーラブルなソケットサーバーの基本的な記述パターンについて。&lt;/p&gt;
&lt;!-- https://twitter.com/olegtk/status/1461153650588454918?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Interestingly there was an attempt to deprecate it in VS 2022, but it got rejected :)&lt;/p&gt;&amp;mdash; Oleg Tkachenko (&amp;#64;olegtk) &lt;a href="https://twitter.com/olegtk/status/1461153650588454918?ref_src=twsrc%5Etfw"&gt;November 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;過去、Visual Studio のメニューが大文字 (capitalize) だった時期があり、現在でもそのオプションは残っていて Visual Studio 2022 で非推奨にしようとしたけど却下となったという小ネタ。&lt;/p&gt;
&lt;!-- https://twitter.com/davkean/status/1461166900658925570?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And finally git operations were added to context menu to make it easy to quickly diff a file against its base, or revert without needing to find it in Solution Explorer. &lt;br&gt;&lt;br&gt;I find this particularly helpful for designers which don&amp;#39;t expose this on their right-click context menu. &lt;a href="https://t.co/mCi8HjAUlm"&gt;pic.twitter.com/mCi8HjAUlm&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Kean (&amp;#64;davkean) &lt;a href="https://twitter.com/davkean/status/1461166900658925570?ref_src=twsrc%5Etfw"&gt;November 18, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio のエディターのタブのコンテキストメニューに Git の項目が増えたという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="proposal-self-constraint-issue-5413-dotnetcsharplang"&gt;[Proposal]: Self Constraint · Issue #5413 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/issues/5413"&gt;https://github.com/dotnet/csharplang/issues/5413&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Self constraint の提案の Issue。Spec の Proposal 自体はすでに書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/self-constraint.md"&gt;csharplang/self-constraint.md at main · dotnet/csharplang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-r-parameter-for-dotnet-test-and-change-a-parameter-to-be-shorthand-for-arch-instead-of-test-adapter-path-by-marcorossignoli-pull-request-22497-dotnetsdk"&gt;Remove -r parameter for dotnet test, and change -a parameter to be shorthand for --arch, instead of --test-adapter-path by MarcoRossignoli · Pull Request #22497 · dotnet/sdk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/pull/22497"&gt;https://github.com/dotnet/sdk/pull/22497&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet test&lt;/code&gt; での &lt;code&gt;-r&lt;/code&gt; は &lt;code&gt;--results-dir&lt;/code&gt;、&lt;code&gt;-a&lt;/code&gt; は &lt;code&gt;--test-adapter-path&lt;/code&gt; の短縮系だったが、他のコマンドと合わせて &lt;code&gt;--runtime&lt;/code&gt; や &lt;code&gt;--arch&lt;/code&gt; となるようにするという破壊的変更の PR。&lt;/p&gt;
&lt;h3 id="api-proposal-convert.toint32-overload-that-takes-a-roschar-instead-of-a-string-issue-61397-dotnetruntime"&gt;[API Proposal]: &lt;code&gt;Convert.ToInt32&lt;/code&gt; overload that takes a &lt;code&gt;ROSchar&lt;/code&gt; instead of a &lt;code&gt;string&lt;/code&gt; · Issue #61397 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61397"&gt;https://github.com/dotnet/runtime/issues/61397&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Convert.ToInt32&lt;/code&gt; に &lt;code&gt;ReadOnlySpan&amp;lt;char&amp;gt;&lt;/code&gt; を受けるオーバーロードがほしいという提案。&lt;code&gt;Utf8Parser.TryParse&lt;/code&gt; でいいのではないか、提案者は octal を読みたいといっている、実際に欲しいのは &lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt; では、その場合 &lt;code&gt;Encoding&lt;/code&gt; はどうするのか、ニッチなのでコアライブラリーには不要ではとか。&lt;/p&gt;
&lt;h3 id="minor-file.readallbytes-improvements-by-adamsitnik-pull-request-61519-dotnetruntime"&gt;Minor File.ReadAllBytes* improvements by adamsitnik · Pull Request #61519 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61519"&gt;https://github.com/dotnet/runtime/pull/61519&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;File.ReadAllBytes*&lt;/code&gt; を &lt;code&gt;Stream&lt;/code&gt; から &lt;code&gt;RandomAccess&lt;/code&gt; にすることでパフォーマンスを向上するという PR。&lt;/p&gt;
&lt;h3 id="expose-general-purpose-crc32-apis-by-deeprobin-pull-request-61558-dotnetruntime"&gt;Expose general purpose Crc32 APIs by deeprobin · Pull Request #61558 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61558"&gt;https://github.com/dotnet/runtime/pull/61558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CRC32 を計算するための API を &lt;code&gt;BitOperation&lt;/code&gt; クラスで公開するという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/2036"&gt;Expose general purpose Crc32 APIs · Issue #2036 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="merge-system.security.cryptography.algorithms-to-system.security.cryptography-by-bartonjs-pull-request-61543-dotnetruntime"&gt;Merge System.Security.Cryptography.Algorithms to System.Security.Cryptography by bartonjs · Pull Request #61543 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61543"&gt;https://github.com/dotnet/runtime/pull/61543&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Security.Cryptography.Algorithms&lt;/code&gt; にあった各種アルゴリズムの実装を &lt;code&gt;System.Security.Cryptography&lt;/code&gt; に引っ越す PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-11-12: .NET 6 &amp; Visual Studio 2022 GA, YARP 1.0, LINQPad 7</title>
			<link>/2021/11/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/11/12/updates</guid>
			<pubDate>Fri, 12 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;Visual Studio Launch Event と .NET Conf 2021 が開かれ、.NET 6 と Visual Studio 2022 が11月8日(日本時間の9日)にリリースされました。&lt;/p&gt;
&lt;p&gt;.NET 6 ではランタイムやコアライブラリーの多くの改善だけでなく C# 10 と ASP.NET Core 6 が含まれています。公式のリリース記事はとても長いのですが、C# 10 や global using のようなものからコンテナー下での動作についてや PGO のような細かいものまで載っているのでトピックを眺めて気になる点をつまんでいくのがよさそうです。&lt;/p&gt;
&lt;p&gt;また .NET 6 は LTS リリースであり、現在運用中のアプリケーションが .NET 5 である場合は EOL が半年後ということあるので早めの移行が推奨されています。&lt;/p&gt;
&lt;p&gt;現時点で Visual Studio 2022 または Visual Studio Code の C# 拡張が .NET 6 対応となっていますが、Visual Studio 2022 for Mac のリリースは来年となることがアナウンスされている点は注意が必要です。JetBrains の Rider は現在 EAP での対応で近く対応版がリリースされるのではないかと予想しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6/"&gt;Announcing .NET 6 - The Fastest .NET Yet - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-now-available/"&gt;Visual Studio 2022 now available - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.azure.moe/2021/11/09/visual-studio-2022-%E3%83%AD%E3%83%BC%E3%83%B3%E3%83%81-net-6-ga/"&gt;Visual Studio 2022 ローンチ &amp;amp; .NET 6 GA | ブチザッキ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.azure.moe/2021/11/10/net-conf-2021-day-1-keynote/"&gt;.NET Conf 2021 Day 1 Keynote | ブチザッキ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;YARP (Yet Another Reverse Proxy) の 1.0 がリリースされました。&lt;/p&gt;
&lt;p&gt;簡単に言ってしまうと ASP.NET Core でハイパフォーマンスなリバースプロキシーを構築できるライブラリーです。ライブラリーとして提供されているため、利用者のニーズに合わせたカスタマイズがしやすい形になっているというのがウリです。Microsoft の社内でも既に利用されているとのことです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-yarp-1-0-release/"&gt;Announcing YARP 1.0 Release - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.linqpad.net/LINQPad7.aspx"&gt;LINQPad 7 がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;.NET 6 への対応や ARM64 版の提供などが行われています。メジャーバージョンアップとなるため、無償アップグレード期間外に購入したライセンスの場合は有償アップグレードが必要となります。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-6-the-fastest.net-yet.net-blog"&gt;Announcing .NET 6 - The Fastest .NET Yet - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では .NET 6 での C# と F# といった言語も含めての多くの改善点がまとめられている。&lt;/p&gt;
&lt;p&gt;サポートについても触れており、.NET 6 は LTS となることで3年間のアップデートがあることで特に .NET 5 からの移行は EOL の都合推奨されている。また Red Hat とのコラボレーションで RHEL 8 以降の AMD/Intel (x86_64), ARM64 (aarch64), IBM Z/LinuxONE (s390x) で利用できるようになるとのこと。&lt;/p&gt;
&lt;p&gt;IDE サポートは Visual Studio 2022 と Visual Studio 2022 for Mac (未リリース) となり、Visual Studio 2019 や MSBuild 16、Visual Studio for Mac 8.0 はサポートされない。Visual Studio Code の C# 拡張は .NET 6 をサポートする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/uikou/items/a9efa1dda2c3fe5a7b0b"&gt;[GA] Visual Studio 2022 &amp;amp; .NET 6 がリリースされました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-now-available/"&gt;Visual Studio 2022 now available - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="welcome-to-c-10"&gt;Welcome to C# 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/"&gt;https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10 での新しく変わった部分についてまとめた記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グローバルと暗黙的な using&lt;/li&gt;
&lt;li&gt;File-scoped namespaces&lt;/li&gt;
&lt;li&gt;ラムダ式とメソッドグループの改善
&lt;ul&gt;
&lt;li&gt;戻り値型の推論やラムダ式への属性など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;struct&lt;/code&gt; の改善
&lt;ul&gt;
&lt;li&gt;パラメータなしコンストラクターとフィールド初期化, &lt;code&gt;record struct&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt; 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字列補完 (Interpolated string) の改善
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InterpolatedStringHandler&lt;/code&gt; と定数としての文字列補完式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他改善
&lt;ul&gt;
&lt;li&gt;deconstruct 時の代入の改善、限定代入の機能強化、拡張プロパティパターンや &lt;code&gt;CallerArgumentExpressionAttribute&lt;/code&gt; など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プレビュー機能
&lt;ul&gt;
&lt;li&gt;インターフェースの &lt;code&gt;static abstract&lt;/code&gt; メンバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C# ガイドのドキュメントでも詳しく説明されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/csharp-10"&gt;C# 10 の新機能 - C# ガイド | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="whats-new-in-xamarin-and-visual-studio-2022"&gt;What's New in Xamarin and Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/whats-new-in-xamarin-and-visual-studio-2022/"&gt;https://devblogs.microsoft.com/xamarin/whats-new-in-xamarin-and-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 と Xamarin のリリースについての記事。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 でサポートされた機能と、Xamarin がサポートするモバイルプラットフォームのバージョンについて、.NET 6 への移行についてなど。&lt;/p&gt;
&lt;p&gt;記事ではMAUI のスケジュールが変更となった影響で Xamarin のサポート期間にも触れ、Xamarin は Microsoft Modern Lifecycle に従い最後にリリースされてから2年間（2023年11月まで) のサポートとなるとのこと。&lt;/p&gt;
&lt;h3 id="announcing.net-maui-preview-10"&gt;Announcing .NET MAUI Preview 10&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-10/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Preview 10 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースには Visual Studio 2022 の Preview Channel が必要となる。変更点としては &lt;code&gt;CollectionView&lt;/code&gt; と &lt;code&gt;IndicatorView&lt;/code&gt; のハンドラー実装が追加、その他修正や改善など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/maui/releases/tag/6.0.101-preview.10"&gt;Release 6.0.101-preview.10 · dotnet/maui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-asp.net-core-in.net-6"&gt;Announcing ASP.NET Core in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-net-6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 と共にリリースされた ASP.NET Core についてまとめた記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ホットリロード&lt;/li&gt;
&lt;li&gt;Minimal API&lt;/li&gt;
&lt;li&gt;非同期ストリーミング&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IAsyncDisposable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bootstrap 5.1&lt;/li&gt;
&lt;li&gt;Nullable reference type の対応&lt;/li&gt;
&lt;li&gt;ページとビューでの CSS アイソレーション&lt;/li&gt;
&lt;li&gt;ページとビューでの JavaScript モジュール&lt;/li&gt;
&lt;li&gt;Blazor の改善
&lt;ul&gt;
&lt;li&gt;JavaScript からのコンポーネントのレンダリング&lt;/li&gt;
&lt;li&gt;プリレンダリングのステートの保持&lt;/li&gt;
&lt;li&gt;エラーバウンダリ&lt;/li&gt;
&lt;li&gt;カスタムイベント引数&lt;/li&gt;
&lt;li&gt;ジェネリック型パラメータの推論&lt;/li&gt;
&lt;li&gt;コンポーネントの必須パラメーター&lt;/li&gt;
&lt;li&gt;クエリーストリングのハンドリング&lt;/li&gt;
&lt;li&gt;HTML の &lt;code&gt;head&lt;/code&gt; のコントロール&lt;/li&gt;
&lt;li&gt;JavaScript 初期化&lt;/li&gt;
&lt;li&gt;動的なコンポーネントのレンダリング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.NET WebAssembly ビルドツール&lt;/li&gt;
&lt;li&gt;シングルページアプリケーションテンプレート (React, Angular)&lt;/li&gt;
&lt;li&gt;Socket コントロール&lt;/li&gt;
&lt;li&gt;型のついたヘッダー&lt;/li&gt;
&lt;li&gt;HTTP と W3C ロギングフォーマット&lt;/li&gt;
&lt;li&gt;HTTP/3 (プレビュー)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳しくは記事からリンクされているドキュメントや個別の記事で紹介されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/migration/50-to-60?view=aspnetcore-6.0&amp;amp;tabs=visual-studio"&gt;ASP.NET Core 5.0 から 6.0 への移行 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="f-6-is-officially-here"&gt;F# 6 is officially here!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/fsharp-6-is-officially-here/"&gt;https://devblogs.microsoft.com/dotnet/fsharp-6-is-officially-here/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではドキュメントの更新やコミュニティーによるツールのアップデートについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-in-fsharp-6/"&gt;What’s new in F# 6 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/fsharp/whats-new/fsharp-6"&gt;F# 6 の新機能 - F# ガイド | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-6-on-microsoft-azure"&gt;.NET 6 on Microsoft Azure&lt;/h3&gt;
&lt;p&gt;Azure のサービスでの .NET 6 サポートが開始された。今回は App Service に加え Azure Functions と Azure Static Web Apps も Day 0 でのサポートとなっている。&lt;/p&gt;
&lt;p&gt;App Service は Windows と Linux の両 App Service プランで .NET 6 への対応が行われた。&lt;/p&gt;
&lt;p&gt;Azure Functions も 4.0 がリリースされ、.NET 6 への対応が行われている。
Azure Static Web Apps も同様に .NET 6 への対応が行われ、Azure Functions と合わせてアプリケーションを構築できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/azure-functions-4-0-and-net-6-support-are-now-generally/ba-p/2933245"&gt;Azure Functions 4.0 and .NET 6 support are now generally available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/full-stack-net-6-apps-with-blazor-webassembly-and-azure-static/ba-p/2933428"&gt;Full-stack .NET 6 Apps with Blazor WebAssembly and Azure Static Web Apps - Microsoft Tech Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.github.io/AppService/2021/11/08/Dot.Net6.on.App.Service.html"&gt;.NET 6 on App Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/net-6-now-available-on-app-service/ba-p/2945364"&gt;.NET 6 now available on App Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-yarp-1.0-release.net-blog"&gt;Announcing YARP 1.0 Release - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-yarp-1-0-release/"&gt;https://devblogs.microsoft.com/dotnet/announcing-yarp-1-0-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP (Yet Another Reverse Proxy) 1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;YARP は高速なリバースプロキシーを ASP.NET Core の上に実装するためのオープンソースのライブラリーとなっており、ライブラリー形式であることからユーザーのニーズに合わせた実装を行えるとのこと。&lt;/p&gt;
&lt;p&gt;元々は Microsoft 社内でのリバースプロキシーの構築の相談が度々あったことから、共通のソリューションを用意するといった目的で始まったとのこと。サードパーティーのリバースプロキシーのカスタマイズや独自のリバースプロキシーを持つといったことをしていたが、HTTP/1 の対応はあるが gRPC のような HTTP/2 をサポートする必要があった場合でも実装が難しくなっていた。YARP はその点を ASP.NET Core と .NET および C# を使用してコントロールできるようにする。&lt;/p&gt;
&lt;p&gt;YARP は ASP.NET Core のミドルウェアとしてリクエストを処理することとなるが、大きく二つの利用・カスタマイズ方法が提供される。&lt;/p&gt;
&lt;p&gt;一つは完全なプロキシーとしての機能。これは URL のパターンでルートを定義し、クラスター/宛先を決定するといった機能。宛先のヘルス状態を使用したり、ロードバランシング、セッションアフィニティといったものをサポートする。これらの設定は拡張により外部のサービス、記事では Service Fabric から取得するといったこともできるとしている。&lt;/p&gt;
&lt;p&gt;もう一つの利用方法としては高度な環境向けにルーティングやロードバランシングといったものを使用せず、直接 YARP のリクエストフォワーダーを呼び出す利用方法がある。これは Azure App Service で特定のインスタンスにルーティングするといった目的で使用しているとのこと。&lt;/p&gt;
&lt;p&gt;YARP 1.0 で導入される機能は次のようなものとなる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構成
&lt;ul&gt;
&lt;li&gt;静的ファイルやプログラマブルな拡張&lt;/li&gt;
&lt;li&gt;アプリケーションコードによるルーティング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ルーティングとインバウンド接続
&lt;ul&gt;
&lt;li&gt;SNI/Host によるルート&lt;/li&gt;
&lt;li&gt;URL やヘッダー値によるルーティング&lt;/li&gt;
&lt;li&gt;セッションアフィニティ&lt;/li&gt;
&lt;li&gt;ロードバランシングの複数のアルゴリズム、&lt;/li&gt;
&lt;li&gt;認証/認可と CORS 用ルート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プロキシーとアウトバウンド接続
&lt;ul&gt;
&lt;li&gt;URL 書き換え&lt;/li&gt;
&lt;li&gt;リクエストとレスポンスの書き換え&lt;/li&gt;
&lt;li&gt;メソッドの書き換え&lt;/li&gt;
&lt;li&gt;アウトバウンド HTTP 接続の宛先の構成&lt;/li&gt;
&lt;li&gt;プロキシによるリクエスト転送時に標準的なヘッダーの追加&lt;/li&gt;
&lt;li&gt;gRPC と WebSocket のストリーミングを含むトラフィック&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;診断
&lt;ul&gt;
&lt;li&gt;パフォーマンスモニタリングのためのメトリクス&lt;/li&gt;
&lt;li&gt;ロギング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全般
&lt;ul&gt;
&lt;li&gt;クラウドスケールパフォーマンス&lt;/li&gt;
&lt;li&gt;ドキュメント&lt;/li&gt;
&lt;li&gt;容易な拡張性&lt;/li&gt;
&lt;li&gt;.NET Core 3.1, .NET 5, .NET 6 のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パフォーマンスは参考として10月時点で HTTP/1 での処理で Envoy と比較して高い性能が出ているとしている。&lt;/p&gt;
&lt;p&gt;サポートは ASP.NET Core とコアライブラリーのネットワークチームによって行われ、24時間365日のようなサポートはないが GitHub の Issue は通常24時間以内に応答するとのこと。1.0 のサービスリリースとなり新機能は新バージョンにて提供予定。&lt;/p&gt;
&lt;p&gt;最後に将来的に対応したいものとして HTTP/3 やパフォーマンスの改善、LLHTTP 対応、Service Fabric 対応、Kubernetes 統合といったものが挙げられている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/reverse-proxy"&gt;microsoft/reverse-proxy: A toolkit for developing high-performance HTTP reverse proxy applications.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-preview-release-notes"&gt;Visual Studio 2022 Preview Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1710-pre10--visual-studio-2022-version-171-preview-1-newreleasebutton"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1710-pre10--visual-studio-2022-version-171-preview-1-newreleasebutton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.1 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;Azure App Service のプロセスアタッチサポートの追加や .NET の PDB に埋め込まれたソースコードへの Go To Definition、MAUI Preview 10 のサポート、コード診断結果(Warning など)をインラインで表示する試験的な機能の追加、XAML Hot Reload の改善など。&lt;/p&gt;
&lt;h3 id="communitytoolkitdotnet.net-community-toolkit-is-a-collection-of-helpers-and-apis-that-work-for-all.net-developers-and-are-agnostic-of-any-specific-ui-platform.the-toolkit-is-part-of-the.net-foundation"&gt;CommunityToolkit/dotnet: .NET Community Toolkit is a collection of helpers and APIs that work for all .NET developers and are agnostic of any specific UI platform. The toolkit is part of the .NET Foundation.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/CommunityToolkit/dotnet"&gt;https://github.com/CommunityToolkit/dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Community Toolkit から UI プラットフォームに依存しない .NET 部分が切り離され、.NET Community Toolkit として公開された。&lt;/p&gt;
&lt;p&gt;MVVM ライブラリーや ArrayPoolBufferWriter のようなパフォーマンスのためのヘルパーライブラリーなどが切り出されている。&lt;/p&gt;
&lt;!-- https://twitter.com/sergiopedri/status/1458777113125863430?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The .NET Community Toolkit is now live! It&amp;#39;s a new home for the MVVM Toolkit, HighPerformance, Diagnostics packages and all .NET APIs from the Windows Community Toolkit. So excited about this, so many new things and improvements planned! 🚀&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt;&lt;a href="https://t.co/9wYk0hbfu3"&gt;https://t.co/9wYk0hbfu3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1458777113125863430?ref_src=twsrc%5Etfw"&gt;November 11, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="announcing-dotnet-monitor-in.net-6"&gt;Announcing dotnet monitor in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-monitor-in-net-6/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-monitor-in-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以前より試験的な位置づけとなっていた &lt;code&gt;dotnet monitor&lt;/code&gt; がサポート対象のリリースとなった。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet monitor&lt;/code&gt; は実行中の .NET アプリケーションから診断情報(ログやトレース、プロセスダンプ)を取得するためのツールでデータを収集するために次の二つの仕組みを持つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オンデマンドで収集するための HTTP API の提供&lt;/li&gt;
&lt;li&gt;指定したルールをトリガーを元に収集 (CPUの使用率が高いときに、といったケース)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;dotnet monitor&lt;/code&gt; は .NET CLI Tool とコンテナーイメージでの提供となる。&lt;/p&gt;
&lt;p&gt;記事では HTTP API のユースケースとしてアプリケーションのサイドカーとして &lt;code&gt;dotnet monitor&lt;/code&gt; コンテナーを実行し、&lt;code&gt;curl&lt;/code&gt; などでプロセスのログを取得するといった例を挙げている。どのような HTTP API が提供されているのかについても触れている。&lt;/p&gt;
&lt;p&gt;トリガーに関しても CPU 使用率が 80% 以上が1分以上続いた場合に収集するルールといった例が挙げられている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/dotnet-monitor/tree/main/documentation/api#http-api-documentation"&gt;dotnet-monitor/documentation/api at main · dotnet/dotnet-monitor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/dotnet-monitor/blob/main/documentation/collectionrules.md#collection-rules"&gt;dotnet-monitor/collectionrules.md at main · dotnet/dotnet-monitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-november-2021-updates-5.0.12-and-3.1.21"&gt;.NET November 2021 Updates – 5.0.12 and 3.1.21&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/november-2021-updates/"&gt;https://devblogs.microsoft.com/dotnet/november-2021-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5.0.12 と .NET Core 3.1.21 がリリースされた。&lt;/p&gt;
&lt;p&gt;それぞれセキュリティー関連の更新はなく、ARM64 でのインストーラーの挙動や Entity Framework Core のプーリングなど細かい不具合修正を含むものとなっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/204"&gt;November 2021 .NET Updates · Issue #204 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-november-2021-cumulative-update"&gt;.NET Framework November 2021 Cumulative Update&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-november-2021-cumulative-update/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-november-2021-cumulative-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2021年11月の累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;セキュリティー関連のアップデートは特になく、品質の向上と一部機能の改善が含まれている。&lt;/p&gt;
&lt;p&gt;機能の改善は主にコンテナー環境のサポートとなっている。コンテナー環境においての CPU とメモリーの上限、少ないヒープの割り当て、プロセス分離モデルのサポート、ProcessorCount の手動設定のサポートなど。設定は環境変数の DOTNET_, COMPLUS_ で行う。&lt;/p&gt;
&lt;h3 id="release-2.0.0-mysql-netmysqlconnector"&gt;Release 2.0.0 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.0.0"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySQL Connector 2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは DateOnly や TimeOnly 対応や Batch API 対応などを含めた .NET 6 の対応、MySqlBulkCopy API の強化、ConnectionIdlePingTime の廃止、ターゲットフレームワークから netstandard1.3 と netcoreapp2.1 の削除、その他不具合の修正と改善が含まれている。&lt;/p&gt;
&lt;h3 id="announcing-nuget-6.0-source-mapping-package-vulnerabilities-faster-solution-load-oh-my"&gt;Announcing NuGet 6.0 - Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/announcing-nuget-6/"&gt;https://devblogs.microsoft.com/nuget/announcing-nuget-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet 6.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは次のような機能向上があることに触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 6 対応&lt;/li&gt;
&lt;li&gt;ソースマッピング&lt;/li&gt;
&lt;li&gt;Visual Studio 上でのパッケージ脆弱性確認&lt;/li&gt;
&lt;li&gt;リトライとバックオフの設定 (Experimental)&lt;/li&gt;
&lt;li&gt;デフォルト除外拡張子指定&lt;/li&gt;
&lt;li&gt;Visual Studio での廃止情報表示の改善&lt;/li&gt;
&lt;li&gt;Visual Studio でのパッケージ README の追加&lt;/li&gt;
&lt;li&gt;Visual Studio でのソリューション読み込み時間とブランチ切り替え時間の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="integrations-blazor"&gt;Integrations - Blazor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/fluent-ui/web-components/integrations/blazor"&gt;https://docs.microsoft.com/ja-jp/fluent-ui/web-components/integrations/blazor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fluent UI Web Components (fast の Fluent UI) の Blazor 統合がリリースされた。&lt;/p&gt;
&lt;p&gt;これにより Fluent UI のビジュアルを持つあらかじめ用意されているコンポーネントを簡単に Blazor に導入できるようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/fluent-ui/web-components/components/overview"&gt;Web Components Overview | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/fluentui/status/1458118151531483136?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today, we&amp;#39;re excited to announce the release of Fluent UI components for Blazor! Learn more at &lt;a href="https://t.co/NsL6nkuzQD"&gt;https://t.co/NsL6nkuzQD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Fluent UI (&amp;#64;fluentui) &lt;a href="https://twitter.com/fluentui/status/1458118151531483136?ref_src=twsrc%5Etfw"&gt;November 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="dotnetoss-grants-dotnetos"&gt;DotnetOSS Grants - Dotnetos&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetos.org/initiatives/grants/"&gt;https://dotnetos.org/initiatives/grants/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 系のコンテンツを提供している Dotnetos がオープンソースの支援として傑出した OSS クリエーターを選出して6か月の GitHub Sponsorship を行う DotnetOSS Grants を開始した。&lt;/p&gt;
&lt;p&gt;現時点では Jeremy Skinner 氏、Marc Gravell 氏、Alexandre Mutel 氏に与えられている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotnetos.org/blog/2021-11-04-dotnetoss-grants/"&gt;Why should we care about the OSS community? | Dotnetos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="linqpad-7"&gt;LINQPad 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.linqpad.net/LINQPad7.aspx"&gt;https://www.linqpad.net/LINQPad7.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQPad 7 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 の対応が行われた。このバージョンから x86 と x64 に加え ARM64 版の提供されるようになり ARM 版 Windows でも利用できるようになった。その他 Entity Framework Core 6.0 への対応、文字列の比較結果を表示する Util.Dif の追加など。&lt;/p&gt;
&lt;p&gt;メジャーバージョンアップとなるため、LINQPad 6 のライセンスからは有償アップグレードする必要がある点に注意(無償アップグレード対象期間外の場合)。&lt;/p&gt;
&lt;h3 id="release-v6.0.0-npgsqlnpgsql"&gt;Release v6.0.0 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.0"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PostgreSQL のドライバー Npgsql 6.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;ロードバランシングやフェイルオーバーを含む複数サーバー接続、OpenTelemetry によるトレーシング、timestamp の改善、プレースホルダーの解釈をサーバーで行う Raw SQL モードの追加、.NET 6 で追加されたADO.NET のバッチ API への対応、SSL/TLS の改善、ロジカルレプリケーションサポートの改善、その他 .NET 6 に関連する対応など。timestamp のマッピングなどをはじめとして破壊的変更もいくつか存在する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npgsql.org/doc/release-notes/6.0.html"&gt;https://www.npgsql.org/doc/release-notes/6.0.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-3-and-upcoming-native-m1-processor-support"&gt;Visual Studio 2022 for Mac Preview 3, and Upcoming Native M1 Processor Support&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-3-and-upcoming-native-m1-processor-support/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-3-and-upcoming-native-m1-processor-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac ではネイティブ macOS 体験にフォーカスしていること。UI を macOS ネイティブのものへと移行し体験とアシスト技術へのサポート向上や IDE の速度向上と安定性の向上を目的としている、など。&lt;/p&gt;
&lt;p&gt;Preview 3 では .NET 6 の GA 版リリースでの開発がサポートされた。&lt;/p&gt;
&lt;p&gt;エディター部分の改善としてサブワードナビゲーションや各種コードフィックス等のリファクタリングの強化が行われている。&lt;/p&gt;
&lt;p&gt;引き続きネイティブ macOS UI への移行が進められ75%が移行されているとする。このリリースでは Git のブランチ管理ダイアログ、NuGet の設定、コードフォーマットとプロジェクトの設定などが移行された。&lt;/p&gt;
&lt;p&gt;近いうちに Apple M1 ネイティブで動作するようになるとのことにも触れている。この対応のために IDE が動作するランタイムを .NET 6 の CLR (現状 Mono) へと変更する予定であり、Intel も含め多くのパフォーマンス改善が得られるようになるとのこと。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac の GA 版リリースは2022年の前半を予定している。&lt;/p&gt;
&lt;h3 id="whats-new-for-visual-basic-in-visual-studio-2022"&gt;What’s New for Visual Basic in Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-for-visual-basic-in-visual-studio-2022/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-for-visual-basic-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 における Visual Basic 向けの機能強化についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォントの変更&lt;/li&gt;
&lt;li&gt;デバッグ時のブレークポイントの強化&lt;/li&gt;
&lt;li&gt;エディターのサブワードナビゲーション&lt;/li&gt;
&lt;li&gt;継承元へジャンプできる継承マージン&lt;/li&gt;
&lt;li&gt;IntelliSense のシンボル対応、&lt;/li&gt;
&lt;li&gt;インラインパラメータ名ヒント&lt;/li&gt;
&lt;li&gt;リファクタリングの強化&lt;/li&gt;
&lt;li&gt;Windows Forms アプリケーションの起動時の ApplyApplicationDefaults イベントの追加&lt;/li&gt;
&lt;li&gt;ソースジェネレーター対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など、多くの Visual Studio の言語サポートが強化されている。&lt;/p&gt;
&lt;p&gt;記事では既知の問題として、未使用の参照の削除で取りこぼしがあるケース、.editorconfig の設定の多くが C# 固有であること、.vbproj の &lt;code&gt;ApplicationDefaultFont&lt;/code&gt; は現時点では無視されることなどがあるとしている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="single-file-apps-in.net-6.net-core-tutorials"&gt;Single File Apps In .NET 6 - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2021/11/10/single-file-apps-in-net-6/"&gt;https://dotnetcoretutorials.com/2021/11/10/single-file-apps-in-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 での単一ファイルアプリケーション (Single File App) についての記事。&lt;/p&gt;
&lt;p&gt;記事では 単一ファイルアプリケーションの発行の仕方の基本に加えて .NET 6 で改善されたインメモリー展開や IL Trimming についても触れている。&lt;/p&gt;
&lt;h3 id="unity-2021.2-c-9-qiita"&gt;祝 Unity 2021.2 C# 9 対応！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/b43754c0763866b4fa96"&gt;https://qiita.com/up-hash/items/b43754c0763866b4fa96&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2021.2 で対応した C# 9 の Unity で利用可能な機能などをまとめた記事。&lt;/p&gt;
&lt;h3 id="source-generator-updates-incremental-generators-exploring.net-core-6-part-9"&gt;Source generator updates: incremental generators: Exploring .NET Core 6 - Part 9&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-6-part-9-source-generator-updates-incremental-generators/"&gt;https://andrewlock.net/exploring-dotnet-6-part-9-source-generator-updates-incremental-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 (Roslyn 4.x) で導入された Incremental Source Generator (V2 API) についての解説記事。&lt;/p&gt;
&lt;p&gt;記事では LoggerMessageGenerator のコードを例としてソースジェネレーターの処理のフローとパイプラインの構築方法といったものを解説している。&lt;/p&gt;
&lt;h3 id="net-qiita"&gt;簡易版 .NETのランタイムデバッグをする方法 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/up-hash/items/7b0e9621e9d850e4088a"&gt;https://qiita.com/up-hash/items/7b0e9621e9d850e4088a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET ランタイム (dotnet/runtime) を Visual Studio でビルドしてデバッグ実行するまでの手順についての記事。&lt;/p&gt;
&lt;h3 id="blazor-webassemblyfilesystem"&gt;Blazor WebAssemblyアプリ上に展開されているFileSystemを触る - 窓を作っては壊していた人のブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://teitoku-window.hatenablog.com/entry/2021/10/29/225536"&gt;https://teitoku-window.hatenablog.com/entry/2021/10/29/225536&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の Blazor WebAssembly から Emscripten の File System API を介して仮想ファイルシステム(ブラウザー外のファイルシステムにアクセスするものとは別)を操作できるということについての記事。&lt;/p&gt;
&lt;h3 id="blazor-webassemblynativefilereferenceprebuiltwasm"&gt;Blazor WebAssemblyアプリ上で使えるNativeFileReferenceを使ったPreBuiltなwasmを含むパッケージを作ってみる - 窓を作っては壊していた人のブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://teitoku-window.hatenablog.com/entry/2021/11/08/234722"&gt;https://teitoku-window.hatenablog.com/entry/2021/11/08/234722&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly でアクセス可能な仮想ファイルシステムと外部ネイティブライブラリーを組み合わせて利用することについての記事。&lt;/p&gt;
&lt;p&gt;記事では日本語 TTS の Open JTalk を Emscripten でコンパイルして NativeFileReference で参照し、Open JTalk のデータを仮想ファイルシステムに展開するといったことを行っている。&lt;/p&gt;
&lt;h3 id="vlc.dotnet.wpf-qiita"&gt;Vlc.DotNet.Wpfの罠にはまった話 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/admiralhetare/items/576f11302110143bf405"&gt;https://qiita.com/admiralhetare/items/576f11302110143bf405&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vlc.DotNet.Wpf の代わりに LibVLCSharp を使用して WPF アプリケーションでメディアを再生することについての記事。&lt;/p&gt;
&lt;h3 id="visual-studio.net-framework-4.8.net-6-winformswpf-qiita"&gt;Visual Studioで.NET Framework 4.8と.NET 6のソースコードを共存させる (WinForms＆WPF) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/belre/items/2ea0d3614786786f7cee"&gt;https://qiita.com/belre/items/2ea0d3614786786f7cee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.8 の Windows Forms プロジェクトを.NET 6 でもビルド出来る形に Visual Studio を使用して構成/共存する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6-new-project-templates-and-minimal-apis.are-you-ready"&gt;.NET 6 New Project Templates and Minimal APIs. Are you ready?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/net-6-new-project-templates-and-minimal-apis-are-you-ready/"&gt;https://platform.uno/blog/net-6-new-project-templates-and-minimal-apis-are-you-ready/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="msbuild-and-64-bit-visual-studio-2022"&gt;MSBuild and 64-bit Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/msbuild-and-64-bit-visual-studio-2022/"&gt;https://devblogs.microsoft.com/dotnet/msbuild-and-64-bit-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で MSBuild も 64-bit 化されたことについての記事。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 では MSBuild が 64-bit 化され、Develpper Command Prompt で通る PATH が指すものも 64-bit のものに変更された。この変更は &lt;code&gt;dotnet build&lt;/code&gt; には影響しない。&lt;/p&gt;
&lt;p&gt;これによって既存の 32-bit 環境を想定している MSBuild タスクが動作しなくなることがある。依存する原因としてファイルシステムパスやレジストリーなどを挙げている。他にも 32-bit のライブラリーをラップしている Visual Studio SDK に依存する場合も更新する必要がある。&lt;/p&gt;
&lt;p&gt;記事では 32-bit と 64-bit 両対応方法とテストするパターンなどについて記している。&lt;/p&gt;
&lt;h3 id="bite-size.net-6-unionby-intersectby-exceptby-and-distinctby"&gt;Bite-Size .NET 6 - UnionBy, IntersectBy, ExceptBy, and DistinctBy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://exceptionnotfound.net/bite-size-dotnet-6-unionby-intersectby-exceptby-and-distinctby/"&gt;https://exceptionnotfound.net/bite-size-dotnet-6-unionby-intersectby-exceptby-and-distinctby/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で LINQ に追加された UnionBy, IntersectBy, ExceptBy, DistinctBy についての記事。&lt;/p&gt;
&lt;p&gt;*By メソッドでは集合の要素を比較する際に要素そのものの代わりに特定のプロパティーなどで比較できる。&lt;/p&gt;
&lt;h3 id="in-memory-automated-ui-testing-asp.net-core"&gt;In Memory Automated UI Testing ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/jdinnovensa/in-memory-automated-ui-testing-aspnet-core-106d"&gt;https://dev.to/jdinnovensa/in-memory-automated-ui-testing-aspnet-core-106d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インメモリーで ASP.NET Core アプリケーションの自動 UI テストを行うことについての記事。&lt;/p&gt;
&lt;p&gt;記事では ASP.NET Core のアプリケーションをテストで実行するのに WebApplicationFactory とブラウザー自動化に .NET 向けの Playwright する形で対応している。
実際に利用した際や CI で実行時に発生する問題についても触れている。&lt;/p&gt;
&lt;h3 id="key-value-store-built-with-cockroachdb.net-5.0-and-entity-framework"&gt;Key-Value store built with CockroachDB, .Net 5.0, and Entity Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/acho_arnold/key-value-store-built-with-cockroachdb-net-50-and-entity-framework-1kl4"&gt;https://dev.to/acho_arnold/key-value-store-built-with-cockroachdb-net-50-and-entity-framework-1kl4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CockroachDB を使用して .NET 5 と Entity Framework Core で Key-Value ストアを実装する記事。&lt;/p&gt;
&lt;h3 id="net-6-api"&gt;.NET 6 でのAPI変更を眺めてみる&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/udaken/articles/overview-of-dotnet6-api-diff"&gt;https://zenn.dev/udaken/articles/overview-of-dotnet6-api-diff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 での API の変更点を広く簡単にまとめている記事。&lt;/p&gt;
&lt;h3 id="net-6-preview-system.random"&gt;.NET 6 (Preview) における System.Random の実装変更 - 屋根裏工房改&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andantesoft.hatenablog.com/entry/2021/03/28/231632"&gt;https://andantesoft.hatenablog.com/entry/2021/03/28/231632&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で変更された Random の実装についての解説記事。&lt;/p&gt;
&lt;p&gt;シード未指定時にアルゴリズムとして xoshiro256** が使用されるように変わったこと、出力関数の改善点、パフォーマンスなどについて触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="maoni0realmon-a-monitoring-tool-that-tells-you-when-gcs-happen-in-a-process-and-some-characteristics-about-these-gcs"&gt;Maoni0/realmon: A monitoring tool that tells you when GCs happen in a process and some characteristics about these GCs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/maoni0/realmon"&gt;https://github.com/maoni0/realmon&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/maoni0/status/1457137728743563267?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;m sharing a very simple utility that lets you see GCs happening in a process in real time. so if you are running something, especially a client app, you could see GCs as they happen. &lt;a href="https://t.co/F3rtU42Rb0"&gt;https://t.co/F3rtU42Rb0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Maoni Stephens (&amp;#64;maoni0) &lt;a href="https://twitter.com/maoni0/status/1457137728743563267?ref_src=twsrc%5Etfw"&gt;November 7, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="artiomchiflexlabs.upsert-flexlabs.upsert-is-a-library-that-brings-upsert-functionality-to-common-database-providers-for-entity-framework-in-their-respective-native-sql-syntax"&gt;artiomchi/FlexLabs.Upsert: FlexLabs.Upsert is a library that brings UPSERT functionality to common database providers for Entity Framework in their respective native SQL syntax&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/artiomchi/FlexLabs.Upsert"&gt;https://github.com/artiomchi/FlexLabs.Upsert&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で UPDATE OR INSERT いわゆる UPSERT を行うための拡張ライブラリー。SQLServer, PostgreSQL, SQLite, MySQL に対応している。&lt;/p&gt;
&lt;h3 id="github-sharplinersharpliner-use-c-instead-of-yaml-to-define-your-azure-devops-pipelines"&gt;GitHub - sharpliner/sharpliner: Use C# instead of YAML to define your Azure DevOps pipelines&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/sharpliner/sharpliner"&gt;https://github.com/sharpliner/sharpliner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines の YAML を C# のソースコードでタイプセーフに記述できるようにするライブラリー。&lt;/p&gt;
&lt;h3 id="microsoftvisualstudioswag-digital-swag-for-microsoft-visual-studio"&gt;microsoft/VisualStudioSwag: Digital swag for Microsoft Visual Studio.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/VisualStudioSwag"&gt;https://github.com/microsoft/VisualStudioSwag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio のデジタル Swag (おみやげ/記念品)。壁紙や 3D データなどが公開されている。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;文字列補間ハンドラーを詳しく学習する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/tutorials/interpolated-string-handler"&gt;https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/tutorials/interpolated-string-handler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された文字列補完式の拡張の文字列補完ハンドラー(InterpolatedStringHandler)の実装方法についてのドキュメント。&lt;/p&gt;
&lt;h3 id="section-5"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/sergiopedri/status/1456203748187979784?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It took lots of work, but I finally managed to get ComputeSharp running on UWP too, in Release mode with .NET Native! I had to fork/trim TerraFX, then multi-target both and add a whole lot of polyfills and fixups for .NET Standard 2.0, but... It actually works! 🚀&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/PqUspg9WOm"&gt;pic.twitter.com/PqUspg9WOm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sergio Pedri (&amp;#64;SergioPedri) &lt;a href="https://twitter.com/SergioPedri/status/1456203748187979784?ref_src=twsrc%5Etfw"&gt;November 4, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;UWP の .NET Native (AOT) でも ComputeSharp を気合で動かせたという話(ComputeSharp は少し前まで .NET 5 向けで現在 .NET 6 向けとなっている)。&lt;/p&gt;
&lt;!-- https://twitter.com/blowdart/status/1457819844858945537?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I know you’re all excited about .NET 6 but I will remind you that the eol for 5 now starts. You have six months to upgrade. &lt;a href="https://t.co/MW4phE47OM"&gt;https://t.co/MW4phE47OM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Barry Dorrans (&amp;#64;blowdart) &lt;a href="https://twitter.com/blowdart/status/1457819844858945537?ref_src=twsrc%5Etfw"&gt;November 8, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 5 の EOL が半年後に来るという話。.NET 5 は LTS ではないためリリースから18か月で EOL を迎えることとなり来年の5月8日がサポート終了日となる。&lt;/p&gt;
&lt;!-- https://twitter.com/kirillosenkov/status/1456678641899737091?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I have just learned that setting the MSBuildDebugEngine=1 environment variable and then starting VS will give you full, proper binlogs from Visual Studio builds (including design-time), read here for details: &lt;a href="https://t.co/0ZG9ffVDK3"&gt;https://t.co/0ZG9ffVDK3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kirill Osenkov (&amp;#64;KirillOsenkov) &lt;a href="https://twitter.com/KirillOsenkov/status/1456678641899737091?ref_src=twsrc%5Etfw"&gt;November 5, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;環境変数 &lt;code&gt;MSBuildDebugEngine&lt;/code&gt; に &lt;code&gt;1&lt;/code&gt; を設定した状態で Visual Studio を起動することで Visual Studio がビルドした際(デザイン時のものを含む)の binlog を取得できるというテクニック。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="api-proposal-posix-error-codes-issue-61351-dotnetruntime"&gt;[API Proposal]: Posix error codes · Issue #61351 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61351"&gt;https://github.com/dotnet/runtime/issues/61351&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;POSIX エラーコードを扱う enum などが欲しいという提案。プラットフォームによってエラーコードが違うこと、CLR や Mono は内部でマッピングを持っているが詳細を公開 API にするつもりはないということで閉じられている。&lt;/p&gt;
&lt;h3 id="net-6-uribuilder-breaking-change-not-documented-issue-61363-dotnetruntime"&gt;[.NET 6] UriBuilder breaking change not documented · Issue #61363 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61363"&gt;https://github.com/dotnet/runtime/issues/61363&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new UriBuilder(&amp;quot;myapp&amp;quot;, &amp;quot;host&amp;quot;, 0, &amp;quot;path&amp;quot;)&lt;/code&gt; のように UriBuilder に独自スキームとポート番号 0 を渡したときに出力する Uri に .NET 5 まではポート番号が含まれていなかったが、.NET 6 で含まれるようになったので破壊的変更ではという Issue。元々 -1 が省略の意味だったので正しく 0 を扱えるようバグ修正した結果とのこと。&lt;/p&gt;
&lt;h3 id="epic-signalr.net7-issue-38196-dotnetaspnetcore"&gt;EPIC: SignalR - .NET7 · Issue #38196 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/38196"&gt;https://github.com/dotnet/aspnetcore/issues/38196&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SignalR の .NET 7 でのエピック&lt;/p&gt;
&lt;h3 id="add-enumerable.concat-enumerable.flatten-methods-by-eiriktsarpalis-pull-request-61230-dotnetruntime"&gt;Add Enumerable.Concat &amp;amp; Enumerable.Flatten methods by eiriktsarpalis · Pull Request #61230 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61230"&gt;https://github.com/dotnet/runtime/pull/61230&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINQ の &lt;code&gt;Concat&lt;/code&gt; に3つ以上の &lt;code&gt;IEnumerable&amp;lt;TSource&amp;gt;&lt;/code&gt; を受け取るオーバーロードの追加とシーケンスを平坦化する &lt;code&gt;Flatten&lt;/code&gt; メソッドの追加 PR。&lt;/p&gt;
&lt;h3 id="adding-a-proposal-for-the-self-constraint-by-tannergooding-pull-request-5387-dotnetcsharplang"&gt;Adding a proposal for the self-constraint by tannergooding · Pull Request #5387 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/pull/5387"&gt;https://github.com/dotnet/csharplang/pull/5387&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IEquatable&amp;lt;T&amp;gt;&lt;/code&gt; のようなジェネリックパラメーターに実装する型を指定するようなパターン(&lt;code&gt;class Foo : IEquatable&amp;lt;Foo&amp;gt; { ... }&lt;/code&gt;)で型パラメータを自身に制限する制約を追加したいという提案。&lt;/p&gt;
&lt;h3 id="use-file-scoped-namespaces-by-pranavkm-pull-request-38076-dotnetaspnetcore"&gt;Use file scoped namespaces by pranavkm · Pull Request #38076 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/38076"&gt;https://github.com/dotnet/aspnetcore/pull/38076&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のソースコードを file-scoped namespace に変更する PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2021-11-05: .NET community support, Advent Calendar, Power Fx</title>
			<link>/2021/11/05/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2021/11/05/updates</guid>
			<pubDate>Fri, 05 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;いよいよ来週の11月8日(日本時間11月9日) は &lt;a href="https://visualstudio.microsoft.com/ja/launch/"&gt;Visual Studio 2022 のローンチイベント&lt;/a&gt;、翌日11月9日(日本時間11月10日) は &lt;a href="https://www.dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt; で .NET 6 がリリースとなります。&lt;/p&gt;
&lt;p&gt;.NET Conf は各地のローカルコミュニティーイベントもあり、日本では &lt;a href="https://devblog.connpass.com/event/228106/"&gt;11/12(金) 22時からのdevblogラジオ&lt;/a&gt; がそれとなるようです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/answers/products/dotnet"&gt;Microsoft の .NET コミュニティーサイト&lt;/a&gt;が公開されました。&lt;/p&gt;
&lt;p&gt;Q&amp;amp;A がメインのような感じなので Stack Overflow やフォーラムに近い位置づけになりそうです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/csharplang"&gt;Qiita での C# の 2021 年の Advent Calendar&lt;/a&gt; ページが公開されました。&lt;/p&gt;
&lt;p&gt;12月までは時間があり、枠も空いていますので C# 関連で何か書いてみたい方はお早目の登録をおすすめします。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://powerapps.microsoft.com/en-us/blog/power-fx-open-source-now-available/"&gt;ローコードツールの Power Apps の言語 Power Fx がオープンソースでリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;Power Apps は Excel の式のような文法でコードを記述するのですが、その言語部分である Power Fx がオープンソースでリリースされました。これは C# / .NET で実装されており、Power Apps などとは関係なくアプリケーションに組み込むことが可能なものとなっています。&lt;/p&gt;
&lt;p&gt;プログラマ向けではないが簡易的なロジックを記述できるような仕組みをアプリケーションに組み込みたい場合などには有用かもしれません。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-6-launches-at.net-conf-november-9-11"&gt;.NET 6 Launches at .NET Conf, November 9-11&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-6-launches-at-net-conf-november-9-11/"&gt;https://devblogs.microsoft.com/dotnet/net-6-launches-at-net-conf-november-9-11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オンラインカンファレンスの .NET Conf が11月9日(日本時間では11月10日午前1時)から始まり3日間開催され、その中で .NET 6 のローンチが予定されている。記事では3日間のカンファレンススケジュールの概要と、コミュニティーイベントの紹介、クイズやSwag (おみやげ) について触れている。&lt;/p&gt;
&lt;p&gt;放送は &lt;a href="http://www.dotnetconf.net/"&gt;www.dotnetconf.net&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/learn/tv/"&gt;Microsoft Learn TV&lt;/a&gt;, &lt;a href="https://www.youtube.com/dotnet"&gt;.NET YouTube channel&lt;/a&gt;, &lt;a href="http://www.twitch.tv/visualstudio"&gt;Visual Studio Twitch channel&lt;/a&gt; で行われ、スケジュールは大まかに Day 1 は .NET 6 について/.NET チームからのセッション/キーノート、Day 2 は .NET に関して深掘りするセッションとローカルコミュニティーのスピーカーによる24時間放送、Day 3 は前日からの24時間放送となっている。&lt;/p&gt;
&lt;p&gt;.NET 6 のローンチと .NET Conf に関連して各地でコミュニティーによるローカルイベントも行われる。日本では &lt;a href="https://devblog.connpass.com/event/228106/"&gt;11/12(金) 22時からのdevblogラジオ&lt;/a&gt; でオンラインの配信イベントがある模様。&lt;/p&gt;
&lt;p&gt;最後に20以上のスポンサーが参加する Day 1/2 の Attendee Party で技術的なクイズに答えると賞品が当たるイベントがあること、無料でダウンロード可能な壁紙やテーマなどの Swag があるとのこと。&lt;a href="https://www.dotnetconf.net/swag"&gt;Swag はスポンサー提供のものもあり、抽選でライセンスやバウチャーなどがもらえる。&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblog.connpass.com/event/228106/"&gt;devblogラジオ vol.29 ～.NET 6 GA～ #dotnetconf (2021/11/12 22:00〜)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-community-support-microsoft-docs"&gt;.NET community support | Microsoft Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/answers/products/dotnet"&gt;https://docs.microsoft.com/en-us/answers/products/dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の技術的な Q&amp;amp;A を行える Microsoft のコミュニティーサイトがオープン。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://techcommunity.microsoft.com/t5/net/ct-p/dotnet"&gt;.NET - Microsoft Tech Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="entity-framework-biweekly-status-updates-2021-issue-23884-dotnetefcore"&gt;Entity Framework Biweekly Status Updates (2021) · Issue #23884 · dotnet/efcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/efcore/issues/23884#issuecomment-961162804"&gt;https://github.com/dotnet/efcore/issues/23884#issuecomment-961162804&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework の隔週ステータスアップデートの11月4日号。&lt;/p&gt;
&lt;p&gt;ほぼ GA 間近ということもあり、大きなトピックはなく、EF Core 7 の計画が進行中なことや品質やドキュメンテーションなどが進んでいるなど。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/ef/core/what-is-new/ef-core-6.0/whatsnew"&gt;EF Core 6.0 の新機能 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-2.0.0-rc.1-mysql-netmysqlconnector"&gt;Release 2.0.0-rc.1 · mysql-net/MySqlConnector&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mysql-net/MySqlConnector/releases/tag/2.0.0-rc.1"&gt;https://github.com/mysql-net/MySqlConnector/releases/tag/2.0.0-rc.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Async MySQL Connector 2.0.0-rc.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;MySqlBulkCopy の強化、&lt;code&gt;netstandard2.0&lt;/code&gt; のサポートの削除、&lt;code&gt;BigInteger&lt;/code&gt; パラメータのサポートなど。&lt;/p&gt;
&lt;h3 id="power-fx-open-source-now-available-microsoft-power-apps"&gt;Power Fx: Open source now available | Microsoft Power Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://powerapps.microsoft.com/en-us/blog/power-fx-open-source-now-available/"&gt;https://powerapps.microsoft.com/en-us/blog/power-fx-open-source-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローコード開発ツールである Power Apps で使用されている Excel の式のような言語の Power Fx の処理部分がオープンソースでリリースされた。&lt;/p&gt;
&lt;p&gt;Power Fx は C# (.NET) にて実装されており Power Apps とは独立してアプリケーションへの組み込みなどが行えるようになっている。また Language Server なども提供されている。&lt;/p&gt;
&lt;p&gt;ホスティングのサンプルでは .NET コンソールアプリケーションで REPL 形式で実行するものなどが公開されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/Power-Fx"&gt;microsoft/Power-Fx: Power Fx low-code programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/power-fx-host-samples"&gt;microsoft/power-fx-host-samples: Samples for hosting Power Fx engine.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="c-advent-calendar-2021-qiita"&gt;C#のカレンダー | Advent Calendar 2021 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/csharplang"&gt;https://qiita.com/advent-calendar/2021/csharplang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2021年の C# の Advent Calendar の Qiita でのまとめ。現在参加者は募集中の様子。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-launch-event-agenda"&gt;Visual Studio 2022 Launch Event Agenda&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-launch-event-agenda/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-launch-event-agenda/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11月8日(日本時間11月9日)に開催される Visual Studio 2022 のローンチイベントのアジェンダについての記事。&lt;/p&gt;
&lt;p&gt;イベントでのセッションの一覧とストリーミングが終わった後に公開される Tips &amp;amp; tricks セッションの一覧が公開されている。&lt;/p&gt;
&lt;h3 id="more-flexible-and-inclusive-ways-to-manage-your-documents"&gt;More flexible and inclusive ways to manage your documents&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/personalize-docs/"&gt;https://devblogs.microsoft.com/visualstudio/personalize-docs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 で強化されたドキュメント関連の機能についての記事。&lt;/p&gt;
&lt;p&gt;タブのプロジェクトごとのカラーリングやタブレイアウト位置の変更、タブの設定(選択中の文字のボールド化や最小最大幅)などについて。&lt;/p&gt;
&lt;h3 id="build-client-web-assets-for-your-razor-class-library"&gt;Build client web assets for your Razor Class Library&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/build-client-web-assets-for-your-razor-class-library/"&gt;https://devblogs.microsoft.com/dotnet/build-client-web-assets-for-your-razor-class-library/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Razor Class Library (.razor, .cshtml) にクライアント向けのアセットをビルドして含める方法についての記事。&lt;/p&gt;
&lt;p&gt;npm を使用したビルドから NuGet パッケージにするまでについて解説している。&lt;/p&gt;
&lt;h3 id="bite-size.net-6-maxby-and-minby-in-linq"&gt;Bite-Size .NET 6 - MaxBy() and MinBy() in LINQ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://exceptionnotfound.net/bite-size-dotnet-6-maxby-and-minby-in-linq/"&gt;https://exceptionnotfound.net/bite-size-dotnet-6-maxby-and-minby-in-linq/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加される LINQ の &lt;code&gt;MaxBy&lt;/code&gt; と &lt;code&gt;MinBy&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MaxBy&lt;/code&gt; と &lt;code&gt;MinBy&lt;/code&gt; に指定した値のセレクターで最大/最小の要素を返すもの。&lt;/p&gt;
&lt;h3 id="c9.0-qiita"&gt;C#9.0 配列入りのレコードってどうだろう 【不変型配列レコード】 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/muniel/items/fd843abc55a5626e5c45"&gt;https://qiita.com/muniel/items/fd843abc55a5626e5c45&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;record&lt;/code&gt; クラスと &lt;code&gt;ImmutableArray&lt;/code&gt; で配列も込みで不変なデータを定義する方法についての記事。&lt;/p&gt;
&lt;h3 id="intrinsicsdouble"&gt;Intrinsicsを使ってdouble配列の合計値を計算を高速化&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/d310270361beba"&gt;https://zenn.dev/nin_neko/articles/d310270361beba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Runtime.Intrinsics&lt;/code&gt; の AVX を使用して double の配列を計算する方法とそのパフォーマンスについての記事。&lt;/p&gt;
&lt;h3 id="usage-of-consul-in.net-core-configuration-management"&gt;Usage of Consul in .NET Core - Configuration Management&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/engincanv/usage-of-consul-in-net-core-configuration-management-39h5"&gt;https://dev.to/engincanv/usage-of-consul-in-net-core-configuration-management-39h5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サービスディスカバリーなどのネットワークサービスを提供する HashiCorp Consul の構成管理部分を .NET から利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="ef-core-6-custom-functions-with-dbfunctionattribute"&gt;EF Core 6: Custom functions with DbFunctionAttribute&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/timur_kh/ef-core-6-custom-functions-with-dbfunctionattribute-1bb3"&gt;https://dev.to/timur_kh/ef-core-6-custom-functions-with-dbfunctionattribute-1bb3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6 で &lt;code&gt;DbFunction&lt;/code&gt; 属性を持つメソッドを定義することでデータベース関数 (ストアドプロシージャー) を呼び出すことができることについての記事。&lt;/p&gt;
&lt;h3 id="github-copilot-with-c.net.net-core-tutorials"&gt;Github Copilot With C# .NET - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2021/10/30/github-copilot-with-c-net/"&gt;https://dotnetcoretutorials.com/2021/10/30/github-copilot-with-c-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Copilot の C# / .NET での対応についてとその使用感についての記事。&lt;/p&gt;
&lt;h3 id="caller-argument-expressions-a-look-at-new-language-features-in-c-10-the.net-tools-blog"&gt;Caller Argument Expressions – A Look at New Language Features in C# 10 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/11/04/caller-argument-expressions-in-csharp-10/"&gt;https://blog.jetbrains.com/dotnet/2021/11/04/caller-argument-expressions-in-csharp-10/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で導入された &lt;code&gt;CallerArgumentExpressionAttribute&lt;/code&gt; 属性についての解説記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CallerArgumentExpression&lt;/code&gt; を使用すると、指定したパラメーターに対して呼び出し元で指定された式を文字列として取得できるため Assert のようなケースで役立つ。記事では次のような例が紹介されている。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static void Main(string[] args)
{
    // What you call
    Assert(args.Length != 1);

    // What gets compiled
    Assert(args.Length != 1, &amp;quot;args.Length != 1&amp;quot;);
}

public static void Assert(
    bool condition,
    [CallerArgumentExpression(&amp;quot;condition&amp;quot;)]
    string conditionExpression = default)
{
    if (!condition)
        throw new Exception($&amp;quot;Condition failed: {conditionExpression}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、ReSharper と Rider ではコード解析により、&lt;code&gt;CallerArgumentExpression&lt;/code&gt; のパラメーターに値を渡すようなコードや存在しないパラメーター名を指定した場合に警告するといった機能があることにも触れている。&lt;/p&gt;
&lt;h3 id="net-system.random"&gt;.NET System.Random の実装と欠陥について ～ 重箱の隅をつつきたおす ～ - 屋根裏工房改&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andantesoft.hatenablog.com/entry/2021/01/09/203050"&gt;https://andantesoft.hatenablog.com/entry/2021/01/09/203050&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Random の実装とその性質や問題点について詳しく解説している記事。&lt;/p&gt;
&lt;h3 id="net-6"&gt;.NET 6: スレッドの改善&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/news/2021/11/net6-Threading/"&gt;https://www.infoq.com/jp/news/2021/11/net6-Threading/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で改善されたスレッド周りの機能についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Parallel.ForEachAsync&lt;/code&gt;、&lt;code&gt;Thread.ManagedThreadId&lt;/code&gt;, &lt;code&gt;Thread.UnsafeStart&lt;/code&gt; やタスクベースのタイマーについてなど。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-november-2021-the.net-tools-blog"&gt;.NET Annotated Monthly | November 2021 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2021/11/02/net-annotated-monthly-november-2021/"&gt;https://blog.jetbrains.com/dotnet/2021/11/02/net-annotated-monthly-november-2021/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains による .NET 関連の情報まとめ11月号。&lt;/p&gt;
&lt;h3 id="finding.net-memory-leaks-through-soak-testing"&gt;Finding .NET Memory Leaks through Soak Testing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/k6/finding-net-memory-leaks-through-soak-testing-2ibe"&gt;https://dev.to/k6/finding-net-memory-leaks-through-soak-testing-2ibe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メモリーリークを発見するために耐久性テスト(Soak Testing)を行うことについての記事。&lt;/p&gt;
&lt;p&gt;記事では k6 を使用して継続的に負荷をかけることでメモリーリークを発見するといった手法を紹介している。&lt;/p&gt;
&lt;h3 id="hostbuilder-and-host-for-windows-app-sdk"&gt;HostBuilder and Host for Windows App SDK&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/sharpninja/hostbuilder-and-host-for-windows-app-sdk-4lf4"&gt;https://dev.to/sharpninja/hostbuilder-and-host-for-windows-app-sdk-4lf4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK のアプリケーションにおいて HostBuilder と Host (Generic Host) を使用する方法についての記事。&lt;/p&gt;
&lt;p&gt;いくつかプロジェクトの設定の変更と外部ライブラリー(WindowsAppSdkHost)の使用が必要となるものの HostBuilder スタイルを使用することが可能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sharpninja/WindowsAppSdkHost"&gt;sharpninja/WindowsAppSdkHost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="static-analysis-of-the-invisible-c-sources-by-leandro-t.c.melo-nov-2021-shiftleft-blog"&gt;Static Analysis of (the Invisible) C# Sources | by Leandro T. C. Melo | Nov, 2021 | ShiftLeft Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shiftleft.io/the-invisible-c-code-51f008d8930"&gt;https://blog.shiftleft.io/the-invisible-c-code-51f008d8930&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# コンパイラーが生成するような見えないコードを静的解析するために C# のコードを展開するリライターを開発したという記事。例えば文字列補完式を展開するといったことを行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ShiftLeftSecurity/SharpSyntaxRewriter"&gt;ShiftLeftSecurity/SharpSyntaxRewriter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-code-coverage-on-gitlab"&gt;.NET Code coverage on GitLab&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/tuimm/net-code-coverage-on-gitlab-3e35f08d0f44"&gt;https://medium.com/tuimm/net-code-coverage-on-gitlab-3e35f08d0f44&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitLab 上で .NET のコードのカバレッジを取得し、レポートする方法についての記事。&lt;/p&gt;
&lt;h3 id="anomaly-detection-using-ml.net"&gt;Anomaly Detection Using ML.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/anomaly-detection-ml-net/"&gt;https://www.infoq.com/articles/anomaly-detection-ml-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET を使用して異常検知 (Anomaly Detection) を実装することについての記事。&lt;/p&gt;
&lt;h3 id="improving-logging-performance-with-source-generators-exploring.net-core-6-part-8"&gt;Improving logging performance with source generators: Exploring .NET Core 6 - Part 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-6-part-8-improving-logging-performance-with-source-generators/"&gt;https://andrewlock.net/exploring-dotnet-6-part-8-improving-logging-performance-with-source-generators/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ILogger&lt;/code&gt; を使用する場合のパフォーマンスの注意点と .NET 6 から導入された Logger の Source Generator を使用する方法についての記事。&lt;/p&gt;
&lt;p&gt;それぞれのケースにおいてのベンチマーク結果なども載せている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-badamczewskipowerup-decompilation-tools-and-high-productivity-utilities"&gt;GitHub - badamczewski/PowerUp: Decompilation Tools and High Productivity Utilities&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/badamczewski/PowerUp"&gt;https://github.com/badamczewski/PowerUp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.cs や .il ファイルを監視してコンパイルした際の JIT コンパイル結果を出力したり、簡易ベンチマークを実行したりできるツール群。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1455499944987660288?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Made some changes to .NET Decompilation Tools.&lt;br&gt;How each instruction will now show a high-level (C# like) documentation of what it is doing to your code.&lt;br&gt;&lt;br&gt;Link: &lt;a href="https://t.co/uuskcVxsXN"&gt;https://t.co/uuskcVxsXN&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/nlmGIib8HJ"&gt;pic.twitter.com/nlmGIib8HJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1455499944987660288?ref_src=twsrc%5Etfw"&gt;November 2, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="asp.net-core-blazor-webassembly"&gt;ASP.NET Core Blazor WebAssembly のセキュリティに関するその他のシナリオ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/security/webassembly/additional-scenarios?view=aspnetcore-5.0"&gt;https://docs.microsoft.com/ja-jp/aspnet/core/blazor/security/webassembly/additional-scenarios?view=aspnetcore-5.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly でアプリケーションを構築する上でセキュリティー関連を中心としたシナリオごとの情報がまとまっているドキュメント。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/andygocke/status/1454583486820405253?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;With .NET 6 around the corner, I wanted to talk about a new feature I’m very excited about: trim warnings! In .NET 3.1 we introduced trimming as a preview feature. Conceptually pretty simple — when publishing self-contained, the trimmer will remove anything unused. 1/&lt;/p&gt;&amp;mdash; Andy Gocke (&amp;#64;andygocke) &lt;a href="https://twitter.com/andygocke/status/1454583486820405253?ref_src=twsrc%5Etfw"&gt;October 30, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;self-contained なアプリケーションの発行時に使用できるトリミングでの警告についての話。(なお .NET 5 まではトリミングはプレビュー機能)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/deploying/trimming/fixing-warnings"&gt;トリミングの警告の概要 - .NET | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メソッドが潜在的にリフレクションや動的コードを使用している(トリム安全ではない)ことを伝える &lt;code&gt;RequiresUnreferencedCode&lt;/code&gt;属性 や動的にアクセスされることがあることをトリマーに伝える &lt;code&gt;DynamicallyAccessedMembers&lt;/code&gt; 属性などでトリミング時に警告できるようになった。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1453993632365699072?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Similar methods but vastly different results (C# / .NET 5)&lt;br&gt;&lt;br&gt;(The one that doesn&amp;#39;t inline will be slower)&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/YTL2ULAa5d"&gt;pic.twitter.com/YTL2ULAa5d&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1453993632365699072?ref_src=twsrc%5Etfw"&gt;October 29, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;一見単純なケースでも文字列補完式はボックス化や String.Format の呼び出しなどがあるからインライン化されないことがあるという話。&lt;/p&gt;
&lt;!-- https://twitter.com/okyrylchuk/status/1453828375735373825?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New math APIs have been added in .NET 6.&lt;br&gt;&lt;br&gt;New methods:&lt;br&gt;• SinCos&lt;br&gt;• ReciprocalEstimate&lt;br&gt;• ReciprocalSqrtEstimate &lt;br&gt;&lt;br&gt;New overloads:&lt;br&gt;• Min, Max, Abs, Sign, Clamp supports nint and nuint&lt;br&gt;• DivRem variants return a tuples&lt;a href="https://twitter.com/hashtag/dotnet6?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet6&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/coding?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/devcommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#devcommunity&lt;/a&gt; &lt;a href="https://t.co/jIxZAQbAfM"&gt;pic.twitter.com/jIxZAQbAfM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oleg Kyrylchuk (&amp;#64;okyrylchuk) &lt;a href="https://twitter.com/okyrylchuk/status/1453828375735373825?ref_src=twsrc%5Etfw"&gt;October 28, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 で &lt;code&gt;Math&lt;/code&gt; クラスに追加されたメソッドとオーバーロードについての話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1455856153557098497?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;A few examples where a more aggressive inliner in .NET 6.0 pays off (slides from my talk): &lt;a href="https://t.co/mWXdW6w9cC"&gt;pic.twitter.com/mWXdW6w9cC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1455856153557098497?ref_src=twsrc%5Etfw"&gt;November 3, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 では.NET 5 の時よりも積極的なインライン化が効果的に働くことがあるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="vectorize-spanhelperst.indexof-by-alexcovington-pull-request-60974-dotnetruntime"&gt;Vectorize SpanHelpers&amp;lt;T&amp;gt;.IndexOf by alexcovington · Pull Request #60974 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/60974"&gt;https://github.com/dotnet/runtime/pull/60974&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各種コレクションなどの内部で使用している &lt;code&gt;SpanHelper&amp;lt;T&amp;gt;.IndexOf&lt;/code&gt; の処理をベクトル化する PR。&lt;/p&gt;
&lt;h3 id="add-instructions-for-using-codespaces-by-eerhardt-pull-request-60996-dotnetruntime"&gt;Add instructions for using Codespaces by eerhardt · Pull Request #60996 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/60996"&gt;https://github.com/dotnet/runtime/pull/60996&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Codespaces を使用して開発する手順書の PR。&lt;/p&gt;
&lt;h3 id="update-the-interpolated-string-handler-spec-by-333fred-pull-request-5365-dotnetcsharplang"&gt;Update the interpolated string handler spec by 333fred · Pull Request #5365 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/pull/5365"&gt;https://github.com/dotnet/csharplang/pull/5365&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interpolated string handler をメンバー初期化子のインデクサーで使用したときの制限についての記述を追加した PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/57456"&gt;Forbid interpolated string handler conversions that reference an instance as indexer arguments in nested member initializers by 333fred · Pull Request #57456 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="proposal-collection-literals-issue-5354-dotnetcsharplang"&gt;[Proposal]: Collection literals · Issue #5354 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/issues/5354"&gt;https://github.com/dotnet/csharplang/issues/5354&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ターゲットの型から類推してコレクションを作成するためのリテラル文法を導入したいという提案。&lt;/p&gt;
&lt;h3 id="remove-libuv-transport-and-dependency-by-tratcher-pull-request-38005-dotnetaspnetcore"&gt;Remove Libuv transport and dependency by Tratcher · Pull Request #38005 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/38005"&gt;https://github.com/dotnet/aspnetcore/pull/38005&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5.0 の ASP.NET Core (Kestrel) から obsolete となっていた Libuv トランスポートを削除する PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/476"&gt;[Breaking change]: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv and Libuv.dll removed · Issue #476 · aspnet/Announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="add-proposal-for-params-spant-by-cston-pull-request-5382-dotnetcsharplang"&gt;Add proposal for &lt;code&gt;params Span&amp;lt;T&amp;gt;&lt;/code&gt; by cston · Pull Request #5382 · dotnet/csharplang&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/csharplang/pull/5382"&gt;https://github.com/dotnet/csharplang/pull/5382&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;params Span&amp;lt;T&amp;gt;&lt;/code&gt; の提案実装の PR。&lt;/p&gt;
&lt;h3 id="nativeaot-in.net-7-issue-61231-dotnetruntime"&gt;NativeAOT in .NET 7 · Issue #61231 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61231"&gt;https://github.com/dotnet/runtime/issues/61231&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の NativeAOT に向けてのタスクリスト Issue。&lt;/p&gt;
&lt;p&gt;スコープ外とされているものは ASP.NET MVC や WPF のようなリフレクション依存フレームワーク、MSBuild のような動的アセンブリーロードを含むアプリケーション、Mono が現在提供中のモバイルと WASM となっている。&lt;/p&gt;
&lt;h3 id="adding-support-for-x86base.pause-and-armbase.yield-by-tannergooding-pull-request-61065-dotnetruntime"&gt;Adding support for X86Base.Pause() and ArmBase.Yield() by tannergooding · Pull Request #61065 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/61065"&gt;https://github.com/dotnet/runtime/pull/61065&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x86 の PAUSE インストラクションと ARM の YIELD インストラクションのサポートを追加する PR。&lt;/p&gt;
&lt;p&gt;スピンウェイトの改善のために導入したいという目的のよう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/runtime/issues/53532"&gt;Introduce pause intrinsics in order to support spin wait loop indication · Issue #53532 · dotnet/runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="memory-allocation-in.net-fails-at-70-of-the-container-limit-when-running-in-kubernetes-issue-61076-dotnetruntime"&gt;Memory allocation in .NET fails at 70% of the container limit when running in Kubernetes · Issue #61076 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/61076"&gt;https://github.com/dotnet/runtime/issues/61076&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes というかコンテナー上で .NET アプリケーションを動かすとメモリーのリミットの70%で Out-of-Memory になるという Issue。&lt;/p&gt;
&lt;p&gt;.NET GC のデフォルトは 75% を割り当て上限として扱っていて、残りは .NET のネイティブ部分や外部ライブラリーで使用されることを期待している。このケースでは 75% のうち 5% はランタイムがコードに対して使用しているため 70% で落ちているのではないか、この閾値は GC 設定の &lt;code&gt;System.GC.HeapHardLimitPercent&lt;/code&gt; を設定することで変更できるといった話。&lt;/p&gt;
&lt;h3 id="allow-running-simple.exe-files-without.runtimeconfig.json-issue-22384-dotnetsdk"&gt;Allow running simple .exe files without .runtimeconfig.json · Issue #22384 · dotnet/sdk&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/issues/22384"&gt;https://github.com/dotnet/sdk/issues/22384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet myapp.exe&lt;/code&gt; で .runtimeconfig.json がないようなシンプルな実行ファイル、例えば &lt;code&gt;net472&lt;/code&gt; なものを指定したときにも実行できていいのでは?という Issue。&lt;/p&gt;
&lt;p&gt;.NET Core でもないものを動かせる必要があるのかそれならばネイティブバイナリも動かせる必要があるのではないかといったツッコミも入っている。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>