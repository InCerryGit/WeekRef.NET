<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Tue, 26 Apr 2022 08:25:08 GMT</pubDate>
		<lastBuildDate>Tue, 26 Apr 2022 08:25:08 GMT</lastBuildDate>
		<item>
			<title>2022-04-26: C# on Oracle Functions, ReSharper/Rider 2022.1, grpc-dotnet 2.45</title>
			<link>/2022/04/26/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/26/updates</guid>
			<pubDate>Tue, 26 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="support-for-c-oracle-cloud-infrastructure-release-notes"&gt;Support for C# - Oracle Cloud Infrastructure Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/"&gt;https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oracle Functions のサポート言語として C# が追加され、C# での開発が行えるようになった。&lt;/p&gt;
&lt;p&gt;言語サポートのページによればランタイムは現時点で .NET Core 3.1 のみがサポートされているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/en-us/iaas/Content/Functions/Tasks/languagessupportedbyfunctions.htm"&gt;Languages Supported by Oracle Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/22/oracle-cloud-functions.aspx"&gt;Oracle Cloud Functions Now Supports C# -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rider-2022.1-comes-with-full-unreal-engine-support-and-remote-development-the.net-tools-blog"&gt;Rider 2022.1 Comes With Full Unreal Engine Support and Remote Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事で紹介されている新機能、改善は次のようなものがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unreal Engine と Unity でのゲーム開発の統合
&lt;ul&gt;
&lt;li&gt;Unity プロジェクトの読み込み時間の改善&lt;/li&gt;
&lt;li&gt;.asmref/.asmdef といったアセンブリ参照/定義ファイルのサポートの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リモート開発 (Beta)
&lt;ul&gt;
&lt;li&gt;JetBrains Gateway でのリモート開発に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;新しいツールバーのカスタマイズ&lt;/li&gt;
&lt;li&gt;Docker および docker-compose の高速モード&lt;/li&gt;
&lt;li&gt;&amp;quot;Search Everywhere&amp;quot; での全文検索&lt;/li&gt;
&lt;li&gt;C# 10 のサポート: &lt;code&gt;global using&lt;/code&gt; へのリファクタリングの対応など&lt;/li&gt;
&lt;li&gt;.NET 6 の新しい属性のサポート: &lt;code&gt;EditorRequired&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新しい通知ツールウィンドウ&lt;/li&gt;
&lt;li&gt;新しいズームウィジェット&lt;/li&gt;
&lt;li&gt;.NET と .NET Core プロジェクトへの Web 参照の追加機能&lt;/li&gt;
&lt;li&gt;バージョンコントロール: Preview Diff アイコンをツールバーから歯車メニューに移動し Show Diff Preview on Single Click にリネーム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他細かい新機能や改善は別ページにまとまっているので参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/rider/whatsnew/"&gt;What’s New in Rider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.1-released-the.net-tools-blog"&gt;ReSharper 2022.1 Released | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のサポートの向上
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;global using&lt;/code&gt; に関連するリファクタリングの追加&lt;/li&gt;
&lt;li&gt;null 許容参照型のサポート強化&lt;/li&gt;
&lt;li&gt;C# 11 のジェネリック属性の実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;機能
&lt;ul&gt;
&lt;li&gt;Endpoints として ASP.NET Core の Minimal API と規約ベースのルーティングをサポート&lt;/li&gt;
&lt;li&gt;Razor と Blazor では Razor 内でのローカル関数サポートやナビゲーションの追加&lt;/li&gt;
&lt;li&gt;フォーマッティングのアクションの整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtrack.jetbrains.com/issue/RSRP-480863"&gt;Out-of-Process 対応の進捗と詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デコンパイラー
&lt;ul&gt;
&lt;li&gt;XML ドキュメントコメントのプラットフォームアセンブリなどのサポート&lt;/li&gt;
&lt;li&gt;Assembly Explorer での転送された型 (forwarded types) のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;/li&gt;
&lt;li&gt;ReSharper C++
&lt;ul&gt;
&lt;li&gt;Unreal Engine のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotTrace, dotCover, dotMemory
&lt;ul&gt;
&lt;li&gt;dotTrace での SQL Server イベントのサポート (Windows 上での .NET Core または .NET 5 以降)&lt;/li&gt;
&lt;li&gt;ドラッグアンドドロップでのアタッチ&lt;/li&gt;
&lt;li&gt;dotCovert での &amp;quot;not coverable&amp;quot; としてコードをマークできるように&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/dottrace-dotmemory-dotcover-dotpeek-2022-1/"&gt;The 2022.1 Release of dotTrace, dotMemory, dotCover, and dotPeek! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.45.0-grpcgrpc-dotnet"&gt;Release Release v2.45.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) の 2.45.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WriteAsync&lt;/code&gt; メソッドで &lt;code&gt;CancellationToken&lt;/code&gt; がサポート、再接続バックオフの構成といった改善のほか、いくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-diagnostics-release-v6.0.320703-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.320703 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断ツール v6.0.320703 がリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="the-future-of.net-and-unity-unity-at-gdc-2022"&gt;The future of .NET and Unity | Unity at GDC 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=6UiKtnDQeEg"&gt;https://m.youtube.com/watch?v=6UiKtnDQeEg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GDC 2022 における Unity の .NET ランタイムとエコシステムに関する今後についてのセッション。&lt;/p&gt;
&lt;p&gt;セッションでは MSBuild/SDK-style プロジェクトについてや、CoreCLR への移行について、Unity での async/await 対応についてといった点に触れている。&lt;/p&gt;
&lt;h3 id="using-c-and-auto-ml-in-ml.net-to-predict-video-game-ratings"&gt;Using C# and Auto ML in ML .NET to Predict Video Game Ratings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j"&gt;https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET/Auto ML と C# を使用してゲームの ESRB レーティングラベル予測するものを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="view.net-collections-with-the-new-ienumerable-debugger-visualizer"&gt;View .NET collections with the new IEnumerable Debugger Visualizer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/"&gt;https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 2 で強化された、デバッグ時に IEnumerable をビジュアライズする機能についての記事。&lt;/p&gt;
&lt;p&gt;記事ではプロパティーの展開、複数の IEnumerable の実装の切り替え、ソートとエクスポートといった機能について触れている。&lt;/p&gt;
&lt;h3 id="alternative-to-blazor-wisej-3-ships-visual-studio-magazine"&gt;'Alternative to Blazor' Wisej 3 Ships -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx"&gt;https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET 上に構築された C# ベースで Web アプリケーションを構築する有償フレームワーク Wisej 3 がリリースされたことについての記事。&lt;/p&gt;
&lt;p&gt;Wisej 3 は C# のみでインタラクティブな Web アプリケーションを構築できるという意味で Blazor の代替に近い位置づけとなるフレームワーク。なお、Wisej 3 は .NET Framework 4.8 と .NET 6 で利用できるマルチターゲットなフレームワークとしてリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wisej.com/blog/wisej-net-3-released-for-net-framework-4-8-and-net-6/"&gt;Wisej.NET 3 released for .NET Framework 4.8 and .NET 6 – Wisej.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wisej.com/"&gt;Wisej.com – Rapid .NET Web Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blazor-editform-reactiveproperty"&gt;Blazor の EditForm で ReactiveProperty を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/reactiveproperty-editform"&gt;https://zenn.dev/okazuki/articles/reactiveproperty-editform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の EditForm の入力値検証で ReactiveProperty を使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="use-browser-dev-tools-with-blazor-hybrid"&gt;Use browser dev tools with Blazor Hybrid&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh"&gt;https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Blazor Hybrid をデプロイしたモバイル環境(エミュレーターなど)に対して Microsoft Edge の DevTools を接続する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-javascript-inside-a.net-app-with-javascriptengineswitcher"&gt;Running JavaScript inside a .NET app with JavaScriptEngineSwitcher&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/"&gt;https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションで JavaScript を動作させたいケースで使用できる様々な JavaScript のエンジンを抽象化/ラップする JavaScriptEngineSwitcher についての記事。&lt;/p&gt;
&lt;p&gt;記事では Jurassic (ピュア .NET 実装のエンジン) を使用して JavaScript を実行する例を載せている。&lt;/p&gt;
&lt;h3 id="net-core-microservice-metrics-with-prometheus-and-grafana"&gt;.Net Core Microservice Metrics with Prometheus and Grafana&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの CPU 使用率やリクエストなどのメトリクスを Prometheus と Grafana で可視化する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-core-microservice-logging-with-grafana-and-loki"&gt;.NET Core Microservice Logging with Grafana and Loki&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのロギングを Loki と Grafana で取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="nullable-reference-types-in-c-migrating-to-nullable-reference-types-part-1"&gt;Nullable reference types in C# - Migrating to nullable reference types - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html"&gt;https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;null 許容参照型についてとその移行について解説する記事シリーズ。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-qiita"&gt;ASP.NET Core MVC 公式チュートリアルから実開発への橋渡し - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948"&gt;https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC アプリケーションの公式チュートリアルで作った部分から実際のプロジェクト開発へと進んだ際に必要となるパーツを埋めることを目的とした記事。&lt;/p&gt;
&lt;p&gt;記事では認証の追加、フィルター処理、appsettings.json のカスタマイズといった部分を解説している。&lt;/p&gt;
&lt;h3 id="introducing-a-new-way-to-search-your-code-and-visual-studio-features"&gt;Introducing a New Way to Search Your Code and Visual Studio Features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 3 で導入された All-In-One 検索体験についての記事。既存の VS Search (Ctrl+Q) Go To (Ctrl+T) を合わせて一つの検索ウィンドウで検索できるようになる (ReSharper の Search Everywhere と似ている)。&lt;/p&gt;
&lt;p&gt;記事では検索時にファイルや型、メンバーでフィルターできるといった点について触れている。&lt;/p&gt;
&lt;h3 id="czip"&gt;C#でzipを展開するときに気をつけること&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/throw_exception/articles/7202956e9824d5"&gt;https://zenn.dev/throw_exception/articles/7202956e9824d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.5 から導入された Zip ファイルを操作可能となった API を使用してファイルを展開する際に注意すべき点についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;ExtractToFile&lt;/code&gt; メソッドではディレクトリトラバーサルが発生してセキュリティー上の問題となることがある点とその対策について解説している。&lt;/p&gt;
&lt;h3 id="net-mvvm-communitytoolkit.mvvm-ver8-preview3-qiita"&gt;.NET用 MVVMライブラリ CommunityToolkit.Mvvm ver8 (preview3) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6"&gt;https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit 8.0.0 Preview 3 の新しい MVVM サポートを利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-framework-april-2022-cumulative-update-preview"&gt;.NET Framework April 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年4月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;3rd パーティーのアプリケーションがディレクトリーサービスを呼び出した場合にアクセス違反となる不具合が修正されている。&lt;/p&gt;
&lt;h3 id="combining-bearer-token-and-cookie-authentication-in-asp.net"&gt;Combining Bearer Token and Cookie Authentication in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET"&gt;https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでの認証に Bearer トークン方式と Cookie を使用する方式の両対応を行う方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rahulrai_in/status/1517408881957294081?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Docker?ref_src=twsrc%5Etfw"&gt;&amp;#64;Docker&lt;/a&gt; now supports heredocs&lt;br&gt;&lt;br&gt;I wrote a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; API inside a Dockerfile and it works 🤯&lt;br&gt;&lt;br&gt;Thanks for the tip &lt;a href="https://twitter.com/iximiuz?ref_src=twsrc%5Etfw"&gt;&amp;#64;iximiuz&lt;/a&gt; &lt;a href="https://twitter.com/shanselman?ref_src=twsrc%5Etfw"&gt;&amp;#64;shanselman&lt;/a&gt; &lt;a href="https://twitter.com/davidfowl?ref_src=twsrc%5Etfw"&gt;&amp;#64;davidfowl&lt;/a&gt; &lt;a href="https://twitter.com/aspnetcore_news?ref_src=twsrc%5Etfw"&gt;&amp;#64;aspnetcore_news&lt;/a&gt; &lt;a href="https://t.co/iFtJW4VZjg"&gt;pic.twitter.com/iFtJW4VZjg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rahul Rai (&amp;#64;rahulrai_in) &lt;a href="https://twitter.com/rahulrai_in/status/1517408881957294081?ref_src=twsrc%5Etfw"&gt;April 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dockerfile でヒアドキュメントをサポートしたのでそのままソースコードを書けば、Dockerfile 完結の .NET アプリコンテナーイメージを作れるというネタ。&lt;/p&gt;
&lt;!-- https://twitter.com/sitnikadam/status/1518004664695934977?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Guess what I have just prototyped. (I have left one core for the Task Manager, otherwise it can&amp;#39;t refresh the charts at reasonable rate). &lt;a href="https://t.co/nKS9r4sXm9"&gt;pic.twitter.com/nKS9r4sXm9&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Sitnik (&amp;#64;SitnikAdam) &lt;a href="https://twitter.com/SitnikAdam/status/1518004664695934977?ref_src=twsrc%5Etfw"&gt;April 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;BenchmarkDotNet でベンチマークを各コアで並列に動かすというプロトタイプを作ったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/buhakmeh/status/1518658195329273856?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did I mention &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; has an amazing file explorer for &lt;a href="https://twitter.com/hashtag/docker?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#docker&lt;/a&gt; containers? &lt;a href="https://t.co/2KIVf3jPFV"&gt;pic.twitter.com/2KIVf3jPFV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Khalid - khalidabuhakmeh&amp;#64;mastodon.social (&amp;#64;buhakmeh) &lt;a href="https://twitter.com/buhakmeh/status/1518658195329273856?ref_src=twsrc%5Etfw"&gt;April 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Rider では Docker コンテナーの中をブラウジングするといった便利機能があるという Tips。(Files タブは&lt;a href="https://www.jetbrains.com/help/rider/Docker.html#interacting-with-containers"&gt;Docker | JetBrains Rider&lt;/a&gt; には書かれていないので比較的最近実装されたのかもしれない)&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="vectorized-memoryextensions.commonprefixlength-by-gfoidl-pull-request-68210-dotnetruntime"&gt;Vectorized MemoryExtensions.CommonPrefixLength by gfoidl · Pull Request #68210 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/68210"&gt;https://github.com/dotnet/runtime/pull/68210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Span 同士で同じプレフィックスの長さを取る &lt;code&gt;MemoryExtensions.CommonPrefixLength&lt;/code&gt; メソッド (.NET 7) をベクトル化して高速化するという PR。&lt;/p&gt;
&lt;h3 id="implement-minimal-ratelimitingmiddleware-by-wtgodbe-pull-request-41008-dotnetaspnetcore"&gt;Implement minimal RateLimitingMiddleware by wtgodbe · Pull Request #41008 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41008"&gt;https://github.com/dotnet/aspnetcore/pull/41008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RateLimiting API を使用した ASP.NET Core 向けのミニマルな RateLimiting ミドルウェアの実装 PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-04-19: .NET 7 Preview 3, MAUI RC1, .NET 6.0.4</title>
			<link>/2022/04/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/19/updates</guid>
			<pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-3.net-blog"&gt;Announcing .NET 7 Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 3 では次のような変更が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NativeAOT の改善&lt;/li&gt;
&lt;li&gt;Observability: アクティビティートレースの状態をサンプラーで変更可能に&lt;/li&gt;
&lt;li&gt;System.Composition.Hosting の API 改善&lt;/li&gt;
&lt;li&gt;Write-Xor-Execute を有効にすることによる起動時間の短縮&lt;/li&gt;
&lt;li&gt;コード生成 (JIT)&lt;/li&gt;
&lt;li&gt;GC リージョンのデフォルト有効化&lt;/li&gt;
&lt;li&gt;X500DistinguishedName の堅牢な生成 API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、Visual Studio 2022 17.2 Preview 3 での動作がテストされているため、使用にはプレビューチャンネルのインストールが推奨される。Visual Studio for Mac での対応は後日となるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#17.2.0-pre.3.0"&gt;Visual Studio 2022 version 17.2 Preview 3.0 | Visual Studio 2022 Preview Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-3.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 3 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimal API でのルートハンドラーに対するフィルターやテスタビリティの向上&lt;/li&gt;
&lt;li&gt;MVC と API のコントローラーでの &lt;code&gt;TryParse&lt;/code&gt; による値のバインドのサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Results.Stream&lt;/code&gt; のオーバーロード&lt;/li&gt;
&lt;li&gt;HTTP/2 での一つのコネクションに対する複数のストリームがある場合のパフォーマンス向上&lt;/li&gt;
&lt;li&gt;スタートアップ時間計測に使用できる &lt;code&gt;ServerReady&lt;/code&gt; イベント&lt;/li&gt;
&lt;li&gt;開発時例外ページのダークモード対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-core-7-ef7-preview-3.net-blog"&gt;Announcing Entity Framework Core 7 (EF7) Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework Core 7 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 3 での改善点として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server の INSERT のロジックの改善&lt;/li&gt;
&lt;li&gt;UPDATE/DELETE での RETURNING/OUTPUT 句の使用&lt;/li&gt;
&lt;li&gt;ReaderModificationCommandBatch のリファクタリング&lt;/li&gt;
&lt;li&gt;事前チェックとしての MaxBatchSize の再実装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、記事では T4 テンプレートを使用したデータベースリバースエンジニアリング/スキャフォールディングについても触れている。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-ready-for-cross-platform-app-development.net-blog"&gt;.NET MAUI Release Candidate - Ready for cross-platform app development - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI の RC1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースから &amp;quot;go live&amp;quot; サポートポリシーが適用され、実運用プロダクトでの使用であっても Microsoft のサポートを受けられるようになる。&lt;/p&gt;
&lt;p&gt;現時点で MAUI の RC1 を使用しての開発には Visual Studio 2022 17.2 Preview 3 が必要となる。Mac 上で開発するにはコマンドラインからインストールするか、今後の Visual Studio for Mac の Preview リリースを待つ必要がある。&lt;/p&gt;
&lt;p&gt;記事では MAUI に含まれるコントロールやテンプレートについて、コントロールのカスタマイズについても触れている。&lt;/p&gt;
&lt;h3 id="net-april-2022-updates.net-6.0.4.net-5.0.16-and.net-3.1.24.net-blog"&gt;.NET April 2022 Updates – .NET 6.0.4, .NET 5.0.16 and, .NET 3.1.24 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-april-2022-updates-net-6-0-4-net-5-0-16-and-net-3-1-24/"&gt;https://devblogs.microsoft.com/dotnet/net-april-2022-updates-net-6-0-4-net-5-0-16-and-net-3-1-24/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の2022年4月更新で .NET 6.0.4, .NET 5.0.16, .NET 3.1.24 がリリースされた。&lt;/p&gt;
&lt;p&gt;セキュリティーの修正はなく、小さな改善や不具合の修正が含まれている。&lt;/p&gt;
&lt;p&gt;また、今回のリリースからサーバーオペレーティングシステム (Windows Server) での Microsoft Update 経由での .NET の更新が可能になった。この機能はオプトインとなるためデフォルトでは自動更新されない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/server-operating-systems-auto-updates/"&gt;.NET Automatic Updates for Server Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-april-2022-security-and-quality-rollup-updates"&gt;.NET Framework April 2022 Security and Quality Rollup Updates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-april-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-april-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年4月セキュリティーと品質累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;サービス拒否 (DoS) に関するセキュリティー修正といくつかの品質向上とバグ修正が含まれている。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.0.0-preview-3-ifdef-windows"&gt;Announcing .NET Community Toolkit v8.0.0 Preview 3 - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-3/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.0.0 Preview 3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVVM Toolkit の Source Generator
&lt;ul&gt;
&lt;li&gt;ObservableProperty の partial メソッドによる実装&lt;/li&gt;
&lt;li&gt;コマンド取り消しのサポート&lt;/li&gt;
&lt;li&gt;生成されたプロパティーの変更通知のブロードキャスト&lt;/li&gt;
&lt;li&gt;診断機能の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;グループ化されたオブザーバブルコレクションの改良&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-9-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 9 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-9/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-9/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 9 がリリースされた。&lt;/p&gt;
&lt;p&gt;引き続き正式版に向けて問題の修正を中心に更新が行われている。&lt;/p&gt;
&lt;h3 id="introducing-central-package-management"&gt;Introducing Central Package Management&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-central-package-management/"&gt;https://devblogs.microsoft.com/nuget/introducing-central-package-management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet の新機能である一元的なパッケージ管理機能についての記事。&lt;/p&gt;
&lt;p&gt;一元的なパッケージ管理機能が Visual Studio 2022 17.2, .NET SDK 6.0.300, NuGet 6.2.0 以降で使用できるようになった。&lt;/p&gt;
&lt;p&gt;この機能は &lt;code&gt;Directory.Packages.props&lt;/code&gt; というファイルに使用する NuGet パッケージのバージョンを記述しておき、各プロジェクトから参照する場合にはパッケージ名のみを指定することでバージョンを一元的に管理できるといった仕組み。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- Directory.Packages.props --&amp;gt;
&amp;lt;Project&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageVersion Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- ClassLibrary1.csproj --&amp;gt;
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記事では設定の仕方のほか、推移的パッケージのピン止め、パッケージバージョンの上書き、一元的なパッケージ管理機能の無効化などを説明している。&lt;/p&gt;
&lt;h3 id="unity-2021-long-term-support-for-programmers-unity"&gt;Unity 2021 Long Term Support for programmers | Unity&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://unity.com/releases/2021-lts/programming"&gt;https://unity.com/releases/2021-lts/programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2021.3 LTS がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 8 と .NET Standard 2.1 のサポートが追加され、IL2CPP のパフォーマンスも改善されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.unity3d.com/2021.2/Documentation/Manual/dotnetProfileSupport.html"&gt;Unity - Manual:  .NET profile support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお Unity の .NET Framework 4.8 プロファイルは .NET Standard 2.1 を包含するものとなり、純正の .NET Framework 4.8 とは異なる点に注意が必要(Microsoft の .NET Framework 4.8 は .NET Standard 2.1 をサポートしない)。&lt;/p&gt;
&lt;h3 id="cake-v2.2.0-released"&gt;Cake v2.2.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v2-2-0-released-74aa5e47f618"&gt;https://cakebuildnet.medium.com/cake-v2-2-0-released-74aa5e47f618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake 2.2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;オプトインのスクリプトキャッシュ機能の追加のほか、いくつかのバグ修正や改善が行われている。&lt;/p&gt;
&lt;h3 id="breaking-change-revert-the-console-formatter-default-in.net-6-container-images-issue-216-dotnetannouncements"&gt;Breaking Change: Revert the Console Formatter Default in .NET 6 Container Images · Issue #216 · dotnet/announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/announcements/issues/216"&gt;https://github.com/dotnet/announcements/issues/216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 ではコンテナーイメージ内で実行時にコンソールのロガーはデフォルトで JSON フォーマットで出力するようになっていたが、5月のサービス更新で元に戻す (通常の未指定時と同様のテキスト形式) というアナウンス。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Logging__Console__FormatterName&lt;/code&gt; 環境変数が &lt;code&gt;Json&lt;/code&gt; となっていたものが未設定となるため、今後この挙動を維持したい場合には &lt;code&gt;Logging__Console__FormatterName&lt;/code&gt; に &lt;code&gt;Json&lt;/code&gt; を明示的に指定する必要がある。&lt;/p&gt;
&lt;h3 id="c-11-preview-updates-raw-string-literals-utf-8-and-more"&gt;C# 11 Preview Updates - Raw string literals, UTF-8 and more!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/"&gt;https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 Preview についての記事。&lt;/p&gt;
&lt;p&gt;C# 11 で導入される予定の機能を紹介している。Raw string literals など一部の機能は既に Visual Studio 2022 17.2 Preview 3 または .NET 7 Preview 3 以降で使用できるが、それ以降を予定しているものも多いので注意。対応状況は&lt;a href="https://github.com/dotnet/roslyn/blob/main/docs/Language%20Feature%20Status.md"&gt;Language Feature Status&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raw string literals
&lt;ul&gt;
&lt;li&gt;いわゆるヒアドキュメント的な文字列を埋め込む記法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UTF-8 文字列リテラル
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte[]&lt;/code&gt; や &lt;code&gt;Span&amp;lt;byte&amp;gt;&lt;/code&gt; といった型へ文字列を代入する形で UTF-8 バイト列となる記法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked&lt;/code&gt; ユーザー定義演算子
&lt;ul&gt;
&lt;li&gt;算術オーバー/アンダーフローの取り扱いが可能になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;構造体の自動デフォルト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Span&lt;/code&gt; のパターンマッチング&lt;/li&gt;
&lt;li&gt;メソッドグループ変換でキャッシュされたデリゲートを使用&lt;/li&gt;
&lt;li&gt;パラメータ null チェックの削除
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt; でパラメータに null がセットされていることをチェックして例外を投げる記法を一旦取り下げ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小文字の型名に関する警告
&lt;ul&gt;
&lt;li&gt;C# ではキーワードに小文字を使用しているため、破壊的変更を防ぐために小文字の型名に対して警告する&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.paranoidcoding.com/2022/04/11/lowercase-type-names.html"&gt;Warning on lower case type names in C# 11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.1-release-candidate-is-out"&gt;ReSharper 2022.1 Release Candidate is out&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 Release Candidate がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではコード解析に関する改善や ASP.NET Core 6 の Minimal API のエンドポイント対応、Visual Studio 内でのデコンパイラーでのメタデータツリービューの追加、その他不具合の修正などが行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1514272680559747082?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 Release Candidate is out. Check out the list of updates and try it for yourself:&lt;a href="https://t.co/uVUkfoYllI"&gt;https://t.co/uVUkfoYllI&lt;/a&gt; &lt;a href="https://t.co/4n1dfRjJCc"&gt;pic.twitter.com/4n1dfRjJCc&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1514272680559747082?ref_src=twsrc%5Etfw"&gt;April 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="using.net-to-validate-json-with-json-schema"&gt;Using .NET To Validate JSON with JSON Schema&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/using-dotnet-to-validate-json-with-json-schema"&gt;https://khalidabuhakmeh.com/using-dotnet-to-validate-json-with-json-schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JsonSchema.NET と System.Text.Json で JSON Schema による JSON の検証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="supercharge-your-git-experience-in-vs"&gt;Supercharge your Git experience in VS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/supercharge-your-git-experience-in-vs/"&gt;https://devblogs.microsoft.com/visualstudio/supercharge-your-git-experience-in-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 3 以降で導入されたコミットグラフ機能を有効にすることで Git の操作を高速化できることについての記事。&lt;/p&gt;
&lt;h3 id="streaming-iasyncenumerable-to-rxjs-front-end"&gt;Streaming IAsyncEnumerable to RxJs front-end&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;markotny97/streaming-iasyncenumerable-to-rxjs-front-end-8eb5323ca282"&gt;https://medium.com/&amp;#64;markotny97/streaming-iasyncenumerable-to-rxjs-front-end-8eb5323ca282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; による API からのストリーミングと、フロントエンドで RxJS を使用した処理についての記事。&lt;/p&gt;
&lt;h3 id="mono.cecil2dll-yucchiys-note"&gt;Mono.Cecilを用いて２つのDLLの間の型の差分を出す | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/04/mono-cecil-class-diff/"&gt;https://blog.yucchiy.com/2022/04/mono-cecil-class-diff/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono.Cecil を使用して2つのアセンブリに含まれている型の差分を取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-segments-and-regions-differ-in-decommitting-memory-in-the.net-7-gc"&gt;How segments and regions differ in decommitting memory in the .NET 7 GC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a"&gt;https://itnext.io/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入される GC のリージョンがセグメントからメモリーをデコミットする挙動についての記事。&lt;/p&gt;
&lt;h3 id="keeping-up-with.net-learning-about-new-features-and-apis"&gt;Keeping up with .NET: learning about new features and APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/keeping-up-with-dotnet-learning-about-new-features-and-apis/"&gt;https://andrewlock.net/keeping-up-with-dotnet-learning-about-new-features-and-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の新しい機能や API を学ぶのに役立つリソースの紹介記事。&lt;/p&gt;
&lt;h3 id="hybrid-app-development-with-blazorwebview-blazor-lipstick-for-the-desktop-pig"&gt;Hybrid App Development With BlazorWebView — Blazor Lipstick For The Desktop Pig&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;devmawin/software-development-and-hybrid-app-development-with-blazorwebview-blazor-59297f399811"&gt;https://medium.com/&amp;#64;devmawin/software-development-and-hybrid-app-development-with-blazorwebview-blazor-59297f399811&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI で WebView を使用する Blazor (Blazor Hybrid) アプリについての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvcidentity-qiita"&gt;メール検証も！ASP.NET Core MVCに認証機能Identityを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YouKnow/items/f1b1946509dba07be439"&gt;https://qiita.com/YouKnow/items/f1b1946509dba07be439&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC と ASP.NET Core Identity、SendGrid を使用してメール確認付き認証を実装するという記事。&lt;/p&gt;
&lt;h3 id="qiita"&gt;配列のアクセス方法による速さの違い - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Hotari/items/9a69c4e02015c02d05ef"&gt;https://qiita.com/Hotari/items/9a69c4e02015c02d05ef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配列に対するアクセス方法(インデックスの指定やポインター)による速度の違いについての記事。&lt;/p&gt;
&lt;p&gt;コメントでメモリーのアドレッシングが異なることで結果が変わってきているのではないかといったことも触れられている。&lt;/p&gt;
&lt;h3 id="net6-qiita"&gt;.NET6 単一ファイル時の実行パス取得について - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MinadukiSekina/items/59eb7e67018037092fc6"&gt;https://qiita.com/MinadukiSekina/items/59eb7e67018037092fc6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PublishSingleFile で単一実行ファイルとして生成したときに Assembly.Location を使用できない制限についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/deploying/single-file/warnings/il3000"&gt;IL3000: 単一ファイルとして発行するときにアセンブリ ファイル パスにアクセスしません (コード分析) - .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cmonacoeditor-qiita"&gt;C#でMonacoEditor - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Yuki4/items/48c242c7795b43c2f34a"&gt;https://qiita.com/Yuki4/items/48c242c7795b43c2f34a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションで Monaco Editor (Visual Studio Code のエディター部分) を埋め込んで使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="google-colaboratory.net6.0-qiita"&gt;Google Colaboratoryで.NET6.0を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/14ffc4f8420e2a868241"&gt;https://qiita.com/karuakun/items/14ffc4f8420e2a868241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Colaboratory で .NET Interactive をインストールすることで .NET 6 を使用するという方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1514812362632491012?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In the early days of  .NET Core, it was very difficult to get internal teams at Microsoft to deploy it to production. It was too new and people didn&amp;#39;t know if it was &amp;quot;real&amp;quot; (this skepticism existed externally as well). &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1514812362632491012?ref_src=twsrc%5Etfw"&gt;April 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET Core を Microsoft の内部チームで運用環境に展開した話のスレッド。機械翻訳でざっくりと…。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Core が出た初期のころはあまりに新しすぎて「リアル」だと思われていなかった (外部からも)&lt;/li&gt;
&lt;li&gt;そこで社内の利用者向けに小さな移行チームを立て問題を乗り越えたが、ギャップは多かった&lt;/li&gt;
&lt;li&gt;.NET Framework への沢山の内部依存があった(今もある)。エコシステムを立ち上げるのは困難で .NET Core への移植の手助けをする必要があった。そして多くのチームは .NET Core に移植されていない NuGet パッケージにも依存していた&lt;/li&gt;
&lt;li&gt;そのようにしてギャップを埋めていくと関心が集まってきて、Bing のようなアーリーアダプターが現れ、パフォーマンス向上を広めるの一役買った。最初の利用者を獲得するのは難しく、ほとんどのユーザーは枯れたものを使いたがる&lt;/li&gt;
&lt;li&gt;新しい API や Span といった作業をする前であっても、社内のチームは .NET Core に移行することでパフォーマンス向上やコスト削減できているという話が広まった&lt;/li&gt;
&lt;li&gt;Microservices やコンテナー、Kubernetes でモダナイゼーションを行っているチームもあったのでパフォーマンスではなくモダナイゼーションの一部として採用される例もあった&lt;/li&gt;
&lt;li&gt;.NET Core 3.1 以降、多くのチームが採用してパフォーマンス向上が続き、移行により 5-30% の改善が見られた (CPU, メモリー、スループット、レイテンシー)。さらに多くのチームが移行の手助けを望んだ&lt;/li&gt;
&lt;li&gt;その頃には移行を経験したチームも揃い、事例も多くなってきたので移行に関する話が簡単になってきた。内部向けに .NET Core への移行コミュニティーを作った&lt;/li&gt;
&lt;li&gt;今では移行したいチームが多すぎて手が回らないし、今でも .NET Core への移行とモダナイゼーションによってパフォーマンスが向上したというメールを受け取る&lt;/li&gt;
&lt;li&gt;前年の影響が表れるには数年かかることもあるので楽しみながら .NET を使おう&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/xoofx/status/1514516455949316099?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Unwinding a stack is actually a fundamental piece of stack &amp;amp; codegen cooperation to allow to recover at runtime a callstack, or chained exception handlers...etc. At any instruction point in a function, the callstack crawler needs to recover the chain of calls &lt;a href="https://t.co/Z5XfuFLNEy"&gt;pic.twitter.com/Z5XfuFLNEy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1514516455949316099?ref_src=twsrc%5Etfw"&gt;April 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;スタックフレームの巻き戻しについての図解。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-memoryextensions.commonprefixlength-by-stephentoub-pull-request-67929-dotnetruntime"&gt;Add MemoryExtensions.CommonPrefixLength by stephentoub · Pull Request #67929 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67929"&gt;https://github.com/dotnet/runtime/pull/67929&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二つの &lt;code&gt;Span&lt;/code&gt; などを比較して先頭の同じ要素の数を返す &lt;code&gt;MemoryExtensions.CommonPrefixLength&lt;/code&gt; API を追加する PR。&lt;/p&gt;
&lt;h3 id="support-built-in-unsigned-right-shift-operators.by-alekseyts-pull-request-60560-dotnetroslyn"&gt;Support built-in unsigned right shift operators. by AlekseyTs · Pull Request #60560 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/60560"&gt;https://github.com/dotnet/roslyn/pull/60560&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;符号なし右シフト演算子 (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) のサポートを追加する PR。&lt;/p&gt;
&lt;h3 id="introduce-ibindablefromhttpcontexttself-by-damianedwards-pull-request-41100-dotnetaspnetcore"&gt;Introduce IBindableFromHttpContext&amp;lt;TSelf&amp;gt; by DamianEdwards · Pull Request #41100 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41100"&gt;https://github.com/dotnet/aspnetcore/pull/41100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;static abstract を利用して、Minimal API などでカスタムバインダーを見つけ・使用しやすくするという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/40927"&gt;Introduce interface with static abstract BindAsync method for custom bound parameters of route handler delegates · Issue #40927 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="http2-output-processing-make-over-by-davidfowl-pull-request-40925-dotnetaspnetcore"&gt;HTTP/2 output processing make over by davidfowl · Pull Request #40925 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40925"&gt;https://github.com/dotnet/aspnetcore/pull/40925&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 の出力処理にロックの代わりにキューを使用することでパフォーマンスを向上させるという PR。&lt;/p&gt;
&lt;h3 id="use.u8-in-dotnetruntime-by-stephentoub-pull-request-67733-dotnetruntime"&gt;Use &amp;quot;...&amp;quot;u8 in dotnet/runtime by stephentoub · Pull Request #67733 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67733"&gt;https://github.com/dotnet/runtime/pull/67733&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Encoding.UTF8.GetBytes&lt;/code&gt; を &lt;code&gt;u8&lt;/code&gt; サフィックスを持つ UTF-8 文字列に置き換えるという PR (ドラフト)。&lt;/p&gt;
&lt;h3 id="initial.net-framework-arm64-support-by-jaredpar-pull-request-60735-dotnetroslyn"&gt;Initial .NET Framework ARM64 support by jaredpar · Pull Request #60735 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/60735"&gt;https://github.com/dotnet/roslyn/pull/60735&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn で ARM64 の .NET Framework のバイナリの生成をサポートするという PR。(親 Issue によると PDB のサポートの都合もありそう)&lt;/p&gt;
&lt;h3 id="implement-tar-apis-by-carlossanlop-pull-request-67883-dotnetruntime"&gt;Implement Tar APIs by carlossanlop · Pull Request #67883 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67883"&gt;https://github.com/dotnet/runtime/pull/67883&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tar アーカイブ形式のサポートを追加する PR。&lt;code&gt;System.Formats.Tar&lt;/code&gt; 名前空間になる模様。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-04-12: ReSharper 2021.3.4, .NET Framework End of Support, Visual Studio 2022 for Mac Preview 8</title>
			<link>/2022/04/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/12/updates</guid>
			<pubDate>Tue, 12 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="resharper-and.net-tools-2021.3.4-has-been-released-the.net-tools-blog"&gt;ReSharper and .NET Tools 2021.3.4 has been released! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/30/resharper-2021-3-4/"&gt;https://blog.jetbrains.com/dotnet/2022/03/30/resharper-2021-3-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と .NET ツールの 2021.3.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 2 との統合に関する問題が修正されている。Rider も同バージョンへのアップデートがあるがリリースパイプラインの都合によるもので変更はないとのこと。&lt;/p&gt;
&lt;h3 id="net-framework-4.5.2-4.6-and-4.6.1-will-reach-end-of-support-on-apr-26-2022"&gt;.NET Framework 4.5.2, 4.6, and 4.6.1 will reach End of Support on Apr 26, 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-45-46-461-end-of-support/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-45-46-461-end-of-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.5.2, 4.6, 4.6.1 が2022年4月26日にサポート終了することについての案内。&lt;/p&gt;
&lt;p&gt;引き続き .NET Framework のサポート(セキュリティー修正など)を受けるには .NET Framework 4.6.2 または 4.8 への移行が必要となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-4-5-2-4-6-4-6-1-will-reach-end-of-support-on-april-26-2022/"&gt;.NET Framework 4.5.2, 4.6, 4.6.1 will reach End of Support on April 26, 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-8"&gt;Visual Studio 2022 for Mac Preview 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-8/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 8 がリリースされた。&lt;/p&gt;
&lt;p&gt;機能の追加などはなく、多くの小さな UI の修正やキーバインドの修正などが行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="high-performance-udp-sockets-in.net-6-enclave"&gt;High Performance UDP sockets in .NET 6 | Enclave&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://enclave.io/high-performance-udp-sockets-net6/"&gt;https://enclave.io/high-performance-udp-sockets-net6/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-april-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | April 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/04/net-annotated-monthly-april-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/04/04/net-annotated-monthly-april-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rllibc-qiita"&gt;RLlibで強化学習したモデルをC#で使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/oshimazakura/items/b906a75242e84c331ce9"&gt;https://qiita.com/oshimazakura/items/b906a75242e84c331ce9&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mastering-blazor-part-1-dom-integration"&gt;Mastering Blazor - Part 1: DOM Integration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/florianrappl/mastering-blazor-part-1-dom-integration-5591"&gt;https://dev.to/florianrappl/mastering-blazor-part-1-dom-integration-5591&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="milestone-a-million-downloads-for-videolan-packages-in-the.net-ecosystem"&gt;Milestone: A million downloads for VideoLAN packages in the .NET ecosystem&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mfkl.github.io/2022/04/05/a-million-downloads.html"&gt;https://mfkl.github.io/2022/04/05/a-million-downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="imagesharp-2.0.0"&gt;ImageSharp 2.0.0が機能満載でリリース&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/news/2022/04/imagesharp-2-release/"&gt;https://www.infoq.com/jp/news/2022/04/imagesharp-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="milestone-a-million-downloads-for-videolan-packages-in-the.net-ecosystem-1"&gt;Milestone: A million downloads for VideoLAN packages in the .NET ecosystem&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;Martz2804/milestone-a-million-downloads-for-videolan-packages-in-the-net-ecosystem-71e3ed3b8ad1"&gt;https://medium.com/&amp;#64;Martz2804/milestone-a-million-downloads-for-videolan-packages-in-the-net-ecosystem-71e3ed3b8ad1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cpu-usage-tool-improvements"&gt;CPU Usage Tool Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/cpu-usage-tool-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/cpu-usage-tool-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bouncycastle.net-qiita"&gt;BouncyCastle(.NET)を使ってみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/The-Fujimon-Company/items/504c20ed061141288f16"&gt;https://qiita.com/The-Fujimon-Company/items/504c20ed061141288f16&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-6-c-twitter-api-v2-oauth-2.0"&gt;.NET 6 (C#) で Twitter API v2 の OAuth 2.0 を試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/snowcait/articles/32c351553ae67c"&gt;https://zenn.dev/snowcait/articles/32c351553ae67c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net3-qiita"&gt;【保存版】ASP.​NETアプリのモダナイゼーション戦略のクラウド3社比較 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/komiyasa/items/2d5b17c5db3e80b4678b"&gt;https://qiita.com/komiyasa/items/2d5b17c5db3e80b4678b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="faster.net-development-on-kubernetes-with-skaffold"&gt;Faster .NET development on Kubernetes with Skaffold&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;meronz/faster-net-development-on-kubernetes-with-skaffold-38b1d261eed5"&gt;https://medium.com/&amp;#64;meronz/faster-net-development-on-kubernetes-with-skaffold-38b1d261eed5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="whats-up-with-timezoneinfo-on.net-6-part-2"&gt;What’s up with TimeZoneInfo on .NET 6? (Part 2)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2022/03/27/whats-up-with-timezoneinfo-on-net-6-part-2/"&gt;https://codeblog.jonskeet.uk/2022/03/27/whats-up-with-timezoneinfo-on-net-6-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-akka.hosting-hoconless-akka.net-configuration-and-runtime-petabridge"&gt;Introducing Akka.Hosting - HOCONless Akka.NET Configuration and Runtime | Petabridge&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://petabridge.com/blog/intro-akka-hosting/"&gt;https://petabridge.com/blog/intro-akka-hosting/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="git-credential-manager-authentication-for-everyone-the-github-blog"&gt;Git Credential Manager: authentication for everyone | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-04-07-git-credential-manager-authentication-for-everyone/"&gt;https://github.blog/2022-04-07-git-credential-manager-authentication-for-everyone/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="tmdsbuild-image-a.net-global-tool-to-create-container-images-from.net-projects-because-life-is-too-short-to-write-dockerfiles"&gt;tmds/build-image: A .NET global tool to create container images from .NET projects, because life is too short to write Dockerfiles.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tmds/build-image"&gt;https://github.com/tmds/build-image&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="nenonaninutapper-a-tool-transpiling-c-type-into-typescript-type"&gt;nenoNaninu/Tapper: A Tool Transpiling C# Type into TypeScript Type.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nenoNaninu/Tapper"&gt;https://github.com/nenoNaninu/Tapper&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2022/03/31/213837"&gt;【C#】 C#の型定義からTypeScriptの型定義を生成するTapperというライブラリ/CLI Toolをリリースしました。 - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="itn3000cs2mermaid-csharp-source-to-mermaid-diagram"&gt;itn3000/Cs2Mermaid: CSharp source to mermaid diagram&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/itn3000/Cs2Mermaid"&gt;https://github.com/itn3000/Cs2Mermaid&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jcouv/status/1511067391827976193?s=12&amp;t=d25OhHzd0Dr-rm6M5g9i_Q --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We merged a preview C# 11 feature into VS 17.3: UTF8 string literals and string conversions to `byte[]`/`Span&amp;lt;byte&amp;gt;`/`ReadOnlySpan&amp;lt;byte&amp;gt;`.&lt;br&gt;&lt;br&gt;For instance: &lt;br&gt;`var span = &amp;quot;world&amp;quot;u8;` &lt;br&gt;`Span&amp;lt;byte&amp;gt; span = &amp;quot;hello&amp;quot;;`&lt;br&gt;&lt;br&gt;Spec: &lt;a href="https://t.co/42zfKiqXVW"&gt;https://t.co/42zfKiqXVW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julien Couvreur (&amp;#64;jcouv) &lt;a href="https://twitter.com/jcouv/status/1511067391827976193?ref_src=twsrc%5Etfw"&gt;April 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/egorbo/status/1510628572406370314?s=12&amp;t=oDWSFfudP_C3buQYkxi4UA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;OSR and QJFL are now enabled by default in .NET 7.0 &lt;a href="https://t.co/oIu6GDrVIR"&gt;https://t.co/oIu6GDrVIR&lt;/a&gt; tldr: noticeably faster startup (up to 25% faster) for desktop and web apps. Our web benchmarks already show nice improvements around &amp;quot;Time to process first request&amp;quot; &lt;a href="https://t.co/OPnub6z5Od"&gt;pic.twitter.com/OPnub6z5Od&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1510628572406370314?ref_src=twsrc%5Etfw"&gt;April 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/davidfowl/status/1509273312081240064?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Lots of progress on http/2 performance improvements. Initial benchmark with 70 concurrent requests on a single connection show a ~240% improvement 🔥 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AspNetCore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AspNetCore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1509273312081240064?ref_src=twsrc%5Etfw"&gt;March 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/xoofx/status/1511372676073459713?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Unity is using a source based package model unlike NuGet, and we often get questions from our users:&lt;br&gt;&lt;br&gt;📦Why Unity is not using NuGet for their own packages?&lt;br&gt;&lt;br&gt;I tried to answer this question in this forum post:&lt;a href="https://t.co/I6PHitzvmC"&gt;https://t.co/I6PHitzvmC&lt;/a&gt; &lt;a href="https://t.co/vuKcwWPC4c"&gt;pic.twitter.com/vuKcwWPC4c&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1511372676073459713?ref_src=twsrc%5Etfw"&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-31: .NET 5.0 End of Support, gRPC v1.45.0, System.CommandLine 2.0 Beta 3</title>
			<link>/2022/03/31/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/31/updates</guid>
			<pubDate>Thu, 31 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;お知らせ: 今月と来月はいろいろな都合により縮退運転気味(一部の紹介やリンクの羅列による紹介)となってしまいますが何卒よろしくお願いします。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-5.0-will-reach-end-of-support-on-may-08-2022"&gt;.NET 5.0 will reach End of Support on May 08, 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 が 2022 年 5 月 8 日にサポートが終了することについてのアナウンス。&lt;/p&gt;
&lt;p&gt;5月以降セキュリティー修正を含む更新を受け取りたい場合には .NET 6 への移行が推奨される。記事ではプロジェクトの更新と開発環境の更新について触れている。&lt;/p&gt;
&lt;h3 id="release-release-v1.45.0-grpcgrpc"&gt;Release Release v1.45.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.45.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.45.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC v1.45.0 (NuGet パッケージでは 2.45.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは .NET 向けの変更として Streaming API のインターフェースの WriteAsync に CancellationToken を受けとるオーバーロードが追加されたこと(ただし C-core ではサポートされない)、nullable に関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="announcing-system.commandline-2.0-beta-3-issue-1613-dotnetcommand-line-api"&gt;Announcing System.CommandLine 2.0 Beta 3 · Issue #1613 · dotnet/command-line-api&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/command-line-api/issues/1613"&gt;https://github.com/dotnet/command-line-api/issues/1613&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine 2.0 Beta 3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要なインターフェイスの削除&lt;/li&gt;
&lt;li&gt;コマンドラインの構成のバリデーションがオンデマンドに&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SymbolSet&lt;/code&gt; の削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[debug]&lt;/code&gt; ディレクティブの削除&lt;/li&gt;
&lt;li&gt;シンプルなバリデーター API&lt;/li&gt;
&lt;li&gt;トリミングのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="task.delay"&gt;Task.Delayの精度&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mono_matsu/articles/544e3384ea4a70"&gt;https://zenn.dev/mono_matsu/articles/544e3384ea4a70&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="taurus.net-qiita"&gt;Taurus を使って .NET のテストプロジェクトを対象にロードテストを実施する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/e254bcbb7dcc61a4ca5d"&gt;https://qiita.com/karuakun/items/e254bcbb7dcc61a4ca5d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="creating-a-menu-bar-ui-with.net-maui-preview-14"&gt;Creating a Menu Bar UI with .NET MAUI Preview 14&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/creating-a-menu-bar-ui-with-net-maui-preview-14-fdo"&gt;https://dev.to/syncfusion/creating-a-menu-bar-ui-with-net-maui-preview-14-fdo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-event-await"&gt;C# の Event を await する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/2d0c15b21c5a8c"&gt;https://zenn.dev/tan_y/articles/2d0c15b21c5a8c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="go-to-definition-improvements-for-external-source-in-roslyn"&gt;Go To Definition improvements for external source in Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/"&gt;https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="signalr-add-client-return-results-by-brennanconroy-pull-request-40811-dotnetaspnetcore"&gt;[SignalR] Add client return results by BrennanConroy · Pull Request #40811 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40811"&gt;https://github.com/dotnet/aspnetcore/pull/40811&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;[C#] 固定長配列を持つ構造体の取り扱い方 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/02ee4fa3b200874014e1"&gt;https://qiita.com/radian-jp/items/02ee4fa3b200874014e1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-segments-and-regions-differ-in-decommitting-memory-in-the.net-7-gc"&gt;How segments and regions differ in decommitting memory in the .NET 7 GC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maoni0.medium.com/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a"&gt;https://maoni0.medium.com/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="copy-chmod-reduced-the-size-of-my-container-image-by-35"&gt;&lt;code&gt;COPY --chmod&lt;/code&gt; reduced the size of my container image by 35%&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.vamc19.dev/posts/dockerfile-copy-chmod/"&gt;https://blog.vamc19.dev/posts/dockerfile-copy-chmod/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework"&gt;Tracking down a hanging xUnit test in CI: building a custom Test Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework/"&gt;https://andrewlock.net/tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="github-essentials-with-rider-the.net-tools-blog"&gt;GitHub Essentials with Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/28/github-essentials-with-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/03/28/github-essentials-with-rider/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="looking-for-errors-in-the-c-code-of-the-eto.forms-gui-framework"&gt;Looking for errors in the C# code of the Eto.Forms GUI framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/pvs-studio/looking-for-errors-in-the-c-code-of-the-eto-forms-gui-framework-7cbae564a1d4"&gt;https://medium.com/pvs-studio/looking-for-errors-in-the-c-code-of-the-eto-forms-gui-framework-7cbae564a1d4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running"&gt;Just because you stopped waiting for it, doesn't mean the Task stopped running&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running/"&gt;https://andrewlock.net/just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="what-is-pubsub-and-how-to-apply-it-in-c.net-to-build-a-chat-app"&gt;What is pub/sub and how to apply it in C# .NET to build a chat app&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/ablydev/how-to-use-pubsub-in-c-net-6-to-build-a-chat-app-1ok7"&gt;https://dev.to/ablydev/how-to-use-pubsub-in-c-net-6-to-build-a-chat-app-1ok7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-nullef-core-dbsett-qiita"&gt;C# null許容参照型を有効にした場合のEF Core DbSetTの書き方 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yohskeey/items/6e9e5d1f140558d37c99"&gt;https://qiita.com/yohskeey/items/6e9e5d1f140558d37c99&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-few-words-about-the-implementation-of-listt-in-c"&gt;A few words about the implementation of ListT in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wojciechowskapaula/a-few-words-about-the-implementation-of-list-in-c-2h8j"&gt;https://dev.to/wojciechowskapaula/a-few-words-about-the-implementation-of-list-in-c-2h8j&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="imagesharp-2.0.0-the-feature-packed-release"&gt;ImageSharp 2.0.0: the Feature-Packed Release&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/03/imagesharp-2-release/"&gt;https://www.infoq.com/news/2022/03/imagesharp-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="httpclient-mocking-c"&gt;HTTPClient Mocking — C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pritompurkayasta.medium.com/httpclient-mocking-c-f452909a987c"&gt;https://pritompurkayasta.medium.com/httpclient-mocking-c-f452909a987c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="linq-to-objects3"&gt;LINQ to Objectsを使う前におさえておくべき3つのこと&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/introduction-linq-to-objects"&gt;https://zenn.dev/nuits_jp/articles/introduction-linq-to-objects&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor-server"&gt;ASP.NET Core Blazor Server でクレームベースの承認とポリシーベースの承認をする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/add-policybaseauth-and-claimbaseauth"&gt;https://zenn.dev/okazuki/articles/add-policybaseauth-and-claimbaseauth&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="annotations-frameworkcaws-lambda-qiita"&gt;Annotations Frameworkを使って、C#でのAWS Lambda 関数実装をもっと楽にしよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/bc8f3dd029402ba667f6"&gt;https://qiita.com/karuakun/items/bc8f3dd029402ba667f6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dictionary-implementation-in-c"&gt;Dictionary implementation in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wojciechowskapaula/dictionary-implementation-in-c-50j1"&gt;https://dev.to/wojciechowskapaula/dictionary-implementation-in-c-50j1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="kekyocenterclr.relaxversioner-an-easy-full-automatic-git-based-version-inserter-for.net-6-5.net-core.net-framework"&gt;kekyo/CenterCLR.RelaxVersioner: An easy, full-automatic, git based version inserter for .NET 6, 5/.NET Core/.NET Framework.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/kekyo/CenterCLR.RelaxVersioner"&gt;https://github.com/kekyo/CenterCLR.RelaxVersioner&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozy_kekyo/an-easy-way-to-practice-version-embedding-on-net-45h8"&gt;An easy way to practice version embedding on .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xamlanimatedgifwpfanimatedgif-a-simple-library-to-display-animated-gif-images-in-wpf-usable-in-xaml-or-in-code"&gt;XamlAnimatedGif/WpfAnimatedGif: A simple library to display animated GIF images in WPF, usable in XAML or in code.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/XamlAnimatedGif/WpfAnimatedGif"&gt;https://github.com/XamlAnimatedGif/WpfAnimatedGif&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tat_tt/items/fc04ccbcbba7a5135ce7"&gt;WPFでGIF画像を簡単に表示するライブラリ「WPF Animated GIF」を使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stevesandersonmsdotnet-wasi-sdk-packages-for-building.net-projects-as-standalone-wasi-compliant-modules"&gt;SteveSandersonMS/dotnet-wasi-sdk: Packages for building .NET projects as standalone WASI-compliant modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk"&gt;https://github.com/SteveSandersonMS/dotnet-wasi-sdk&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vsadovnonblocking-implementation-of-a-lock-free-dictionary-on.net"&gt;VSadov/NonBlocking: Implementation of a lock-free dictionary on .Net.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/VSadov/NonBlocking"&gt;https://github.com/VSadov/NonBlocking&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/v_sadov/status/1505580033942822913?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Updated NonBlocking Dictionary to 2.0:&lt;br&gt;- performance improvements&lt;br&gt;- updated API surface to match ConcurrentDictionary in net5.0&lt;br&gt;- now targeting netstandard2.1&lt;br&gt; &lt;a href="https://t.co/TzQ3NjJzFF"&gt;https://t.co/TzQ3NjJzFF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vladimir Sadov 🌻 (&amp;#64;v_sadov) &lt;a href="https://twitter.com/v_sadov/status/1505580033942822913?ref_src=twsrc%5Etfw"&gt;March 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jeffhollan/status/1505215044367265794?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;PSA to all those .NET users of &lt;a href="https://twitter.com/AzureFunctions?ref_src=twsrc%5Etfw"&gt;&amp;#64;AzureFunctions&lt;/a&gt; : Extended support for Microsoft .NET Core 3.1 will end on 3 December 2022 &lt;a href="https://t.co/BrzZqyzxl4"&gt;https://t.co/BrzZqyzxl4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeff Hollan (&amp;#64;jeffhollan) &lt;a href="https://twitter.com/jeffhollan/status/1505215044367265794?ref_src=twsrc%5Etfw"&gt;March 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-19: .NET 7 Preview 2, .NET MAUI Preview 14, Visual Studio 25th Anniversary</title>
			<link>/2022/03/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/19/updates</guid>
			<pubDate>Sat, 19 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-2-the-new-new-experience.net-blog"&gt;Announcing .NET 7 Preview 2 - The New, 'New' Experience - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 2 では Regex ソースジェネレーター、新しい &lt;code&gt;dotnet new&lt;/code&gt; CLI 体験、NativeAOT のメインラインへの取り込みの進行などが含まれている他、ランタイムや API に様々な改善が行われている。&lt;/p&gt;
&lt;p&gt;.NET SDK のコマンドライン周りにも改善が入ったことでタブ補完 (PowerShell, bash, zsh, fish) に対応したとのこと。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-2.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 2 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;記事では次のアップデートについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コントローラーのアクションのパラメーター値として DI される値の推測 (Minimal API 同様 &lt;code&gt;[FromService]&lt;/code&gt; が不要となる)&lt;/li&gt;
&lt;li&gt;SignalR の Hub メソッドの DI サポート&lt;/li&gt;
&lt;li&gt;Minimal API でのデスクリプションとサマリーのサポート&lt;/li&gt;
&lt;li&gt;Minimal API でのヘッダーとクエリーストリングのバインディングで配列や StringValues のサポート&lt;/li&gt;
&lt;li&gt;Cookie の許可値のカスタマイズ&lt;/li&gt;
&lt;li&gt;IIS でのシャドウコピーのサポート (Experimental)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-preview-14.net-blog"&gt;Announcing .NET MAUI Preview 14 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-preview-14/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-preview-14/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Preview 14 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは多くの問題や改善が行われたほか、デスクトップアプリ向けのメニューバーのサポートが追加された。&lt;/p&gt;
&lt;p&gt;その他記事では Microsoft.Maui.Essentials についても触れている。&lt;/p&gt;
&lt;h3 id="happy-25th-birthday-visual-studio-visual-studio-blog"&gt;Happy 25th birthday Visual Studio! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/happy-25th-birthday-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/happy-25th-birthday-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio がリリースされてから25周年という記事。&lt;/p&gt;
&lt;p&gt;25周年を記念してバーチャルイベントが開催されたほか、Swag や Visual Studio 向けの記念テーマなどがリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=idex.vsanniversarythemepack"&gt;Visual Studio 25th Anniversary Theme Pack - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-7-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 7 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-7/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 Preview 7 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Xamarin のツールサポートが追加され、.NET 6 と Apple Silicon で動作する Azure Functions V4 ツールが含まれている。その他コードの書式設定などの環境設定画面の macOS ネイティブ UI への移行が完了した。&lt;/p&gt;
&lt;h3 id="net-march-2022-updates.net-6.0.3.net-5.0.15-and.net-3.1.23.net-blog"&gt;.NET March 2022 Updates – .NET 6.0.3, .NET 5.0.15 and, .NET 3.1.23 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/march-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/march-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.3, .NET 5.0.15, .NET 3.1.23 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは様々な不具合等の修正のほか次の3つの脆弱性の修正が行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-8927"&gt;CVE-2020-8927: .NET Remote Code Execution Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Brotli ライブラリーのバッファオーバーランの脆弱性 (.NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-24464"&gt;CVE-2022-24464: .NET Denial of Service Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;HTTP フォームリクエストによって引き起こされる DoS 脆弱性 (.NET 6, .NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-24512"&gt;CVE-2022-24512: .NET Remote Code Execution Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Double のパースに関連するスタックオーバーランの脆弱性 (.NET 6, .NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uno-platform-4.1-30-perf-boost-android-12.net-6-mobile-preview-13-and-more"&gt;Uno Platform 4.1 - 30% Perf Boost, Android 12, .NET 6 Mobile Preview 13 and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-1-30-perf-boost-android-12-net-6-mobile-preview-13-and-more/"&gt;https://platform.uno/blog/uno-platform-4-1-30-perf-boost-android-12-net-6-mobile-preview-13-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;パフォーマンスに関する様々な改善、Android 12 のサポートの追加、.NET 6 Mobile Preview 13 (MAUI Preview 13) への対応などが含まれる。&lt;/p&gt;
&lt;h3 id="release-release-v2.44.0-grpcgrpc-dotnet"&gt;Release Release v2.44.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.44.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.44.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpc-dotnet) v2.44.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合修正とサブチャンネルの呼び出しをトラックするためのインターフェース (&lt;code&gt;ISubchannelCallTracker&lt;/code&gt;) の追加が行われている。&lt;/p&gt;
&lt;h3 id="gnomemonoxamarinmiguel-de-icaza"&gt;GNOMEとMonoとXamarinの開発者Miguel de Icaza（ミゲル・デ・イカザ）氏がマイクロソフト退職を発表&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.publickey1.jp/blog/22/gnomemonoxamarinmiguel_de_icaza.html"&gt;https://www.publickey1.jp/blog/22/gnomemonoxamarinmiguel_de_icaza.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GNOME や Mono、Xamarin の開発者である Miguel de Icaza 氏が Microsoft を退職したことが発表となった。&lt;/p&gt;
&lt;!-- https://twitter.com/migueldeicaza/status/1499926935677321216?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today was my last day at Microsoft. Leaving such a great team was a difficult decision, but the world outside grows bigger and more exciting each day.&lt;br&gt;&lt;br&gt;I plan to make a dent on my open browser tabs, catch up on TikTok and pet projects before starting something new this fall. &lt;a href="https://t.co/mqkwJFDwqx"&gt;pic.twitter.com/mqkwJFDwqx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miguel de Icaza (&amp;#64;migueldeicaza) &lt;a href="https://twitter.com/migueldeicaza/status/1499926935677321216?ref_src=twsrc%5Etfw"&gt;March 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-rider-2022.1-eap-5"&gt;ReSharper / Rider 2022.1 EAP 5&lt;/h3&gt;
&lt;p&gt;ReSharper と Rider の 2022.1 EAP5 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper はバグフィックスが主な変更点となり、Rider はリモート開発のサポートや Unity のサポートの向上などが行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1500772527211225092?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 EAP5 is available! As we move closer to the major release this spring, we’re focusing on bug fixes &lt;a href="https://t.co/R3IyuZAmLC"&gt;https://t.co/R3IyuZAmLC&lt;/a&gt; &lt;a href="https://t.co/IRuEBmwHAs"&gt;pic.twitter.com/IRuEBmwHAs&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1500772527211225092?ref_src=twsrc%5Etfw"&gt;March 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1500778946757120000?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.1 EAP5 is here with the remote development feature and a number of bug fixes. Learn more about it and download it here: &lt;a href="https://t.co/uZcuvk8zQg"&gt;https://t.co/uZcuvk8zQg&lt;/a&gt; &lt;a href="https://t.co/ekvnUKUqBE"&gt;pic.twitter.com/ekvnUKUqBE&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1500778946757120000?ref_src=twsrc%5Etfw"&gt;March 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="logging-grpc-on.net-using-serilog"&gt;Logging gRPC on .NET Using Serilog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tunadonmez/logging-grpc-on-net-using-serilog-c40a8fbc0426"&gt;https://medium.com/&amp;#64;tunadonmez/logging-grpc-on-net-using-serilog-c40a8fbc0426&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で gRPC サーバーを構築してそのログを Serilog で出力するという構成についての記事。&lt;/p&gt;
&lt;h3 id="building-a-grpc-server-in.net"&gt;Building a gRPC Server in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/sahan/building-a-grpc-server-in-net-52gc"&gt;https://dev.to/sahan/building-a-grpc-server-in-net-52gc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で gRPC サーバーを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="xamarin.forms-qiita"&gt;Xamarin.Formsにおけるスクリーンリーダー対応まとめ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/uhooi/items/ac4945bc3cb6694d5257"&gt;https://qiita.com/uhooi/items/ac4945bc3cb6694d5257&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms におけるスクリーンリーダーの対応状況についての記事。&lt;/p&gt;
&lt;h3 id="mauiavaloniauistyling"&gt;MAUIがリリースされる前にAvaloniaUIのStylingを試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/t13801206/articles/2203-avalonia-comparison-style"&gt;https://zenn.dev/t13801206/articles/2203-avalonia-comparison-style&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia での UI のスタイリングを WPF と比較して紹介する記事。&lt;/p&gt;
&lt;h3 id="mauiavaloniauidi"&gt;MAUIがリリースされる前にAvaloniaUIのDIを試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/t13801206/articles/2203-avalonia-comparison-di"&gt;https://zenn.dev/t13801206/articles/2203-avalonia-comparison-di&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia での DI についての記事。&lt;/p&gt;
&lt;h3 id="cancelling-await-calls-in.net-6-with-task.waitasync"&gt;Cancelling await calls in .NET 6 with Task.WaitAsync()&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/cancelling-await-calls-in-dotnet-6-with-task-waitasync/"&gt;https://andrewlock.net/cancelling-await-calls-in-dotnet-6-with-task-waitasync/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された &lt;code&gt;Task.WaitAsync&lt;/code&gt; メソッドについての記事。&lt;code&gt;Task.WaitAsync&lt;/code&gt; を使用することでタイムアウトを比較的少ないコードで実装できるようになる。&lt;/p&gt;
&lt;h3 id="a-deep-dive-into-the-new-task.waitasync-api-in.net-6"&gt;A deep-dive into the new Task.WaitAsync() API in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-deep-dive-into-the-new-task-waitasync-api-in-dotnet-6/"&gt;https://andrewlock.net/a-deep-dive-into-the-new-task-waitasync-api-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Task.WaitAsync&lt;/code&gt; メソッドそのものの実装についての解説記事。&lt;/p&gt;
&lt;h3 id="configuring-life-cycle-events-in.net-maui-apps"&gt;Configuring Life Cycle Events in .NET MAUI Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/configuring-life-cycle-events-in-net-maui-apps-38ag"&gt;https://dev.to/syncfusion/configuring-life-cycle-events-in-net-maui-apps-38ag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションでライフサイクルイベントを構成する方法ついての記事。&lt;/p&gt;
&lt;h3 id="c-10-priorityqueue-is-here"&gt;C# 10 PriorityQueue is here !&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;dorlugasigal/c-10-priorityqueue-is-here-5067e2628470"&gt;https://medium.com/&amp;#64;dorlugasigal/c-10-priorityqueue-is-here-5067e2628470&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の PriorityQueue の仕組みと使い方についての記事。&lt;/p&gt;
&lt;h3 id="modelling-workflows-with-finite-state-machines-in.net"&gt;Modelling workflows with Finite State Machines in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.lloydatkinson.net/posts/2022/modelling-workflows-with-finite-state-machines-in-dotnet/"&gt;https://www.lloydatkinson.net/posts/2022/modelling-workflows-with-finite-state-machines-in-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stateless というステートマシンを実装するためのライブラリーを使用して有限ステートマシンでワークフローをモデリングするという記事。&lt;/p&gt;
&lt;h3 id="whats-the-maximum-number-of-arguments-for-method-in-c-and-in.net-tabs-over-spaces-by-jiri" x2=""&gt;What’s the maximum number of arguments for method in C# and in .NET? | tabs ↹ over ␣ ␣ ␣ spaces by Jiří&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tabsoverspaces.com/233892-whats-the-maximum-number-of-arguments-for-method-in-csharp-and-in-net"&gt;https://www.tabsoverspaces.com/233892-whats-the-maximum-number-of-arguments-for-method-in-csharp-and-in-net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のメソッドの引数は最大いくつにできるのか、という記事。&lt;/p&gt;
&lt;p&gt;記事では T4 で生成したコードをコンパイルしたところ65536個までコンパイルできたが、実際に呼び出せるのは .NET 6.0.2 では8192個までだったとしている。&lt;/p&gt;
&lt;h3 id="executing-code-before-main-in.net-gerald-barre"&gt;Executing code before Main in .NET - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/executing-code-before-main-in-dotnet.htm"&gt;https://www.meziantou.net/executing-code-before-main-in-dotnet.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET が Main (エントリーポイント) を呼び出すより前に何らかのコードを実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では静的コンストラクタ、モジュール初期化、スタートアップフックを紹介している。&lt;/p&gt;
&lt;h3 id="automate-code-metrics-and-class-diagrams-with-github-actions.net-blog"&gt;Automate code metrics and class diagrams with GitHub Actions - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/automate-code-metrics-and-class-diagrams-with-github-actions/"&gt;https://devblogs.microsoft.com/dotnet/automate-code-metrics-and-class-diagrams-with-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions を使用して自動的にコードメトリクスやクラスダイアグラムを生成する方法についての記事。&lt;/p&gt;
&lt;h3 id="sqliteentityframeworkcoremicrosoft.data.sqlite-qiita"&gt;SQLiteの書き込みを高速にする（EntityFrameworkCoreのMicrosoft.Data.Sqlite版） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ShTair/items/47c15fa65c4523b56e91"&gt;https://qiita.com/ShTair/items/47c15fa65c4523b56e91&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Data.SQLite では指定できていたパフォーマンスに影響するオプションと同様のプラグマを Entity Framework Core の SQLite 実装 (Microsoft.Data.Sqlite) でセットする方法ついて。&lt;/p&gt;
&lt;h3 id="entity-framework-core-bulk-insert"&gt;Entity Framework Core で Bulk Insert する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mono_matsu/articles/40e74c0022b9e6"&gt;https://zenn.dev/mono_matsu/articles/40e74c0022b9e6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core での Bulk Insert についての記事。&lt;/p&gt;
&lt;h3 id="c.net-20-qiita"&gt;C#の進化を垣間見てみよう - .NET 20周年を記念して - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/df3ef1f0c583feeead75"&gt;https://qiita.com/gushwell/items/df3ef1f0c583feeead75&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# が20年間で変わってきた部分を C# 3.0 のコードを書き換えながら紹介してる記事。&lt;/p&gt;
&lt;h3 id="live-unit-testing-preview-better-and-faster-visual-studio-blog"&gt;Live Unit Testing Preview: Better and Faster - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/live-unit-testing-preview-better-and-faster/"&gt;https://devblogs.microsoft.com/visualstudio/live-unit-testing-preview-better-and-faster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Enterprise で提供されているライブユニットテストの新しいビルド体験を提供するプレビュー機能についての記事。&lt;/p&gt;
&lt;h3 id="litedbsqlitec-qiita"&gt;LiteDBとSQLiteのパフォーマンスを計測してみた(C#) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/KyoheiOkawa/items/903768bec2f801ef3c7c"&gt;https://qiita.com/KyoheiOkawa/items/903768bec2f801ef3c7c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LiteDB (.NET ネイティブなデータベース)と SQLite でのパフォーマンスの比較記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-qiita"&gt;ASP.NET Core開発者ロードマップを日本語訳しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/k2491p/items/ac62468260d002cb5fe1"&gt;https://qiita.com/k2491p/items/ac62468260d002cb5fe1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moien Tajik 氏が書いた ASP.NET Core でのアプリケーション開発者として学ぶためのロードマップを日本語訳したもの。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap"&gt;MoienTajik/AspNetCore-Developer-Roadmap: Roadmap to becoming an ASP.NET Core developer in 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-blazor-server"&gt;ASP.NET Core Blazor Server でオレオレ ログインを作りたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/signin-blazor-server"&gt;https://zenn.dev/okazuki/articles/signin-blazor-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Blazor Server で ASP.NET Core Identity や外部の ID プロバイダーを使用した認証を使用しない、独自の認証機構を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="create-a-custom-github-action-with-c"&gt;Create a Custom GitHub Action with C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ferrywlto.medium.com/create-a-custom-github-action-with-c-b056de359cb5"&gt;https://ferrywlto.medium.com/create-a-custom-github-action-with-c-b056de359cb5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker ベースの GitHub Actions のカスタムアクションを C# で実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="auto-updating-created-updated-and-deleted-timestamps-in-entity-framework.net-core-tutorials"&gt;Auto Updating Created, Updated and Deleted Timestamps In Entity Framework - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/03/16/auto-updating-created-updated-and-deleted-timestamps-in-entity-framework/"&gt;https://dotnetcoretutorials.com/2022/03/16/auto-updating-created-updated-and-deleted-timestamps-in-entity-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で更新日時、削除日時のようなタイムスタンプを自動で更新する方法についての記事。&lt;/p&gt;
&lt;h3 id="using-ef-core-global-query-filters-to-ignore-soft-deleted-entities.net-core-tutorials"&gt;Using EF Core Global Query Filters To Ignore Soft Deleted Entities - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/03/17/using-ef-core-global-query-filters-to-ignore-soft-deleted-entities/"&gt;https://dotnetcoretutorials.com/2022/03/17/using-ef-core-global-query-filters-to-ignore-soft-deleted-entities/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で論理削除された要素を常にフィルターするといった方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-tackme31howmessy-how-messy-is-your-code"&gt;GitHub - tackme31/howmessy: How messy is your code?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tackme31/howmessy"&gt;https://github.com/tackme31/howmessy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の CodeLens 上にコードの複雑度を表示する Visual Studio 拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tackme31/items/dbdc075afaad78cb9c08"&gt;メソッド上にコードの複雑さを表示するVisual Studio拡張機能を作りました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="rome.net-conference-the-background-on-background-tasks-in.net-6"&gt;Rome .NET Conference – The Background on Background Tasks in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scottsauber.com/2022/03/17/rome-net-conference-the-background-on-background-tasks-in-net-6/"&gt;https://scottsauber.com/2022/03/17/rome-net-conference-the-background-on-background-tasks-in-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのバックグラウンド処理を行う際の手法についてのスライド。&lt;/p&gt;
&lt;h3 id="deep-dive-distributed-tracing"&gt;deep dive distributed tracing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/tanakata/deep-dive-distributed-tracing"&gt;https://www.slideshare.net/tanakata/deep-dive-distributed-tracing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分散トレーシングの仕組みとその表現についてのスライド。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jamesnk/status/1502449100905906180?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Visual Studio 2022 doesn&amp;#39;t support building .NET 4 and .NET 4.5 libraries. Newtonsoft.Json no builds in VS2022.&lt;br&gt;&lt;br&gt;Should the next version of Newtonsoft.Json drop old, unsupported .NET Framework versions (net20, net40, net45) and require net462 or later? 🤯&lt;a href="https://t.co/DpVpaC3pda"&gt;https://t.co/DpVpaC3pda&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1502449100905906180?ref_src=twsrc%5Etfw"&gt;March 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 は .NET Framework 4, 4.5 をサポートしていないので Json.NET はこれ以降 .NET Framework 4.6.2 以降のサポートにしようと思うがどうかという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-stopwatch.getelapsedtime-by-stephentoub-pull-request-66372-dotnetruntime"&gt;Add Stopwatch.GetElapsedTime by stephentoub · Pull Request #66372 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/66372"&gt;https://github.com/dotnet/runtime/pull/66372&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stopwatch.GetTimestamp()&lt;/code&gt; が返す値は環境によって異なり Frequency で割るといった必要があったので、タイムスタンプを直接 &lt;code&gt;TimeSpan&lt;/code&gt; に変換するメソッドを追加するという PR。&lt;/p&gt;
&lt;h3 id="system.linq-work-planned-for.net-7-issue-64601-dotnetruntime"&gt;System.Linq work planned for .NET 7 · Issue #64601 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/64601"&gt;https://github.com/dotnet/runtime/issues/64601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での System.Linq に関するプランニングされた作業の Issue。&lt;/p&gt;
&lt;h3 id="add-grpc-json-transcoding-by-jamesnk-pull-request-40242-dotnetaspnetcore"&gt;Add gRPC JSON transcoding by JamesNK · Pull Request #40242 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40242"&gt;https://github.com/dotnet/aspnetcore/pull/40242&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC のリクエスト/レスポンスを JSON 形式に変換することで Web API として効果する仕組みの提供の PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-05: Early peek at C# 11 features, 2FA on NuGet.org, ILSpy 7.2</title>
			<link>/2022/03/05/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/05/updates</guid>
			<pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="early-peek-at-c-11-features.net-blog"&gt;Early peek at C# 11 features - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/"&gt;https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 と .NET SDK 6.0.200 以降で利用できるようになった C# 11 プレビュー機能の紹介記事。&lt;/p&gt;
&lt;p&gt;記事では有効にする方法と次の機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列補完の中の改行&lt;/li&gt;
&lt;li&gt;リストパターン&lt;/li&gt;
&lt;li&gt;パラメーター &lt;code&gt;null&lt;/code&gt; チェック&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="requiring-two-factor-authentication-on-nuget.org-the-nuget-blog"&gt;Requiring two-factor authentication on NuGet.org - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/"&gt;https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.org が3月8日から二要素認証 (2FA) を必須にするというアナウンス。&lt;/p&gt;
&lt;p&gt;サプライチェーンセキュリティの強化のためログインに二要素認証が必須となる。二要素認証は Microsoft アカウントまたは職場または学校のアカウント (Azure Active Directory) のものが使用され、サインイン時にそれらがサポートするいずれかの二要素認証が要求される。&lt;/p&gt;
&lt;p&gt;ユーザーログインは3月8日からすべてのアカウントに対して有効となり、API キーは今後二要素認証コンテキストで作成されていないものが無効とされる予定。無効化を実施する30日前には通知される。&lt;/p&gt;
&lt;h3 id="release-ilspy-7.2-icsharpcodeilspy"&gt;Release ILSpy 7.2 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v7.2"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 7.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# のパターンマッチングやネストされた stackalloc のコンテキスト、SkipLocalInit のようないくつかの機能に対応し、多くの改善や修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-release-v2.43.0-grpcgrpc-dotnet"&gt;Release Release v2.43.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) 2.43.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 での deflate 圧縮やヘルスチェックのマッピング設定といった機能の追加といくつかの改善と修正が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the.net-6-runtime-for-aws-lambda-amazon-web-services"&gt;Introducing the .NET 6 runtime for AWS Lambda | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/"&gt;https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda における .NET 6 ランタイムサポートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロギングの改善&lt;/li&gt;
&lt;li&gt;JSON シリアライズのための Source Generator&lt;/li&gt;
&lt;li&gt;トップレベルステートメント&lt;/li&gt;
&lt;li&gt;ASP.NET Core Minimal API&lt;/li&gt;
&lt;li&gt;オープンソース Lambda ランタイムクライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="edge-developer-tools-visual-studio-marketplace"&gt;Edge Developer Tools - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools"&gt;https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio に Edge と Developer Tools を統合して ASP.NET / ASP.NET Core アプリケーションを開発時にシームレスにあつかえるようにする拡張がプレビューリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="efcoredbcontextnew-enrike3"&gt;EFCoreに深入り(DbContextをnewするあたり) - enrike3のブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://enrike3.hatenablog.com/entry/2022/02/20/163821"&gt;https://enrike3.hatenablog.com/entry/2022/02/20/163821&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で DbContext が作成するのに必要な要素がどのように用意されているのかについての記事。&lt;/p&gt;
&lt;h3 id="c-vectort-qiita"&gt;[C#] Vector&amp;lt;T&amp;gt;で配列の最大値を高速取得 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/186862f355ac5625a704"&gt;https://qiita.com/radian-jp/items/186862f355ac5625a704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SIMD が有効になる &lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; を使用することで配列の最大要素の高速に取得するという記事。&lt;/p&gt;
&lt;h3 id="c-10.0-c-c"&gt;【C# 10.0 変更点】 構造体のフィールド初期化子にはコンストラクター必須 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/"&gt;https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のフィールド初期化子を持つ場合コンストラクターが必須となる修正が Visual Studio 2022 17.1 以降で行われた件についての記事。&lt;/p&gt;
&lt;h3 id="serilog-5.0.0-2-qiita"&gt;Serilog 5.0.0 バージョンアップ時に引っかかった2点 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0"&gt;https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog を 4.1.0 から 5.0.0 へバージョンアップした際の発生した非互換の挙動に関する記事。&lt;/p&gt;
&lt;h3 id="how-to-access-configuration-values-from-appsettings.json-file-inside-validationattribute-class-nuthan-murarysetty-medium"&gt;How to access configuration values from appsettings.json file inside ValidationAttribute class? - Nuthan Murarysetty - Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a"&gt;https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidationAttribute&lt;/code&gt; から appsettings.json の設定値にアクセスする方法についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; メソッドに渡される &lt;code&gt;ValidateContext&lt;/code&gt; は &lt;code&gt;IServiceProvider&lt;/code&gt; を提供しているため、&lt;code&gt;GetService&amp;lt;IConfiguration&amp;gt;&lt;/code&gt; などで設定を取得できる。また、ユニットテストでは &lt;code&gt;ValidationContext&lt;/code&gt; を作成する際に &lt;code&gt;IServiceProvider&lt;/code&gt; のモックを渡すことでテストできる。&lt;/p&gt;
&lt;h3 id="comparing-iasyncenumerable-and-iobservable-for-event-streams-dev-community"&gt;Comparing IAsyncEnumerable and IObservable for event streams - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96"&gt;https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; と &lt;code&gt;IObservable&lt;/code&gt; の違いについての記事。&lt;/p&gt;
&lt;h3 id="net-build-tool-using-bullseye-and-simpleexec-dev-community"&gt;.NET build tool using Bullseye and SimpleExec - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe"&gt;https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAnt のようなビルドの仕組みをターゲット依存グラフの構築実行を実現する &lt;code&gt;Bullseye&lt;/code&gt; とコマンド実行ラッパーの &lt;code&gt;SimpleExec&lt;/code&gt; を利用して作るという記事。&lt;/p&gt;
&lt;p&gt;単純な二つのライブラリーを組みわせることで理解しやすい形でビルドツールを構築できるとしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/bullseye"&gt;adamralph/bullseye: 🎯 A .NET library for running a target dependency graph.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/simple-exec"&gt;adamralph/simple-exec: 🏃 A .NET library that runs external commands.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-deep-dive-into-cs-cancellationtoken-by-mitesh-shah-feb-2022-medium"&gt;A Deep Dive into C#’s CancellationToken | by Mitesh Shah | Feb, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f"&gt;https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CancellationToken が提供している機能やそれらを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="recommended-container-limits-for-dotnet-monitor"&gt;Recommended container limits for dotnet-monitor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor"&gt;https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-monitor&lt;/code&gt; をコンテナー環境で動かす場合の推奨されるリソース設定についての記事。&lt;/p&gt;
&lt;h3 id="creating-a-clean-style-library-for-xamarin.forms"&gt;Creating a clean Style Library for Xamarin.Forms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde"&gt;https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms でクリーンなスタイルライブラリーを構築することについての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-webapplicationfactory"&gt;[ASP.NET Core 6] WebApplicationFactoryの利用の互換性が失われることに対処する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/372d16077ecdf6"&gt;https://zenn.dev/shimat/articles/372d16077ecdf6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 6 (.NET 6) で WebApplicationFactory を利用する場合に .NET 5 やそれ以前のバージョンとの構成が異なることによる問題についての記事。&lt;/p&gt;
&lt;h3 id="net-github-actions-intro-to-github-actions-for.net.net-blog"&gt;.NET 💜 GitHub Actions: intro to GitHub Actions for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの GitHub Actions での利用について紹介している記事。&lt;/p&gt;
&lt;h3 id="postgresql-ef-corejson-qiita"&gt;PostgreSQL EF CoreでのJsonの処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47"&gt;https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7.0 プレビューと PostgreSQL (Npgsql) での JSON をマッピングを試してみたという記事。&lt;/p&gt;
&lt;h3 id="building.net-project-docs-with-docfx-on-github-pages-james-croft"&gt;Building .NET project docs with DocFX on GitHub Pages - James Croft&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/"&gt;https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DocFX を使って .NET プロジェクトのドキュメントを生成し、GitHub Pages にアップロードする方法についての記事。カスタマイズなどにも触れている。&lt;/p&gt;
&lt;h3 id="blazor-webassemblymudblazorpie-chart-qiita"&gt;Blazor WebAssemblyでMudBlazorを使ってPie Chartを表示してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/michimichix521/items/208b89a8750f8d9b962c"&gt;https://qiita.com/michimichix521/items/208b89a8750f8d9b962c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly で MudBlazor のチャート機能で Pie Chart を表示してみるという記事。&lt;/p&gt;
&lt;h3 id="c-2022"&gt;【競プロ】C#: 競技プログラミング環境構築 2022年版&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/1ff02beff572d2"&gt;https://zenn.dev/naminodarie/articles/1ff02beff572d2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で競技プログラミング固有の事情に合わせた環境構築についての記事。&lt;/p&gt;
&lt;h3 id="please-stop-lying-about.net-standard-2.0-support"&gt;Please stop lying about .NET Standard 2.0 support!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/stop-lying-about-netstandard-2-support/"&gt;https://andrewlock.net/stop-lying-about-netstandard-2-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一部のコアライブラリーは TFM として .NET Standard 2.0 をサポートしているように見えるが、.NET Core 2.1 や .NET Core 3.0 のようなサポートの終了しているランタイムではビルドエラーとなる問題についての記事。&lt;/p&gt;
&lt;p&gt;それらのランタイムはサポートが終了しているが積極的にブロックするのは .NET Standard の約束を破るものではないかという筆者の主張。&lt;/p&gt;
&lt;h3 id="migrating-from-redis-64-to-memurai"&gt;Migrating from Redis-64 to Memurai&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1"&gt;https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows で Redis を使用したい場合、Redis-64 に代わる Memurai という Windows ネイティブな Redis 5.0 フォークがあるのでそれに移行するという記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-in-local-containers-with-vs-code-red-hat-developer"&gt;Debug .NET applications running in local containers with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code"&gt;https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカルのコンテナーで動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-on-kubernetes-with-vs-code-red-hat-developer"&gt;Debug .NET applications running on Kubernetes with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code"&gt;https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes で動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6http-client-sdk"&gt;.NET 6によるHTTP Client SDKの作成と利用&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/"&gt;https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP クライアント SDK を作る上でのポイントを解説している記事(日本語)。&lt;/p&gt;
&lt;p&gt;HttpClient のカスタムや IHttpClientFactory との統合、拡張性やテストについて。Refit や NSwag を使用した実装についても触れている。&lt;/p&gt;
&lt;h3 id="training-a-ml.net-model-with-azure-ml.net-blog"&gt;Training a ML.NET Model with Azure ML - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/"&gt;https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Machine Learning を使用して ML.NET のモデルをトレーニングするという記事。&lt;/p&gt;
&lt;h3 id="sharing-code-between-asp.net-and-asp.net-core.net-blog"&gt;Sharing code between ASP.NET and ASP.NET Core - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/"&gt;https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET と ASP.NET Core でコードを共有するための Tips の記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-march-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | March 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-6-dapr-1-qiita"&gt;.NET 6 と Daprを使った分散サービス開発 その1 環境構築 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b"&gt;https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-send-emails-using-c.net-with-azure-functions-and-sendgrid-bindings"&gt;How to Send Emails using C# .NET with Azure Functions and SendGrid Bindings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings"&gt;https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions で SendGrid Bindings を利用してメールを送信する方法についての記事。&lt;/p&gt;
&lt;h3 id="distributed-locks-manager-c-and-redis"&gt;Distributed Locks Manager (C# and Redis)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250"&gt;https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis を使用した分散ロックを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では RedLock.net を使用した例が紹介されている。&lt;/p&gt;
&lt;h3 id="using-aws-ecs-service-discovery-for-communication-between-microservices-in.net-c"&gt;Using AWS ECS Service Discovery for communication between Microservices in .NET &amp;amp; C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71"&gt;https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon ECS で動作するアプリケーションでサービス間の通信のために AWS Cloud Map を使用して Service Discovery を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="building-a-c-blazor-app-with-nosql-and-sql-using-harperdb"&gt;Building a C# Blazor App with NoSQL and SQL Using HarperDB&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc"&gt;https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor アプリケーションで HarperDB と呼ばれる NoSQL/SQL をサポートするデータベースを使用する方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="alias-an-approach-to.net-assembly-conflict-resolution"&gt;Alias: An approach to .NET Assembly Conflict Resolution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution"&gt;https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アセンブリーの競合を解決するためのコマンドラインツール Alias の紹介記事。&lt;/p&gt;
&lt;p&gt;複数のバージョンの Newtonsoft.Json.dll や Unity での UPM からインストールされるパッケージの System.Memory.dll, System.Buffers.dll などで発生するバージョンの競合を解決するため、依存関係も含めてエイリアスのパッチを当てるツール。Sentry for Unity SDK で実際に使用されている。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;MyLibrary.dll&lt;/code&gt; が &lt;code&gt;System.Memory.dll&lt;/code&gt;, &lt;code&gt;System.Buffers.dll&lt;/code&gt; に依存している場合、&lt;code&gt;MyLibrary.&lt;/code&gt; をプレフィックスとしてパッチを当てると、&lt;code&gt;internal&lt;/code&gt; 化された &lt;code&gt;MyLibrary.System.Memory.dll&lt;/code&gt; と &lt;code&gt;MyLibrary.System.Buffers.dll&lt;/code&gt; が生成され、&lt;code&gt;MyLibrary.dll&lt;/code&gt; からはそれらを参照するようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getsentry/dotnet-assembly-alias"&gt;getsentry/dotnet-assembly-alias: Tool to rename .NET assemblies and references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bflattenedbflat-c-as-you-know-it-but-with-go-inspired-tooling-small-selfcontained-and-native-executables"&gt;bflattened/bflat: C# as you know it but with Go-inspired tooling (small, selfcontained, and native executables)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bflattened/bflat"&gt;https://github.com/bflattened/bflat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT と Roslyn を統合して golang のように直接ネイティブ実行バイナリーを出力するというツール。&lt;/p&gt;
&lt;p&gt;なおライセンスは AGPL となっているため注意が必要。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1495625804159811586?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;bflat, my take on C# with Go-like tooling, is now open source. New builds coming as soon as I write the Github actions to create them. You can build it from source in the meantime: &lt;a href="https://t.co/VWiqKUjDgk"&gt;https://t.co/VWiqKUjDgk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1495625804159811586?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="create-json-web-apis-from-grpc"&gt;Create JSON Web APIs from gRPC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC を JSON ベースの HTTP Web API として公開できる実験的なライブラリー Microsoft.AspNetCore.Grpc.HttpApi についての記事。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/funcofjoe/status/1495168840510042117?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;To celebrate .NET&amp;#39;s 20 year anniversary, I&amp;#39;ve put up a mirror of Chris Brumme&amp;#39;s weblog: &lt;a href="https://t.co/wP5JGEnegI"&gt;https://t.co/wP5JGEnegI&lt;/a&gt; &lt;a href="https://t.co/l4h5vxBTUz"&gt;pic.twitter.com/l4h5vxBTUz&lt;/a&gt;&lt;/p&gt;&amp;mdash; J☁e Duffy (&amp;#64;funcOfJoe) &lt;a href="https://twitter.com/funcOfJoe/status/1495168840510042117?ref_src=twsrc%5Etfw"&gt;February 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET CLR の開発者であった Chris Brumme 氏のブログ (濃い話が書かれている) を20周年を記念してミラーサイトとして用意したという話。Chris Brumme 氏は5年前に亡くなっているそう。&lt;/p&gt;
&lt;!-- https://twitter.com/stevensanderson/status/1497230826739834883?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;What&amp;#39;s this - is it a completely normal &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core application?&lt;br&gt;&lt;br&gt;No, it&amp;#39;s &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core running on WASI (WebAssembly on the server)! Just got a prototype working this week. &lt;a href="https://t.co/Hd4rrqSmLA"&gt;pic.twitter.com/Hd4rrqSmLA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steve Sanderson (&amp;#64;stevensanderson) &lt;a href="https://twitter.com/stevensanderson/status/1497230826739834883?ref_src=twsrc%5Etfw"&gt;February 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WASI で ASP.NET Core が動作するプロトタイプができたという話。つまり Blazor ではない ASP.NET Core を WebAssembly で動かせている。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1496469980661096452?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And what if Key doesn&amp;#39;t exist? Our .𝗡𝗘𝗧 𝗶𝗻 𝗣𝗶𝗰𝘁𝘂𝗿𝗲𝘀 infographic will explain! 🧐&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/B6zZHhsSZu"&gt;pic.twitter.com/B6zZHhsSZu&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1496469980661096452?ref_src=twsrc%5Etfw"&gt;February 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1495745477433827332?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New week, new .Net in Pictures! Let&amp;#39;s get a break from .NET Diagnostics Expert and take a look at our new collection of infographics ✨&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/4Ytud17h5N"&gt;pic.twitter.com/4Ytud17h5N&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1495745477433827332?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dictionary の内部に関するインフォグラフィック。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1495673553529749507?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that Compiler Explorer lets you see C# .NET outputs for different Operating Systems and Architectures?&lt;br&gt;&lt;br&gt;Example: &lt;a href="https://t.co/1wKb7G7FM1"&gt;https://t.co/1wKb7G7FM1&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/vw3AiKCnGo"&gt;pic.twitter.com/vw3AiKCnGo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1495673553529749507?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Compiler Explorer では様々な OS とアーキテクチャー向けの逆アセンブル結果を確認できるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="speed-up-contended-http2-frame-writing-500-grpc-h2-70x1-improvement-by-halter73-pull-request-40407-dotnetaspnetcore"&gt;Speed up contended HTTP/2 frame writing (500% gRPC h2 70x1 improvement) by halter73 · Pull Request #40407 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40407"&gt;https://github.com/dotnet/aspnetcore/pull/40407&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 のフレーム書き込みを高速化するという PR。&lt;/p&gt;
&lt;p&gt;これにより TLS 上の HTTP/2 で一つのコネクションに70ストリーム持った場合、500%程度高速になるという。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-19: .NET 20th Anniversary, .NET 7 Preview 1, Visual Studio 2022 17.1</title>
			<link>/2022/02/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/19/updates</guid>
			<pubDate>Sat, 19 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="happy-20th-anniversary.net.net-blog"&gt;Happy 20th Anniversary, .NET! - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/happy-20th-anniversary-net/"&gt;https://devblogs.microsoft.com/dotnet/happy-20th-anniversary-net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET (Visual Studio .NET) のリリースから20周年を迎えたことについての記事。&lt;/p&gt;
&lt;p&gt;2002年2月13日に Visual Studio .NET が正式にリリースされ、それから20年の間にコミュニティーによって支えられ、オープンソース化などを経て、これから .NET 7 へ向かっていくといった話。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=67tCWKnweso"&gt;.NET 20th Anniversary - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet-presentations/dotNET20th"&gt;GitHub - dotnet-presentations/dotNET20th: .NET 20th Anniversary creative and digital swag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/uikou/items/adf5980f409a316d3978"&gt;Happy Birthday！.NET、20 歳になりましたよ。君だけの dotnet-bot くんを作ろうぜ！＃dotNETLovesMe - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.azure.moe/2022/02/15/net-20th-anniversary/"&gt;.NET 20th anniversary | ブチザッキ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-7-preview-1.net-blog"&gt;Announcing .NET 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 では Microsoft.Extensions.* ライブラリーの Null 許容参照型の対応の拡充や JIT コンパイラーの最適化、Activity や System.Text.Json などの API の更新、ホットリロードの改善などが含まれている。&lt;/p&gt;
&lt;p&gt;このプレビューは Visual Studio 2022 17.2 Preview 1 でテストされているため、試用には Preview Channel が推奨されている。また、Visual Studio for Mac でのサポートは近日中となるとのこと。&lt;/p&gt;
&lt;p&gt;.NET 7 での破壊的な変更についてのドキュメントも公開されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/compatibility/7.0"&gt;.NET 7 での破壊的変更 - .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-1.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 1 における ASP.NET Core の更新についての記事。&lt;/p&gt;
&lt;p&gt;.NET 7 では次のエリアの強化にフォーカスしているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パフォーマンス: 更なる速度と効率の向上&lt;/li&gt;
&lt;li&gt;HTTP/3: 機能の実装完了とデフォルトで有効化&lt;/li&gt;
&lt;li&gt;Minimal API: エンドポイントフィルターやルートグルーピング、認証認可のサポートなど&lt;/li&gt;
&lt;li&gt;gRPC: gRPC JSON トランスコーディング&lt;/li&gt;
&lt;li&gt;SignalR: 型付きクライアントの生成、クライアント呼び出しからの結果の受け取り&lt;/li&gt;
&lt;li&gt;Razor: コンパイラーの改善によるパフォーマンス向上やツーリングの向上&lt;/li&gt;
&lt;li&gt;Blazor: MAUI, WPF, Windows Forms 向けの Blazor Hybrid サポートの後、mixed-mode AOT, マルチスレッディング, WebCrypto など多くの強化&lt;/li&gt;
&lt;li&gt;MVC: エンドポイントルーティング、リンク生成、パラメータバインディングの改善&lt;/li&gt;
&lt;li&gt;Orleans: .NET 7 に合わせた Orleans 4 のリリース。シンプルさ、保守性、パフォーマンスに焦点を当てた改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET 7 Preview 1 では次のような改善が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimal API 改善&lt;/li&gt;
&lt;li&gt;SignalR クライアント Source Generator&lt;/li&gt;
&lt;li&gt;MVC のビューと Razor Pages での nullable モデルのサポート&lt;/li&gt;
&lt;li&gt;バリデーションエラーでの JSON プロパティ名の使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet weatch&lt;/code&gt; のコンソール出力の改善&lt;/li&gt;
&lt;li&gt;大きな修正時に常に再起動する &lt;code&gt;dotnet watch&lt;/code&gt; の設定&lt;/li&gt;
&lt;li&gt;ValidationAttribute での Dependency Injection&lt;/li&gt;
&lt;li&gt;ヘッダーの読み書きの高速化&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディング&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-1.net-blog"&gt;Announcing Entity Framework 7 Preview 1 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-1/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;Entity Framework 7 は現在 .NET 6 をターゲットとしているが、.NET 7 のリリースが近づいた時には .NET 7 へとアップグレードされる。また、.NET Framework への対応は行われない。&lt;/p&gt;
&lt;h3 id="announcing.net-maui-preview-13.net-blog"&gt;Announcing .NET MAUI Preview 13 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-13/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-13/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Preview 13 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは品質向上や Label.FormattedText のようないくつかの新しい実装が含まれている。&lt;/p&gt;
&lt;p&gt;そのほかアプリケーションの起動時間を短縮するため、Microsoft.Extensions.Hosting の依存の削除が行われている。アプリケーションの起動のためのコードは引き続きビルダーパターンを使用でき、記事では構成についてや DI について触れている。&lt;/p&gt;
&lt;p&gt;このリリースは Visual Studio 17.2 Preview 1 に含まれているため、試用には Preview Channel のインストールが必要。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-17.1-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.1 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-1-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-1-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;ファイルのインデックス作成による検索速度の向上(プレビュー機能)、フォーカスを失ったときに自動保存する機能が実装された。Git 関連の機能も強化され、ブランチ間の差分表示やデタッチされた HEAD のチェックアウトなどに対応している。&lt;/p&gt;
&lt;p&gt;そのほかソリューションフィルター使用時にプロジェクトの依存を確認してまとめて更新できるようになった。&lt;/p&gt;
&lt;p&gt;17.1 がリリースされたことで Professional/Enterprise のユーザーは 17.0 を LTSC として構成することで2023年7月までセキュリティー修正のサポートを受けられる。Community Edition のユーザーは Current Channel のみとなる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/visualstudio/productinfo/vs-servicing#long-term-servicing-channel-ltsc-support"&gt;Visual Studio の製品ライフサイクルとサービス | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes#1710--visual-studio-2022-version-171-newreleasebutton"&gt;Visual Studio 2022 version 17.1 Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-version-17.2-preview-1"&gt;Visual Studio 2022 version 17.2 Preview 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1720-pre10--visual-studio-2022-version-172-preview-1"&gt;https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1720-pre10--visual-studio-2022-version-172-preview-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 11 の Raw String リテラルの対応や &lt;code&gt;StringSyntaxAttribute&lt;/code&gt; への対応など。そのほか Git の行ステージングの対応など。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/line-staging-interactive-staging/"&gt;Line-staging (interactive staging) - Visual Studio Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-6-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 6 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-6/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 6 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではクラッシュなどの問題が多く修正されているほか、環境設定画面などの UI がネイティブ UI へと移植されている。&lt;/p&gt;
&lt;h3 id="net-framework-february-2022-cumulative-update-preview.net-blog"&gt;.NET Framework February 2022 Cumulative Update Preview - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-february-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-february-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年2月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートではセキュリティー修正は含まれず、品質と安定性の向上のための修正が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLS 1.3 でネゴシエーションする際にクライアント証明書を使用するとハングする問題の修正&lt;/li&gt;
&lt;li&gt;.NET Framework 4.8 で導入された IRawElementProviderSimple のメモリーリークの修正。AppSwitch でオプトインする必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="introducing-compatible-packages-on-nuget.org-the-nuget-blog"&gt;Introducing Compatible Packages on NuGet.org - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/"&gt;https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.org のパッケージ詳細ページで改善されたターゲットフレームワーク関連の表示についての記事。&lt;/p&gt;
&lt;p&gt;パッケージ詳細ページに新たにパッケージがサポートしている最小のターゲットフレームワークのバッジが表示されるようになり、対応しているフレームワークが一目でわかるようになった。&lt;/p&gt;
&lt;p&gt;例えばパッケージのターゲットフレームワークとして &lt;code&gt;net6.0&lt;/code&gt;, &lt;code&gt;net5.0&lt;/code&gt;, &lt;code&gt;netstandard2.1&lt;/code&gt;, &lt;code&gt;netstandard2.0&lt;/code&gt; が指定されている場合、.NET ファミリーでは最小が &lt;code&gt;.NET 5.0&lt;/code&gt;、.NET Standard ファミリーでは最小が &lt;code&gt;.NET Standard 2.0&lt;/code&gt; となり、それらがバッジとして表示される。&lt;/p&gt;
&lt;p&gt;また Frameworks タブではそのターゲットフレームワークから導かれる、実際に対応しているフレームワークの一覧を確認できるようになっている。これは例えば &lt;code&gt;net6.0&lt;/code&gt; がターゲットであれば &lt;code&gt;net6.0&lt;/code&gt; だけでなく &lt;code&gt;net6.0-windows&lt;/code&gt; や &lt;code&gt;net6.0-ios&lt;/code&gt; なども対象となる。&lt;/p&gt;
&lt;p&gt;記事では .NET Framework, .NET Core, Xamarin, .NET Standard, .NET の違いやターゲットフレームワークについても触れている。&lt;/p&gt;
&lt;h3 id="resharper-and-rider-2022.1-eap-3"&gt;ReSharper and Rider 2022.1 EAP 3&lt;/h3&gt;
&lt;p&gt;ReSharper と Rider の 2022.1 EAP 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper は型のファイルへの移動の向上や Source Generator 使用時のパフォーマンスの向上、Rider は Visual Studio 2022 キーバインドの追加や Docker fast モード対応など。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1494301871556767747?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 EAP3 has landed with better Move to file, faster work with source generators, disabling dotCover for certain lines of code, keyboard navigation in dotTrace Home, and more. Check out our website for details and download: &lt;a href="https://t.co/dcxG4qkrri"&gt;https://t.co/dcxG4qkrri&lt;/a&gt; &lt;a href="https://t.co/pXuJ9cEhq3"&gt;pic.twitter.com/pXuJ9cEhq3&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1494301871556767747?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1494327772633702414?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.1 EAP3 is now available with new keymaps, Docker fast mode, and adding web references in .NET Core projects. Learn more at &lt;a href="https://t.co/l7wKSJLun6"&gt;https://t.co/l7wKSJLun6&lt;/a&gt; &lt;a href="https://t.co/zUQY3fZjlR"&gt;pic.twitter.com/zUQY3fZjlR&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1494327772633702414?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="release-release-v1.44.0-grpcgrpc"&gt;Release Release v1.44.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.44.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.44.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC 1.44.0 (NuGet パッケージバージョン 2.44.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 向けの変更として &lt;code&gt;AsyncUnaryCall&lt;/code&gt; と &lt;code&gt;AsyncClientStreamingCall&lt;/code&gt; で &lt;code&gt;ConfigureAwait&lt;/code&gt; をサポートするようになった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="net-7-webassembly-plans-mixed-mode-aot-multi-threading-web-crypto-visual-studio-magazine"&gt;.NET 7 WebAssembly Plans: Mixed-Mode AOT, Multi-Threading, Web Crypto -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/02/18/net-7-webassembly.aspx"&gt;https://visualstudiomagazine.com/articles/2022/02/18/net-7-webassembly.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 の WebAssembly (Blazor) の対応予定についてまとめている記事。&lt;/p&gt;
&lt;h3 id="unity-2021.2-il2cpp-unity-blog"&gt;機能ハイライト：Unity 2021.2 における IL2CPP ランタイムのパフォーマンス改善 | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/ja/technology/feature-highlight-il2cpp-runtime-performance-improvements-in-unity-20212"&gt;https://blog.unity.com/ja/technology/feature-highlight-il2cpp-runtime-performance-improvements-in-unity-20212&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2021.2 での IL2CPP ランタイム (AOT 実行)でのパフォーマンス改善について紹介している記事。&lt;/p&gt;
&lt;p&gt;デリゲートの呼び出し、不必要なボックス化のチェック、ジェネリック仮想メソッドの呼び出し、 Enum.HasFlag、制約された呼び出しといった部分の改善について紹介している。&lt;/p&gt;
&lt;h3 id="net-beyond-vmware-tanzu-developer-center"&gt;.NET Beyond | VMWare Tanzu Developer Center&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tanzu.vmware.com/developer/tv/dotnet-beyond"&gt;https://tanzu.vmware.com/developer/tv/dotnet-beyond&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VMWare による .NET に関するオンラインイベント。&lt;/p&gt;
&lt;h3 id="c-11-null"&gt;【C# 11 候補】 引数の null チェック&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/parameter-null-check/"&gt;https://ufcpp.net/blog/2022/2/parameter-null-check/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 で導入予定のパラメーターの null チェックについての記事。&lt;/p&gt;
&lt;h3 id="cache-aside-pattern-using-c-adnan-rafiqs-blog-memories-and-opinions"&gt;Cache Aside Pattern using C# | Adnan Rafiq's Blog, Memories and Opinions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://adnanrafiq.com/blog/cache-aside-pattern-csharp/"&gt;https://adnanrafiq.com/blog/cache-aside-pattern-csharp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft.Extensions.Caching と Redis でキャッシュを扱う手法についての記事。&lt;/p&gt;
&lt;h3 id="why-making-umbraco-headless-makes-sense"&gt;Why making Umbraco headless makes sense&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/nikcio/why-making-umbraco-headless-makes-sense-2acd"&gt;https://dev.to/nikcio/why-making-umbraco-headless-makes-sense-2acd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Umbraco CMS を GraphQL ベースの Headless CMS として使う方法についての記事。&lt;/p&gt;
&lt;h3 id="net-and-c-versions-20th-anniversary"&gt;.NET and C# Versions - 20th Anniversary ♥&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nietras.com/2022/02/13/dotnet-and-csharp-versions/"&gt;https://nietras.com/2022/02/13/dotnet-and-csharp-versions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET と C# の20年の間に導入された機能などを一枚の画像にまとめたもの。&lt;/p&gt;
&lt;h3 id="microsoftyarp"&gt;MicrosoftがYARPをリリース - もう一つのリバースプロキシ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/news/2022/02/microsoft-releases-yarp/"&gt;https://www.infoq.com/jp/news/2022/02/microsoft-releases-yarp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft が開発したリバースプロキシーのためのライブラリー YARP についての記事。&lt;/p&gt;
&lt;h3 id="cstatiq-qiita"&gt;C#製の静的サイトジェネレータ「Statiq」でブログを書く - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yamaccu/items/6ea0e09954bec8474a19"&gt;https://qiita.com/yamaccu/items/6ea0e09954bec8474a19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で書かれた静的サイトジェネレーターの Statiq でブログを書くための使い方を紹介している記事。(ちなみに WeekRef.NET も Statiq で生成しています)&lt;/p&gt;
&lt;h3 id="await"&gt;イベントを await で受け取る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/zuishin/articles/2022-02-15-01"&gt;https://zenn.dev/zuishin/articles/2022-02-15-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;イベントハンドラーによるイベントを &lt;code&gt;await&lt;/code&gt; できるように変換するという方法についての記事。&lt;/p&gt;
&lt;h3 id="waiting-for-your-asp.net-core-app-to-be-ready-from-an-ihostedservice-in.net-6"&gt;Waiting for your ASP.NET Core app to be ready from an IHostedService in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/finding-the-urls-of-an-aspnetcore-app-from-a-hosted-service-in-dotnet-6/"&gt;https://andrewlock.net/finding-the-urls-of-an-aspnetcore-app-from-a-hosted-service-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の &lt;code&gt;IHostedService&lt;/code&gt; のコードから ASP.NET Core アプリケーションが起動するのを待機する方法についての記事。&lt;/p&gt;
&lt;p&gt;ASP.NET Core がリッスンしているアドレスを取得したいといった場合は Kestrel (ASP.NET Core) の起動が完了を待つ必要があるため、&lt;code&gt;IHostApplicationLifetime&lt;/code&gt; を使用する。&lt;/p&gt;
&lt;h3 id="how-to-write-your-own-discord-bot-on.net-6"&gt;How to write your own discord bot on .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/medialesson/how-to-write-your-own-discord-bot-on-net-6-ac96e40467b8"&gt;https://medium.com/medialesson/how-to-write-your-own-discord-bot-on-net-6-ac96e40467b8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Discord.Net を試用して Discord のボットを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6.0alpine-qiita"&gt;.NET 6.0とAlpineのバージョンアップで遭遇した問題二つ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/ac6cfd5e0bc52ce5bea6"&gt;https://qiita.com/karuakun/items/ac6cfd5e0bc52ce5bea6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 3.1 から .NET 6 と Docker イメージの Alpine のバージョンを上げた際に発生した問題についての記事。&lt;/p&gt;
&lt;p&gt;一つは OS と Aurora での TLS のバージョンの問題、もう一つは Async MySQL Connector のバージョンが上がったことでの Aurora との相性問題。&lt;/p&gt;
&lt;h3 id="c-c-c"&gt;C# 中の埋め込み言語 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/embedded-languages"&gt;https://ufcpp.net/blog/2022/2/embedded-languages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;現在実装が進んでいる C# のコード内に JSON や正規表現のような別な言語を埋め込む場合のシンタックスハイライトに関する機能についての記事。&lt;/p&gt;
&lt;h3 id="typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model-visual-studio-blog"&gt;Typing Less, Coding More: How we delivered IntelliCode whole line completions with a transformer model - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model/"&gt;https://devblogs.microsoft.com/visualstudio/typing-less-coding-more-how-we-delivered-intellicode-whole-line-completions-with-a-transformer-model/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の IntelliCode (学習ベースのコード補完) の技術的な解説記事。&lt;/p&gt;
&lt;h3 id="host-your.net-packages-with-a-private-nuget-feed"&gt;Host your .NET packages with a private NuGet feed&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bytesafe.dev/posts/secure-dotnet-package-dependencies-with-private-nuget-feeds/"&gt;https://bytesafe.dev/posts/secure-dotnet-package-dependencies-with-private-nuget-feeds/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bytesafe を使用して、プライベートな NuGet フィードでパッケージをホストする方法についての記事。&lt;/p&gt;
&lt;p&gt;Bytesafe は NuGet や npm, Maven のプライベートなパッケージレジストリーをホストするサービスで、有料プランではライセンスコンプライアンスやポリシーを定義できる。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/madnan_rafiq/status/1493346509240381445?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;.NET Hosted Services are available to use in &lt;a href="https://t.co/QC5rnmJRtI"&gt;https://t.co/QC5rnmJRtI&lt;/a&gt; Host &amp;amp; share the same process&lt;br&gt;IT enables features like in-memory long-running tasks and accessing main process memory&lt;br&gt;&lt;br&gt;Handle exception in your Hosted Service, or change the default so the server does not stop. &lt;a href="https://t.co/f3Qye1ZfuZ"&gt;pic.twitter.com/f3Qye1ZfuZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; adnan (&amp;#64;madnan_rafiq) &lt;a href="https://twitter.com/madnan_rafiq/status/1493346509240381445?ref_src=twsrc%5Etfw"&gt;February 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;IHostedService&lt;/code&gt; で例外が発生した場合にデフォルトではアプリケーション(のホスト)が停止するが、&lt;code&gt;HostOption.BackgroundServiceExceptionBehavior&lt;/code&gt; の設定で無視できるという Tips。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1494235372548669440?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And what about resizing the List&amp;lt; T &amp;gt;? We&amp;#39;ve got you covered, or more precisely .NET in Pictures does 😎&lt;br&gt;&lt;br&gt;Expect more tomorrow!&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/list?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#list&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/hcKcOMzfIq"&gt;pic.twitter.com/hcKcOMzfIq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1494235372548669440?ref_src=twsrc%5Etfw"&gt;February 17, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; に要素が追加されて内部がリサイズされるときの様子を図にしたもの。&lt;/p&gt;
&lt;!-- https://twitter.com/gsferreira/status/1493546029504999426?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;You can use Fluent Assertions &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; to assert that no one introduces unwanted dependencies.&lt;br&gt;&lt;br&gt;See how 👇&lt;br&gt;&lt;br&gt;Extremely useful since .NET References are transitive. &lt;br&gt;&lt;br&gt;It&amp;#39;s the kind of change that often goes unseen in a PR review. &lt;a href="https://t.co/f3lvBkUdAM"&gt;pic.twitter.com/f3lvBkUdAM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Guilherme Ferreira (&amp;#64;gsferreira) &lt;a href="https://twitter.com/gsferreira/status/1493546029504999426?ref_src=twsrc%5Etfw"&gt;February 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;FluentAssertions には特定のアセンブリーを参照していないことを確認する &lt;code&gt;NotReference&lt;/code&gt; というものがある。&lt;/p&gt;
&lt;!-- https://twitter.com/skitoy4321/status/1494617343892541445 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;System.Threading.RateLimitingに関して調べた事あれこれ。rcか正式版リリースになったら記事にするかなー。&lt;br&gt;ConcurrencyとSemaphoreが違うのは待つときに重み?のようなものを付けられることらしい。&lt;a href="https://t.co/6ra3TkFPdp"&gt;https://t.co/6ra3TkFPdp&lt;/a&gt;&lt;/p&gt;&amp;mdash; skitoy4321 (&amp;#64;skitoy4321) &lt;a href="https://twitter.com/skitoy4321/status/1494617343892541445?ref_src=twsrc%5Etfw"&gt;February 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;System.Threading.RateLimiting&lt;/code&gt; について調べたメモ。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-support-for-windows-io-completions-to-the-portable-thread-pool-by-kouvel-pull-request-64834-dotnetruntime"&gt;Add support for Windows IO completions to the portable thread pool by kouvel · Pull Request #64834 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64834"&gt;https://github.com/dotnet/runtime/pull/64834&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Portable ThreadPool に Winfows の IOCP サポートを追加するという PR。&lt;/p&gt;
&lt;h3 id="add-nullable.getvaluerefordefaultref-api-by-sergio0694-pull-request-64677-dotnetruntime"&gt;Add Nullable.GetValueRefOrDefaultRef API by Sergio0694 · Pull Request #64677 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64677"&gt;https://github.com/dotnet/runtime/pull/64677&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nullable&amp;lt;T&amp;gt;&lt;/code&gt; の値をコピーせず取得するための &lt;code&gt;Nullable.GetValueRefOrDefaultRef&lt;/code&gt; を追加する PR。&lt;/p&gt;
&lt;h3 id="add-request-decompression-middleware-by-david-acker-pull-request-40279-dotnetaspnetcore"&gt;Add Request Decompression middleware by david-acker · Pull Request #40279 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40279"&gt;https://github.com/dotnet/aspnetcore/pull/40279&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core にリクエストの圧縮を展開するミドルウェアを追加するという PR。&lt;/p&gt;
&lt;h3 id="api-diff-between-6.0-and-7.0-preview1-by-carlossanlop-pull-request-7211-dotnetcore"&gt;API-diff between 6.0 and 7.0-preview1 by carlossanlop · Pull Request #7211 · dotnet/core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/pull/7211"&gt;https://github.com/dotnet/core/pull/7211&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/tannergooding/status/1494497088490532866?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;re interested in the API diff between .NET 6 and .NET 7 Preview 1: &lt;a href="https://t.co/PrIvLdaKdC"&gt;https://t.co/PrIvLdaKdC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tanner Gooding (&amp;#64;tannergooding) &lt;a href="https://twitter.com/tannergooding/status/1494497088490532866?ref_src=twsrc%5Etfw"&gt;February 18, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET 6 と .NET 7 Preview 1 の間の API の差分についての PR とツイートでいくつか紹介している。&lt;/p&gt;
&lt;h3 id="all-te-benchmarks-regressed-on-arm64-issue-65272-dotnetruntime"&gt;All TE benchmarks regressed on ARM64 · Issue #65272 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/65272"&gt;https://github.com/dotnet/runtime/issues/65272&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ARM64 の TechEmpower ベンチマークでパフォーマンス低下が起こっているという Issue。&lt;/p&gt;
&lt;p&gt;実際のところは ARM64 だけでなく Intel でもパフォーマンス低下しており、原因はクライアントとなる Linux マシンのカーネルを 4.15.0 から 5.16.9 へ更新したことで Spectre などの脆弱性緩和の影響でパフォーマンス低下が引き起こされていたとのこと。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-12: .NET 6.0.2 and 5.0.14, ImageSharp 2.0.0, Visual Studio support lifecycle</title>
			<link>/2022/02/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/12/updates</guid>
			<pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-february-2022-updates-6.0.2-and-5.0.14.net-blog"&gt;.NET February 2022 Updates – 6.0.2 and 5.0.14 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/february-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/february-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5.0.14 と 6.0.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではいくつかの不具合と脆弱性の対応が行われている。&lt;/p&gt;
&lt;p&gt;脆弱性の対応は Kestrel の HTTP/2 および HTTP/3 に関する DoS となるもので、.NET 5 と 6 共に影響を受ける。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/announcements/issues/208"&gt;.NET February 2022 Updates · Issue #208 · dotnet/announcements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="six-labors-announcing-imagesharp-2.0.0"&gt;Six Labors : Announcing ImageSharp 2.0.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sixlabors.com/posts/announcing-imagesharp-200/"&gt;https://sixlabors.com/posts/announcing-imagesharp-200/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ImageSharp 2.0.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;WebP、Tiff、Pbm といった画像フォーマットの対応が追加され、XMP メタデータの対応や様々なパフォーマンス改善が行われた。&lt;/p&gt;
&lt;p&gt;特にパフォーマンスは Sustem.Drawing の最大3倍程度高速となったとしている。&lt;/p&gt;
&lt;h3 id="support-ends-for-older-versions-of-visual-studio-visual-studio-blog"&gt;Support ends for older versions of Visual Studio - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/"&gt;https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旧バージョンの Visual Studio のサポート終了についての記事。&lt;/p&gt;
&lt;p&gt;Visual Studio 2012 から 2019 までの各バージョンについてのサポート期間について触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2012&lt;/strong&gt;: 2023年1月9日にサポート終了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2017&lt;/strong&gt;: 2022年4月12日にメインストリームサポートが終了し、2027年4月まで延長サポートでセキュリティー修正が提供される。サポートを受けるために 15.9 への移行を推奨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2019 version 16.7&lt;/strong&gt;: 2022年4月12日にサポート終了。引き続きサポートを受けるためには 16.11 か Visual Studio 2022 への移行を推奨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual Studio 2019 Preview Channel&lt;/strong&gt;: 2022年4月以降 Visual Studio 2019 の Preview Channel は更新されなくなるため Release Channel か Visual Studio 2022 Preview への移行を推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-february-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework February 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-february-2022-security-and-quality-rollup/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-february-2022-security-and-quality-rollup/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年2月のセキュリティーと品質ロールアップ更新がリリースされた。&lt;/p&gt;
&lt;p&gt;GC の稀にクラッシュする不具合と WPF の不具合がいくつか修正されている。&lt;/p&gt;
&lt;h3 id="plan-for-nuget-in-2022-issue-11571-nugethome"&gt;Plan for NuGet in 2022 · Issue #11571 · NuGet/Home&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/NuGet/Home/issues/11571"&gt;https://github.com/NuGet/Home/issues/11571&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet の .NET 7 に向けてのプランについての Issue。&lt;/p&gt;
&lt;p&gt;パッケージバージョンの一元管理のようなツーリングに関するものや、ギャラリーでの TFM 互換性表示などがトップリクエストとして上がっている。&lt;/p&gt;
&lt;h3 id="rider-2022.1-roadmap-the.net-tools-blog"&gt;Rider 2022.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/09/rider-2022-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/02/09/rider-2022-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.1 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;ゲーム開発の強化、パラレルスタック、Docker &amp;quot;Fast Mode&amp;quot;、ツールバーのカスタマイズと強化、バージョン管理での diff、エディターの強化、Code With Me でのリモート開発などがあげられている。&lt;/p&gt;
&lt;h3 id="resharper-2022.1-roadmap-the.net-tools-blog"&gt;ReSharper 2022.1 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/09/resharper-2022-1-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/02/09/resharper-2022-1-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 のロードマップについての記事。&lt;/p&gt;
&lt;p&gt;一般的な機能強化とバグ修正 、Entity Framework Select N+1 Analysis、Visual Studio 2022 との相互運用の改善、ローカリゼーションマネージャーでの Google 翻訳、エンドポイントの検出機能の強化、プロファイラの更新が含まれるとしている。&lt;/p&gt;
&lt;h3 id="dotnet-community-twitter"&gt;dotnet Community / Twitter&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/i/communities/1488624124817666051"&gt;https://twitter.com/i/communities/1488624124817666051&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter の .NET に関するトピックの Community が作成された。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="c-11-ref-field-c-c"&gt;【C# 11候補】 ref field | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/ref-field/"&gt;https://ufcpp.net/blog/2022/2/ref-field/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 / .NET 7 で導入を目指す、参照を持つことのできる &lt;code&gt;ref&lt;/code&gt; フィールドについての記事。&lt;/p&gt;
&lt;h3 id="background-process-with-hangfire-and.net-6"&gt;Background process with Hangfire and .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://arslanmurat06.github.io/posts/hangfire/"&gt;https://arslanmurat06.github.io/posts/hangfire/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;バックグラウンド処理に Hangfire を使用する方法と簡単な利点についての記事。&lt;/p&gt;
&lt;h3 id="net-6.0-readytorun"&gt;.NET 6.0 にアップグレードすると ReadyToRun ビルドが失敗するようになったのを直す - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220212/1644602915"&gt;https://blog.shibayan.jp/entry/20220212/1644602915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で変更された ReadyToRun (部分的 AOT) のビルドと発行についての記事。&lt;/p&gt;
&lt;p&gt;ReadyToRun のビルドと発行を &lt;code&gt;--no-restore&lt;/code&gt; で行う場合には &lt;code&gt;dotnet restore&lt;/code&gt; 時にも明示的に &lt;code&gt;PublishReadyToRun&lt;/code&gt; を指定する必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/publish-readytorun-requires-restore-change"&gt;Breaking change: Publish ReadyToRun with --no-restore requires changes - .NET | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="creating-and-using-http-client-sdks-in.net-6"&gt;Creating and Using HTTP Client SDKs in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/creating-http-sdks-dotnet-6/"&gt;https://www.infoq.com/articles/creating-http-sdks-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP クライアント SDK を作る上でのポイントを解説している記事。&lt;/p&gt;
&lt;p&gt;HttpClient のカスタムや IHttpClientFactory との統合、拡張性やテストについて。Refit や NSwag を使用した実装についても触れている。&lt;/p&gt;
&lt;h3 id="asp.net-core-2"&gt;ASP.NET Core で素の認証に時間ベースの２段階認証を追加する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/karuakun/articles/4943d2a2d14419"&gt;https://zenn.dev/karuakun/articles/4943d2a2d14419&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Identity を使用していない ASP.NET Core アプリケーションに時間ベースの二要素認証 (TOTP) を導入する方法についての記事。&lt;/p&gt;
&lt;h3 id="writing-native-windbg-extensions-in-c"&gt;Writing native WinDbg extensions in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec"&gt;https://minidump.net/writing-native-windbg-extensions-in-c-5390726f3cec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ClrMD と NativeAOT を使用して WinDbg の拡張を実装する記事。&lt;/p&gt;
&lt;p&gt;NativeAOT を使用することでネイティブライブラリーとして出力して、WinDbg に拡張として読み込ませている。&lt;/p&gt;
&lt;h3 id="vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice"&gt;Vulnerabilities due to XML files processing: XXE in C# applications in theory and in practice&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/_sergvasiliev_/vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice-3a67"&gt;https://dev.to/_sergvasiliev_/vulnerabilities-due-to-xml-files-processing-xxe-in-c-applications-in-theory-and-in-practice-3a67&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET での XML外部実体攻撃についてと、BlogEngine.NET での実例を紹介した記事。&lt;/p&gt;
&lt;h3 id="a-javascript-rules-engine-in.net-6"&gt;A JavaScript Rules Engine in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devgenius.io/a-javascript-rules-engine-in-net-6-fb092cdc44c"&gt;https://blog.devgenius.io/a-javascript-rules-engine-in-net-6-fb092cdc44c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jint を使用してユーザー定義による JavaScript のルールエンジンを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="unix-domain-sockets-in.net-6-basics-and-real-world-examples"&gt;Unix Domain Sockets in .NET 6 — Basics and Real-World Examples&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://fzankl.medium.com/unix-domain-sockets-in-net-6-basics-and-real-world-examples-8982898ab293"&gt;https://fzankl.medium.com/unix-domain-sockets-in-net-6-basics-and-real-world-examples-8982898ab293&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UNIX ドメインソケットを使用して通信する方法についての記事。&lt;/p&gt;
&lt;p&gt;ASP.MET Core での使用をはじめ、HttpClient や gRPC での使用などを紹介している。&lt;/p&gt;
&lt;h3 id="net-parallel-unit-test"&gt;.NET で parallel unit test&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/f6d3144492ec59"&gt;https://zenn.dev/masakura/articles/f6d3144492ec59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユニットテストを並列で実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;NUnit と xUnit での方法とそれぞれの違いについて触れている。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="netescapades.enumgenerators-a-source-generator-for-enum-performance"&gt;NetEscapades.EnumGenerators: a source generator for enum performance&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/netescapades-enumgenerators-a-source-generator-for-enum-performance/"&gt;https://andrewlock.net/netescapades-enumgenerators-a-source-generator-for-enum-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enum に関する拡張メソッドを生成する Source Generator の紹介記事。&lt;/p&gt;
&lt;p&gt;あらかじめ文字列や switch などを生成しておくことで ToString や IsDefined 相当の機能を高速に行えるようにできる。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/bricelambs/status/1491134363945570305?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Using &lt;a href="https://twitter.com/hashtag/SQLite?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SQLite&lt;/a&gt; in &lt;a href="https://twitter.com/hashtag/Blazor?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Blazor&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WebAssembly?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WebAssembly&lt;/a&gt; just got easier: It&amp;#39;s built into SQLitePCLRaw&amp;#39;s latest prerelease! Try it today with amazing libraries like &lt;a href="https://twitter.com/hashtag/EFCore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#EFCore&lt;/a&gt;, sqlite-net, Dapper, and Akavache and let me know how it goes. &lt;a href="https://t.co/wgMOQgfWVk"&gt;pic.twitter.com/wgMOQgfWVk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Brice Lambson🦄 (&amp;#64;bricelambs) &lt;a href="https://twitter.com/bricelambs/status/1491134363945570305?ref_src=twsrc%5Etfw"&gt;February 8, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;SQLitePCLRaw のプレリリース版を使用すると Blazor WebAssembly で SQLite を使用できるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/msftorleans/status/1491419815814189057?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Orleans docs are now available on &lt;a href="https://t.co/6x90XhJWXM"&gt;https://t.co/6x90XhJWXM&lt;/a&gt;! &lt;a href="https://t.co/ANZWt41AZV"&gt;https://t.co/ANZWt41AZV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Microsoft Orleans (&amp;#64;msftorleans) &lt;a href="https://twitter.com/msftorleans/status/1491419815814189057?ref_src=twsrc%5Etfw"&gt;February 9, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Orleans のドキュメントが docs.microsoft.com で閲覧できるようになったという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-default-method-support-to-virtual-statics-by-davidwrighton-pull-request-64717-dotnetruntime"&gt;Add default method support to virtual statics by davidwrighton · Pull Request #64717 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64717"&gt;https://github.com/dotnet/runtime/pull/64717&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="initial-roll-out-of-by-stephentoub-pull-request-64720-dotnetruntime"&gt;Initial roll out of !! by stephentoub · Pull Request #64720 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64720"&gt;https://github.com/dotnet/runtime/pull/64720&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 のパラメーター null チェック &lt;code&gt;!!&lt;/code&gt; をコアライブラリーに導入するという PR。&lt;/p&gt;
&lt;h3 id="streamline-bool.tryparseformat-by-stephentoub-pull-request-64782-dotnetruntime"&gt;Streamline bool.TryParse/Format by stephentoub · Pull Request #64782 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64782"&gt;https://github.com/dotnet/runtime/pull/64782&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Boolean の &lt;code&gt;TryParse&lt;/code&gt; や &lt;code&gt;Format&lt;/code&gt; で &lt;code&gt;Char&lt;/code&gt; を使用する代わりに数値をバイト列のようなものとして直接書き込んだり比較することで高速化するという PR。例えば &lt;code&gt;True&lt;/code&gt; は UTF-16 のバイト列を Int64 (リトルエンディアン) で表現すると &lt;code&gt;0x65007500720054&lt;/code&gt; となるので、それを書き込んだり比較したりする。&lt;/p&gt;
&lt;h3 id="improve-vectorization-of-string.split-by-yesmey-pull-request-64899-dotnetruntime"&gt;Improve vectorization of String.Split by yesmey · Pull Request #64899 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/64899"&gt;https://github.com/dotnet/runtime/pull/64899&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String.Split をベクトル化 (SIMD) で高速化するという PR。&lt;/p&gt;
&lt;h3 id="proposal-remove-mauis-dependency-on-extensions.hosting-issue-4393-dotnetmaui"&gt;Proposal: Remove Maui's Dependency on Extensions.Hosting · Issue #4393 · dotnet/maui&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/maui/issues/4393"&gt;https://github.com/dotnet/maui/issues/4393&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI のアプリケーションの依存から Microsoft.Extensions.Hosting を外すという PR。
背景としてはモバイルアプリケーションのようなものをターゲット向けの機能ではないこと、依存によるサイズを減らすこと、起動時間の短縮などがあげられている。&lt;/p&gt;
&lt;h3 id="support-raw-utf8-string-literals-by-alekseyts-pull-request-59390-dotnetroslyn"&gt;Support raw UTF8 String Literals by AlekseyTs · Pull Request #59390 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/59390"&gt;https://github.com/dotnet/roslyn/pull/59390&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UTF-8 文字列リテラルのサポートを追加する PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-02-06: .NET 20th anniversary broadcast, ReSharper/Rider 2021.3.3, dotnet-script 1.3</title>
			<link>/2022/02/06/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/02/06/updates</guid>
			<pubDate>Sun, 06 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-20th-anniversary-broadcast"&gt;.NET 20th anniversary broadcast&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnet.microsoft.com/en-us/"&gt;https://dotnet.microsoft.com/en-us/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 20周年を記念して2月14日9時 (日本時間2月15日午前2時) に30分のライブストリーミングを行うとのこと。&lt;/p&gt;
&lt;p&gt;これに合わせて壁紙のようなデジタル Swag なども提供されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet-presentations/dotNET20th"&gt;dotnet-presentations/dotNET20th: .NET 20th Anniversary creative and digital swag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2021.3.3-and-rider-2021.3.3-released-the.net-tools-blog"&gt;ReSharper 2021.3.3 and Rider 2021.3.3 Released | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/31/resharper-rider-2021-3-3-released/"&gt;https://blog.jetbrains.com/dotnet/2022/01/31/resharper-rider-2021-3-3-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と Rider の 2021.3.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンの主な変更点はいくつかの不具合の修正となっている。Rider は Xcode 13.2.1 のサポートが追加された。&lt;/p&gt;
&lt;h3 id="riderresharper-2022.1-early-access-program"&gt;Rider/ReSharper 2022.1 Early Access Program&lt;/h3&gt;
&lt;p&gt;Rider と ReSharper の 2022.1 Early Access Program がリリースされた。&lt;/p&gt;
&lt;p&gt;Rider は Unreal Engine のサポートと Unity サポートの向上などが含まれている。 Resharper は今回 EAP 計画では機能の追加を初めに行うのではなく、問題の修正と各種品質の向上にフォーカスをするとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/02/rider-2022-1-eap/"&gt;Rider 2022.1 Early Access Program Is Open | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/02/02/resharper-2022-1-eap/"&gt;ReSharper 2022.1 Starts Early Access Program! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dotnet-script-1.3-is-out-with.net-6.0-support-strathweb.a-free-flowing-web-tech-monologue"&gt;dotnet-script 1.3 is out with .NET 6.0 support | StrathWeb. A free flowing web tech monologue.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.strathweb.com/2021/11/dotnet-script-1-3-is-out-with-net-6-0-support/"&gt;https://www.strathweb.com/2021/11/dotnet-script-1-3-is-out-with-net-6-0-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotnet-script の 1.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンで .NET 6 がサポートされるようになった。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="entity-framework-core-inside-rider-ui-way-the.net-tools-blog"&gt;Entity Framework Core Inside Rider: UI Way | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/31/entity-framework-core-inside-rider-ui-way/"&gt;https://blog.jetbrains.com/dotnet/2022/01/31/entity-framework-core-inside-rider-ui-way/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で Entity Framework Core をサポートするための UI プラグインについての記事。&lt;/p&gt;
&lt;h3 id="c-asyncawait-objectdisposedexception-jsakamoto"&gt;[失敗談][C#] あえて async/await しないでドヤ顔してたら本番環境で ObjectDisposedException | &amp;#64;jsakamoto&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devadjust.exblog.jp/29073914/"&gt;https://devadjust.exblog.jp/29073914/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Task&lt;/code&gt;/&lt;code&gt;ValueTask&lt;/code&gt; を返すメソッドで同期的に書ける(&lt;code&gt;await&lt;/code&gt;せず直接返せる)パターンで &lt;code&gt;using&lt;/code&gt; をしていると、スコープを抜けたときに Dispose されて例外となってしまうという記事。&lt;/p&gt;
&lt;h3 id="nullable-c-c"&gt;nullable 警告もみ消し(来年までの我慢)の手段 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/nullable-property-disable/"&gt;https://ufcpp.net/blog/2022/1/nullable-property-disable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オブジェクト初期化子での初期化を明示する C# 11 で検討中の &lt;code&gt;required&lt;/code&gt; 修飾子 についてと、現状の回避策についての記事。&lt;/p&gt;
&lt;h3 id="ssl-qiita"&gt;任意のサイトのSSLサーバ証明書を取得する（新） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ShTair/items/cd26824a27dbd7620bc1"&gt;https://qiita.com/ShTair/items/cd26824a27dbd7620bc1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の標準機能だけで任意のサーバーの証明書を取得して読み取る方法についての記事。&lt;/p&gt;
&lt;h3 id="databinding-with-the-oop-windows-forms-designer"&gt;Databinding with the OOP Windows Forms Designer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/databinding-with-the-oop-windows-forms-designer/"&gt;https://devblogs.microsoft.com/dotnet/databinding-with-the-oop-windows-forms-designer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しい Windows Forms の Out-of-Process モデルのデザイナーでのデータバインディングについての記事。&lt;/p&gt;
&lt;h3 id="c-11-readonlyspan-c-c"&gt;【C# 11 候補】 ReadOnlySpan 最適化 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/span-optimization/"&gt;https://ufcpp.net/blog/2022/2/span-optimization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードに定数的に埋め込まれた &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt; の &lt;code&gt;byte&lt;/code&gt;/&lt;code&gt;sbyte&lt;/code&gt; とそれ以外の差を埋める改善についての話。&lt;/p&gt;
&lt;h3 id="optimally-configuring-open-telemetry-tracing-for-asp.net-core"&gt;Optimally Configuring Open Telemetry Tracing for ASP.NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/"&gt;https://rehansaeed.com/optimally-configuring-open-telemetry-tracing-for-asp-net-core/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で OpenTelemetry を使用するときの設定についての記事。&lt;/p&gt;
&lt;h3 id="inline-assembly-in-f.net-language"&gt;Inline Assembly in F#, .NET Language!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.devgenius.io/inline-assembly-in-f-net-language-6d70ab9f58c1"&gt;https://blog.devgenius.io/inline-assembly-in-f-net-language-6d70ab9f58c1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# でインラインアセンブラーを書けるようにするという記事。&lt;/p&gt;
&lt;h3 id="building-message-oriented-microservices-with-google-pubsub-and.net-6"&gt;Building Message-Oriented Microservices with Google Pub/Sub and .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chrlschn.medium.com/building-message-oriented-microservices-with-google-pub-sub-and-net-6-476820335d92"&gt;https://chrlschn.medium.com/building-message-oriented-microservices-with-google-pub-sub-and-net-6-476820335d92&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で Google Pub/Sub を使用するという記事。&lt;/p&gt;
&lt;p&gt;記事の最後で Apple Silicon の Mac では gRPC のネイティブライブラリが別途必要なことに触れている。&lt;/p&gt;
&lt;h3 id="solving-the-source-generator-marker-attribute-problem-part-2-creating-a-source-generator-part-8"&gt;Solving the source generator 'marker attribute' problem - Part 2: Creating a source generator - Part 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/"&gt;https://andrewlock.net/creating-a-source-generator-part-8-solving-the-source-generator-marker-attribute-problem-part2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソースジェネレーターのマーカー属性の問題についての記事。&lt;/p&gt;
&lt;h3 id="net-6-minimal-api-authentication-jwt-with-swagger-and-open-api"&gt;.Net 6 Minimal Api Authentication (JWT) with Swagger and Open API&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/moe23/net-6-minimal-api-authentication-jwt-with-swagger-and-open-api-2chh"&gt;https://dev.to/moe23/net-6-minimal-api-authentication-jwt-with-swagger-and-open-api-2chh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の Minimal API を使用して Swagger と Open API を JWT 認証を構成する方法についての記事。&lt;/p&gt;
&lt;h3 id="whats-up-with-timezoneinfo-on.net-6-part-1"&gt;What’s up with TimeZoneInfo on .NET 6? (Part 1)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/"&gt;https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NodaTime の作者の人による .NET 6 での TimeZoneInfo 周りの変更に関する記事。&lt;/p&gt;
&lt;h3 id="library-of-rd.xml-files-for-nativeaot"&gt;Library of RD.xml files for NativeAOT&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codevision.medium.com/library-of-rd-xml-files-for-nativeaot-174dcd2438e"&gt;https://codevision.medium.com/library-of-rd-xml-files-for-nativeaot-174dcd2438e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT でリフレクションに必要な RD.xml を共有するのはどうかという記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kant2002/RdXmlLibrary"&gt;kant2002/RdXmlLibrary: Library of RD.xml files for NativeAOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="usausaamazon-lambda-extension-source-generator-for-aws-lambda-http-api"&gt;usausa/amazon-lambda-extension: Source Generator for AWS Lambda HTTP API.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/amazon-lambda-extension"&gt;https://github.com/usausa/amazon-lambda-extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda の実装を行うためのサードパーティー製ソースジェネレーター。&lt;/p&gt;
&lt;h3 id="crontab.guru-the-cron-schedule-expression-editor"&gt;Crontab.guru - The cron schedule expression editor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://crontab.guru/"&gt;https://crontab.guru/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Crontab のスケジュール指定を人が読める形にして編集できるようにするサイト。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="net.net"&gt;トリミング用に .NET ライブラリを準備する - .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/deploying/trimming/prepare-libraries-for-trimming"&gt;https://docs.microsoft.com/ja-jp/dotnet/core/deploying/trimming/prepare-libraries-for-trimming&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/xoofx/status/1488570837418614784?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Hopefully in the coming years, we should provide a direct support for NuGet with project SDK C# style projects. It will make UnityNuGet completely obsolete... but believe it or not, that will make me very happy! 😀&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1488570837418614784?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;うまいこと将来 Unity で SDK スタイルプロジェクトをサポートできるようになったら NuGet を直接サポートできるようになるね (UnityNuGet不要になる) という話。&lt;/p&gt;
&lt;!-- https://twitter.com/davkean/status/1489477275192279043?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Visual Studio 2022 is the first version of Visual Studio to ship with Server GC mode turned on.&lt;/p&gt;&amp;mdash; David Kean (&amp;#64;davkean) &lt;a href="https://twitter.com/davkean/status/1489477275192279043?ref_src=twsrc%5Etfw"&gt;February 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 では A/B テストなどの結果もあり、Server GC モードで動作するようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/egorbo/status/1489211096187777024?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;As of today, there is no official difference between string.Empty and &amp;quot;&amp;quot; in codegen after &lt;a href="https://t.co/eD0nTChbSr"&gt;https://t.co/eD0nTChbSr&lt;/a&gt; and &lt;a href="https://t.co/HosBheiq4q"&gt;https://t.co/HosBheiq4q&lt;/a&gt; 😅😅 &lt;a href="https://t.co/eIuJUjcrpG"&gt;pic.twitter.com/eIuJUjcrpG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1489211096187777024?ref_src=twsrc%5Etfw"&gt;February 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;JIT の結果 &lt;code&gt;String.Empty&lt;/code&gt; と &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; が差がなくなる変更が入ったという話。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-01-30: Visual Studio 2022 for Mac Preview 5, Proposed .NET 7 Breaking Changes</title>
			<link>/2022/01/30/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/01/30/updates</guid>
			<pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/"&gt;Visual Studio 2022 for Mac Preview 5 がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;このバージョンから Visual Studio for Mac 自体を動かすためのランタイムが Mono から .NET 6 (CLR) へと変更となっています。これにより Apple Silicon でのネイティブ実行やパフォーマンスの向上といった恩恵を受けることができるようになりました。&lt;/p&gt;
&lt;p&gt;実際に使用してみたところ M1 MacBook Air での実行はエミュレーションからネイティブへと変わったことで、体感できるほどに高速になっています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;.NET (Framework) がリリースされてから20年だそうで、最初の .NET Framework がリリースされたのは&lt;a href="https://rcpmag.com/articles/2002/01/16/microsoft-releases-net-framework-visual-studio-net.aspx"&gt;2002年1月15日頃だった&lt;/a&gt;ようです。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetfdn/status/1485987070308982792?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Heard a rumor some fun stuff is happening on the most romantic day of the year! Celebrate with the &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; community by sharing your stories, memorabilia, pictures, videos on Twitter using the hashtag &lt;a href="https://twitter.com/hashtag/dotNETLovesMe?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotNETLovesMe&lt;/a&gt; &lt;a href="https://t.co/8RpyAAaGJB"&gt;pic.twitter.com/8RpyAAaGJB&lt;/a&gt;&lt;/p&gt;&amp;mdash; .NET Foundation (&amp;#64;dotnetfdn) &lt;a href="https://twitter.com/dotnetfdn/status/1485987070308982792?ref_src=twsrc%5Etfw"&gt;January 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-5"&gt;Visual Studio 2022 for Mac Preview 5&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 5 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでランタイムが Mono から .NET 6 (CoreCLR) へと変更された。これにより Apple Silicon へのネイティブ対応が実現したほか、パフォーマンスが大きく向上しているとしている。&lt;/p&gt;
&lt;p&gt;その他引き続きネイティブ UI への移行が行われ、ドキュメントアウトラインウィンドウやドキュメントスイッチャーダイアログがネイティブ UI となった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.0.0-pre.5"&gt;Visual Studio 2022 for Mac Preview 5 - Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="proposed.net-7-breaking-changes-issue-7131-dotnetcore"&gt;Proposed .NET 7 Breaking Changes · Issue #7131 · dotnet/core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/issues/7131"&gt;https://github.com/dotnet/core/issues/7131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で行う破壊的変更のプロポーザルが Issue として作成された。&lt;/p&gt;
&lt;p&gt;現時点では下記の変更が検討されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-level lookup (複数の個所のインストールを探す) ものをデフォルト無効化&lt;/li&gt;
&lt;li&gt;PATH に 32-bit .NET へのパスの追加を廃止&lt;/li&gt;
&lt;li&gt;dotnet build/publish で RID が明確なアプリでは暗黙的な SDK RID をデフォルトで使用&lt;/li&gt;
&lt;li&gt;dotnet build/publish で RID が明確なアプリをデフォルトで生成&lt;/li&gt;
&lt;li&gt;dotnet build/publish で exe/apphost をデフォルトで生成しない&lt;/li&gt;
&lt;li&gt;dotnet publish/pack でリリースアセットを生成&lt;/li&gt;
&lt;li&gt;スタートアップパフォーマンスを向上するためにプリコンパイルに AVX2 (x64) または NEON (ARM64) を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="highlights-from-git-2.35-the-github-blog"&gt;Highlights from Git 2.35 | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-01-24-highlights-from-git-2-35/"&gt;https://github.blog/2022-01-24-highlights-from-git-2-35/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git 2.35 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; に &lt;code&gt;--staged&lt;/code&gt; オプションの追加、&lt;code&gt;git log&lt;/code&gt; の &lt;code&gt;--format&lt;/code&gt; における &lt;code&gt;describe&lt;/code&gt; のカスタマイズ、SSH 署名の改善、&lt;code&gt;merge.conflictStyle&lt;/code&gt; に &lt;code&gt;zdiff3&lt;/code&gt; モードの追加、&lt;code&gt;--histogram&lt;/code&gt;, &lt;code&gt;--color-moved&lt;/code&gt; のパフォーマンス改善、Windows での clean/smudge フィルター処理で4GB以上のファイルを扱えるようになった(Git for Windows 2.34には適用済み)、など。&lt;/p&gt;
&lt;h3 id="servicestack-v6-documentation"&gt;ServiceStack V6 | Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.servicestack.net/releases/v6"&gt;https://docs.servicestack.net/releases/v6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ServiceStack V6 がリリースされた。&lt;/p&gt;
&lt;p&gt;これまで有償ライセンスのみであったが、個人およびオープンソースプロジェクト向けの無償のライセンスが提供されるようになった。&lt;/p&gt;
&lt;h3 id="release-v6.0.3-npgsqlnpgsql"&gt;Release v6.0.3 · npgsql/npgsql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/npgsql/npgsql/releases/tag/v6.0.3"&gt;https://github.com/npgsql/npgsql/releases/tag/v6.0.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Npgsql 6.0.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;コマンド実行中に接続が中断された場合に StackOverflowException が発生する問題の修正など様々なバグ修正が行われている。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.0.0-preview-1"&gt;Announcing .NET Community Toolkit v8.0.0 Preview 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-1/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.0.0 Preview 1 がリリースされた。&lt;/p&gt;
&lt;p&gt;コマンドやプロパティ周りのコード生成を行う MVVM Toolkit source generators の追加と .NET 6 への対応が行われている。&lt;/p&gt;
&lt;h3 id="net-framework-january-2022-cumulative-update-preview"&gt;.NET Framework January 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-january-2022-cumulative-update-preview/"&gt;https://devblogs.microsoft.com/dotnet/net-framework-january-2022-cumulative-update-preview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年1月の累積アップデートプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;このアップデートプレビューでは CLR がごく稀にクラッシュする問題や WPF の不具合がいくつか修正されている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="optimizing-cpu-bound-and-memory-bound.net-applications-11-best-practices-michaels-coding-spot"&gt;Optimizing CPU-Bound and Memory-Bound .NET Applications: 11 Best Practices - Michael's Coding Spot&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://michaelscodingspot.com/cpu-bound-memory-bound/"&gt;https://michaelscodingspot.com/cpu-bound-memory-bound/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU バウンドとメモリーバウンドな .NET アプリケーションを最適化するための11のベストプラクティスを紹介している記事。&lt;/p&gt;
&lt;h3 id="ef-core-6-features-part-2"&gt;EF Core 6 Features - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-2"&gt;https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6 の機能について紹介する記事 (Part 2)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.okyrylchuk.dev/entity-framework-core-6-features-part-1"&gt;EF Core 6 Features - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="writing-automated-ui-tests-in.net-using-playwright-and-specflow"&gt;Writing Automated UI tests in .NET using Playwright and SpecFlow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/writing-automated-ui-tests-in-net-using-playwright-and-specflow-f923411a65bc"&gt;https://levelup.gitconnected.com/writing-automated-ui-tests-in-net-using-playwright-and-specflow-f923411a65bc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpecFlow と Playwright で UI 自動テストを書く方法についての記事。&lt;/p&gt;
&lt;h3 id="why-your-ticket-may-end-up-in-a-different-tracker-the.net-tools-blog"&gt;Why Your Ticket May End Up in a Different Tracker | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/01/24/why-your-ticket-may-end-up-in-a-different-tracker/"&gt;https://blog.jetbrains.com/dotnet/2022/01/24/why-your-ticket-may-end-up-in-a-different-tracker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider の問題を報告したチケットが別なプロダクトのトラッカーに送られることがある理由についての記事。&lt;/p&gt;
&lt;p&gt;Rider は IntelliJ IDEA と ReSharper というコンポーネントの上に構築されていること、そのため Rider の問題として報告した場合でもそれぞれ依存先のコンポーネントへと送られることがある。&lt;/p&gt;
&lt;h3 id="generic-qiita"&gt;Generic型のインターフェイスの型をダイナミックに定義する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TsuyoshiUshio&amp;#64;github/items/b77b465a21a9e8d84239"&gt;https://qiita.com/TsuyoshiUshio&amp;#64;github/items/b77b465a21a9e8d84239&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンジェネリック型から構築されたジェネリック型を作る &lt;code&gt;Type.MakeGenericType&lt;/code&gt; についての記事。&lt;/p&gt;
&lt;p&gt;記事ではネストされたジェネリック型での挙動についても触れている。&lt;/p&gt;
&lt;h3 id="colors-in.net-an-in-depth-guide"&gt;Colors in .NET: An In-Depth Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/colors-dotnet-guide/"&gt;https://www.infoq.com/articles/colors-dotnet-guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET で色相、彩度、輝度といった色を扱うための要素とその操作についての記事。&lt;/p&gt;
&lt;h3 id="f-and-webassembly"&gt;F# and WebAssembly&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/f-and-webassembly-n0a"&gt;https://dev.to/tunaxor/f-and-webassembly-n0a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly 上で F# のアプリケーションを動かす Web フレームワーク Bolero を使う方法についての記事。&lt;/p&gt;
&lt;h3 id="troubleshooting.net-performance-issues-with-datadog-toolbox"&gt;Troubleshooting .NET performance issues with Datadog toolbox&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chnasarre.medium.com/troubleshooting-net-performance-issues-with-datadog-toolbox-3b9919792344"&gt;https://chnasarre.medium.com/troubleshooting-net-performance-issues-with-datadog-toolbox-3b9919792344&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Datadog の APM や新機能の .NET Continuous Profiler を使用してパフォーマンス問題を解決する方法についての記事。&lt;/p&gt;
&lt;h3 id="azure-devops-requires-tls-1.2-on-all-connections-including-visual-studio"&gt;Azure DevOps requires TLS 1.2 on all connections including Visual Studio&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/azure-devops-requires-tls-1-2-on-all-connections-including-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/azure-devops-requires-tls-1-2-on-all-connections-including-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure DevOps は1月31日から接続に TLS 1.2 を必要とするようになるため、Visual Studio を含め TLS 1.2 の有効化が必要となるというアナウンス。&lt;/p&gt;
&lt;h3 id="c-11-main-c-c"&gt;【C# 11 候補】 トップ レベル ステートメントの Main に属性を付ける | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/1/main-attribute/"&gt;https://ufcpp.net/blog/2022/1/main-attribute/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 候補となっているトップレベルステートメントの暗黙的な Main メソッドに属性をつける(つまり今はつける方法がない)という話についての記事。&lt;/p&gt;
&lt;h3 id="solving-the-source-generator-marker-attribute-problem-part-1-creating-a-source-generator-part-7"&gt;Solving the source generator 'marker attribute' problem - Part 1: Creating a source generator - Part 7&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/"&gt;https://andrewlock.net/creating-a-source-generator-part-7-solving-the-source-generator-marker-attribute-problem-part1/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unity-unity-test-framework-2.0-ready-for-feedback"&gt;Unity - Unity Test Framework 2.0 ready for feedback&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forum.unity.com/threads/unity-test-framework-2-0-ready-for-feedback.1230126/"&gt;https://forum.unity.com/threads/unity-test-framework-2-0-ready-for-feedback.1230126/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の Unity Test Framework v2.0 のプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;非同期メソッドの対応などが行われている。v2.0 は 2022.2 からデフォルトとなるとのこと。&lt;/p&gt;
&lt;h3 id="how-to-lie-with-benchmarks"&gt;How to lie with Benchmarks&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://leveluppp.ghost.io/how-to-lie-with-benchmarks/"&gt;https://leveluppp.ghost.io/how-to-lie-with-benchmarks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ベンチマークで嘘をつく方法についての記事。&lt;/p&gt;
&lt;p&gt;ベンチマークは正しく行うことが難しいという話を紹介している。例えば簡単な例ではウォームアップの必要性、難しいものではメソッドのアドレスによる変化といったものがあるとしている。&lt;/p&gt;
&lt;h3 id="how-to-get-asp.net-core-server-urls"&gt;How to get ASP.NET Core server URLs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/swimburger/how-to-get-aspnet-core-server-urls-g8h"&gt;https://dev.to/swimburger/how-to-get-aspnet-core-server-urls-g8h&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core のアプリケーションがサーバーのアドレスを取得する方法についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IServerAddressesFeature&lt;/code&gt; を取得することでサーバーのアドレスを取得できる。&lt;/p&gt;
&lt;h3 id="performance-improvements-in-asp.net-core-6"&gt;Performance improvements in ASP.NET Core 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-6/"&gt;https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 6 で行われたパフォーマンス改善についての記事。&lt;/p&gt;
&lt;p&gt;記事ではパフォーマンスが改善された部分をベンチマークとともに紹介している。&lt;/p&gt;
&lt;h3 id="c-moduleinitializer"&gt;(C#) ModuleInitializer からのみ呼べるメソッドを作る - ネコのために鐘は鳴る&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ikorin2.hatenablog.jp/entry/2022/01/26/034653"&gt;https://ikorin2.hatenablog.jp/entry/2022/01/26/034653&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の &lt;code&gt;ModuleInitializer&lt;/code&gt; 属性を付けたメソッドをユーザーコードから呼び出せなくする方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;Obsolete&lt;/code&gt; 属性でのコンパイルエラーとする方法を紹介している。&lt;/p&gt;
&lt;h3 id="code-search-in-visual-studio-2022-is-about-to-get-much-faster"&gt;Code search in Visual Studio 2022 is about to get much faster&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/code-search-in-visual-studio-is-about-to-get-much-faster/"&gt;https://devblogs.microsoft.com/visualstudio/code-search-in-visual-studio-is-about-to-get-much-faster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 3 で導入されたインデックス化されたコード検索についての記事。&lt;/p&gt;
&lt;p&gt;95パーセンタイルで従来の3から10倍以上高速であるとしている。インデックスは Visual Studio のプロセスからは切り離され、優先度の低いバックグラウンドプロセスで作っているとのこと。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="usausamunin-node-alternative-munin-node-alternative-implementation-by.net"&gt;usausa/munin-node-alternative: Munin node alternative implementation by .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/usausa/munin-node-alternative"&gt;https://github.com/usausa/munin-node-alternative&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Munin-node の C# (.NET) による代替実装。&lt;/p&gt;
&lt;!-- https://twitter.com/yamaokunousausa/status/1485264322112921605?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;自宅鯖の監視は完全に自作Munin-nodeに置き換えスマタ( ˙ω˙)&lt;a href="https://t.co/WqyXQsLjGm"&gt;https://t.co/WqyXQsLjGm&lt;/a&gt;&lt;/p&gt;&amp;mdash; 💖異世界アイドル🦋副業聖女🌼山奥通信 (&amp;#64;yamaokunousausa) &lt;a href="https://twitter.com/yamaokunousausa/status/1485264322112921605?ref_src=twsrc%5Etfw"&gt;January 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="microsoftfeaturemanagement-dotnet-microsoft.featuremanagement-provides-standardized-apis-for-enabling-feature-flags-within-applications.utilize-this-library-to-secure-a-consistent-experience-when-developing-applications-that-use-patterns-such-as-beta-access-rollout-dark-deployments-and-more"&gt;microsoft/FeatureManagement-Dotnet: Microsoft.FeatureManagement provides standardized APIs for enabling feature flags within applications. Utilize this library to secure a consistent experience when developing applications that use patterns such as beta access, rollout, dark deployments, and more.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/FeatureManagement-Dotnet"&gt;https://github.com/microsoft/FeatureManagement-Dotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでフィーチャーフラグを実装するためのライブラリー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://procodeguide.com/programming/feature-flags-in-aspnet-core/"&gt;Microsoft Feature Management - Feature Flags in ASP.NET Core C# - Detailed Guide | Pro Code Guide&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;フィーチャーフラグ(フィーチャートグル)を実装するための Microsoft.FeatureManagement ライブラリーを使用して ASP.NET Core で機能の切り替えを実現する方法についての記事。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="giorgientityframework.exceptions-handle-database-errors-easily-when-working-with-entity-framework-core.supports-sqlserver-postgresql-sqlite-oracle-and-mysql"&gt;Giorgi/EntityFramework.Exceptions: Handle database errors easily when working with Entity Framework Core. Supports SQLServer, PostgreSQL, SQLite, Oracle and MySql&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Giorgi/EntityFramework.Exceptions"&gt;https://github.com/Giorgi/EntityFramework.Exceptions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core でクエリーを実行した際のエラーがすべて DbUpdateException となってしまい、取り扱いが不便な問題を解消するライブラリー。&lt;/p&gt;
&lt;p&gt;例えばユニークキー制約違反などが発生した場合は UniqueConstraintException に変換した後でスローするようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotnetcoretutorials.com/2022/01/29/better-exception-handling-with-entityframeworkcore-exceptions/"&gt;Better Exception Handling With EntityFrameworkCore Exceptions - .NET Core Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xoofxdotnet-releaser-easily-cross-compile-package-and-publish-your.net-application-to-nuget-and-github"&gt;xoofx/dotnet-releaser: Easily cross-compile, package and publish your .NET application to NuGet and GitHub.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/xoofx/dotnet-releaser"&gt;https://github.com/xoofx/dotnet-releaser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションを NuGet や GitHub に簡単にリリースするツール。&lt;/p&gt;
&lt;p&gt;クロスコンパイルからパッケージング、発行までをワンストップで行えるとのこと。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/vs_debugger/status/1485731573420814336?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now You can Attach to your .NET ( Framework. Core or 5+) for Windows App Service without a solution or project open. &lt;br&gt;Available from VS2022 17.1 Preview 1&lt;a href="https://twitter.com/hashtag/vstip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vstip&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/vsdebuggertip?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#vsdebuggertip&lt;/a&gt; &lt;a href="https://t.co/ntEWtZi9s9"&gt;pic.twitter.com/ntEWtZi9s9&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Studio Debugger (&amp;#64;VS_Debugger) &lt;a href="https://twitter.com/VS_Debugger/status/1485731573420814336?ref_src=twsrc%5Etfw"&gt;January 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 17.1 Preview 1 以降では Azure App Service (Windows) の .NET (Framework, Core, 5 以降)のプロセスにプロジェクトやソリューションなしでアタッチできるようになったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1486171186627158017?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today we prototyped the first version of the long requested feature &amp;quot;client results&amp;quot; in SignalR. This feature has been on the backlog for *years* and we&amp;#39;re finally taking a look at implementing it. Here&amp;#39;s what a turn based game might look like &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/signalr?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#signalr&lt;/a&gt; &lt;a href="https://t.co/iySxjbaBCm"&gt;pic.twitter.com/iySxjbaBCm&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸💉💉💉 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1486171186627158017?ref_src=twsrc%5Etfw"&gt;January 26, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;SignalR でサーバーからクライアントを呼び出した際に戻り値を待機できるようにするというプロトタイプを検討中という話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="detect-license-changes-in-packages-issue-11520-nugethome"&gt;Detect license changes in packages · Issue #11520 · NuGet/Home&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/NuGet/Home/issues/11520"&gt;https://github.com/NuGet/Home/issues/11520&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet パッケージのライセンスが変更されたことを検出したいという Issue。&lt;/p&gt;
&lt;p&gt;特に互換性のないライセンスとなった場合に気が付かずインストールしてしまうとライセンス違反となってしまうのでそういった問題を防ぎたいという話。&lt;/p&gt;
&lt;h3 id="json-features-by-cyrusnajmabadi-pull-request-59034-dotnetroslyn"&gt;Json features by CyrusNajmabadi · Pull Request #59034 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/59034"&gt;https://github.com/dotnet/roslyn/pull/59034&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字列リテラル内の JSON を認識してシンタックスハイライトなどを行えるようにするという PR。&lt;/p&gt;
&lt;p&gt;ReSharper の &lt;a href="https://www.jetbrains.com/help/resharper/Language_Injections.html#use-comments"&gt;Language injections&lt;/a&gt; のような &lt;code&gt;// lang=json&lt;/code&gt; といった形で認識される模様。&lt;/p&gt;
&lt;h3 id="design-proposal-bind-getsetafter-modifiers-issue-39837-dotnetaspnetcore"&gt;Design proposal: Bind get/set/after modifiers · Issue #39837 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/39837"&gt;https://github.com/dotnet/aspnetcore/issues/39837&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の &lt;code&gt;&amp;#64;bind&lt;/code&gt; でバインドの前後や get/set を個別にバインドできるようにしたいという提案 Issue。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>