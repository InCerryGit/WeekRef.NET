<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>WeekRef.NET</title>
		<link>/</link>
		<description>.NET 関連の情報をほぼ週刊配信</description>
		<copyright>Copyright © Mayuki Sawatari &lt;mayuki@misuzilla.org&gt;</copyright>
		<managingEditor>Mayuki Sawatari</managingEditor>
		<pubDate>Thu, 26 May 2022 07:56:26 GMT</pubDate>
		<lastBuildDate>Thu, 26 May 2022 07:56:26 GMT</lastBuildDate>
		<item>
			<title>2022-05-26: .NET MAUI GA, Visual Studio 2022 for Mac</title>
			<link>/2022/05/26/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/05/26/updates</guid>
			<pubDate>Thu, 26 May 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="introducing.net-maui-one-codebase-many-platforms"&gt;Introducing .NET MAUI - One Codebase, Many Platforms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/"&gt;https://devblogs.microsoft.com/dotnet/introducing-dotnet-maui-one-codebase-many-platforms/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クロスプラットフォーム開発フレームワークの .NET MAUI が一般提供となった。&lt;/p&gt;
&lt;p&gt;現時点では開発ツーリングとして Visual Studio 2022 の Preview が必要となる (ツーリングの GA は今年の後半予定)。&lt;/p&gt;
&lt;p&gt;記事ではネイティブ UI の各種対応(アクセシビリティやクロスプラットフォームな操作、カスタマイズなど)、モダンな開発者プロダクティビティ (新しいテンプレートやプロジェクト構成)、Blazor Hybird、パフォーマンスの最適化といったものを紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-is-now-available"&gt;Visual Studio 2022 for Mac is now available&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac v17.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 では. NET 6 での開発サポートをはじめ、IDE の macOS ネイティブ UI 化や Apple SIlicon (ARM64) ネイティブでの動作の対応が行われている。&lt;/p&gt;
&lt;p&gt;また、同時に Preview 版となる 17.3 もリリースされ、.NET 7 プレビューと GA となった .NET MAUI 開発がサポートされている。&lt;/p&gt;
&lt;h3 id="create-next-generation-experiences-at-scale-with-windows-windows-developer-blog"&gt;Create Next Generation Experiences at Scale with Windows - Windows Developer Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/"&gt;https://blogs.windows.com/windowsdeveloper/2022/05/24/create-next-generation-experiences-at-scale-with-windows/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Build 2022 での Windows 向けの開発についてのアナウンス。&lt;/p&gt;
&lt;p&gt;WinUI 3 プラットフォームをベースとした Windows App SDK 1.1 のプレビュー版の提供や新しい API、Template Studio for WinUI と移行ツールの更新、.NET MAUI のリリースなど。&lt;/p&gt;
&lt;p&gt;その他、Microsoft Store では Win32 アプリケーションの配布に待ちリストへの登録が不要になったことや、ARM デバイスの開発を進めるための開発向けデバイスの Project Volterra や Visual Studio の ARM 版の提供予定などが発表されている。&lt;/p&gt;
&lt;h3 id="grpc-support-on-azure-app-service"&gt;gRPC support on Azure App Service&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html"&gt;https://azure.github.io/AppService/2022/05/23/gRPC-support-on-App-Service.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service for Linux にて .NET Core 3.1 と .NET 6 で gRPC のサポートがプライベートプレビューの Early Updates Access Program で提供開始のアナウンス。&lt;/p&gt;
&lt;!-- https://twitter.com/davidfowl/status/1528776801924698112 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;We are pleased to announce that gRPC is now available and supported on Azure App Service for Linux workloads. This was made possible by recent platform upgrades to the HTTP reverse proxy layer to leverage YARP and Kestrel.&amp;quot; &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/aspnetcore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#aspnetcore&lt;/a&gt; &lt;a href="https://t.co/imT7GHb2f5"&gt;https://t.co/imT7GHb2f5&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1528776801924698112?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="introducing-the-private-preview-of-port-tunneling-in-visual-studio-for-asp.net-core-projects"&gt;Introducing the private preview of port tunneling in Visual Studio for ASP.NET Core projects&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-private-preview-port-tunneling-visual-studio-for-asp-net-core-projects/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.3 Preview 1.1 で ASP.NET Core の Web プロジェクトへのポートトンネリング機能 (プレビュー) が追加されたことについてのアナウンス。&lt;/p&gt;
&lt;p&gt;これはコールバックや Webhooks 、Power Platform のような外部からアクセスする必要があるアプリケーションを開発する際にインターネット側からアクセス可能にするトンネルを提供するものとなる。(類似のものでよく知られているものとしては ngrok がある)&lt;/p&gt;
&lt;p&gt;プライベートプレビューにサインインし、Preview 版でプレビュー機能を有効にし、launchSettings.json で指定することで Visual Studio からシームレスにトンネルを作成できるとのこと。&lt;/p&gt;
&lt;h3 id="uno-platform-4.3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more"&gt;Uno Platform 4.3 - Figma Plugin, Uno Extensions, Material Design 3 Support, New Sample App and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/"&gt;https://platform.uno/blog/uno-platform-4-3-figma-plugin-uno-extensions-material-design-3-support-new-sample-app-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.3 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Figma プラグインと Material Design 3 テーマサポート、Uno Extensions、.NET 6 モバイル RTM のサポートなどが行われている。&lt;/p&gt;
&lt;h3 id="the-journey-of-moving-from-cwinrt-to-c-in-the-microsoft-store"&gt;The journey of moving from C++/WinRT to C# in the Microsoft Store&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/"&gt;https://devblogs.microsoft.com/ifdef-windows/the-journey-of-moving-from-cpp-winrt-to-csharp-in-the-microsoft-store/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションを C++/WinRT から C# へと移行したことについての記事。&lt;/p&gt;
&lt;p&gt;Microsoft Store アプリケーションは HoloLens や Surface Hub をターゲットとしている都合 UWP アプリケーションであり .NET Native (特殊な AOT) でビルドされているという事情があることで、パッケージマネージャーの WinRT API との相互運用にいくつかのハードルがありそれを乗り越える必要があったことが説明されている。&lt;/p&gt;
&lt;h3 id="the-stack-overflow-journey-to.net-6"&gt;The Stack Overflow journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/"&gt;https://www.wouterdekort.com/2022/05/25/the-stackoverflow-journey-to-dotnet6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 へ移行したことについての記事。&lt;/p&gt;
&lt;p&gt;3つの製品の共通コードベースがあること、本番環境へのデプロイまでの流れ、EF Core 2.2 から Entity Framework 5 へのアップグレード、.NET 6 への移行で発生した問題の対応、コネクションプールの問題(のように見えたもの)、移行の結果について書かれている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="provide-default-configuration-to-your.net-applications"&gt;Provide default configuration to your .NET applications&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications"&gt;https://www.twilio.com/blog/provide-default-configuration-to-dotnet-applications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; を使って、.NET アプリケーションの設定にデフォルト値を持たせる方法についての記事。&lt;/p&gt;
&lt;h3 id="temporary-breakpoint-new-feature-in-visual-studio-2022"&gt;Temporary breakpoint – New feature in Visual Studio 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/"&gt;https://www.talkingdotnet.com/temporary-breakpoint-new-feature-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一度だけブレークして消える、一時的なブレークポイント (Temporary Breakpoint) の紹介記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-1"&gt;ASP.NET Core MVC で 1 ページに複数個のフォームを置きたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page"&gt;https://zenn.dev/okazuki/articles/how-to-add-multiple-form-on-one-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC のビューに複数のフォームを配置し、それぞれで送信とバリデーションを行いつつ、両方のデータを保持する方法についての記事。&lt;/p&gt;
&lt;h3 id="asp.net"&gt;ASP.NET でのパスワード格納&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/masakura/articles/6ef107ad173f39"&gt;https://zenn.dev/masakura/articles/6ef107ad173f39&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET/ASP.NET Core 標準のユーザーパスワード格納時のハッシュ化処理で、アルゴリズムやストレッチングなどどのような手法がとられているかについての記事。&lt;/p&gt;
&lt;h3 id="investigating-the-performance-benefits-of-ef-core-6.0-compiled-models-feature"&gt;Investigating the performance benefits of EF Core 6.0 compiled models feature&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e"&gt;https://dev.to/audaciasoftware/investigating-the-performance-benefits-of-ef-core-60-compiled-models-feature-1i1e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 6.0 のコンパイル済みモデルによる起動パフォーマンス向上についての記事。&lt;/p&gt;
&lt;p&gt;実際にプロジェクトで試してみたところ初回のインスタンス作成時間が4倍程度短縮されたとのこと。&lt;/p&gt;
&lt;h3 id="direct2dsvg"&gt;Direct2DでSVGファイルを画像化する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/udaken/articles/svg-rendering-with-direct2d"&gt;https://zenn.dev/udaken/articles/svg-rendering-with-direct2d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P/Invoke で Direct2D を呼び出し、SVG のサブセットを描画する方法についての記事。&lt;/p&gt;
&lt;h3 id="breaking-change-actionresultt-set-statuscode-to-200-issue-485-aspnetannouncements"&gt;[Breaking change]: ActionResult&amp;lt;T&amp;gt; set StatusCode to 200 · Issue #485 · aspnet/Announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aspnet/Announcements/issues/485"&gt;https://github.com/aspnet/Announcements/issues/485&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 以前の ASP.NET Core では &lt;code&gt;ActionResult&amp;lt;T&amp;gt;&lt;/code&gt; を返した場合、 Response.StatusCode が尊重されていたが常に 200 が返るようになったという破壊的変更のアナウンス。&lt;/p&gt;
&lt;h3 id="macos-environment-setup-for-maui-development-the.net-tools-blog"&gt;macOS Environment Setup For MAUI Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/"&gt;https://blog.jetbrains.com/dotnet/2022/05/25/macos-environment-setup-for-maui-development/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 EAP でサポートされた .NET MAUI の開発を macOS 環境上で行うためのセットアップについての記事。&lt;/p&gt;
&lt;h3 id="extending-visual-studio-codelens-functionality"&gt;Extending Visual Studio CodeLens Functionality&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f"&gt;https://dev.to/calvinallen/extending-visual-studio-codelens-functionality-507f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の CodeLens を拡張して独自の CodeLens Provider を実装する方法についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master/CodeLensOopSample"&gt;VSSDK-Extensibility-Samples/CodeLensOopSample at master · microsoft/VSSDK-Extensibility-Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exploring-the-f-frontend-landscape"&gt;Exploring The F# Frontend Landscape&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa"&gt;https://dev.to/tunaxor/exploring-the-f-frontend-landscape-13aa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F# でのフロントエンド開発のフレームワークを紹介している記事。&lt;/p&gt;
&lt;h3 id="how-we-used-dotmemory-to-optimize-dotmemory-the.net-tools-blog"&gt;How We Used dotMemory to Optimize dotMemory | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/"&gt;https://blog.jetbrains.com/dotnet/2022/05/23/how-we-used-dotmemory-to-optimize-dotmemory/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotMemory のドミネーターツリーのパフォーマンスを dotMemory と dotTrace で改善したドッグフーディングの記事。&lt;/p&gt;
&lt;p&gt;当初、しばらく実行すると物理メモリーを使い果たして動かなくなってしまうほどであったが、ドミネーターツリーの構築アルゴリズムの変更やデータ構造の変更といったことを行った結果現実的な時間とメモリー使用量になったとのこと。&lt;/p&gt;
&lt;h3 id="bringing-webassembly-to-the.net-mainstream-steve-sanderson-microsoft-youtube"&gt;Bringing WebAssembly to the .NET Mainstream - Steve Sanderson, Microsoft - YouTube&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PIeYw7kJUIg"&gt;https://www.youtube.com/watch?v=PIeYw7kJUIg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アセンブリを WebAssembly で動かすということについてのプレゼンテーション。&lt;/p&gt;
&lt;p&gt;このプレゼンテーションでは Blazor WebAssembly ではなく、WASI を使用した .NET アプリケーションの WebAssembly 化の可能性についてを話している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk"&gt;SteveSandersonMS/dotnet-wasi-sdk: Packages for building .NET projects as standalone WASI-compliant modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="cysharpgrpcwebsocketbridge-yet-another-grpc-over-http1-using-websocket-implementation-primarily-targets.net-platform"&gt;Cysharp/GrpcWebSocketBridge: Yet Another gRPC over HTTP/1 using WebSocket implementation, primarily targets .NET platform.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/GrpcWebSocketBridge"&gt;https://github.com/Cysharp/GrpcWebSocketBridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC のトランスポートとして HTTP/2 の代わりに WebSocket を利用することで Unity WebGL や Blazor WebAssembly から gRPC (Unary/Streaming) を利用できるようにする ASP.NET Core と .NET クライアント向けのブリッジライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/timmisiak/status/1528883407337295874?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We just released a new version of WinDbg Preview! Lots of new stuff to talk about, but most excitingly it&amp;#39;s on .NET 6! If you&amp;#39;re running on ARM64, you&amp;#39;ll definitely love the perf improvements we got from moving to .NET 6&lt;a href="https://t.co/8mjsz8Czwy"&gt;https://t.co/8mjsz8Czwy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Misiak (&amp;#64;timmisiak) &lt;a href="https://twitter.com/timmisiak/status/1528883407337295874?ref_src=twsrc%5Etfw"&gt;May 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WinDbg Preview の新バージョンで .NET 6 へと移行して ARM64 で動くようになった話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="extended-nameof-parameter-scope-by-billwagner-pull-request-29549-dotnetdocs"&gt;Extended nameof parameter scope by BillWagner · Pull Request #29549 · dotnet/docs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/docs/pull/29549"&gt;https://github.com/dotnet/docs/pull/29549&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nameof&lt;/code&gt; が使える範囲が C# 11 で広がるのでそのドキュメント更新の PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-05-19: Unity and .NET, Azure Cosmos DB Journey to .NET 6, Regular Expression Improvements in .NET 7</title>
			<link>/2022/05/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/05/19/updates</guid>
			<pubDate>Thu, 19 May 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="unity-and.net-whats-next-unity-blog"&gt;Unity and .NET, what’s next? | Unity Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.unity.com/technology/unity-and-net-whats-next"&gt;https://blog.unity.com/technology/unity-and-net-whats-next&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity の .NET に関する今後の方針についての解説記事。&lt;/p&gt;
&lt;p&gt;Unity は現在までに Mono のアップデートなどを経て C# の言語サポートの向上などを行ってきたが、一方で .NET エコシステム自体も進化し NuGet や最新のランタイムやツールといったものを Unity と共に利用したいというニーズが高まっていること。今後 Unity は .NET SDK やランタイム、MSBuild といったものを活用できるよう Mono から CoreCLR へと移行していく。&lt;/p&gt;
&lt;p&gt;ランタイムの移行についてはまずデスクトップのスタンドアローンプレイヤーで CoreCLR サポートを行う (2023年中)、その後 2024年に Unity Editor を CoreCLR へと移植し .NET 7/8 の API アクセスが可能となるようにする。&lt;/p&gt;
&lt;p&gt;その他、現在進行中のモダナイズとして async/await のサポートの改善や &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; によるメモリーの割り当てとコピーの改善といったことを進めているとのこと。&lt;/p&gt;
&lt;h3 id="the-azure-cosmos-db-journey-to.net-6.net-blog"&gt;The Azure Cosmos DB Journey to .NET 6 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/"&gt;https://devblogs.microsoft.com/dotnet/the-azure-cosmos-db-journey-to-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Cosmos DB を .NET 6 へ移行したという事例紹介記事。&lt;/p&gt;
&lt;p&gt;API ゲートウェイでは .NET のアップグレードを経て、継続的にパフォーマンス改善の恩恵を受けていたこと、ゲートウェイを HttpListener (HTTP.sys) から Kestrel へ移行することでスループットを大幅に改善したことなど。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Span&lt;/code&gt; をはじめとした新しい API によりオーバーヘッドの削減とガベージコレクションの軽減、&lt;code&gt;ConcurrentDictionary&lt;/code&gt; の &lt;code&gt;GetOrUpdate&lt;/code&gt; メソッドのコンテキスト利用などでのアロケーションオーバーヘッドの軽減といった効果により、.NET Framework から .NET Core へ移行した結果、待機時間が5倍改善された顧客もいた。&lt;/p&gt;
&lt;p&gt;複数の NUMA ノードを持つ強力な VM で稼働するプロセスの動作を最適化するため、プロセスを特定の NUMA ノードに関連付けるプロセッサーアフィニティーを設定したこと、非同期コードの処理が改善されたことで .NET のアップグレードで性能が向上したことなども触れている。&lt;/p&gt;
&lt;h3 id="regular-expression-improvements-in.net-7.net-blog"&gt;Regular Expression Improvements in .NET 7 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/"&gt;https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での正規表現の改善についての記事。&lt;/p&gt;
&lt;p&gt;記事では .NET 7 で強化される様々な機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バックトラッキング (&lt;code&gt;RegexOptions.NonBacktracking&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;DFA エンジン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringSyntaxAttribute.Regex&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 上での文字列内での IntelliSense やシンタックスハイライト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大文字小文字を区別しないマッチング (&lt;code&gt;RegexOptions.IgnoreCase&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ソースジェネレーション
&lt;ul&gt;
&lt;li&gt;Source Generator によるマッチングの生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Span
&lt;ul&gt;
&lt;li&gt;Span を受け入れる API とそれを利用したマッチの列挙など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ベクトル化
&lt;ul&gt;
&lt;li&gt;Boyer-Moore アルゴリズムからの変更など&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自動アトミック化とバックトラッキング&lt;/li&gt;
&lt;li&gt;文字クラス(セット)最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-grpc-json-transcoding-for.net.net-blog"&gt;Announcing gRPC JSON transcoding for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/"&gt;https://devblogs.microsoft.com/dotnet/announcing-grpc-json-transcoding-for-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC JSON トランスコーディングについてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET 7 で gRPC サービスを JSON の RESTful API として表現するトランスコーディングの仕組みが提供される。&lt;/p&gt;
&lt;p&gt;JSON トランスコーディングは grpc-web と異なり、ASP.NET Core の内部で Protobuf と JSON を相互変換し gRPC サービスの呼び出しに変換するため、ブラウザー側に特別なクライアントが不要となり一般的な JSON を受け付ける RESTful API のように使用できる。&lt;/p&gt;
&lt;h3 id="rider-2022.2-roadmap-the.net-tools-blog"&gt;Rider 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/rider-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトごとの設定の新しい既定値&lt;/li&gt;
&lt;li&gt;メインツールバーの変更&lt;/li&gt;
&lt;li&gt;MAUI 実行構成のサポートの追加&lt;/li&gt;
&lt;li&gt;Xamarin と Unity の新しいツールバー&lt;/li&gt;
&lt;li&gt;Razor ビューでの JavaScript 再フォーマット&lt;/li&gt;
&lt;li&gt;Windows での .NET Core への移行&lt;/li&gt;
&lt;li&gt;リモート開発&lt;/li&gt;
&lt;li&gt;Windows Subsystem for Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="resharper-2022.2-roadmap-the.net-tools-blog"&gt;ReSharper 2022.2 Roadmap | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/"&gt;https://blog.jetbrains.com/dotnet/2022/05/18/resharper-2022-2-roadmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.2 での開発ロードマップについての記事。&lt;/p&gt;
&lt;p&gt;記事では予定している開発機能として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言語サポートと改善&lt;/li&gt;
&lt;li&gt;仮想コードスタイルとその他のコードフォーマッターの更新&lt;/li&gt;
&lt;li&gt;プロファイラの更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rider 同様 EAP は現在提供されていないが間もなく提供が始まるとのこと。&lt;/p&gt;
&lt;h3 id="whats-new-with-ml.net-automated-ml-automl-and-tooling"&gt;What's new with ML.NET Automated ML (AutoML) and tooling&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/"&gt;https://devblogs.microsoft.com/dotnet/whats-new-with-mldotnet-automl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET AutoML の更新についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AutoML の更新
&lt;ul&gt;
&lt;li&gt;Experimental API&lt;/li&gt;
&lt;li&gt;検索スペースとスイープ可能な推定器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モデルビルダーと ML.NET CLI の更新
&lt;ul&gt;
&lt;li&gt;時系列予測シナリオ (プレビュー)&lt;/li&gt;
&lt;li&gt;新しいバージョンの ML.NET CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノートブックのショートカット&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、今後の予定としてディープラーニング、.NET DataFrame、MLOps といったものについても触れている。&lt;/p&gt;
&lt;h3 id="release-release-v2.46.0-grpcgrpc-dotnet"&gt;Release Release v2.46.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.46.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpd-dotnet) の 2.46.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは不具合の修正のほか、リゾルバーのリトライや呼び出し資格情報をクライアントファクトリーで追加するといった機能の追加が行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="blazor-httpexample.comfoobar-sub-path-qiita"&gt;Blazor アプリケーションを &amp;quot;http://example.​com/foo/bar/&amp;quot; のような Sub Path に配置するために必要な実装 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94"&gt;https://qiita.com/jsakamoto/items/7f1bdf4ce3d9c757ed94&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly アプリケーションを特定のパス以下に配置する方法についての記事。&lt;/p&gt;
&lt;h3 id="new-features-in-c-1011-speaker-deck"&gt;New Features in C# 10/11 - Speaker Deck&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/chack411/11"&gt;https://speakerdeck.com/chack411/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 10/11 での新機能についてのまとめスライド。&lt;/p&gt;
&lt;h3 id="docker-multi-architecture.net-6.0-and-opencvsharp"&gt;Docker multi-architecture, .NET 6.0 and OpenCVSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd"&gt;https://dev.to/syamaner/docker-multi-architecture-net-60-and-opencvsharp-1okd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で OpenCVSharp を利用するアプリケーションをマルチアーキテクチャー (x64, arm32, aarch64) Docker コンテナーイメージにする方法についての記事。&lt;/p&gt;
&lt;h3 id="migrating-mr.gestures-from-xamarin.forms-to.net-maui-xamarin-blog"&gt;Migrating MR.Gestures from Xamarin.Forms to .NET MAUI - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/"&gt;https://devblogs.microsoft.com/xamarin/migrating-mrgestures-to-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MR.Gestures (商用ジェスチャーライブラリー) を Xamarin.Forms から .NET MAUI に移行したことについての記事。&lt;/p&gt;
&lt;h3 id="all-in-one-search-is-getting-slicker-visual-studio-blog"&gt;All-In-One Search Is Getting Slicker - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/"&gt;https://devblogs.microsoft.com/visualstudio/all-in-one-search-is-getting-slicker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 でプレビューとして導入された All-In-One 検索の改善についての記事。&lt;/p&gt;
&lt;h3 id="chttps-qiita"&gt;【C#】非同期HTTPSサーバー通信アプリを作ってみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a"&gt;https://qiita.com/piro_rin_piro/items/ed404d205cb90eb9e79a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;組み込み機器などのテストのために HTTPS サーバーを自作するという記事。&lt;/p&gt;
&lt;h3 id="ienumerable-visualizer-in-visual-studio-2022.net-core-tutorials"&gt;IEnumerable Visualizer In Visual Studio 2022 - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/"&gt;https://dotnetcoretutorials.com/2022/05/17/ienumerable-visualizer-in-visual-studio-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-framework-qiita"&gt;.NET Framework でもタダでカバレッジをとりたい！ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52"&gt;https://qiita.com/uttne/items/ad5bd3b2a1e41e1c2b52&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="case-study-how-the-profilers-uncover-critical-issues-that-mimic-apps-normal-behavior-the.net-tools-blog"&gt;Case Study – How the Profilers Uncover Critical Issues That Mimic Apps’ Normal Behavior | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/"&gt;https://blog.jetbrains.com/dotnet/2022/05/16/case-study-how-the-profiler-uncovers-critical-issues-that-mimic-apps-normal-behavior/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-use-biometric-authentication-in.net-maui-andreas-nesheim"&gt;How to use biometric authentication in .NET MAUI - Andreas Nesheim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/"&gt;https://www.andreasnesheim.no/how-to-use-biometric-authentication-in-net-maui/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-http-security-header"&gt;ASP.NET Core Http Security Header&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8"&gt;https://muratsuzen.medium.com/asp-net-core-http-security-header-cf4d0fb61df8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mvvm-toolkit-messenger-qiita"&gt;MVVM Toolkit の Messenger を使うときに購読解除を共通化する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3"&gt;https://qiita.com/nikothewolfox/items/974761367d0d32f4f1e3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="blazor-html-css"&gt;Blazor で HTML と CSS で画面作りたくないよぉ…&lt;/h3&gt;
&lt;p&gt;Blazor で利用できる UI ツールキットの紹介記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/and-blazor-lab"&gt;Blazor で HTML と CSS で画面作りたくないよぉ… AntDesign 編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/okazuki/articles/i-dont-want-to-use-html-to-create-ui"&gt;Blazor で画面作るために HTML 使いたくないよぉ… Fluent UI 編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net6guidreadonly-struct"&gt;.NET6でいつの間にかGuidがreadonly structになっていた&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nin_neko/articles/c5881dccd6ae25"&gt;https://zenn.dev/nin_neko/articles/c5881dccd6ae25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で &lt;code&gt;System.Guid&lt;/code&gt; が &lt;code&gt;readonly struct&lt;/code&gt; へと変更されていたことについての記事。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-action-optimizing-database-operations"&gt;OpenTelemetry in Action: Optimizing Database Operations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377"&gt;https://rahul-rai.medium.com/opentelemetry-in-action-optimizing-database-operations-a8865a396377&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;API の呼び出し中のデータベースアクセスに関する情報を OpenTelemetry で追いかけて改善する方法についての記事。&lt;/p&gt;
&lt;h3 id="automated-accessibility-testing-in-playwright.net-with-axe"&gt;Automated accessibility testing in Playwright .NET with Axe.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08"&gt;https://medium.com/&amp;#64;isaacwalker1377/automated-accessibility-testing-in-playwright-net-with-axe-40221dc23f08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Playwright と Axe で .NET からアクセシビリティテストを行う方法についての記事。&lt;/p&gt;
&lt;h3 id="telegram-bot-qiita"&gt;Telegram Botを使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d"&gt;https://qiita.com/iota_11/items/b681f21d9bb6ec24f14d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Telegram.Bot を使用した Telegram のボットの作成についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="dotnetsystemweb-adapters"&gt;dotnet/systemweb-adapters&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/systemweb-adapters"&gt;https://github.com/dotnet/systemweb-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 上で .NET Framework の ASP.NET の System.Web と同様の機能を提供するアダプターライブラリー。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rla4/status/1524736823645327360?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Yesterday we finished the .NET 5 -&amp;gt; .NET 6 upgrade! Stack Overflow is now running on .NET 6 across all servers 🥳 &lt;br&gt;&lt;br&gt;Worth mentioning that it was a much smoother move than upgrading from .NET 3.1 -&amp;gt; .NET 5&lt;/p&gt;&amp;mdash; Roberta Arcoverde (&amp;#64;rla4) &lt;a href="https://twitter.com/rla4/status/1524736823645327360?ref_src=twsrc%5Etfw"&gt;May 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Stack Overflow が .NET 5 から .NET 6 に移行した(.NET Core 3.1 から .NET 5 よりもスムーズだった)という話。&lt;/p&gt;
&lt;!-- https://twitter.com/sinclairinat0r/status/1526034052209418245?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;👀👀 Alright Jeremy, where are you going with this?&amp;quot;&lt;br&gt;&lt;br&gt;Yo fam... &lt;br&gt;&lt;br&gt;What if I told you that I could do something like run Fiddler and have it load using the Arm64 .NET Framework Clr?!&lt;br&gt;&lt;br&gt;   Before                                               After &lt;a href="https://t.co/L1rLVPMdi8"&gt;pic.twitter.com/L1rLVPMdi8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeremy Sinclair (&amp;#64;sinclairinat0r) &lt;a href="https://twitter.com/sinclairinat0r/status/1526034052209418245?ref_src=twsrc%5Etfw"&gt;May 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt; コマンドには起動したいアーキテクチャーを指定できる &lt;code&gt;/machine&lt;/code&gt; オプションがあるので、ARM64 マシン上で AnyCPU でビルドされたアプリケーションを &lt;code&gt;/machine arm64&lt;/code&gt; で実行することで ARM64 版 .NET Framework でアプリケーションを起動できることがあるというテクニック。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="implement-segmentedhashsett-by-sharwell-pull-request-54574-dotnetroslyn"&gt;✨ Implement SegmentedHashSet&amp;lt;T&amp;gt; by sharwell · Pull Request #54574 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/54574"&gt;https://github.com/dotnet/roslyn/pull/54574&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn の内部コレクションの話。&lt;code&gt;HashSet&lt;/code&gt; の持つバケットを &lt;code&gt;SegmentedArray&lt;/code&gt; (これは断片化された Array で Sequence のようなもの)にすることで Large Object Heap を使わないようにするという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/50156"&gt;Implement SegmentedDictionary&amp;lt;TKey, TValue&amp;gt; by sharwell · Pull Request #50156 · dotnet/roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-05-12: .NET 5 End-of-Life, Visual Studio 2022 17.2, .NET 7 Preview 4</title>
			<link>/2022/05/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/05/12/updates</guid>
			<pubDate>Thu, 12 May 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;2022年5月10日で .NET 5 のサポートが終了となりました&lt;/a&gt;。今後も引き続きセキュリティー更新などのサポートを受けるためには .NET 6 への移行が強く推奨されます。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="visual-studio-2022-17.2-is-now-available-visual-studio-blog"&gt;Visual Studio 2022 17.2 is now available! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-2-is-now-available/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-17-2-is-now-available/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 version 17.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では 17.2 について以下のようなトピックを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Link
&lt;ul&gt;
&lt;li&gt;アセンブリがソース情報を提供する場合 &lt;code&gt;Go To Implementation&lt;/code&gt; (定義に移動) でソースコードに移動できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Raw string literal
&lt;ul&gt;
&lt;li&gt;C# 11 プレビューの生の文字列リテラルのリファクタリング対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging collections
&lt;ul&gt;
&lt;li&gt;デバッグ時のコレクション (&lt;code&gt;IEnumerable&lt;/code&gt;) に対する新しいビジュアライザーの導入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Razor editor
&lt;ul&gt;
&lt;li&gt;region やスニペットの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Live Preview for ASP.NET Framework
&lt;ul&gt;
&lt;li&gt;ASP.NET Web Forms のライブプレビューの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Azure Development&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Git tooling
&lt;ul&gt;
&lt;li&gt;行ステージング (プレビュー機能) の対応&lt;/li&gt;
&lt;li&gt;コミットグラフに対応することによるパフォーマンス向上&lt;/li&gt;
&lt;li&gt;ブランチ切り替え時の UI 改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LTS
&lt;ul&gt;
&lt;li&gt;17.2 は LTSC リリースとなり、2024年1月9日までのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17.2 がリリースされたことで Preview Channel は 17.3 をターゲットとすることとなり、そちらの Preview 1 もリリースされた。&lt;/p&gt;
&lt;h3 id="announcing.net-7-preview-4.net-blog"&gt;Announcing .NET 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;ブログでは Preview 4 について以下のようなトピックを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.Extensions の nullable アノテーション&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;li&gt;TimeStamp, DateTime, DateTimeOffset, TimeOnly へのマイクロ秒とナノ秒の追加&lt;/li&gt;
&lt;li&gt;System.Text.RegularExpresssions の強化と新 API&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Caching のメトリクスの追加&lt;/li&gt;
&lt;li&gt;Tar (アーカイブ) 操作の新 API の追加&lt;/li&gt;
&lt;li&gt;On Stack Replacement (aka OSR)
&lt;ul&gt;
&lt;li&gt;実行中のメソッドのコードを JIT 最適化されたコードに変更できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Central Package Management&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-4.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 4 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/2 パフォーマンス改善
&lt;ul&gt;
&lt;li&gt;ロックからスレッドセーフキューに変更したことで gRPC のストリーミングのスループットが大幅に向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の型付リザルト
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IResult&lt;/code&gt; の実装型が公開されたことでテスタビリティが向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimal API の OpenAPI 強化&lt;/li&gt;
&lt;li&gt;Minimal API の結果として複数型の返却&lt;/li&gt;
&lt;li&gt;ルートグループ&lt;/li&gt;
&lt;li&gt;SignalR でのクライアントリザルト
&lt;ul&gt;
&lt;li&gt;サーバーからクライアントを呼び出して結果を受け取る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gRPC JSON トランスコーディング
&lt;ul&gt;
&lt;li&gt;gRPC を JSON の RESTful API として表現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;トップレベル ステートメントの代わりに &lt;code&gt;Program.Main&lt;/code&gt; を使用するプロジェクトテンプレートオプション&lt;/li&gt;
&lt;li&gt;レートリミットミドルウェア&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-7-preview-4.net-blog"&gt;Announcing Entity Framework 7 Preview 4 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework 7 Preview 4 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では値生成されるプロパティーにコンバーターを割り当てることができるようになり、キーを Value Object にするといったケースがカバーしやすくなったことを紹介している。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-3.net-blog"&gt;.NET MAUI Release Candidate 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-3/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Release Candidate 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事ではナビゲーションの実装方法として新しく用意されている Shell を使用した方法について紹介している。&lt;/p&gt;
&lt;p&gt;なお MAUI RC3 の利用には Visual Studio 2022 version 17.3 (Preview 1) が必要となる。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-release-candidate-2-visual-studio-blog"&gt;Visual Studio 2022 for Mac Release Candidate 2 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate-2/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 Release Candidate 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;リリースに向けて、パフォーマンスの改善と信頼性の向上と様々な不具合の修正が行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/mac-release-notes-preview#17.0.0-pre.11"&gt;Visual Studio 2022 for Mac version 17.0 Release Candidate 2 - Visual Studio 2022 for Mac v17.0 Preview - Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="wpf-community-run-projects-discussion-6556-dotnetwpf"&gt;WPF Community-run projects · Discussion #6556 · dotnet/wpf&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/wpf/discussions/6556"&gt;https://github.com/dotnet/wpf/discussions/6556&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF リポジトリーでコミュニティーベースのプロジェクトを開始するというアナウンス。&lt;/p&gt;
&lt;p&gt;まずは .NET 7 に向けて Issue とバグへの対応をリアクションの多いものを優先的に行っていくとのこと。&lt;/p&gt;
&lt;h3 id="net-framework-may-2022-security-and-quality-rollup.net-blog"&gt;.NET Framework May 2022 Security and Quality Rollup - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/framework-may-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/framework-may-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年5月のセキュリティー修正と累積更新がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではローカルユーザーが細工をされたファイルを開いた場合にシステムに対してサービス拒否が発生するセキュリティー問題の修正とサードパーティーの .NET アプリケーションがディレクトリーサービスを使用した際にクラッシュする問題の修正が含まれる。&lt;/p&gt;
&lt;h3 id="net-may-2022-updates.net-6.0.5.net-5.0.17-and.net-core-3.1.25.net-blog"&gt;.NET May 2022 Updates – .NET 6.0.5, .NET 5.0.17 and, .NET Core 3.1.25 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/may-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/may-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6, 5, .NET Core 3.1 の2022年5月のアップデートについてのアナウンス。&lt;/p&gt;
&lt;p&gt;.NET 6.0.5, 5.0.17 および .NET Core 3.1.25 では3つのサービス拒否のセキュリティー問題についての修正が含まれている。&lt;/p&gt;
&lt;p&gt;また、.NET 5 は2022年5月10日がサポート終了日となるため、今回が最後の更新となる。引き続きサポートを受けるには .NET 6 への移行が必要となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;.NET 5.0 will reach End of Support on May 10, 2022 - .NET Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="update-all-visual-studio-installations-with-a-single-click-visual-studio-blog"&gt;Update all Visual Studio installations with a single click! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/update-all-visual-studio-installations-with-a-single-click/"&gt;https://devblogs.microsoft.com/visualstudio/update-all-visual-studio-installations-with-a-single-click/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Installer で複数の Visual Studio インストールをまとめてアップデートできる機能が付いたというアナウンス。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-blazor-razor-javascript-qiita"&gt;Visual Studio 2022 のテストエクスプローラー上で、Blazor 用 Razor クラスライブラリ中の JavaScript コードに対する単体テストを実行する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/jsakamoto/items/68c07a79bca043af3f0e"&gt;https://qiita.com/jsakamoto/items/68c07a79bca043af3f0e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 のテストエクスプローラーに .NET プロジェクトに含まれる JavaScript のテストを統合して実行できるようにする方法についての記事。&lt;/p&gt;
&lt;h3 id="cdictionary-yucchiys-note"&gt;C#のコレクション初期化子とインデックス初期化子、またはDictionaryの初期化について | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/05/csharp-collection-index-initializer-and-dictionary/"&gt;https://blog.yucchiy.com/2022/05/csharp-collection-index-initializer-and-dictionary/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のコレクション初期化子とインデックス初期化子についての改めて解説している記事。&lt;/p&gt;
&lt;h3 id="windows-app-sdk-1.1-preview-3-desktop-acrylic-mica"&gt;Windows App SDK 1.1 Preview 3 で追加された Desktop Acrylic と Mica のサポートを試した - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220510/1652191991"&gt;https://blog.shibayan.jp/entry/20220510/1652191991&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows App SDK 1.1 Preview 3 で利用できるようになった Windows 11 の質感デザインである Mica と Acrylic を適用するのを試すという記事。&lt;/p&gt;
&lt;h3 id="testing-asp.net-core-grpc-services-in-jetbrains-rider"&gt;Testing ASP.NET Core gRPC services in JetBrains Rider&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/testing-aspnetcore-grpc-services-in-jetbrains-rider/"&gt;https://andrewlock.net/testing-aspnetcore-grpc-services-in-jetbrains-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で ASP.NET Core の gRPC サービスを呼び出してテストする方法についての記事。&lt;/p&gt;
&lt;p&gt;ユニットテストではなく Rider の組み込みクライアントでリクエストを送信するといった手法。&lt;/p&gt;
&lt;h3 id="opentelemetry-in-action-identifying-database-dependencies"&gt;OpenTelemetry in Action: Identifying Database Dependencies&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/lightstep/opentelemetry-in-action-identifying-database-dependencies-17ml"&gt;https://dev.to/lightstep/opentelemetry-in-action-identifying-database-dependencies-17ml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry でデータベースへの依存情報を取得して、LightStep (外部サービス) へ送信するという方法を紹介している記事。&lt;/p&gt;
&lt;h3 id="deploy.net-blazor-webassembly-application-to-aws-amplify-amazon-web-services"&gt;Deploy .NET Blazor WebAssembly Application to AWS Amplify | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/devops/deploy-net-blazor-webassembly-application-to-aws-amplify/"&gt;https://aws.amazon.com/jp/blogs/devops/deploy-net-blazor-webassembly-application-to-aws-amplify/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Blazor WebAssembly アプリケーションを AWS Amplify にデプロイする方法を紹介する記事。&lt;/p&gt;
&lt;h3 id="using-c-libraries-in-dart-by-steve-hamblett-may-2022-medium"&gt;Using C# libraries in Dart | by Steve Hamblett | May, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;stevehamblett/using-c-libraries-in-dart-ec630848d52c"&gt;https://medium.com/&amp;#64;stevehamblett/using-c-libraries-in-dart-ec630848d52c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のコードを Dart から呼び出すにはどうすればいいのかという記事。&lt;/p&gt;
&lt;p&gt;記事では NativeAOT を使用してライブラリーを生成して FFI によって呼び出す方法を紹介している。&lt;/p&gt;
&lt;h3 id="net-6-redis-qiita"&gt;[.NET 6] 認証情報を redis に保持しログアウト時に無効化する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/pi2ji79/items/6ad967a0bda1d5c52af1"&gt;https://qiita.com/pi2ji79/items/6ad967a0bda1d5c52af1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis にログイン状態を保持することでログアウト時に削除して認証情報を無効にする方法についての記事。&lt;/p&gt;
&lt;h3 id="how-to-use-pubsub-in-c.net-to-build-a-chat-app"&gt;How to use pub/sub in C# .NET to build a chat app&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;marcduiker/how-to-use-pub-sub-in-c-net-to-build-a-chat-app-bfad51d38f59"&gt;https://medium.com/&amp;#64;marcduiker/how-to-use-pub-sub-in-c-net-to-build-a-chat-app-bfad51d38f59&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pub/Sub メッセージングなどを提供するサービス Ably を使用してチャットアプリを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="upgrading-a-wcf-service-to.net-6-with-corewcf.net-blog"&gt;Upgrading a WCF service to .NET 6 with CoreWCF - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/upgrading-a-wcf-service-to-dotnet-6/"&gt;https://devblogs.microsoft.com/dotnet/upgrading-a-wcf-service-to-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の WCF サービスを使ったアプリケーションを .NET 6 と CoreWCF に移行する手順について紹介している記事。&lt;/p&gt;
&lt;h3 id="visual-studio-on-an-ultra-wide-monitor-visual-studio-blog"&gt;Visual Studio on an ultra-wide monitor - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-on-an-ultra-wide-monitor/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-on-an-ultra-wide-monitor/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio をウルトラワイドモニターで使うときの Tips を紹介している記事。&lt;/p&gt;
&lt;h3 id="tips-for-moving-your-xamarin-library-to.net-maui-xamarin-blog"&gt;Tips for Moving Your Xamarin Library to .NET MAUI - Xamarin Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/tips-for-porting-your-xamarin-library-to-dotnet-maui/"&gt;https://devblogs.microsoft.com/xamarin/tips-for-porting-your-xamarin-library-to-dotnet-maui/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin ライブラリーを .NET MAUI に移行する際の Tips を紹介している記事。&lt;/p&gt;
&lt;h3 id="structure-and-organize.net-projects-with-rider-the.net-tools-blog"&gt;Structure and Organize .NET Projects with Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/11/structure-and-organize-net-projects-with-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/05/11/structure-and-organize-net-projects-with-rider/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider で .NET プロジェクト(ソリューション)の構成についてフォルダーやファイル、名前空間、&lt;code&gt;global using&lt;/code&gt; の活用といった Tips を紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="nuitsjpkamishibai-kamishibai-is-a-navigation-library-for-wpf-that-supports-mvvm-pattern-on-generic-host"&gt;nuitsjp/KAMISHIBAI: KAMISHIBAI is a navigation library for WPF that supports MVVM pattern on Generic Host.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nuitsjp/KAMISHIBAI"&gt;https://github.com/nuitsjp/KAMISHIBAI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF 向けの Generic Host の上で MVVM パターンでアプリケーションを構築するためのフレームワーク。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/release-kamishibai-1_0_0"&gt;WPF用Generic Host対応MVVMフレームワーク「KAMISHIBAI」をリリースしました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cysharpalternats-an-alternative-high-performance-nats-client-for.net"&gt;Cysharp/AlterNats: An alternative high performance NATS client for .NET.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/AlterNats"&gt;https://github.com/Cysharp/AlterNats&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pub/Sub 等のメッセージングをサポートする NATS サーバーのクライアントライブラリー。&lt;/p&gt;
&lt;p&gt;ゼロアロケーションと公式クライアントに比べて3倍以上のパフォーマンスを提供することが特徴。(ただし NATS/nats.net の提供する機能のフルサポートではない)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;neue cc - AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-05-05: CoreWCF 1.0, MAUI RC 2, Microsoft Graph's Journey to .NET 6</title>
			<link>/2022/05/05/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/05/05/updates</guid>
			<pubDate>Thu, 05 May 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="corewcf-1.0-has-been-released-wcf-for.net-core-and.net-5"&gt;CoreWCF 1.0 has been Released, WCF for .NET Core and .NET 5+&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/corewcf-v1-released/"&gt;https://devblogs.microsoft.com/dotnet/corewcf-v1-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CoreWCF 1.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;CoreWCF は .NET Core と .NET 5 以降向けに WCF (Windows Communication Foundation) を移植したものとなり、SOAP、NetTCP や WSDL の互換実装を提供するコミュニティー主導のフレームワーク。&lt;/p&gt;
&lt;p&gt;CoreWCF は .NET Standard 2.0 のライブラリーとして提供され、.NET Framework と .NET Core, .NET ランタイムで動作することで .NET Framework プロジェクトなどからの移行を簡単にする。&lt;/p&gt;
&lt;p&gt;記事ではサポートしている機能と未サポートの機能についても触れている。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-2-with-100-more-tizen"&gt;.NET MAUI Release Candidate 2 - With 100% More Tizen&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-2/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Release Candidate 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;Tizen のサポートが追加され Samsung Tizen を搭載するモバイルやテレビといったデバイスで MAUI アプリケーションの動作が可能となる。.NET 6 をサポートする Tizen Emulator は近くリリースされるとのこと。&lt;/p&gt;
&lt;p&gt;記事ではプラットフォーム固有のソース管理(フォルダーや条件付きコンパイル)についても触れている。&lt;/p&gt;
&lt;h3 id="microsoft-graphs-journey-to.net-6"&gt;Microsoft Graph's Journey to .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/microsoft-graph-dotnet-6-journey/"&gt;https://devblogs.microsoft.com/dotnet/microsoft-graph-dotnet-6-journey/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Graph のサーバーを .NET 6 に移行するまでの話。(Microsoft Graph は Microsoft 365 の様々なデータにアクセスするための API ゲートウェイ)&lt;/p&gt;
&lt;p&gt;記事では .NET 6 への道のりと移行のガイダンス、アップグレードのヒントが書かれている。&lt;/p&gt;
&lt;p&gt;.NET 6 への道のりについて。&lt;/p&gt;
&lt;p&gt;4年前は .NET Framework 4.6.2 上の ASP.NET を IIS で実行していて、現在は .NET 6 上の ASP.NET Core を Http.sys で実行している (.NET Core 3.1, .NET 5 を経て)。.NET Core 3.1 と .NET 6 では特に CPU 使用率の改善が見られた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Framework から .NET Core 3.1 で CPU 使用率が 30% 削減された (トラフィックは同量)&lt;/li&gt;
&lt;li&gt;.NET Core 3.1 から .NET 5 では大きな差はみられなかった&lt;/li&gt;
&lt;li&gt;.NET 5 から .NET 6 では CPU 使用率が 10% 削減された (トラフィックは同量)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4年前は10億リクエスト/日でコストがとても高く、現在では700億リクエスト/日の70倍となっているが10億リクエストごとの運用コストは91%削減されているとのこと。&lt;/p&gt;
&lt;p&gt;.NET Core のインパクトについては .NET Framework から .NET Core 3.1 (Kestrel + ASP.NET Core その後 Http.sys) に移行した際のスループットの改善での比較を紹介している。&lt;/p&gt;
&lt;p&gt;Standard_D3_v2 インスタンスで疑似的なトラフィックをかけた場合の RPS (リクエスト毎秒) と CPU 使用率を比較し、CPU 使用率 60% での RPS が古いスタックで約 350 RPS に対して、新しいスタックでは約 850 RPS となり、最終的に運用環境では 30% の CPU 使用率の削減が見られた。&lt;/p&gt;
&lt;p&gt;ビルドシステムのモダナイゼーションについて。.NET Core への移行するために .NET Core と互換性のないツールチェーンを使用する内部ビルドシステムを使用していたため、初めにビルドシステムをモダナイズして MSBuild と dotnet コマンドをサポートする Visual Studio ツールチェーンを使用するモダンなビルドシステムに移行した。この移行は困難だったが、ビルドの高速化や保守が簡単になるなど、生産性の向上に寄与したとしている。&lt;/p&gt;
&lt;p&gt;最後に移行することでコードベースを新しくでき、 Span や null 許容参照型 など新しい API と C# の機能による様々なメリットを得られたとしている。&lt;/p&gt;
&lt;p&gt;次に移行ガイダンスでは ASP.NET から ASP.NET Core に移行する戦略を解説している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1. モダナイゼーションの構築
&lt;ul&gt;
&lt;li&gt;.NET Framework と .NET Core でのビルドシステムの構築&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 2. アーキテクチャーの準備
&lt;ul&gt;
&lt;li&gt;ここでは3つのステージに分けるアーキテクチャをあげている&lt;/li&gt;
&lt;li&gt;Stage 1. すべて .NET Framework&lt;/li&gt;
&lt;li&gt;Stage 2. アプリケーションを .NET Standard にして .NET Framework / .NET Core 両対応&lt;/li&gt;
&lt;li&gt;Stage 3. すべて .NET Core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 3. .NET Framework 依存の棚卸&lt;/li&gt;
&lt;li&gt;Step 4. プロジェクトライブラリーから .NET Framework の依存を取り除く&lt;/li&gt;
&lt;li&gt;Step 5. ブロックされることを避ける
&lt;ul&gt;
&lt;li&gt;取り除くのが難しい依存関係を解消することをあきらめない&lt;/li&gt;
&lt;li&gt;そのような状況となった場合は次のようなオプションがある
&lt;ul&gt;
&lt;li&gt;コードオーナーが .NET Standard 対応を行い、ブロックを解消するボランティアを行う&lt;/li&gt;
&lt;li&gt;コードをフォークして互換性のあるものがリリースされるまで一時的に .NET Standard としてビルドする&lt;/li&gt;
&lt;li&gt;依存関係を .NET Framework で動作するコンソールアプリケーションやバックグラウンドサービスとして切り出す&lt;/li&gt;
&lt;li&gt;最終手段として .NET Framework プロジェクトやパッケージを参照して、互換 shim で動作させる (ビルドはできるかもしれないが保証はない)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 6. ASP.NET Core の新しい Web サーバープロジェクトを作成する&lt;/li&gt;
&lt;li&gt;Step 7. A/B テストとロールアウトプラン
&lt;ul&gt;
&lt;li&gt;Stage 2 の状態で A/B テストを行う計画を作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 8. すべてのプロジェクトのターゲットを .NET Core にする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後のアップグレードのヒントでは URI エンコーディングの取り扱いが ASP.NET と ASP.NET Core で違うこと、.NET 6 で導入された Dynamic PGO によるパフォーマンス向上といったものを紹介している。&lt;/p&gt;
&lt;h3 id="visual-studio-2022-for-mac-release-candidate"&gt;Visual Studio 2022 for Mac Release Candidate&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-release-candidate/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac RC がリリースされた。&lt;/p&gt;
&lt;p&gt;記事では改めて Visual Studio 2022 for Mac での変更点を紹介している(アクセシビリティー対応、Apple Silicon ネイティブサポート、.NET 6 対応や UI の更新など)。&lt;/p&gt;
&lt;h3 id="livesharp-goes-free-and-open-source-news-livesharp"&gt;26.04.2022 LiveSharp goes free and open source - News – LiveSharp&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.livesharp.net/news/"&gt;https://www.livesharp.net/news/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LiveSharp が無料化しオープンソースとなった。&lt;/p&gt;
&lt;p&gt;LiveSharp は .NET 上でホットリロードを実現するツールキットで今まで有償製品として提供されてきたが、.NET 6 でホットリロードがランタイムと SDK で提供されることとなり、有償ライセンス利用者が減ったことにより LiveSharp のサポートを継続できなくなったとのこと。&lt;/p&gt;
&lt;p&gt;しかし .NET 6 のホットリロードは一部のシナリオで利用できず、そのようなケースでは LiveSharp はまだ役立つので無料とオープンソース化を行ったとしている。既存のサブスクリプションはすべてキャンセルされるとのこと。&lt;/p&gt;
&lt;h3 id="yarp-1.1-is-here-with-new-requested-reverse-proxy-features"&gt;YARP 1.1 is here with new requested reverse proxy features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/yarp-reverse-proxy-1-1-release/"&gt;https://devblogs.microsoft.com/dotnet/yarp-reverse-proxy-1-1-release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YARP (Yet Another Reverse Proxy) 1.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;バージョン 1.1 での変更点は次の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ゼロバイト読み込み
&lt;ul&gt;
&lt;li&gt;WebSocket や gRPC のようなストリーミングでアイドル状態のストリームが多い場合のメモリースケーリングが改善される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数値ヘッダーマッチング
&lt;ul&gt;
&lt;li&gt;ルートのヘッダーマッチングで複数値を持つヘッダーや同名のヘッダーが複数ある場合をサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3 サポート
&lt;ul&gt;
&lt;li&gt;.NET 6 の HTTP/3 をサポートする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数の構成ソース
&lt;ul&gt;
&lt;li&gt;YARP の構成をソースコードや設定ファイルなど複数のソースから読み込み、マージすることが可能となった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Http.sys への移譲
&lt;ul&gt;
&lt;li&gt;YARP が Http.sys でホストされている場合、同マシン上で Http.sys を使用する他のプロセスにリクエストをルーティングできるように&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ミドルウェアのための API
&lt;ul&gt;
&lt;li&gt;クラスターやルーティングといった構成にリアルタイムでアクセスできる API を追加。これにより A/B テストやローリングアップデートのような機能を実装できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメンテーション&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="remove-c-implementation-individual-packages-will-continue-to-be-maintained-through-v2.46.x-patches-or-moved-to-grpc-dotnet-by-jtattermusch-pull-request-29225-grpcgrpc"&gt;Remove C# implementation (individual packages will continue to be maintained through v2.46.x patches or moved to grpc-dotnet) by jtattermusch · Pull Request #29225 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/pull/29225"&gt;https://github.com/grpc/grpc/pull/29225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (C-core) リポジトリーから C# の実装 (ツールを除く) が削除された。&lt;/p&gt;
&lt;p&gt;モチベーションとしては C# 実装を削除することで C-core の大きな変更を簡素化する、gRPC の C#/.NET のサポート状況と一致させる(現在 Grpc.Core はメンテナンスモードで、grpc-dotnet が推奨実装)こととしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Grpc&lt;/code&gt;, &lt;code&gt;Grpc.Core&lt;/code&gt;, &lt;code&gt;Grpc.Core.Testing&lt;/code&gt;, &lt;code&gt;Grpc.Core.NativeDebug&lt;/code&gt;, &lt;code&gt;Grpc.Core.Xamarin&lt;/code&gt; は v1.46.x メンテナンスブランチに残され、セキュリティー修正などはそこで行われる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grpc.Core.Api&lt;/code&gt;, &lt;code&gt;Grpc.Auth&lt;/code&gt;, &lt;code&gt;Grpc.HealthCheck&lt;/code&gt;, &lt;code&gt;Grpc.Reflection&lt;/code&gt; は grpc/grpc-dotnet リポジトリーに移動する (これらは実装非依存)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grpc.Tools&lt;/code&gt; は grpc/grpc の master に残り続ける (このツールはビルドインフラストラクチャーや最新の protoc などに依存してる部分が多く、簡単ではないため現時点ではそのまま)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v1.46.0-grpcgrpc"&gt;Release Release v1.46.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.46.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.46.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC v1.46.0 (NuGet パッケージバージョンは 2.46.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;C# (C-core) ではシャットダウンされたチャンネルに対して Unary 呼び出しを行うとクラッシュする問題が修正されている。&lt;/p&gt;
&lt;h3 id="net-package-maintenance-deprecation-issue-7420-dotnetcore-github"&gt;.NET Package Maintenance (deprecation) · Issue #7420 · dotnet/core · GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/issues/7420"&gt;https://github.com/dotnet/core/issues/7420&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の NuGet パッケージメンテナンス (非推奨化) についてのアナウンス。&lt;/p&gt;
&lt;p&gt;原則として .NET サポートポリシーに従いサポートから外れたものが非推奨 (Deprecated) としてマークされるようになる。そのほか dnx のような古いプレビューリリースも非推奨となる。&lt;/p&gt;
&lt;p&gt;今後新しいパッケージがリリースされた場合は古いバージョンを非推奨としてマークするようになる。例えば .NET 6.0.10 がリリースされた後は 6.0.9 が非推奨としてマークされる。&lt;/p&gt;
&lt;p&gt;AspNetCore 2.2 パッケージは .NET Framework の利用もあるため特別な扱いとなる。&lt;/p&gt;
&lt;p&gt;来週からマーキングを開始したいとしていて何か問題がある場合は Issue にコメントが欲しいとしている。対象となるパッケージは &lt;a href="https://github.com/dotnet/core/blob/main/release-notes/net-package-deprecation.md"&gt;.NET Package Deprecation list&lt;/a&gt; を参照のこと。&lt;/p&gt;
&lt;h3 id="release-11.0-fluentvalidationfluentvalidation"&gt;Release 11.0 · FluentValidation/FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/FluentValidation/FluentValidation/releases/tag/11.0"&gt;https://github.com/FluentValidation/FluentValidation/releases/tag/11.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FluentValidation 11.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET Core 2.1 のサポートの削除や、Sync-over-async 状況で例外をスローするようになるなど。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="opentelemetry.net"&gt;OpenTelemetry .NETの追加コード不要な計装ライブラリの最初のリリースが出たので試してみた | ドクセル&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.docswell.com/s/tanaka_733/ZJNQGK-opentelemetry-dotnet-automatic-instrumentation"&gt;https://www.docswell.com/s/tanaka_733/ZJNQGK-opentelemetry-dotnet-automatic-instrumentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenTelemetry.NET の追加コード不要で計測を実装するライブラリーの beta がリリースされたので使用してみるというスライド。&lt;/p&gt;
&lt;h3 id="cfcmhttp-v1-api-qiita"&gt;【C#】FCMでHTTP v1 APIを使ってプッシュメッセージ送信 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/piro_rin_piro/items/0d479b523996f475c809"&gt;https://qiita.com/piro_rin_piro/items/0d479b523996f475c809&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Firebase Cloud Messaging の HTTP v1 API を使用するという記事。&lt;/p&gt;
&lt;h3 id="path.getinvalidpathchars-path.getinvalidfilenamechars-qiita"&gt;Path.GetInvalidPathChars と Path.GetInvalidFileNameChars の違い - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/FN_Programming/items/33e73566fcd5d666a865"&gt;https://qiita.com/FN_Programming/items/33e73566fcd5d666a865&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Path.GetInvalidPathChars&lt;/code&gt; と &lt;code&gt;Path.GetInvalidFileNameChars&lt;/code&gt; の違いについての記事。&lt;/p&gt;
&lt;p&gt;例えば Windows 上では &lt;code&gt;GetInvalidPathChars&lt;/code&gt; はパスとして無効な文字なので &lt;code&gt;*&lt;/code&gt; を含まないが、&lt;code&gt;GetInvalidFileNameChars&lt;/code&gt; はファイル名なので &lt;code&gt;*&lt;/code&gt; は無効な文字として扱われている。またコメント欄では Unix 系の環境では null 文字のみがパスとして無効、ファイル名は null 文字と &lt;code&gt;/&lt;/code&gt; だけとなっていることも。&lt;/p&gt;
&lt;h3 id="asp.netcore2.26.0.pptx"&gt;2022年ASP.NETCore2.2～6.0の旅.pptx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/ssuser7f4bbb/2022aspnetcore2260pptx"&gt;https://www.slideshare.net/ssuser7f4bbb/2022aspnetcore2260pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core 2.2 (ASP.NET Core + EF Core) のアプリケーションを .NET 6 に更新した話のスライド。&lt;/p&gt;
&lt;p&gt;.NET Core 2.2 → 3.1 → .NET 5 → .NET 6 へとアップグレードしていく間に出た対応を紹介している。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-may-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | May 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/05/03/net-annotated-monthly-may-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/05/03/net-annotated-monthly-may-2022/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JetBrains の .NET 関連のまとめ2022年5月分の記事。&lt;/p&gt;
&lt;h3 id="case-study-double-performance-in-under-30-minutes"&gt;Case Study: Double performance in under 30 minutes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/case-study-double-performance-in-under-30-minutes/"&gt;https://devblogs.microsoft.com/visualstudio/case-study-double-performance-in-under-30-minutes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で展開コードを実装してプロファイルして30分で2倍のパフォーマンス改善を行えた話。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream.ReadByte&lt;/code&gt; の実装が1要素の byte 配列を確保するという実装となっていたため大量のアロケーションがあり GC が発生していたという話。&lt;/p&gt;
&lt;h3 id="system.text.jsonjsondocument-qiita"&gt;System.Text.JsonのJsonDocumentを使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TheParkSider/items/7d85f730314dfe642c91"&gt;https://qiita.com/TheParkSider/items/7d85f730314dfe642c91&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json の JsonDocument の使い方についての記事。&lt;/p&gt;
&lt;h3 id="system.text.jsonjsonnode-qiita"&gt;System.Text.JsonのJsonNodeを使ってみる - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/TheParkSider/items/9632c7c5cb4c5b3d9717"&gt;https://qiita.com/TheParkSider/items/9632c7c5cb4c5b3d9717&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Text.Json の JsonNode の使い方についての記事。&lt;/p&gt;
&lt;h3 id="cswin32-win32-api-com"&gt;CsWin32 で Win32 API や COM を使ったアプリケーション開発を効率化する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220501/1651339430"&gt;https://blog.shibayan.jp/entry/20220501/1651339430&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CsWin32 (Win32 API のラッパーコードを生成する Source Generator) を使用して Win32 API や COM をアプリケーションから呼び出すためのコツを紹介する記事。&lt;/p&gt;
&lt;h3 id="net-benchmarking-and-profiling-for-beginners"&gt;.NET benchmarking and profiling for beginners&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/ingeniouslysimple/net-benchmarking-and-profiling-for-beginners-62462e1e9a19"&gt;https://medium.com/ingeniouslysimple/net-benchmarking-and-profiling-for-beginners-62462e1e9a19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BenchmarkDotNet を使用したベンチマークとプロファイリングの入門についての記事。&lt;/p&gt;
&lt;h3 id="why-isnt-my-asp.net-core-app-in-docker-working"&gt;Why isn't my ASP.NET Core app in Docker working?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/why-isnt-my-aspnetcore-app-in-docker-working/"&gt;https://andrewlock.net/why-isnt-my-aspnetcore-app-in-docker-working/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションを Docker コンテナーで稼働させたときにうまく動かない問題があったことについての記事。Kestrel でバインドするアドレスが問題となっていたことについて解説している。&lt;/p&gt;
&lt;h3 id="improving-asp.net-core-before-it-ships"&gt;Improving ASP.NET Core Before It Ships 🚢&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/justeattakeaway-tech/improving-asp-net-core-before-it-ships-3e44b6f65054"&gt;https://medium.com/justeattakeaway-tech/improving-asp-net-core-before-it-ships-3e44b6f65054&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で見つかった問題を特定して修正したことについての記事。&lt;/p&gt;
&lt;p&gt;.NET 6 の RC 版を展開して問題がなかったのでリリース版を展開したところデッドロックが発生し、状況証拠などから構成関連の処理(M.E.Configuration)であることを特定し、Visual Studio でコード上の原因を特定、バグ修正を行ったとのこと。(なおこの修正は .NET 6.0.3 で利用可能)&lt;/p&gt;
&lt;h3 id="generating-sortable-guids-using-newid"&gt;Generating sortable Guids using NewId&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/generating-sortable-guids-using-newid/"&gt;https://andrewlock.net/generating-sortable-guids-using-newid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GUID の代わりに使用できる Snowflake アルゴリズムを使用した NewId パッケージの解説の記事。&lt;/p&gt;
&lt;h3 id="evil-monkeypatching-in-c-with-rosyln-source-generators"&gt;Evil Monkeypatching in C# with Rosyln Source Generators&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/martinjt/evil-monkeypatching-in-c-with-rosyln-source-generators-4g6f"&gt;https://dev.to/martinjt/evil-monkeypatching-in-c-with-rosyln-source-generators-4g6f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source Generator で &lt;code&gt;global using&lt;/code&gt; を吐き出すことでモンキーパッチ(コード上で指しているものを上書き)するという手法についての記事。&lt;/p&gt;
&lt;h3 id="detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request"&gt;Detect Breaking Changes in your GraphQL Schema automatically for Each Pull Request&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;TimHolzherr/detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request-77bbe261feef"&gt;https://medium.com/&amp;#64;TimHolzherr/detect-breaking-changes-in-your-graphql-schema-automatically-for-each-pull-request-77bbe261feef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Pipelines で Pull request を作った際に GraphQL スキーマの破壊的変更を検出する手法についての記事。&lt;/p&gt;
&lt;h3 id="use-the-query-string-to-pass-an-array-of-selected-values-between-blazor-pages"&gt;Use the Query String to pass an array of selected values between Blazor Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://jonhilton.net/blazor-deep-linking/"&gt;https://jonhilton.net/blazor-deep-linking/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor のページ間で選択した値の配列をクエリーストリングを使用して渡す方法についての記事。&lt;/p&gt;
&lt;h3 id="quickly-map-your-nuget-packages-to-sources"&gt;Quickly Map Your NuGet Packages to Sources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/"&gt;https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet のパッケージソースマッピング (パッケージごとにどの NuGet サーバーを使うかの設定) を生成する PackageSourceMapper を紹介する記事。&lt;/p&gt;
&lt;h3 id="looking-for-a-way-to-initialize-ioptionst-manually"&gt;Looking for a way to initialize IOptions&amp;lt;T&amp;gt; manually?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mahesh-more.medium.com/looking-for-a-way-to-initialize-ioptions-t-manually-4df4ca97b2b0"&gt;https://mahesh-more.medium.com/looking-for-a-way-to-initialize-ioptions-t-manually-4df4ca97b2b0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IOption&amp;lt;T&amp;gt;&lt;/code&gt; のインスタンスをユニットテストなどで簡単に作るにはどうするのかという記事。&lt;code&gt;Options.Create&lt;/code&gt; というヘルパーがあるのでそれを使用する。&lt;/p&gt;
&lt;h3 id="null-c-c"&gt;引数 null チェックの !!、取りやめ | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/5/double-bang-removed/"&gt;https://ufcpp.net/blog/2022/5/double-bang-removed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引数で null を受け入れないことを明示し、渡された場合に &lt;code&gt;NullReferenceException&lt;/code&gt; をスローするという &lt;code&gt;!!&lt;/code&gt; という文法がプレビューで導入されたが、フィードバックの結果差し戻しとなった件についての記事。&lt;/p&gt;
&lt;h3 id="windows-property-system-c"&gt;Windows Property System を使って C# から曲情報を取得する - しばやん雑記&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.shibayan.jp/entry/20220504/1651658855"&gt;https://blog.shibayan.jp/entry/20220504/1651658855&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows が持つ Windows Property System と呼ばれるファイルのメタデータを取得・変更できる機能を使用して音楽の曲情報を取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="c-11.0-c-c"&gt;C# 11.0 の新機能 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/study/csharp/cheatsheet/ap_ver11/"&gt;https://ufcpp.net/study/csharp/cheatsheet/ap_ver11/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 での新機能について紹介している記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-azure-samplesorleans-cluster-on-azure-app-service-sample-application-demonstrating-a-multiple-silo-orleans-cluster-running-in-azure-app-service"&gt;GitHub - Azure-Samples/Orleans-Cluster-on-Azure-App-Service: Sample application demonstrating a multiple-silo Orleans cluster running in Azure App Service.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Azure-Samples/Orleans-Cluster-on-Azure-App-Service"&gt;https://github.com/Azure-Samples/Orleans-Cluster-on-Azure-App-Service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure App Service で動作する Orleans のクラスターのサンプルコード。&lt;/p&gt;
&lt;h3 id="github-ievangelistblazorators-this-project-converts-typescript-type-declarations-into-c-representations-and-use-c-source-generators-to-expose-automatic-javascript-interop-functionality"&gt;GitHub - IEvangelist/blazorators: This project converts TypeScript type declarations into C# representations, and use C# source generators to expose automatic JavaScript interop functionality.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/IEvangelist/blazorators"&gt;https://github.com/IEvangelist/blazorators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TypeScript の型定義から Blazor の JavaScript 相互運用のための C# コードを生成する Source Generator。&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="htmx-for-asp.net-core-developers.net-guide"&gt;HTMX for ASP.NET Core Developers - .NET Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/dotnet/guide/tutorials/htmx-aspnetcore/"&gt;https://www.jetbrains.com/dotnet/guide/tutorials/htmx-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で HTMX を使うチュートリアル。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/27/htmx-for-asp-net-core-developers-tutorial/"&gt;HTMX for ASP.NET Core Developers – Tutorial | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="diagnostics-tools-overview.net-core"&gt;Diagnostics tools overview - .NET Core&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/"&gt;https://docs.microsoft.com/en-us/dotnet/core/diagnostics/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Core/.NET で使用できる診断ツールについてのドキュメント。&lt;/p&gt;
&lt;h3 id="blazor-ecec.net6-nekojoker-booth"&gt;猫でもわかるBlazor ECサイト編〜誰でもかんたんにECサイトを作る！〜（.NET6対応） - nekojoker - BOOTH&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nekojoker.booth.pm/items/3813171"&gt;https://nekojoker.booth.pm/items/3813171&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor で EC サイトを実装することについてのまとめた本。Azure Active Directory B2C を使用しての認証、Stripe での決済などにも触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nekojoker/articles/f0b80c407209dc"&gt;【Blazor】約300ページにわたる技術書をひとりで執筆した話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1520966312817664000?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;One of the patterns that has emerged when doing high performance byte/char manipulation in .NET since the inception of Span is using stack allocated or pooled memory for synchronous operations. &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/csharp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#csharp&lt;/a&gt; &lt;a href="https://t.co/nUNnRtDfy5"&gt;pic.twitter.com/nUNnRtDfy5&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1520966312817664000?ref_src=twsrc%5Etfw"&gt;May 2, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;stackalloc&lt;/code&gt; と &lt;code&gt;ArrayPool&lt;/code&gt; を使った定型パターン。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="update-sdk-and-use-u8-string-literals-by-brennanconroy-pull-request-41449-dotnetaspnetcore"&gt;Update SDK and use 'u8' string literals by BrennanConroy · Pull Request #41449 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41449"&gt;https://github.com/dotnet/aspnetcore/pull/41449&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core の中で使用されている UTF-8 文字列 (バイト配列)を &lt;code&gt;u8&lt;/code&gt; サフィックスによる UTF-8 文字列に変更する PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-04-26: C# on Oracle Functions, ReSharper/Rider 2022.1, grpc-dotnet 2.45</title>
			<link>/2022/04/26/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/26/updates</guid>
			<pubDate>Tue, 26 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="support-for-c-oracle-cloud-infrastructure-release-notes"&gt;Support for C# - Oracle Cloud Infrastructure Release Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/"&gt;https://docs.public.oneportal.content.oci.oraclecloud.com/en-us/iaas/releasenotes/changes/fe5ea60e-412f-453e-b3f5-91c8f79140f2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oracle Functions のサポート言語として C# が追加され、C# での開発が行えるようになった。&lt;/p&gt;
&lt;p&gt;言語サポートのページによればランタイムは現時点で .NET Core 3.1 のみがサポートされているとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/en-us/iaas/Content/Functions/Tasks/languagessupportedbyfunctions.htm"&gt;Languages Supported by Oracle Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/22/oracle-cloud-functions.aspx"&gt;Oracle Cloud Functions Now Supports C# -- Visual Studio Magazine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rider-2022.1-comes-with-full-unreal-engine-support-and-remote-development-the.net-tools-blog"&gt;Rider 2022.1 Comes With Full Unreal Engine Support and Remote Development | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/rider-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rider 2022.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;記事で紹介されている新機能、改善は次のようなものがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unreal Engine と Unity でのゲーム開発の統合
&lt;ul&gt;
&lt;li&gt;Unity プロジェクトの読み込み時間の改善&lt;/li&gt;
&lt;li&gt;.asmref/.asmdef といったアセンブリ参照/定義ファイルのサポートの向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リモート開発 (Beta)
&lt;ul&gt;
&lt;li&gt;JetBrains Gateway でのリモート開発に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;その他
&lt;ul&gt;
&lt;li&gt;新しいツールバーのカスタマイズ&lt;/li&gt;
&lt;li&gt;Docker および docker-compose の高速モード&lt;/li&gt;
&lt;li&gt;&amp;quot;Search Everywhere&amp;quot; での全文検索&lt;/li&gt;
&lt;li&gt;C# 10 のサポート: &lt;code&gt;global using&lt;/code&gt; へのリファクタリングの対応など&lt;/li&gt;
&lt;li&gt;.NET 6 の新しい属性のサポート: &lt;code&gt;EditorRequired&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新しい通知ツールウィンドウ&lt;/li&gt;
&lt;li&gt;新しいズームウィジェット&lt;/li&gt;
&lt;li&gt;.NET と .NET Core プロジェクトへの Web 参照の追加機能&lt;/li&gt;
&lt;li&gt;バージョンコントロール: Preview Diff アイコンをツールバーから歯車メニューに移動し Show Diff Preview on Single Click にリネーム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他細かい新機能や改善は別ページにまとまっているので参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/rider/whatsnew/"&gt;What’s New in Rider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.1-released-the.net-tools-blog"&gt;ReSharper 2022.1 Released | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/"&gt;https://blog.jetbrains.com/dotnet/2022/04/19/resharper-2022-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# のサポートの向上
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;global using&lt;/code&gt; に関連するリファクタリングの追加&lt;/li&gt;
&lt;li&gt;null 許容参照型のサポート強化&lt;/li&gt;
&lt;li&gt;C# 11 のジェネリック属性の実装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;機能
&lt;ul&gt;
&lt;li&gt;Endpoints として ASP.NET Core の Minimal API と規約ベースのルーティングをサポート&lt;/li&gt;
&lt;li&gt;Razor と Blazor では Razor 内でのローカル関数サポートやナビゲーションの追加&lt;/li&gt;
&lt;li&gt;フォーマッティングのアクションの整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パフォーマンス
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtrack.jetbrains.com/issue/RSRP-480863"&gt;Out-of-Process 対応の進捗と詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デコンパイラー
&lt;ul&gt;
&lt;li&gt;XML ドキュメントコメントのプラットフォームアセンブリなどのサポート&lt;/li&gt;
&lt;li&gt;Assembly Explorer での転送された型 (forwarded types) のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;バグ修正&lt;/li&gt;
&lt;li&gt;ReSharper C++
&lt;ul&gt;
&lt;li&gt;Unreal Engine のサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotTrace, dotCover, dotMemory
&lt;ul&gt;
&lt;li&gt;dotTrace での SQL Server イベントのサポート (Windows 上での .NET Core または .NET 5 以降)&lt;/li&gt;
&lt;li&gt;ドラッグアンドドロップでのアタッチ&lt;/li&gt;
&lt;li&gt;dotCovert での &amp;quot;not coverable&amp;quot; としてコードをマークできるように&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/19/dottrace-dotmemory-dotcover-dotpeek-2022-1/"&gt;The 2022.1 Release of dotTrace, dotMemory, dotCover, and dotPeek! | The .NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="release-release-v2.45.0-grpcgrpc-dotnet"&gt;Release Release v2.45.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.45.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) の 2.45.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WriteAsync&lt;/code&gt; メソッドで &lt;code&gt;CancellationToken&lt;/code&gt; がサポート、再接続バックオフの構成といった改善のほか、いくつかの不具合が修正されている。&lt;/p&gt;
&lt;h3 id="release-diagnostics-release-v6.0.320703-dotnetdiagnostics"&gt;Release Diagnostics Release - v6.0.320703 · dotnet/diagnostics&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703"&gt;https://github.com/dotnet/diagnostics/releases/tag/v6.0.320703&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の診断ツール v6.0.320703 がリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="the-future-of.net-and-unity-unity-at-gdc-2022"&gt;The future of .NET and Unity | Unity at GDC 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://m.youtube.com/watch?v=6UiKtnDQeEg"&gt;https://m.youtube.com/watch?v=6UiKtnDQeEg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GDC 2022 における Unity の .NET ランタイムとエコシステムに関する今後についてのセッション。&lt;/p&gt;
&lt;p&gt;セッションでは MSBuild/SDK-style プロジェクトについてや、CoreCLR への移行について、Unity での async/await 対応についてといった点に触れている。&lt;/p&gt;
&lt;h3 id="using-c-and-auto-ml-in-ml.net-to-predict-video-game-ratings"&gt;Using C# and Auto ML in ML .NET to Predict Video Game Ratings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j"&gt;https://dev.to/integerman/using-c-and-auto-ml-in-ml-net-to-predict-video-game-ratings-j8j&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ML.NET/Auto ML と C# を使用してゲームの ESRB レーティングラベル予測するものを作ってみるという記事。&lt;/p&gt;
&lt;h3 id="view.net-collections-with-the-new-ienumerable-debugger-visualizer"&gt;View .NET collections with the new IEnumerable Debugger Visualizer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/"&gt;https://devblogs.microsoft.com/visualstudio/view-net-collections-with-the-new-ienumerable-debugger-visualizer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 2 で強化された、デバッグ時に IEnumerable をビジュアライズする機能についての記事。&lt;/p&gt;
&lt;p&gt;記事ではプロパティーの展開、複数の IEnumerable の実装の切り替え、ソートとエクスポートといった機能について触れている。&lt;/p&gt;
&lt;h3 id="alternative-to-blazor-wisej-3-ships-visual-studio-magazine"&gt;'Alternative to Blazor' Wisej 3 Ships -- Visual Studio Magazine&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx"&gt;https://visualstudiomagazine.com/articles/2022/04/21/wisej-3.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET 上に構築された C# ベースで Web アプリケーションを構築する有償フレームワーク Wisej 3 がリリースされたことについての記事。&lt;/p&gt;
&lt;p&gt;Wisej 3 は C# のみでインタラクティブな Web アプリケーションを構築できるという意味で Blazor の代替に近い位置づけとなるフレームワーク。なお、Wisej 3 は .NET Framework 4.8 と .NET 6 で利用できるマルチターゲットなフレームワークとしてリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wisej.com/blog/wisej-net-3-released-for-net-framework-4-8-and-net-6/"&gt;Wisej.NET 3 released for .NET Framework 4.8 and .NET 6 – Wisej.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wisej.com/"&gt;Wisej.com – Rapid .NET Web Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="blazor-editform-reactiveproperty"&gt;Blazor の EditForm で ReactiveProperty を使う&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/reactiveproperty-editform"&gt;https://zenn.dev/okazuki/articles/reactiveproperty-editform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor の EditForm の入力値検証で ReactiveProperty を使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="use-browser-dev-tools-with-blazor-hybrid"&gt;Use browser dev tools with Blazor Hybrid&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh"&gt;https://dev.to/rogihee/use-browser-dev-tools-with-blazor-hybrid-18nh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI Blazor Hybrid をデプロイしたモバイル環境(エミュレーターなど)に対して Microsoft Edge の DevTools を接続する方法についての記事。&lt;/p&gt;
&lt;h3 id="running-javascript-inside-a.net-app-with-javascriptengineswitcher"&gt;Running JavaScript inside a .NET app with JavaScriptEngineSwitcher&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/"&gt;https://andrewlock.net/running-javascript-in-a-dotnet-app-with-javascriptengineswitcher/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションで JavaScript を動作させたいケースで使用できる様々な JavaScript のエンジンを抽象化/ラップする JavaScriptEngineSwitcher についての記事。&lt;/p&gt;
&lt;p&gt;記事では Jurassic (ピュア .NET 実装のエンジン) を使用して JavaScript を実行する例を載せている。&lt;/p&gt;
&lt;h3 id="net-core-microservice-metrics-with-prometheus-and-grafana"&gt;.Net Core Microservice Metrics with Prometheus and Grafana&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-metrics-with-prometheus-and-grafana-d228bea89283&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの CPU 使用率やリクエストなどのメトリクスを Prometheus と Grafana で可視化する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-core-microservice-logging-with-grafana-and-loki"&gt;.NET Core Microservice Logging with Grafana and Loki&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88"&gt;https://medium.com/c-sharp-progarmming/net-core-microservice-logging-with-grafana-and-loki-92cd2783ed88&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションのロギングを Loki と Grafana で取り扱う方法についての記事。&lt;/p&gt;
&lt;h3 id="nullable-reference-types-in-c-migrating-to-nullable-reference-types-part-1"&gt;Nullable reference types in C# - Migrating to nullable reference types - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html"&gt;https://blog.maartenballiauw.be/post/2022/04/11/nullable-reference-types-in-csharp-migrating-to-nullable-reference-types-part-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;null 許容参照型についてとその移行について解説する記事シリーズ。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvc-qiita"&gt;ASP.NET Core MVC 公式チュートリアルから実開発への橋渡し - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948"&gt;https://qiita.com/pepepe_90/items/795dadb8757ec0c5f948&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC アプリケーションの公式チュートリアルで作った部分から実際のプロジェクト開発へと進んだ際に必要となるパーツを埋めることを目的とした記事。&lt;/p&gt;
&lt;p&gt;記事では認証の追加、フィルター処理、appsettings.json のカスタマイズといった部分を解説している。&lt;/p&gt;
&lt;h3 id="introducing-a-new-way-to-search-your-code-and-visual-studio-features"&gt;Introducing a New Way to Search Your Code and Visual Studio Features&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/"&gt;https://devblogs.microsoft.com/visualstudio/introducing-a-new-way-to-search-your-code-and-visual-studio-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 3 で導入された All-In-One 検索体験についての記事。既存の VS Search (Ctrl+Q) Go To (Ctrl+T) を合わせて一つの検索ウィンドウで検索できるようになる (ReSharper の Search Everywhere と似ている)。&lt;/p&gt;
&lt;p&gt;記事では検索時にファイルや型、メンバーでフィルターできるといった点について触れている。&lt;/p&gt;
&lt;h3 id="czip"&gt;C#でzipを展開するときに気をつけること&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/throw_exception/articles/7202956e9824d5"&gt;https://zenn.dev/throw_exception/articles/7202956e9824d5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.5 から導入された Zip ファイルを操作可能となった API を使用してファイルを展開する際に注意すべき点についての記事。&lt;/p&gt;
&lt;p&gt;記事では &lt;code&gt;ExtractToFile&lt;/code&gt; メソッドではディレクトリトラバーサルが発生してセキュリティー上の問題となることがある点とその対策について解説している。&lt;/p&gt;
&lt;h3 id="net-mvvm-communitytoolkit.mvvm-ver8-preview3-qiita"&gt;.NET用 MVVMライブラリ CommunityToolkit.Mvvm ver8 (preview3) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6"&gt;https://qiita.com/hqf00342/items/d12bb669d1ac6fed6ab6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit 8.0.0 Preview 3 の新しい MVVM サポートを利用する方法についての記事。&lt;/p&gt;
&lt;h3 id="net-framework-april-2022-cumulative-update-preview"&gt;.NET Framework April 2022 Cumulative Update Preview&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/framework-april-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年4月の累積アップデートのプレビューがリリースされた。&lt;/p&gt;
&lt;p&gt;3rd パーティーのアプリケーションがディレクトリーサービスを呼び出した場合にアクセス違反となる不具合が修正されている。&lt;/p&gt;
&lt;h3 id="combining-bearer-token-and-cookie-authentication-in-asp.net"&gt;Combining Bearer Token and Cookie Authentication in ASP.NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET"&gt;https://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core アプリケーションでの認証に Bearer トークン方式と Cookie を使用する方式の両対応を行う方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-3"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/rahulrai_in/status/1517408881957294081?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Docker?ref_src=twsrc%5Etfw"&gt;&amp;#64;Docker&lt;/a&gt; now supports heredocs&lt;br&gt;&lt;br&gt;I wrote a &lt;a href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw"&gt;&amp;#64;dotnet&lt;/a&gt; API inside a Dockerfile and it works 🤯&lt;br&gt;&lt;br&gt;Thanks for the tip &lt;a href="https://twitter.com/iximiuz?ref_src=twsrc%5Etfw"&gt;&amp;#64;iximiuz&lt;/a&gt; &lt;a href="https://twitter.com/shanselman?ref_src=twsrc%5Etfw"&gt;&amp;#64;shanselman&lt;/a&gt; &lt;a href="https://twitter.com/davidfowl?ref_src=twsrc%5Etfw"&gt;&amp;#64;davidfowl&lt;/a&gt; &lt;a href="https://twitter.com/aspnetcore_news?ref_src=twsrc%5Etfw"&gt;&amp;#64;aspnetcore_news&lt;/a&gt; &lt;a href="https://t.co/iFtJW4VZjg"&gt;pic.twitter.com/iFtJW4VZjg&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rahul Rai (&amp;#64;rahulrai_in) &lt;a href="https://twitter.com/rahulrai_in/status/1517408881957294081?ref_src=twsrc%5Etfw"&gt;April 22, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dockerfile でヒアドキュメントをサポートしたのでそのままソースコードを書けば、Dockerfile 完結の .NET アプリコンテナーイメージを作れるというネタ。&lt;/p&gt;
&lt;!-- https://twitter.com/sitnikadam/status/1518004664695934977?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Guess what I have just prototyped. (I have left one core for the Task Manager, otherwise it can&amp;#39;t refresh the charts at reasonable rate). &lt;a href="https://t.co/nKS9r4sXm9"&gt;pic.twitter.com/nKS9r4sXm9&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam Sitnik (&amp;#64;SitnikAdam) &lt;a href="https://twitter.com/SitnikAdam/status/1518004664695934977?ref_src=twsrc%5Etfw"&gt;April 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;BenchmarkDotNet でベンチマークを各コアで並列に動かすというプロトタイプを作ったという話。&lt;/p&gt;
&lt;!-- https://twitter.com/buhakmeh/status/1518658195329273856?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did I mention &lt;a href="https://twitter.com/JetBrainsRider?ref_src=twsrc%5Etfw"&gt;&amp;#64;JetBrainsRider&lt;/a&gt; has an amazing file explorer for &lt;a href="https://twitter.com/hashtag/docker?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#docker&lt;/a&gt; containers? &lt;a href="https://t.co/2KIVf3jPFV"&gt;pic.twitter.com/2KIVf3jPFV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Khalid - khalidabuhakmeh&amp;#64;mastodon.social (&amp;#64;buhakmeh) &lt;a href="https://twitter.com/buhakmeh/status/1518658195329273856?ref_src=twsrc%5Etfw"&gt;April 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Rider では Docker コンテナーの中をブラウジングするといった便利機能があるという Tips。(Files タブは&lt;a href="https://www.jetbrains.com/help/rider/Docker.html#interacting-with-containers"&gt;Docker | JetBrains Rider&lt;/a&gt; には書かれていないので比較的最近実装されたのかもしれない)&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="vectorized-memoryextensions.commonprefixlength-by-gfoidl-pull-request-68210-dotnetruntime"&gt;Vectorized MemoryExtensions.CommonPrefixLength by gfoidl · Pull Request #68210 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/68210"&gt;https://github.com/dotnet/runtime/pull/68210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Span 同士で同じプレフィックスの長さを取る &lt;code&gt;MemoryExtensions.CommonPrefixLength&lt;/code&gt; メソッド (.NET 7) をベクトル化して高速化するという PR。&lt;/p&gt;
&lt;h3 id="implement-minimal-ratelimitingmiddleware-by-wtgodbe-pull-request-41008-dotnetaspnetcore"&gt;Implement minimal RateLimitingMiddleware by wtgodbe · Pull Request #41008 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41008"&gt;https://github.com/dotnet/aspnetcore/pull/41008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RateLimiting API を使用した ASP.NET Core 向けのミニマルな RateLimiting ミドルウェアの実装 PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-04-19: .NET 7 Preview 3, MAUI RC1, .NET 6.0.4</title>
			<link>/2022/04/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/19/updates</guid>
			<pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-3.net-blog"&gt;Announcing .NET 7 Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 3 では次のような変更が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NativeAOT の改善&lt;/li&gt;
&lt;li&gt;Observability: アクティビティートレースの状態をサンプラーで変更可能に&lt;/li&gt;
&lt;li&gt;System.Composition.Hosting の API 改善&lt;/li&gt;
&lt;li&gt;Write-Xor-Execute を有効にすることによる起動時間の短縮&lt;/li&gt;
&lt;li&gt;コード生成 (JIT)&lt;/li&gt;
&lt;li&gt;GC リージョンのデフォルト有効化&lt;/li&gt;
&lt;li&gt;X500DistinguishedName の堅牢な生成 API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、Visual Studio 2022 17.2 Preview 3 での動作がテストされているため、使用にはプレビューチャンネルのインストールが推奨される。Visual Studio for Mac での対応は後日となるとのこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#17.2.0-pre.3.0"&gt;Visual Studio 2022 version 17.2 Preview 3.0 | Visual Studio 2022 Preview Release Notes | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-3.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 3 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimal API でのルートハンドラーに対するフィルターやテスタビリティの向上&lt;/li&gt;
&lt;li&gt;MVC と API のコントローラーでの &lt;code&gt;TryParse&lt;/code&gt; による値のバインドのサポート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Results.Stream&lt;/code&gt; のオーバーロード&lt;/li&gt;
&lt;li&gt;HTTP/2 での一つのコネクションに対する複数のストリームがある場合のパフォーマンス向上&lt;/li&gt;
&lt;li&gt;スタートアップ時間計測に使用できる &lt;code&gt;ServerReady&lt;/code&gt; イベント&lt;/li&gt;
&lt;li&gt;開発時例外ページのダークモード対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing-entity-framework-core-7-ef7-preview-3.net-blog"&gt;Announcing Entity Framework Core 7 (EF7) Preview 3 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-3/"&gt;https://devblogs.microsoft.com/dotnet/announcing-entity-framework-7-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entify Framework Core 7 Preview 3 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 3 での改善点として次のものを紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server の INSERT のロジックの改善&lt;/li&gt;
&lt;li&gt;UPDATE/DELETE での RETURNING/OUTPUT 句の使用&lt;/li&gt;
&lt;li&gt;ReaderModificationCommandBatch のリファクタリング&lt;/li&gt;
&lt;li&gt;事前チェックとしての MaxBatchSize の再実装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他、記事では T4 テンプレートを使用したデータベースリバースエンジニアリング/スキャフォールディングについても触れている。&lt;/p&gt;
&lt;h3 id="net-maui-release-candidate-ready-for-cross-platform-app-development.net-blog"&gt;.NET MAUI Release Candidate - Ready for cross-platform app development - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-1/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-rc-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI の RC1 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースから &amp;quot;go live&amp;quot; サポートポリシーが適用され、実運用プロダクトでの使用であっても Microsoft のサポートを受けられるようになる。&lt;/p&gt;
&lt;p&gt;現時点で MAUI の RC1 を使用しての開発には Visual Studio 2022 17.2 Preview 3 が必要となる。Mac 上で開発するにはコマンドラインからインストールするか、今後の Visual Studio for Mac の Preview リリースを待つ必要がある。&lt;/p&gt;
&lt;p&gt;記事では MAUI に含まれるコントロールやテンプレートについて、コントロールのカスタマイズについても触れている。&lt;/p&gt;
&lt;h3 id="net-april-2022-updates.net-6.0.4.net-5.0.16-and.net-3.1.24.net-blog"&gt;.NET April 2022 Updates – .NET 6.0.4, .NET 5.0.16 and, .NET 3.1.24 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-april-2022-updates-net-6-0-4-net-5-0-16-and-net-3-1-24/"&gt;https://devblogs.microsoft.com/dotnet/net-april-2022-updates-net-6-0-4-net-5-0-16-and-net-3-1-24/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の2022年4月更新で .NET 6.0.4, .NET 5.0.16, .NET 3.1.24 がリリースされた。&lt;/p&gt;
&lt;p&gt;セキュリティーの修正はなく、小さな改善や不具合の修正が含まれている。&lt;/p&gt;
&lt;p&gt;また、今回のリリースからサーバーオペレーティングシステム (Windows Server) での Microsoft Update 経由での .NET の更新が可能になった。この機能はオプトインとなるためデフォルトでは自動更新されない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/server-operating-systems-auto-updates/"&gt;.NET Automatic Updates for Server Operating Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="net-framework-april-2022-security-and-quality-rollup-updates"&gt;.NET Framework April 2022 Security and Quality Rollup Updates&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-april-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-april-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework の2022年4月セキュリティーと品質累積アップデートがリリースされた。&lt;/p&gt;
&lt;p&gt;サービス拒否 (DoS) に関するセキュリティー修正といくつかの品質向上とバグ修正が含まれている。&lt;/p&gt;
&lt;h3 id="announcing.net-community-toolkit-v8.0.0-preview-3-ifdef-windows"&gt;Announcing .NET Community Toolkit v8.0.0 Preview 3 - #ifdef Windows&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-3/"&gt;https://devblogs.microsoft.com/ifdef-windows/announcing-net-community-toolkit-v8-0-0-preview-3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Community Toolkit v8.0.0 Preview 3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVVM Toolkit の Source Generator
&lt;ul&gt;
&lt;li&gt;ObservableProperty の partial メソッドによる実装&lt;/li&gt;
&lt;li&gt;コマンド取り消しのサポート&lt;/li&gt;
&lt;li&gt;生成されたプロパティーの変更通知のブロードキャスト&lt;/li&gt;
&lt;li&gt;診断機能の改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;グループ化されたオブザーバブルコレクションの改良&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-9-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 9 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-9/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-9/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 9 がリリースされた。&lt;/p&gt;
&lt;p&gt;引き続き正式版に向けて問題の修正を中心に更新が行われている。&lt;/p&gt;
&lt;h3 id="introducing-central-package-management"&gt;Introducing Central Package Management&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/introducing-central-package-management/"&gt;https://devblogs.microsoft.com/nuget/introducing-central-package-management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet の新機能である一元的なパッケージ管理機能についての記事。&lt;/p&gt;
&lt;p&gt;一元的なパッケージ管理機能が Visual Studio 2022 17.2, .NET SDK 6.0.300, NuGet 6.2.0 以降で使用できるようになった。&lt;/p&gt;
&lt;p&gt;この機能は &lt;code&gt;Directory.Packages.props&lt;/code&gt; というファイルに使用する NuGet パッケージのバージョンを記述しておき、各プロジェクトから参照する場合にはパッケージ名のみを指定することでバージョンを一元的に管理できるといった仕組み。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- Directory.Packages.props --&amp;gt;
&amp;lt;Project&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageVersion Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- ClassLibrary1.csproj --&amp;gt;
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記事では設定の仕方のほか、推移的パッケージのピン止め、パッケージバージョンの上書き、一元的なパッケージ管理機能の無効化などを説明している。&lt;/p&gt;
&lt;h3 id="unity-2021-long-term-support-for-programmers-unity"&gt;Unity 2021 Long Term Support for programmers | Unity&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://unity.com/releases/2021-lts/programming"&gt;https://unity.com/releases/2021-lts/programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unity 2021.3 LTS がリリースされた。&lt;/p&gt;
&lt;p&gt;C# 8 と .NET Standard 2.1 のサポートが追加され、IL2CPP のパフォーマンスも改善されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.unity3d.com/2021.2/Documentation/Manual/dotnetProfileSupport.html"&gt;Unity - Manual:  .NET profile support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお Unity の .NET Framework 4.8 プロファイルは .NET Standard 2.1 を包含するものとなり、純正の .NET Framework 4.8 とは異なる点に注意が必要(Microsoft の .NET Framework 4.8 は .NET Standard 2.1 をサポートしない)。&lt;/p&gt;
&lt;h3 id="cake-v2.2.0-released"&gt;Cake v2.2.0 released&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cakebuildnet.medium.com/cake-v2-2-0-released-74aa5e47f618"&gt;https://cakebuildnet.medium.com/cake-v2-2-0-released-74aa5e47f618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cake 2.2.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;オプトインのスクリプトキャッシュ機能の追加のほか、いくつかのバグ修正や改善が行われている。&lt;/p&gt;
&lt;h3 id="breaking-change-revert-the-console-formatter-default-in.net-6-container-images-issue-216-dotnetannouncements"&gt;Breaking Change: Revert the Console Formatter Default in .NET 6 Container Images · Issue #216 · dotnet/announcements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/announcements/issues/216"&gt;https://github.com/dotnet/announcements/issues/216&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 ではコンテナーイメージ内で実行時にコンソールのロガーはデフォルトで JSON フォーマットで出力するようになっていたが、5月のサービス更新で元に戻す (通常の未指定時と同様のテキスト形式) というアナウンス。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Logging__Console__FormatterName&lt;/code&gt; 環境変数が &lt;code&gt;Json&lt;/code&gt; となっていたものが未設定となるため、今後この挙動を維持したい場合には &lt;code&gt;Logging__Console__FormatterName&lt;/code&gt; に &lt;code&gt;Json&lt;/code&gt; を明示的に指定する必要がある。&lt;/p&gt;
&lt;h3 id="c-11-preview-updates-raw-string-literals-utf-8-and-more"&gt;C# 11 Preview Updates - Raw string literals, UTF-8 and more!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/"&gt;https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# 11 Preview についての記事。&lt;/p&gt;
&lt;p&gt;C# 11 で導入される予定の機能を紹介している。Raw string literals など一部の機能は既に Visual Studio 2022 17.2 Preview 3 または .NET 7 Preview 3 以降で使用できるが、それ以降を予定しているものも多いので注意。対応状況は&lt;a href="https://github.com/dotnet/roslyn/blob/main/docs/Language%20Feature%20Status.md"&gt;Language Feature Status&lt;/a&gt;を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raw string literals
&lt;ul&gt;
&lt;li&gt;いわゆるヒアドキュメント的な文字列を埋め込む記法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UTF-8 文字列リテラル
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte[]&lt;/code&gt; や &lt;code&gt;Span&amp;lt;byte&amp;gt;&lt;/code&gt; といった型へ文字列を代入する形で UTF-8 バイト列となる記法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked&lt;/code&gt; ユーザー定義演算子
&lt;ul&gt;
&lt;li&gt;算術オーバー/アンダーフローの取り扱いが可能になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;構造体の自動デフォルト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Span&lt;/code&gt; のパターンマッチング&lt;/li&gt;
&lt;li&gt;メソッドグループ変換でキャッシュされたデリゲートを使用&lt;/li&gt;
&lt;li&gt;パラメータ null チェックの削除
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt; でパラメータに null がセットされていることをチェックして例外を投げる記法を一旦取り下げ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小文字の型名に関する警告
&lt;ul&gt;
&lt;li&gt;C# ではキーワードに小文字を使用しているため、破壊的変更を防ぐために小文字の型名に対して警告する&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.paranoidcoding.com/2022/04/11/lowercase-type-names.html"&gt;Warning on lower case type names in C# 11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resharper-2022.1-release-candidate-is-out"&gt;ReSharper 2022.1 Release Candidate is out&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/nextversion/"&gt;https://www.jetbrains.com/resharper/nextversion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper 2022.1 Release Candidate がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースではコード解析に関する改善や ASP.NET Core 6 の Minimal API のエンドポイント対応、Visual Studio 内でのデコンパイラーでのメタデータツリービューの追加、その他不具合の修正などが行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1514272680559747082?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 Release Candidate is out. Check out the list of updates and try it for yourself:&lt;a href="https://t.co/uVUkfoYllI"&gt;https://t.co/uVUkfoYllI&lt;/a&gt; &lt;a href="https://t.co/4n1dfRjJCc"&gt;pic.twitter.com/4n1dfRjJCc&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1514272680559747082?ref_src=twsrc%5Etfw"&gt;April 13, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="using.net-to-validate-json-with-json-schema"&gt;Using .NET To Validate JSON with JSON Schema&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/using-dotnet-to-validate-json-with-json-schema"&gt;https://khalidabuhakmeh.com/using-dotnet-to-validate-json-with-json-schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JsonSchema.NET と System.Text.Json で JSON Schema による JSON の検証を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="supercharge-your-git-experience-in-vs"&gt;Supercharge your Git experience in VS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/supercharge-your-git-experience-in-vs/"&gt;https://devblogs.microsoft.com/visualstudio/supercharge-your-git-experience-in-vs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 3 以降で導入されたコミットグラフ機能を有効にすることで Git の操作を高速化できることについての記事。&lt;/p&gt;
&lt;h3 id="streaming-iasyncenumerable-to-rxjs-front-end"&gt;Streaming IAsyncEnumerable to RxJs front-end&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;markotny97/streaming-iasyncenumerable-to-rxjs-front-end-8eb5323ca282"&gt;https://medium.com/&amp;#64;markotny97/streaming-iasyncenumerable-to-rxjs-front-end-8eb5323ca282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; による API からのストリーミングと、フロントエンドで RxJS を使用した処理についての記事。&lt;/p&gt;
&lt;h3 id="mono.cecil2dll-yucchiys-note"&gt;Mono.Cecilを用いて２つのDLLの間の型の差分を出す | Yucchiy's Note&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.yucchiy.com/2022/04/mono-cecil-class-diff/"&gt;https://blog.yucchiy.com/2022/04/mono-cecil-class-diff/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono.Cecil を使用して2つのアセンブリに含まれている型の差分を取得する方法についての記事。&lt;/p&gt;
&lt;h3 id="how-segments-and-regions-differ-in-decommitting-memory-in-the.net-7-gc"&gt;How segments and regions differ in decommitting memory in the .NET 7 GC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://itnext.io/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a"&gt;https://itnext.io/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 で導入される GC のリージョンがセグメントからメモリーをデコミットする挙動についての記事。&lt;/p&gt;
&lt;h3 id="keeping-up-with.net-learning-about-new-features-and-apis"&gt;Keeping up with .NET: learning about new features and APIs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/keeping-up-with-dotnet-learning-about-new-features-and-apis/"&gt;https://andrewlock.net/keeping-up-with-dotnet-learning-about-new-features-and-apis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET の新しい機能や API を学ぶのに役立つリソースの紹介記事。&lt;/p&gt;
&lt;h3 id="hybrid-app-development-with-blazorwebview-blazor-lipstick-for-the-desktop-pig"&gt;Hybrid App Development With BlazorWebView — Blazor Lipstick For The Desktop Pig&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;devmawin/software-development-and-hybrid-app-development-with-blazorwebview-blazor-59297f399811"&gt;https://medium.com/&amp;#64;devmawin/software-development-and-hybrid-app-development-with-blazorwebview-blazor-59297f399811&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MAUI で WebView を使用する Blazor (Blazor Hybrid) アプリについての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-mvcidentity-qiita"&gt;メール検証も！ASP.NET Core MVCに認証機能Identityを実装する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/YouKnow/items/f1b1946509dba07be439"&gt;https://qiita.com/YouKnow/items/f1b1946509dba07be439&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core MVC と ASP.NET Core Identity、SendGrid を使用してメール確認付き認証を実装するという記事。&lt;/p&gt;
&lt;h3 id="qiita"&gt;配列のアクセス方法による速さの違い - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Hotari/items/9a69c4e02015c02d05ef"&gt;https://qiita.com/Hotari/items/9a69c4e02015c02d05ef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配列に対するアクセス方法(インデックスの指定やポインター)による速度の違いについての記事。&lt;/p&gt;
&lt;p&gt;コメントでメモリーのアドレッシングが異なることで結果が変わってきているのではないかといったことも触れられている。&lt;/p&gt;
&lt;h3 id="net6-qiita"&gt;.NET6 単一ファイル時の実行パス取得について - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/MinadukiSekina/items/59eb7e67018037092fc6"&gt;https://qiita.com/MinadukiSekina/items/59eb7e67018037092fc6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PublishSingleFile で単一実行ファイルとして生成したときに Assembly.Location を使用できない制限についての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/deploying/single-file/warnings/il3000"&gt;IL3000: 単一ファイルとして発行するときにアセンブリ ファイル パスにアクセスしません (コード分析) - .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cmonacoeditor-qiita"&gt;C#でMonacoEditor - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/Yuki4/items/48c242c7795b43c2f34a"&gt;https://qiita.com/Yuki4/items/48c242c7795b43c2f34a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WPF アプリケーションで Monaco Editor (Visual Studio Code のエディター部分) を埋め込んで使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="google-colaboratory.net6.0-qiita"&gt;Google Colaboratoryで.NET6.0を使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/14ffc4f8420e2a868241"&gt;https://qiita.com/karuakun/items/14ffc4f8420e2a868241&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Colaboratory で .NET Interactive をインストールすることで .NET 6 を使用するという方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/davidfowl/status/1514812362632491012?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;In the early days of  .NET Core, it was very difficult to get internal teams at Microsoft to deploy it to production. It was too new and people didn&amp;#39;t know if it was &amp;quot;real&amp;quot; (this skepticism existed externally as well). &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1514812362632491012?ref_src=twsrc%5Etfw"&gt;April 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET Core を Microsoft の内部チームで運用環境に展開した話のスレッド。機械翻訳でざっくりと…。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET Core が出た初期のころはあまりに新しすぎて「リアル」だと思われていなかった (外部からも)&lt;/li&gt;
&lt;li&gt;そこで社内の利用者向けに小さな移行チームを立て問題を乗り越えたが、ギャップは多かった&lt;/li&gt;
&lt;li&gt;.NET Framework への沢山の内部依存があった(今もある)。エコシステムを立ち上げるのは困難で .NET Core への移植の手助けをする必要があった。そして多くのチームは .NET Core に移植されていない NuGet パッケージにも依存していた&lt;/li&gt;
&lt;li&gt;そのようにしてギャップを埋めていくと関心が集まってきて、Bing のようなアーリーアダプターが現れ、パフォーマンス向上を広めるの一役買った。最初の利用者を獲得するのは難しく、ほとんどのユーザーは枯れたものを使いたがる&lt;/li&gt;
&lt;li&gt;新しい API や Span といった作業をする前であっても、社内のチームは .NET Core に移行することでパフォーマンス向上やコスト削減できているという話が広まった&lt;/li&gt;
&lt;li&gt;Microservices やコンテナー、Kubernetes でモダナイゼーションを行っているチームもあったのでパフォーマンスではなくモダナイゼーションの一部として採用される例もあった&lt;/li&gt;
&lt;li&gt;.NET Core 3.1 以降、多くのチームが採用してパフォーマンス向上が続き、移行により 5-30% の改善が見られた (CPU, メモリー、スループット、レイテンシー)。さらに多くのチームが移行の手助けを望んだ&lt;/li&gt;
&lt;li&gt;その頃には移行を経験したチームも揃い、事例も多くなってきたので移行に関する話が簡単になってきた。内部向けに .NET Core への移行コミュニティーを作った&lt;/li&gt;
&lt;li&gt;今では移行したいチームが多すぎて手が回らないし、今でも .NET Core への移行とモダナイゼーションによってパフォーマンスが向上したというメールを受け取る&lt;/li&gt;
&lt;li&gt;前年の影響が表れるには数年かかることもあるので楽しみながら .NET を使おう&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- https://twitter.com/xoofx/status/1514516455949316099?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Unwinding a stack is actually a fundamental piece of stack &amp;amp; codegen cooperation to allow to recover at runtime a callstack, or chained exception handlers...etc. At any instruction point in a function, the callstack crawler needs to recover the chain of calls &lt;a href="https://t.co/Z5XfuFLNEy"&gt;pic.twitter.com/Z5XfuFLNEy&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1514516455949316099?ref_src=twsrc%5Etfw"&gt;April 14, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;スタックフレームの巻き戻しについての図解。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-memoryextensions.commonprefixlength-by-stephentoub-pull-request-67929-dotnetruntime"&gt;Add MemoryExtensions.CommonPrefixLength by stephentoub · Pull Request #67929 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67929"&gt;https://github.com/dotnet/runtime/pull/67929&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;二つの &lt;code&gt;Span&lt;/code&gt; などを比較して先頭の同じ要素の数を返す &lt;code&gt;MemoryExtensions.CommonPrefixLength&lt;/code&gt; API を追加する PR。&lt;/p&gt;
&lt;h3 id="support-built-in-unsigned-right-shift-operators.by-alekseyts-pull-request-60560-dotnetroslyn"&gt;Support built-in unsigned right shift operators. by AlekseyTs · Pull Request #60560 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/60560"&gt;https://github.com/dotnet/roslyn/pull/60560&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;符号なし右シフト演算子 (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) のサポートを追加する PR。&lt;/p&gt;
&lt;h3 id="introduce-ibindablefromhttpcontexttself-by-damianedwards-pull-request-41100-dotnetaspnetcore"&gt;Introduce IBindableFromHttpContext&amp;lt;TSelf&amp;gt; by DamianEdwards · Pull Request #41100 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/41100"&gt;https://github.com/dotnet/aspnetcore/pull/41100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;static abstract を利用して、Minimal API などでカスタムバインダーを見つけ・使用しやすくするという PR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/aspnetcore/issues/40927"&gt;Introduce interface with static abstract BindAsync method for custom bound parameters of route handler delegates · Issue #40927 · dotnet/aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="http2-output-processing-make-over-by-davidfowl-pull-request-40925-dotnetaspnetcore"&gt;HTTP/2 output processing make over by davidfowl · Pull Request #40925 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40925"&gt;https://github.com/dotnet/aspnetcore/pull/40925&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 の出力処理にロックの代わりにキューを使用することでパフォーマンスを向上させるという PR。&lt;/p&gt;
&lt;h3 id="use.u8-in-dotnetruntime-by-stephentoub-pull-request-67733-dotnetruntime"&gt;Use &amp;quot;...&amp;quot;u8 in dotnet/runtime by stephentoub · Pull Request #67733 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67733"&gt;https://github.com/dotnet/runtime/pull/67733&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Encoding.UTF8.GetBytes&lt;/code&gt; を &lt;code&gt;u8&lt;/code&gt; サフィックスを持つ UTF-8 文字列に置き換えるという PR (ドラフト)。&lt;/p&gt;
&lt;h3 id="initial.net-framework-arm64-support-by-jaredpar-pull-request-60735-dotnetroslyn"&gt;Initial .NET Framework ARM64 support by jaredpar · Pull Request #60735 · dotnet/roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/pull/60735"&gt;https://github.com/dotnet/roslyn/pull/60735&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Roslyn で ARM64 の .NET Framework のバイナリの生成をサポートするという PR。(親 Issue によると PDB のサポートの都合もありそう)&lt;/p&gt;
&lt;h3 id="implement-tar-apis-by-carlossanlop-pull-request-67883-dotnetruntime"&gt;Implement Tar APIs by carlossanlop · Pull Request #67883 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/67883"&gt;https://github.com/dotnet/runtime/pull/67883&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tar アーカイブ形式のサポートを追加する PR。&lt;code&gt;System.Formats.Tar&lt;/code&gt; 名前空間になる模様。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-04-12: ReSharper 2021.3.4, .NET Framework End of Support, Visual Studio 2022 for Mac Preview 8</title>
			<link>/2022/04/12/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/04/12/updates</guid>
			<pubDate>Tue, 12 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="resharper-and.net-tools-2021.3.4-has-been-released-the.net-tools-blog"&gt;ReSharper and .NET Tools 2021.3.4 has been released! | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/30/resharper-2021-3-4/"&gt;https://blog.jetbrains.com/dotnet/2022/03/30/resharper-2021-3-4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ReSharper と .NET ツールの 2021.3.4 がリリースされた。&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.2 Preview 2 との統合に関する問題が修正されている。Rider も同バージョンへのアップデートがあるがリリースパイプラインの都合によるもので変更はないとのこと。&lt;/p&gt;
&lt;h3 id="net-framework-4.5.2-4.6-and-4.6.1-will-reach-end-of-support-on-apr-26-2022"&gt;.NET Framework 4.5.2, 4.6, and 4.6.1 will reach End of Support on Apr 26, 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-framework-45-46-461-end-of-support/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-framework-45-46-461-end-of-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET Framework 4.5.2, 4.6, 4.6.1 が2022年4月26日にサポート終了することについての案内。&lt;/p&gt;
&lt;p&gt;引き続き .NET Framework のサポート(セキュリティー修正など)を受けるには .NET Framework 4.6.2 または 4.8 への移行が必要となる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/net-framework-4-5-2-4-6-4-6-1-will-reach-end-of-support-on-april-26-2022/"&gt;.NET Framework 4.5.2, 4.6, 4.6.1 will reach End of Support on April 26, 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-8"&gt;Visual Studio 2022 for Mac Preview 8&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-8/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-8/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac Preview 8 がリリースされた。&lt;/p&gt;
&lt;p&gt;機能の追加などはなく、多くの小さな UI の修正やキーバインドの修正などが行われている。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="high-performance-udp-sockets-in.net-6-enclave"&gt;High Performance UDP sockets in .NET 6 | Enclave&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://enclave.io/high-performance-udp-sockets-net6/"&gt;https://enclave.io/high-performance-udp-sockets-net6/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-april-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | April 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/04/04/net-annotated-monthly-april-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/04/04/net-annotated-monthly-april-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="rllibc-qiita"&gt;RLlibで強化学習したモデルをC#で使う - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/oshimazakura/items/b906a75242e84c331ce9"&gt;https://qiita.com/oshimazakura/items/b906a75242e84c331ce9&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="mastering-blazor-part-1-dom-integration"&gt;Mastering Blazor - Part 1: DOM Integration&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/florianrappl/mastering-blazor-part-1-dom-integration-5591"&gt;https://dev.to/florianrappl/mastering-blazor-part-1-dom-integration-5591&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="milestone-a-million-downloads-for-videolan-packages-in-the.net-ecosystem"&gt;Milestone: A million downloads for VideoLAN packages in the .NET ecosystem&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://mfkl.github.io/2022/04/05/a-million-downloads.html"&gt;https://mfkl.github.io/2022/04/05/a-million-downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="imagesharp-2.0.0"&gt;ImageSharp 2.0.0が機能満載でリリース&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/news/2022/04/imagesharp-2-release/"&gt;https://www.infoq.com/jp/news/2022/04/imagesharp-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="milestone-a-million-downloads-for-videolan-packages-in-the.net-ecosystem-1"&gt;Milestone: A million downloads for VideoLAN packages in the .NET ecosystem&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;Martz2804/milestone-a-million-downloads-for-videolan-packages-in-the-net-ecosystem-71e3ed3b8ad1"&gt;https://medium.com/&amp;#64;Martz2804/milestone-a-million-downloads-for-videolan-packages-in-the-net-ecosystem-71e3ed3b8ad1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cpu-usage-tool-improvements"&gt;CPU Usage Tool Improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/cpu-usage-tool-improvements/"&gt;https://devblogs.microsoft.com/visualstudio/cpu-usage-tool-improvements/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bouncycastle.net-qiita"&gt;BouncyCastle(.NET)を使ってみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/The-Fujimon-Company/items/504c20ed061141288f16"&gt;https://qiita.com/The-Fujimon-Company/items/504c20ed061141288f16&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-6-c-twitter-api-v2-oauth-2.0"&gt;.NET 6 (C#) で Twitter API v2 の OAuth 2.0 を試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/snowcait/articles/32c351553ae67c"&gt;https://zenn.dev/snowcait/articles/32c351553ae67c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net3-qiita"&gt;【保存版】ASP.​NETアプリのモダナイゼーション戦略のクラウド3社比較 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/komiyasa/items/2d5b17c5db3e80b4678b"&gt;https://qiita.com/komiyasa/items/2d5b17c5db3e80b4678b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="faster.net-development-on-kubernetes-with-skaffold"&gt;Faster .NET development on Kubernetes with Skaffold&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;meronz/faster-net-development-on-kubernetes-with-skaffold-38b1d261eed5"&gt;https://medium.com/&amp;#64;meronz/faster-net-development-on-kubernetes-with-skaffold-38b1d261eed5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="whats-up-with-timezoneinfo-on.net-6-part-2"&gt;What’s up with TimeZoneInfo on .NET 6? (Part 2)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2022/03/27/whats-up-with-timezoneinfo-on-net-6-part-2/"&gt;https://codeblog.jonskeet.uk/2022/03/27/whats-up-with-timezoneinfo-on-net-6-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="introducing-akka.hosting-hoconless-akka.net-configuration-and-runtime-petabridge"&gt;Introducing Akka.Hosting - HOCONless Akka.NET Configuration and Runtime | Petabridge&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://petabridge.com/blog/intro-akka-hosting/"&gt;https://petabridge.com/blog/intro-akka-hosting/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="git-credential-manager-authentication-for-everyone-the-github-blog"&gt;Git Credential Manager: authentication for everyone | The GitHub Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.blog/2022-04-07-git-credential-manager-authentication-for-everyone/"&gt;https://github.blog/2022-04-07-git-credential-manager-authentication-for-everyone/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="tmdsbuild-image-a.net-global-tool-to-create-container-images-from.net-projects-because-life-is-too-short-to-write-dockerfiles"&gt;tmds/build-image: A .NET global tool to create container images from .NET projects, because life is too short to write Dockerfiles.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tmds/build-image"&gt;https://github.com/tmds/build-image&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="nenonaninutapper-a-tool-transpiling-c-type-into-typescript-type"&gt;nenoNaninu/Tapper: A Tool Transpiling C# Type into TypeScript Type.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nenoNaninu/Tapper"&gt;https://github.com/nenoNaninu/Tapper&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.neno.dev/entry/2022/03/31/213837"&gt;【C#】 C#の型定義からTypeScriptの型定義を生成するTapperというライブラリ/CLI Toolをリリースしました。 - ねののお庭。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="itn3000cs2mermaid-csharp-source-to-mermaid-diagram"&gt;itn3000/Cs2Mermaid: CSharp source to mermaid diagram&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/itn3000/Cs2Mermaid"&gt;https://github.com/itn3000/Cs2Mermaid&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jcouv/status/1511067391827976193?s=12&amp;t=d25OhHzd0Dr-rm6M5g9i_Q --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We merged a preview C# 11 feature into VS 17.3: UTF8 string literals and string conversions to `byte[]`/`Span&amp;lt;byte&amp;gt;`/`ReadOnlySpan&amp;lt;byte&amp;gt;`.&lt;br&gt;&lt;br&gt;For instance: &lt;br&gt;`var span = &amp;quot;world&amp;quot;u8;` &lt;br&gt;`Span&amp;lt;byte&amp;gt; span = &amp;quot;hello&amp;quot;;`&lt;br&gt;&lt;br&gt;Spec: &lt;a href="https://t.co/42zfKiqXVW"&gt;https://t.co/42zfKiqXVW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julien Couvreur (&amp;#64;jcouv) &lt;a href="https://twitter.com/jcouv/status/1511067391827976193?ref_src=twsrc%5Etfw"&gt;April 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/egorbo/status/1510628572406370314?s=12&amp;t=oDWSFfudP_C3buQYkxi4UA --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;OSR and QJFL are now enabled by default in .NET 7.0 &lt;a href="https://t.co/oIu6GDrVIR"&gt;https://t.co/oIu6GDrVIR&lt;/a&gt; tldr: noticeably faster startup (up to 25% faster) for desktop and web apps. Our web benchmarks already show nice improvements around &amp;quot;Time to process first request&amp;quot; &lt;a href="https://t.co/OPnub6z5Od"&gt;pic.twitter.com/OPnub6z5Od&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (&amp;#64;EgorBo) &lt;a href="https://twitter.com/EgorBo/status/1510628572406370314?ref_src=twsrc%5Etfw"&gt;April 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/davidfowl/status/1509273312081240064?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Lots of progress on http/2 performance improvements. Initial benchmark with 70 concurrent requests on a single connection show a ~240% improvement 🔥 &lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AspNetCore?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#AspNetCore&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Fowler 🇧🇧🇺🇸 (&amp;#64;davidfowl) &lt;a href="https://twitter.com/davidfowl/status/1509273312081240064?ref_src=twsrc%5Etfw"&gt;March 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/xoofx/status/1511372676073459713?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Unity is using a source based package model unlike NuGet, and we often get questions from our users:&lt;br&gt;&lt;br&gt;📦Why Unity is not using NuGet for their own packages?&lt;br&gt;&lt;br&gt;I tried to answer this question in this forum post:&lt;a href="https://t.co/I6PHitzvmC"&gt;https://t.co/I6PHitzvmC&lt;/a&gt; &lt;a href="https://t.co/vuKcwWPC4c"&gt;pic.twitter.com/vuKcwWPC4c&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alexandre Mutel (&amp;#64;xoofx) &lt;a href="https://twitter.com/xoofx/status/1511372676073459713?ref_src=twsrc%5Etfw"&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-31: .NET 5.0 End of Support, gRPC v1.45.0, System.CommandLine 2.0 Beta 3</title>
			<link>/2022/03/31/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/31/updates</guid>
			<pubDate>Thu, 31 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;p&gt;お知らせ: 今月と来月はいろいろな都合により縮退運転気味(一部の紹介やリンクの羅列による紹介)となってしまいますが何卒よろしくお願いします。&lt;/p&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="net-5.0-will-reach-end-of-support-on-may-08-2022"&gt;.NET 5.0 will reach End of Support on May 08, 2022&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-5-end-of-support-update/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 5 が 2022 年 5 月 8 日にサポートが終了することについてのアナウンス。&lt;/p&gt;
&lt;p&gt;5月以降セキュリティー修正を含む更新を受け取りたい場合には .NET 6 への移行が推奨される。記事ではプロジェクトの更新と開発環境の更新について触れている。&lt;/p&gt;
&lt;h3 id="release-release-v1.45.0-grpcgrpc"&gt;Release Release v1.45.0 · grpc/grpc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc/releases/tag/v1.45.0"&gt;https://github.com/grpc/grpc/releases/tag/v1.45.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC v1.45.0 (NuGet パッケージでは 2.45.0) がリリースされた。&lt;/p&gt;
&lt;p&gt;このバージョンでは .NET 向けの変更として Streaming API のインターフェースの WriteAsync に CancellationToken を受けとるオーバーロードが追加されたこと(ただし C-core ではサポートされない)、nullable に関する修正が含まれている。&lt;/p&gt;
&lt;h3 id="announcing-system.commandline-2.0-beta-3-issue-1613-dotnetcommand-line-api"&gt;Announcing System.CommandLine 2.0 Beta 3 · Issue #1613 · dotnet/command-line-api&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/command-line-api/issues/1613"&gt;https://github.com/dotnet/command-line-api/issues/1613&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.CommandLine 2.0 Beta 3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要なインターフェイスの削除&lt;/li&gt;
&lt;li&gt;コマンドラインの構成のバリデーションがオンデマンドに&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SymbolSet&lt;/code&gt; の削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[debug]&lt;/code&gt; ディレクティブの削除&lt;/li&gt;
&lt;li&gt;シンプルなバリデーター API&lt;/li&gt;
&lt;li&gt;トリミングのサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="task.delay"&gt;Task.Delayの精度&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mono_matsu/articles/544e3384ea4a70"&gt;https://zenn.dev/mono_matsu/articles/544e3384ea4a70&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="taurus.net-qiita"&gt;Taurus を使って .NET のテストプロジェクトを対象にロードテストを実施する - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/e254bcbb7dcc61a4ca5d"&gt;https://qiita.com/karuakun/items/e254bcbb7dcc61a4ca5d&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="creating-a-menu-bar-ui-with.net-maui-preview-14"&gt;Creating a Menu Bar UI with .NET MAUI Preview 14&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/creating-a-menu-bar-ui-with-net-maui-preview-14-fdo"&gt;https://dev.to/syncfusion/creating-a-menu-bar-ui-with-net-maui-preview-14-fdo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-event-await"&gt;C# の Event を await する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/tan_y/articles/2d0c15b21c5a8c"&gt;https://zenn.dev/tan_y/articles/2d0c15b21c5a8c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="go-to-definition-improvements-for-external-source-in-roslyn"&gt;Go To Definition improvements for external source in Roslyn&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/"&gt;https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="signalr-add-client-return-results-by-brennanconroy-pull-request-40811-dotnetaspnetcore"&gt;[SignalR] Add client return results by BrennanConroy · Pull Request #40811 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40811"&gt;https://github.com/dotnet/aspnetcore/pull/40811&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-qiita"&gt;[C#] 固定長配列を持つ構造体の取り扱い方 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/02ee4fa3b200874014e1"&gt;https://qiita.com/radian-jp/items/02ee4fa3b200874014e1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-segments-and-regions-differ-in-decommitting-memory-in-the.net-7-gc"&gt;How segments and regions differ in decommitting memory in the .NET 7 GC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://maoni0.medium.com/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a"&gt;https://maoni0.medium.com/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="copy-chmod-reduced-the-size-of-my-container-image-by-35"&gt;&lt;code&gt;COPY --chmod&lt;/code&gt; reduced the size of my container image by 35%&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.vamc19.dev/posts/dockerfile-copy-chmod/"&gt;https://blog.vamc19.dev/posts/dockerfile-copy-chmod/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework"&gt;Tracking down a hanging xUnit test in CI: building a custom Test Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework/"&gt;https://andrewlock.net/tracking-down-a-hanging-xunit-test-in-ci-building-a-custom-test-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="github-essentials-with-rider-the.net-tools-blog"&gt;GitHub Essentials with Rider | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/28/github-essentials-with-rider/"&gt;https://blog.jetbrains.com/dotnet/2022/03/28/github-essentials-with-rider/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="looking-for-errors-in-the-c-code-of-the-eto.forms-gui-framework"&gt;Looking for errors in the C# code of the Eto.Forms GUI framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/pvs-studio/looking-for-errors-in-the-c-code-of-the-eto-forms-gui-framework-7cbae564a1d4"&gt;https://medium.com/pvs-studio/looking-for-errors-in-the-c-code-of-the-eto-forms-gui-framework-7cbae564a1d4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running"&gt;Just because you stopped waiting for it, doesn't mean the Task stopped running&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running/"&gt;https://andrewlock.net/just-because-you-stopped-waiting-for-it-doesnt-mean-the-task-stopped-running/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="what-is-pubsub-and-how-to-apply-it-in-c.net-to-build-a-chat-app"&gt;What is pub/sub and how to apply it in C# .NET to build a chat app&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/ablydev/how-to-use-pubsub-in-c-net-6-to-build-a-chat-app-1ok7"&gt;https://dev.to/ablydev/how-to-use-pubsub-in-c-net-6-to-build-a-chat-app-1ok7&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="c-nullef-core-dbsett-qiita"&gt;C# null許容参照型を有効にした場合のEF Core DbSetTの書き方 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yohskeey/items/6e9e5d1f140558d37c99"&gt;https://qiita.com/yohskeey/items/6e9e5d1f140558d37c99&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-few-words-about-the-implementation-of-listt-in-c"&gt;A few words about the implementation of ListT in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wojciechowskapaula/a-few-words-about-the-implementation-of-list-in-c-2h8j"&gt;https://dev.to/wojciechowskapaula/a-few-words-about-the-implementation-of-list-in-c-2h8j&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="imagesharp-2.0.0-the-feature-packed-release"&gt;ImageSharp 2.0.0: the Feature-Packed Release&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/news/2022/03/imagesharp-2-release/"&gt;https://www.infoq.com/news/2022/03/imagesharp-2-release/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="httpclient-mocking-c"&gt;HTTPClient Mocking — C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pritompurkayasta.medium.com/httpclient-mocking-c-f452909a987c"&gt;https://pritompurkayasta.medium.com/httpclient-mocking-c-f452909a987c&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="linq-to-objects3"&gt;LINQ to Objectsを使う前におさえておくべき3つのこと&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/nuits_jp/articles/introduction-linq-to-objects"&gt;https://zenn.dev/nuits_jp/articles/introduction-linq-to-objects&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="asp.net-core-blazor-server"&gt;ASP.NET Core Blazor Server でクレームベースの承認とポリシーベースの承認をする&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/add-policybaseauth-and-claimbaseauth"&gt;https://zenn.dev/okazuki/articles/add-policybaseauth-and-claimbaseauth&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="annotations-frameworkcaws-lambda-qiita"&gt;Annotations Frameworkを使って、C#でのAWS Lambda 関数実装をもっと楽にしよう - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/bc8f3dd029402ba667f6"&gt;https://qiita.com/karuakun/items/bc8f3dd029402ba667f6&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dictionary-implementation-in-c"&gt;Dictionary implementation in C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/wojciechowskapaula/dictionary-implementation-in-c-50j1"&gt;https://dev.to/wojciechowskapaula/dictionary-implementation-in-c-50j1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="kekyocenterclr.relaxversioner-an-easy-full-automatic-git-based-version-inserter-for.net-6-5.net-core.net-framework"&gt;kekyo/CenterCLR.RelaxVersioner: An easy, full-automatic, git based version inserter for .NET 6, 5/.NET Core/.NET Framework.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/kekyo/CenterCLR.RelaxVersioner"&gt;https://github.com/kekyo/CenterCLR.RelaxVersioner&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozy_kekyo/an-easy-way-to-practice-version-embedding-on-net-45h8"&gt;An easy way to practice version embedding on .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xamlanimatedgifwpfanimatedgif-a-simple-library-to-display-animated-gif-images-in-wpf-usable-in-xaml-or-in-code"&gt;XamlAnimatedGif/WpfAnimatedGif: A simple library to display animated GIF images in WPF, usable in XAML or in code.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/XamlAnimatedGif/WpfAnimatedGif"&gt;https://github.com/XamlAnimatedGif/WpfAnimatedGif&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tat_tt/items/fc04ccbcbba7a5135ce7"&gt;WPFでGIF画像を簡単に表示するライブラリ「WPF Animated GIF」を使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stevesandersonmsdotnet-wasi-sdk-packages-for-building.net-projects-as-standalone-wasi-compliant-modules"&gt;SteveSandersonMS/dotnet-wasi-sdk: Packages for building .NET projects as standalone WASI-compliant modules&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk"&gt;https://github.com/SteveSandersonMS/dotnet-wasi-sdk&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="vsadovnonblocking-implementation-of-a-lock-free-dictionary-on.net"&gt;VSadov/NonBlocking: Implementation of a lock-free dictionary on .Net.&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/VSadov/NonBlocking"&gt;https://github.com/VSadov/NonBlocking&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://twitter.com/v_sadov/status/1505580033942822913?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Updated NonBlocking Dictionary to 2.0:&lt;br&gt;- performance improvements&lt;br&gt;- updated API surface to match ConcurrentDictionary in net5.0&lt;br&gt;- now targeting netstandard2.1&lt;br&gt; &lt;a href="https://t.co/TzQ3NjJzFF"&gt;https://t.co/TzQ3NjJzFF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vladimir Sadov 🌻 (&amp;#64;v_sadov) &lt;a href="https://twitter.com/v_sadov/status/1505580033942822913?ref_src=twsrc%5Etfw"&gt;March 20, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jeffhollan/status/1505215044367265794?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;PSA to all those .NET users of &lt;a href="https://twitter.com/AzureFunctions?ref_src=twsrc%5Etfw"&gt;&amp;#64;AzureFunctions&lt;/a&gt; : Extended support for Microsoft .NET Core 3.1 will end on 3 December 2022 &lt;a href="https://t.co/BrzZqyzxl4"&gt;https://t.co/BrzZqyzxl4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeff Hollan (&amp;#64;jeffhollan) &lt;a href="https://twitter.com/jeffhollan/status/1505215044367265794?ref_src=twsrc%5Etfw"&gt;March 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-19: .NET 7 Preview 2, .NET MAUI Preview 14, Visual Studio 25th Anniversary</title>
			<link>/2022/03/19/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/19/updates</guid>
			<pubDate>Sat, 19 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="announcing.net-7-preview-2-the-new-new-experience.net-blog"&gt;Announcing .NET 7 Preview 2 - The New, 'New' Experience - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 2 がリリースされた。&lt;/p&gt;
&lt;p&gt;Preview 2 では Regex ソースジェネレーター、新しい &lt;code&gt;dotnet new&lt;/code&gt; CLI 体験、NativeAOT のメインラインへの取り込みの進行などが含まれている他、ランタイムや API に様々な改善が行われている。&lt;/p&gt;
&lt;p&gt;.NET SDK のコマンドライン周りにも改善が入ったことでタブ補完 (PowerShell, bash, zsh, fish) に対応したとのこと。&lt;/p&gt;
&lt;h3 id="asp.net-core-updates-in.net-7-preview-2.net-blog"&gt;ASP.NET Core updates in .NET 7 Preview 2 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/"&gt;https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 Preview 2 での ASP.NET Core のアップデートについての記事。&lt;/p&gt;
&lt;p&gt;記事では次のアップデートについて触れている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コントローラーのアクションのパラメーター値として DI される値の推測 (Minimal API 同様 &lt;code&gt;[FromService]&lt;/code&gt; が不要となる)&lt;/li&gt;
&lt;li&gt;SignalR の Hub メソッドの DI サポート&lt;/li&gt;
&lt;li&gt;Minimal API でのデスクリプションとサマリーのサポート&lt;/li&gt;
&lt;li&gt;Minimal API でのヘッダーとクエリーストリングのバインディングで配列や StringValues のサポート&lt;/li&gt;
&lt;li&gt;Cookie の許可値のカスタマイズ&lt;/li&gt;
&lt;li&gt;IIS でのシャドウコピーのサポート (Experimental)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="announcing.net-maui-preview-14.net-blog"&gt;Announcing .NET MAUI Preview 14 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-maui-preview-14/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-maui-preview-14/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI Preview 14 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは多くの問題や改善が行われたほか、デスクトップアプリ向けのメニューバーのサポートが追加された。&lt;/p&gt;
&lt;p&gt;その他記事では Microsoft.Maui.Essentials についても触れている。&lt;/p&gt;
&lt;h3 id="happy-25th-birthday-visual-studio-visual-studio-blog"&gt;Happy 25th birthday Visual Studio! - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/happy-25th-birthday-visual-studio/"&gt;https://devblogs.microsoft.com/visualstudio/happy-25th-birthday-visual-studio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio がリリースされてから25周年という記事。&lt;/p&gt;
&lt;p&gt;25周年を記念してバーチャルイベントが開催されたほか、Swag や Visual Studio 向けの記念テーマなどがリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=idex.vsanniversarythemepack"&gt;Visual Studio 25th Anniversary Theme Pack - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-studio-2022-for-mac-preview-7-visual-studio-blog"&gt;Visual Studio 2022 for Mac Preview 7 - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-7/"&gt;https://devblogs.microsoft.com/visualstudio/visual-studio-2022-for-mac-preview-7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 for Mac 17.0 Preview 7 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは Xamarin のツールサポートが追加され、.NET 6 と Apple Silicon で動作する Azure Functions V4 ツールが含まれている。その他コードの書式設定などの環境設定画面の macOS ネイティブ UI への移行が完了した。&lt;/p&gt;
&lt;h3 id="net-march-2022-updates.net-6.0.3.net-5.0.15-and.net-3.1.23.net-blog"&gt;.NET March 2022 Updates – .NET 6.0.3, .NET 5.0.15 and, .NET 3.1.23 - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/march-2022-updates/"&gt;https://devblogs.microsoft.com/dotnet/march-2022-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6.0.3, .NET 5.0.15, .NET 3.1.23 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは様々な不具合等の修正のほか次の3つの脆弱性の修正が行われている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-8927"&gt;CVE-2020-8927: .NET Remote Code Execution Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Brotli ライブラリーのバッファオーバーランの脆弱性 (.NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-24464"&gt;CVE-2022-24464: .NET Denial of Service Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;HTTP フォームリクエストによって引き起こされる DoS 脆弱性 (.NET 6, .NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-24512"&gt;CVE-2022-24512: .NET Remote Code Execution Vulnerability&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Double のパースに関連するスタックオーバーランの脆弱性 (.NET 6, .NET 5, .NET Core 3.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uno-platform-4.1-30-perf-boost-android-12.net-6-mobile-preview-13-and-more"&gt;Uno Platform 4.1 - 30% Perf Boost, Android 12, .NET 6 Mobile Preview 13 and more&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://platform.uno/blog/uno-platform-4-1-30-perf-boost-android-12-net-6-mobile-preview-13-and-more/"&gt;https://platform.uno/blog/uno-platform-4-1-30-perf-boost-android-12-net-6-mobile-preview-13-and-more/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uno Platform 4.1 がリリースされた。&lt;/p&gt;
&lt;p&gt;パフォーマンスに関する様々な改善、Android 12 のサポートの追加、.NET 6 Mobile Preview 13 (MAUI Preview 13) への対応などが含まれる。&lt;/p&gt;
&lt;h3 id="release-release-v2.44.0-grpcgrpc-dotnet"&gt;Release Release v2.44.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.44.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.44.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (grpc-dotnet) v2.44.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;いくつかの不具合修正とサブチャンネルの呼び出しをトラックするためのインターフェース (&lt;code&gt;ISubchannelCallTracker&lt;/code&gt;) の追加が行われている。&lt;/p&gt;
&lt;h3 id="gnomemonoxamarinmiguel-de-icaza"&gt;GNOMEとMonoとXamarinの開発者Miguel de Icaza（ミゲル・デ・イカザ）氏がマイクロソフト退職を発表&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.publickey1.jp/blog/22/gnomemonoxamarinmiguel_de_icaza.html"&gt;https://www.publickey1.jp/blog/22/gnomemonoxamarinmiguel_de_icaza.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GNOME や Mono、Xamarin の開発者である Miguel de Icaza 氏が Microsoft を退職したことが発表となった。&lt;/p&gt;
&lt;!-- https://twitter.com/migueldeicaza/status/1499926935677321216?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today was my last day at Microsoft. Leaving such a great team was a difficult decision, but the world outside grows bigger and more exciting each day.&lt;br&gt;&lt;br&gt;I plan to make a dent on my open browser tabs, catch up on TikTok and pet projects before starting something new this fall. &lt;a href="https://t.co/mqkwJFDwqx"&gt;pic.twitter.com/mqkwJFDwqx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Miguel de Icaza (&amp;#64;migueldeicaza) &lt;a href="https://twitter.com/migueldeicaza/status/1499926935677321216?ref_src=twsrc%5Etfw"&gt;March 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="resharper-rider-2022.1-eap-5"&gt;ReSharper / Rider 2022.1 EAP 5&lt;/h3&gt;
&lt;p&gt;ReSharper と Rider の 2022.1 EAP5 がリリースされた。&lt;/p&gt;
&lt;p&gt;ReSharper はバグフィックスが主な変更点となり、Rider はリモート開発のサポートや Unity のサポートの向上などが行われている。&lt;/p&gt;
&lt;!-- https://twitter.com/resharper/status/1500772527211225092?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;ReSharper 2022.1 EAP5 is available! As we move closer to the major release this spring, we’re focusing on bug fixes &lt;a href="https://t.co/R3IyuZAmLC"&gt;https://t.co/R3IyuZAmLC&lt;/a&gt; &lt;a href="https://t.co/IRuEBmwHAs"&gt;pic.twitter.com/IRuEBmwHAs&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains ReSharper (&amp;#64;resharper) &lt;a href="https://twitter.com/resharper/status/1500772527211225092?ref_src=twsrc%5Etfw"&gt;March 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/jetbrainsrider/status/1500778946757120000?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Rider 2022.1 EAP5 is here with the remote development feature and a number of bug fixes. Learn more about it and download it here: &lt;a href="https://t.co/uZcuvk8zQg"&gt;https://t.co/uZcuvk8zQg&lt;/a&gt; &lt;a href="https://t.co/ekvnUKUqBE"&gt;pic.twitter.com/ekvnUKUqBE&lt;/a&gt;&lt;/p&gt;&amp;mdash; JetBrains Rider (&amp;#64;JetBrainsRider) &lt;a href="https://twitter.com/JetBrainsRider/status/1500778946757120000?ref_src=twsrc%5Etfw"&gt;March 7, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="logging-grpc-on.net-using-serilog"&gt;Logging gRPC on .NET Using Serilog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;tunadonmez/logging-grpc-on-net-using-serilog-c40a8fbc0426"&gt;https://medium.com/&amp;#64;tunadonmez/logging-grpc-on-net-using-serilog-c40a8fbc0426&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で gRPC サーバーを構築してそのログを Serilog で出力するという構成についての記事。&lt;/p&gt;
&lt;h3 id="building-a-grpc-server-in.net"&gt;Building a gRPC Server in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/sahan/building-a-grpc-server-in-net-52gc"&gt;https://dev.to/sahan/building-a-grpc-server-in-net-52gc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core で gRPC サーバーを実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="xamarin.forms-qiita"&gt;Xamarin.Formsにおけるスクリーンリーダー対応まとめ - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/uhooi/items/ac4945bc3cb6694d5257"&gt;https://qiita.com/uhooi/items/ac4945bc3cb6694d5257&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms におけるスクリーンリーダーの対応状況についての記事。&lt;/p&gt;
&lt;h3 id="mauiavaloniauistyling"&gt;MAUIがリリースされる前にAvaloniaUIのStylingを試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/t13801206/articles/2203-avalonia-comparison-style"&gt;https://zenn.dev/t13801206/articles/2203-avalonia-comparison-style&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia での UI のスタイリングを WPF と比較して紹介する記事。&lt;/p&gt;
&lt;h3 id="mauiavaloniauidi"&gt;MAUIがリリースされる前にAvaloniaUIのDIを試す&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/t13801206/articles/2203-avalonia-comparison-di"&gt;https://zenn.dev/t13801206/articles/2203-avalonia-comparison-di&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avalonia での DI についての記事。&lt;/p&gt;
&lt;h3 id="cancelling-await-calls-in.net-6-with-task.waitasync"&gt;Cancelling await calls in .NET 6 with Task.WaitAsync()&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/cancelling-await-calls-in-dotnet-6-with-task-waitasync/"&gt;https://andrewlock.net/cancelling-await-calls-in-dotnet-6-with-task-waitasync/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 で追加された &lt;code&gt;Task.WaitAsync&lt;/code&gt; メソッドについての記事。&lt;code&gt;Task.WaitAsync&lt;/code&gt; を使用することでタイムアウトを比較的少ないコードで実装できるようになる。&lt;/p&gt;
&lt;h3 id="a-deep-dive-into-the-new-task.waitasync-api-in.net-6"&gt;A deep-dive into the new Task.WaitAsync() API in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/a-deep-dive-into-the-new-task-waitasync-api-in-dotnet-6/"&gt;https://andrewlock.net/a-deep-dive-into-the-new-task-waitasync-api-in-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Task.WaitAsync&lt;/code&gt; メソッドそのものの実装についての解説記事。&lt;/p&gt;
&lt;h3 id="configuring-life-cycle-events-in.net-maui-apps"&gt;Configuring Life Cycle Events in .NET MAUI Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/syncfusion/configuring-life-cycle-events-in-net-maui-apps-38ag"&gt;https://dev.to/syncfusion/configuring-life-cycle-events-in-net-maui-apps-38ag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET MAUI のアプリケーションでライフサイクルイベントを構成する方法ついての記事。&lt;/p&gt;
&lt;h3 id="c-10-priorityqueue-is-here"&gt;C# 10 PriorityQueue is here !&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;dorlugasigal/c-10-priorityqueue-is-here-5067e2628470"&gt;https://medium.com/&amp;#64;dorlugasigal/c-10-priorityqueue-is-here-5067e2628470&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 の PriorityQueue の仕組みと使い方についての記事。&lt;/p&gt;
&lt;h3 id="modelling-workflows-with-finite-state-machines-in.net"&gt;Modelling workflows with Finite State Machines in .NET&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.lloydatkinson.net/posts/2022/modelling-workflows-with-finite-state-machines-in-dotnet/"&gt;https://www.lloydatkinson.net/posts/2022/modelling-workflows-with-finite-state-machines-in-dotnet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stateless というステートマシンを実装するためのライブラリーを使用して有限ステートマシンでワークフローをモデリングするという記事。&lt;/p&gt;
&lt;h3 id="whats-the-maximum-number-of-arguments-for-method-in-c-and-in.net-tabs-over-spaces-by-jiri" x2=""&gt;What’s the maximum number of arguments for method in C# and in .NET? | tabs ↹ over ␣ ␣ ␣ spaces by Jiří&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.tabsoverspaces.com/233892-whats-the-maximum-number-of-arguments-for-method-in-csharp-and-in-net"&gt;https://www.tabsoverspaces.com/233892-whats-the-maximum-number-of-arguments-for-method-in-csharp-and-in-net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# のメソッドの引数は最大いくつにできるのか、という記事。&lt;/p&gt;
&lt;p&gt;記事では T4 で生成したコードをコンパイルしたところ65536個までコンパイルできたが、実際に呼び出せるのは .NET 6.0.2 では8192個までだったとしている。&lt;/p&gt;
&lt;h3 id="executing-code-before-main-in.net-gerald-barre"&gt;Executing code before Main in .NET - Gérald Barré&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/executing-code-before-main-in-dotnet.htm"&gt;https://www.meziantou.net/executing-code-before-main-in-dotnet.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET が Main (エントリーポイント) を呼び出すより前に何らかのコードを実行する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では静的コンストラクタ、モジュール初期化、スタートアップフックを紹介している。&lt;/p&gt;
&lt;h3 id="automate-code-metrics-and-class-diagrams-with-github-actions.net-blog"&gt;Automate code metrics and class diagrams with GitHub Actions - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/automate-code-metrics-and-class-diagrams-with-github-actions/"&gt;https://devblogs.microsoft.com/dotnet/automate-code-metrics-and-class-diagrams-with-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub Actions を使用して自動的にコードメトリクスやクラスダイアグラムを生成する方法についての記事。&lt;/p&gt;
&lt;h3 id="sqliteentityframeworkcoremicrosoft.data.sqlite-qiita"&gt;SQLiteの書き込みを高速にする（EntityFrameworkCoreのMicrosoft.Data.Sqlite版） - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/ShTair/items/47c15fa65c4523b56e91"&gt;https://qiita.com/ShTair/items/47c15fa65c4523b56e91&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;System.Data.SQLite では指定できていたパフォーマンスに影響するオプションと同様のプラグマを Entity Framework Core の SQLite 実装 (Microsoft.Data.Sqlite) でセットする方法ついて。&lt;/p&gt;
&lt;h3 id="entity-framework-core-bulk-insert"&gt;Entity Framework Core で Bulk Insert する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/mono_matsu/articles/40e74c0022b9e6"&gt;https://zenn.dev/mono_matsu/articles/40e74c0022b9e6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core での Bulk Insert についての記事。&lt;/p&gt;
&lt;h3 id="c.net-20-qiita"&gt;C#の進化を垣間見てみよう - .NET 20周年を記念して - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/gushwell/items/df3ef1f0c583feeead75"&gt;https://qiita.com/gushwell/items/df3ef1f0c583feeead75&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# が20年間で変わってきた部分を C# 3.0 のコードを書き換えながら紹介してる記事。&lt;/p&gt;
&lt;h3 id="live-unit-testing-preview-better-and-faster-visual-studio-blog"&gt;Live Unit Testing Preview: Better and Faster - Visual Studio Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/live-unit-testing-preview-better-and-faster/"&gt;https://devblogs.microsoft.com/visualstudio/live-unit-testing-preview-better-and-faster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio Enterprise で提供されているライブユニットテストの新しいビルド体験を提供するプレビュー機能についての記事。&lt;/p&gt;
&lt;h3 id="litedbsqlitec-qiita"&gt;LiteDBとSQLiteのパフォーマンスを計測してみた(C#) - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/KyoheiOkawa/items/903768bec2f801ef3c7c"&gt;https://qiita.com/KyoheiOkawa/items/903768bec2f801ef3c7c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LiteDB (.NET ネイティブなデータベース)と SQLite でのパフォーマンスの比較記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-qiita"&gt;ASP.NET Core開発者ロードマップを日本語訳しました - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/k2491p/items/ac62468260d002cb5fe1"&gt;https://qiita.com/k2491p/items/ac62468260d002cb5fe1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moien Tajik 氏が書いた ASP.NET Core でのアプリケーション開発者として学ぶためのロードマップを日本語訳したもの。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap"&gt;MoienTajik/AspNetCore-Developer-Roadmap: Roadmap to becoming an ASP.NET Core developer in 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="asp.net-core-blazor-server"&gt;ASP.NET Core Blazor Server でオレオレ ログインを作りたい&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/okazuki/articles/signin-blazor-server"&gt;https://zenn.dev/okazuki/articles/signin-blazor-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core Blazor Server で ASP.NET Core Identity や外部の ID プロバイダーを使用した認証を使用しない、独自の認証機構を実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="create-a-custom-github-action-with-c"&gt;Create a Custom GitHub Action with C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ferrywlto.medium.com/create-a-custom-github-action-with-c-b056de359cb5"&gt;https://ferrywlto.medium.com/create-a-custom-github-action-with-c-b056de359cb5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker ベースの GitHub Actions のカスタムアクションを C# で実装する方法についての記事。&lt;/p&gt;
&lt;h3 id="auto-updating-created-updated-and-deleted-timestamps-in-entity-framework.net-core-tutorials"&gt;Auto Updating Created, Updated and Deleted Timestamps In Entity Framework - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/03/16/auto-updating-created-updated-and-deleted-timestamps-in-entity-framework/"&gt;https://dotnetcoretutorials.com/2022/03/16/auto-updating-created-updated-and-deleted-timestamps-in-entity-framework/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で更新日時、削除日時のようなタイムスタンプを自動で更新する方法についての記事。&lt;/p&gt;
&lt;h3 id="using-ef-core-global-query-filters-to-ignore-soft-deleted-entities.net-core-tutorials"&gt;Using EF Core Global Query Filters To Ignore Soft Deleted Entities - .NET Core Tutorials&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dotnetcoretutorials.com/2022/03/17/using-ef-core-global-query-filters-to-ignore-soft-deleted-entities/"&gt;https://dotnetcoretutorials.com/2022/03/17/using-ef-core-global-query-filters-to-ignore-soft-deleted-entities/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で論理削除された要素を常にフィルターするといった方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="github-tackme31howmessy-how-messy-is-your-code"&gt;GitHub - tackme31/howmessy: How messy is your code?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/tackme31/howmessy"&gt;https://github.com/tackme31/howmessy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio の CodeLens 上にコードの複雑度を表示する Visual Studio 拡張。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tackme31/items/dbdc075afaad78cb9c08"&gt;メソッド上にコードの複雑さを表示するVisual Studio拡張機能を作りました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="rome.net-conference-the-background-on-background-tasks-in.net-6"&gt;Rome .NET Conference – The Background on Background Tasks in .NET 6&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://scottsauber.com/2022/03/17/rome-net-conference-the-background-on-background-tasks-in-net-6/"&gt;https://scottsauber.com/2022/03/17/rome-net-conference-the-background-on-background-tasks-in-net-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 6 でのバックグラウンド処理を行う際の手法についてのスライド。&lt;/p&gt;
&lt;h3 id="deep-dive-distributed-tracing"&gt;deep dive distributed tracing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/tanakata/deep-dive-distributed-tracing"&gt;https://www.slideshare.net/tanakata/deep-dive-distributed-tracing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分散トレーシングの仕組みとその表現についてのスライド。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/jamesnk/status/1502449100905906180?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Visual Studio 2022 doesn&amp;#39;t support building .NET 4 and .NET 4.5 libraries. Newtonsoft.Json no builds in VS2022.&lt;br&gt;&lt;br&gt;Should the next version of Newtonsoft.Json drop old, unsupported .NET Framework versions (net20, net40, net45) and require net462 or later? 🤯&lt;a href="https://t.co/DpVpaC3pda"&gt;https://t.co/DpVpaC3pda&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Newton-King ♔ (&amp;#64;JamesNK) &lt;a href="https://twitter.com/JamesNK/status/1502449100905906180?ref_src=twsrc%5Etfw"&gt;March 12, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Visual Studio 2022 は .NET Framework 4, 4.5 をサポートしていないので Json.NET はこれ以降 .NET Framework 4.6.2 以降のサポートにしようと思うがどうかという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="add-stopwatch.getelapsedtime-by-stephentoub-pull-request-66372-dotnetruntime"&gt;Add Stopwatch.GetElapsedTime by stephentoub · Pull Request #66372 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/pull/66372"&gt;https://github.com/dotnet/runtime/pull/66372&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stopwatch.GetTimestamp()&lt;/code&gt; が返す値は環境によって異なり Frequency で割るといった必要があったので、タイムスタンプを直接 &lt;code&gt;TimeSpan&lt;/code&gt; に変換するメソッドを追加するという PR。&lt;/p&gt;
&lt;h3 id="system.linq-work-planned-for.net-7-issue-64601-dotnetruntime"&gt;System.Linq work planned for .NET 7 · Issue #64601 · dotnet/runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/issues/64601"&gt;https://github.com/dotnet/runtime/issues/64601&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET 7 での System.Linq に関するプランニングされた作業の Issue。&lt;/p&gt;
&lt;h3 id="add-grpc-json-transcoding-by-jamesnk-pull-request-40242-dotnetaspnetcore"&gt;Add gRPC JSON transcoding by JamesNK · Pull Request #40242 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40242"&gt;https://github.com/dotnet/aspnetcore/pull/40242&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC のリクエスト/レスポンスを JSON 形式に変換することで Web API として効果する仕組みの提供の PR。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>2022-03-05: Early peek at C# 11 features, 2FA on NuGet.org, ILSpy 7.2</title>
			<link>/2022/03/05/updates</link>
			<description>.NET 関連の情報をほぼ週刊配信</description>
			<author>Mayuki Sawatari</author>
			<enclosure url="/img/logo.png" length="0" type="image" />
			<guid isPermaLink="false">/2022/03/05/updates</guid>
			<pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;!--
# yyyy-MM-dd
## 主なトピックス
## ヘッドライン
## アーティクル、スライドなど
## ライブラリ、リポジトリ、ツールなど
## サイト、ドキュメントなど
### ツイート
## Deep Dive
--&gt;
&lt;h2 id="section"&gt;トピックス&lt;/h2&gt;
&lt;h3 id="early-peek-at-c-11-features.net-blog"&gt;Early peek at C# 11 features - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/"&gt;https://devblogs.microsoft.com/dotnet/early-peek-at-csharp-11-features/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2022 17.1 と .NET SDK 6.0.200 以降で利用できるようになった C# 11 プレビュー機能の紹介記事。&lt;/p&gt;
&lt;p&gt;記事では有効にする方法と次の機能について紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列補完の中の改行&lt;/li&gt;
&lt;li&gt;リストパターン&lt;/li&gt;
&lt;li&gt;パラメーター &lt;code&gt;null&lt;/code&gt; チェック&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="requiring-two-factor-authentication-on-nuget.org-the-nuget-blog"&gt;Requiring two-factor authentication on NuGet.org - The NuGet Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/"&gt;https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NuGet.org が3月8日から二要素認証 (2FA) を必須にするというアナウンス。&lt;/p&gt;
&lt;p&gt;サプライチェーンセキュリティの強化のためログインに二要素認証が必須となる。二要素認証は Microsoft アカウントまたは職場または学校のアカウント (Azure Active Directory) のものが使用され、サインイン時にそれらがサポートするいずれかの二要素認証が要求される。&lt;/p&gt;
&lt;p&gt;ユーザーログインは3月8日からすべてのアカウントに対して有効となり、API キーは今後二要素認証コンテキストで作成されていないものが無効とされる予定。無効化を実施する30日前には通知される。&lt;/p&gt;
&lt;h3 id="release-ilspy-7.2-icsharpcodeilspy"&gt;Release ILSpy 7.2 · icsharpcode/ILSpy&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/ILSpy/releases/tag/v7.2"&gt;https://github.com/icsharpcode/ILSpy/releases/tag/v7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ILSpy 7.2 がリリースされた。&lt;/p&gt;
&lt;p&gt;このリリースでは C# のパターンマッチングやネストされた stackalloc のコンテキスト、SkipLocalInit のようないくつかの機能に対応し、多くの改善や修正が含まれている。&lt;/p&gt;
&lt;h3 id="release-release-v2.43.0-grpcgrpc-dotnet"&gt;Release Release v2.43.0 · grpc/grpc-dotnet&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0"&gt;https://github.com/grpc/grpc-dotnet/releases/tag/v2.43.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC (.NET) 2.43.0 がリリースされた。&lt;/p&gt;
&lt;p&gt;.NET 6 での deflate 圧縮やヘルスチェックのマッピング設定といった機能の追加といくつかの改善と修正が含まれている。&lt;/p&gt;
&lt;h3 id="introducing-the.net-6-runtime-for-aws-lambda-amazon-web-services"&gt;Introducing the .NET 6 runtime for AWS Lambda | Amazon Web Services&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/"&gt;https://aws.amazon.com/jp/blogs/compute/introducing-the-net-6-runtime-for-aws-lambda/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AWS Lambda における .NET 6 ランタイムサポートについての記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロギングの改善&lt;/li&gt;
&lt;li&gt;JSON シリアライズのための Source Generator&lt;/li&gt;
&lt;li&gt;トップレベルステートメント&lt;/li&gt;
&lt;li&gt;ASP.NET Core Minimal API&lt;/li&gt;
&lt;li&gt;オープンソース Lambda ランタイムクライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="edge-developer-tools-visual-studio-marketplace"&gt;Edge Developer Tools - Visual Studio Marketplace&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools"&gt;https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio に Edge と Developer Tools を統合して ASP.NET / ASP.NET Core アプリケーションを開発時にシームレスにあつかえるようにする拡張がプレビューリリースされた。&lt;/p&gt;
&lt;h2 id="section-1"&gt;アーティクル、スライドなど&lt;/h2&gt;
&lt;h3 id="efcoredbcontextnew-enrike3"&gt;EFCoreに深入り(DbContextをnewするあたり) - enrike3のブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://enrike3.hatenablog.com/entry/2022/02/20/163821"&gt;https://enrike3.hatenablog.com/entry/2022/02/20/163821&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core で DbContext が作成するのに必要な要素がどのように用意されているのかについての記事。&lt;/p&gt;
&lt;h3 id="c-vectort-qiita"&gt;[C#] Vector&amp;lt;T&amp;gt;で配列の最大値を高速取得 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/radian-jp/items/186862f355ac5625a704"&gt;https://qiita.com/radian-jp/items/186862f355ac5625a704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SIMD が有効になる &lt;code&gt;Vector&amp;lt;T&amp;gt;&lt;/code&gt; を使用することで配列の最大要素の高速に取得するという記事。&lt;/p&gt;
&lt;h3 id="c-10.0-c-c"&gt;【C# 10.0 変更点】 構造体のフィールド初期化子にはコンストラクター必須 | ++C++; // 未確認飛行 C ブログ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/"&gt;https://ufcpp.net/blog/2022/2/csharp10-breaking-change-field-init/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構造体のフィールド初期化子を持つ場合コンストラクターが必須となる修正が Visual Studio 2022 17.1 以降で行われた件についての記事。&lt;/p&gt;
&lt;h3 id="serilog-5.0.0-2-qiita"&gt;Serilog 5.0.0 バージョンアップ時に引っかかった2点 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0"&gt;https://qiita.com/karuakun/items/ecaaa6d151c4985d23e0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Serilog を 4.1.0 から 5.0.0 へバージョンアップした際の発生した非互換の挙動に関する記事。&lt;/p&gt;
&lt;h3 id="how-to-access-configuration-values-from-appsettings.json-file-inside-validationattribute-class-nuthan-murarysetty-medium"&gt;How to access configuration values from appsettings.json file inside ValidationAttribute class? - Nuthan Murarysetty - Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a"&gt;https://nuthanmurarysetty.medium.com/how-to-access-configuration-values-from-appsettings-json-file-inside-validationattribute-class-84ed45e9ce8a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidationAttribute&lt;/code&gt; から appsettings.json の設定値にアクセスする方法についての記事。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; メソッドに渡される &lt;code&gt;ValidateContext&lt;/code&gt; は &lt;code&gt;IServiceProvider&lt;/code&gt; を提供しているため、&lt;code&gt;GetService&amp;lt;IConfiguration&amp;gt;&lt;/code&gt; などで設定を取得できる。また、ユニットテストでは &lt;code&gt;ValidationContext&lt;/code&gt; を作成する際に &lt;code&gt;IServiceProvider&lt;/code&gt; のモックを渡すことでテストできる。&lt;/p&gt;
&lt;h3 id="comparing-iasyncenumerable-and-iobservable-for-event-streams-dev-community"&gt;Comparing IAsyncEnumerable and IObservable for event streams - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96"&gt;https://dev.to/asik/comparing-iasyncenumerable-and-iobservable-for-event-streams-5g96&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IAsyncEnumerable&lt;/code&gt; と &lt;code&gt;IObservable&lt;/code&gt; の違いについての記事。&lt;/p&gt;
&lt;h3 id="net-build-tool-using-bullseye-and-simpleexec-dev-community"&gt;.NET build tool using Bullseye and SimpleExec - DEV Community&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe"&gt;https://dev.to/mysticmind/net-build-tool-using-bullseye-and-simpleexec-1jbe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NAnt のようなビルドの仕組みをターゲット依存グラフの構築実行を実現する &lt;code&gt;Bullseye&lt;/code&gt; とコマンド実行ラッパーの &lt;code&gt;SimpleExec&lt;/code&gt; を利用して作るという記事。&lt;/p&gt;
&lt;p&gt;単純な二つのライブラリーを組みわせることで理解しやすい形でビルドツールを構築できるとしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/bullseye"&gt;adamralph/bullseye: 🎯 A .NET library for running a target dependency graph.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adamralph/simple-exec"&gt;adamralph/simple-exec: 🏃 A .NET library that runs external commands.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-deep-dive-into-cs-cancellationtoken-by-mitesh-shah-feb-2022-medium"&gt;A Deep Dive into C#’s CancellationToken | by Mitesh Shah | Feb, 2022 | Medium&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f"&gt;https://medium.com/&amp;#64;mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CancellationToken が提供している機能やそれらを使用する方法についての記事。&lt;/p&gt;
&lt;h3 id="recommended-container-limits-for-dotnet-monitor"&gt;Recommended container limits for dotnet-monitor&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor"&gt;https://www.poppastring.com/blog/recommended-container-limits-for-dotnetmonitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet-monitor&lt;/code&gt; をコンテナー環境で動かす場合の推奨されるリソース設定についての記事。&lt;/p&gt;
&lt;h3 id="creating-a-clean-style-library-for-xamarin.forms"&gt;Creating a clean Style Library for Xamarin.Forms&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde"&gt;https://dev.to/danielmonettelli/creating-a-clean-style-library-for-xamarinforms-3cde&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Xamarin.Forms でクリーンなスタイルライブラリーを構築することについての記事。&lt;/p&gt;
&lt;h3 id="asp.net-core-6-webapplicationfactory"&gt;[ASP.NET Core 6] WebApplicationFactoryの利用の互換性が失われることに対処する&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/shimat/articles/372d16077ecdf6"&gt;https://zenn.dev/shimat/articles/372d16077ecdf6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET Core 6 (.NET 6) で WebApplicationFactory を利用する場合に .NET 5 やそれ以前のバージョンとの構成が異なることによる問題についての記事。&lt;/p&gt;
&lt;h3 id="net-github-actions-intro-to-github-actions-for.net.net-blog"&gt;.NET 💜 GitHub Actions: intro to GitHub Actions for .NET - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/"&gt;https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.NET アプリケーションの GitHub Actions での利用について紹介している記事。&lt;/p&gt;
&lt;h3 id="postgresql-ef-corejson-qiita"&gt;PostgreSQL EF CoreでのJsonの処理 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47"&gt;https://qiita.com/hiro_t/items/2bfd91fcc3603ce02a47&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Entity Framework Core 7.0 プレビューと PostgreSQL (Npgsql) での JSON をマッピングを試してみたという記事。&lt;/p&gt;
&lt;h3 id="building.net-project-docs-with-docfx-on-github-pages-james-croft"&gt;Building .NET project docs with DocFX on GitHub Pages - James Croft&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/"&gt;https://www.jamescroft.co.uk/building-net-project-docs-with-docfx-on-github-pages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DocFX を使って .NET プロジェクトのドキュメントを生成し、GitHub Pages にアップロードする方法についての記事。カスタマイズなどにも触れている。&lt;/p&gt;
&lt;h3 id="blazor-webassemblymudblazorpie-chart-qiita"&gt;Blazor WebAssemblyでMudBlazorを使ってPie Chartを表示してみた - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/michimichix521/items/208b89a8750f8d9b962c"&gt;https://qiita.com/michimichix521/items/208b89a8750f8d9b962c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor WebAssembly で MudBlazor のチャート機能で Pie Chart を表示してみるという記事。&lt;/p&gt;
&lt;h3 id="c-2022"&gt;【競プロ】C#: 競技プログラミング環境構築 2022年版&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zenn.dev/naminodarie/articles/1ff02beff572d2"&gt;https://zenn.dev/naminodarie/articles/1ff02beff572d2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C# で競技プログラミング固有の事情に合わせた環境構築についての記事。&lt;/p&gt;
&lt;h3 id="please-stop-lying-about.net-standard-2.0-support"&gt;Please stop lying about .NET Standard 2.0 support!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/stop-lying-about-netstandard-2-support/"&gt;https://andrewlock.net/stop-lying-about-netstandard-2-support/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一部のコアライブラリーは TFM として .NET Standard 2.0 をサポートしているように見えるが、.NET Core 2.1 や .NET Core 3.0 のようなサポートの終了しているランタイムではビルドエラーとなる問題についての記事。&lt;/p&gt;
&lt;p&gt;それらのランタイムはサポートが終了しているが積極的にブロックするのは .NET Standard の約束を破るものではないかという筆者の主張。&lt;/p&gt;
&lt;h3 id="migrating-from-redis-64-to-memurai"&gt;Migrating from Redis-64 to Memurai&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1"&gt;https://blog.marcgravell.com/2022/02/migrating-from-redis-64-to-memurai.html?m=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows で Redis を使用したい場合、Redis-64 に代わる Memurai という Windows ネイティブな Redis 5.0 フォークがあるのでそれに移行するという記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-in-local-containers-with-vs-code-red-hat-developer"&gt;Debug .NET applications running in local containers with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code"&gt;https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカルのコンテナーで動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="debug.net-applications-running-on-kubernetes-with-vs-code-red-hat-developer"&gt;Debug .NET applications running on Kubernetes with VS Code | Red Hat Developer&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code"&gt;https://developers.redhat.com/articles/2022/01/07/debug-net-applications-running-kubernetes-vs-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes で動作する .NET アプリケーションに Visual Studio Code からアタッチしてデバッグする方法についての記事。&lt;/p&gt;
&lt;h3 id="net-6http-client-sdk"&gt;.NET 6によるHTTP Client SDKの作成と利用&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/"&gt;https://www.infoq.com/jp/articles/creating-http-sdks-dotnet-6/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP クライアント SDK を作る上でのポイントを解説している記事(日本語)。&lt;/p&gt;
&lt;p&gt;HttpClient のカスタムや IHttpClientFactory との統合、拡張性やテストについて。Refit や NSwag を使用した実装についても触れている。&lt;/p&gt;
&lt;h3 id="training-a-ml.net-model-with-azure-ml.net-blog"&gt;Training a ML.NET Model with Azure ML - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/"&gt;https://devblogs.microsoft.com/dotnet/training-a-ml-dotnet-model-with-azure-ml/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Machine Learning を使用して ML.NET のモデルをトレーニングするという記事。&lt;/p&gt;
&lt;h3 id="sharing-code-between-asp.net-and-asp.net-core.net-blog"&gt;Sharing code between ASP.NET and ASP.NET Core - .NET Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/"&gt;https://devblogs.microsoft.com/dotnet/sharing-code-between-aspnet-and-aspnetcore/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ASP.NET と ASP.NET Core でコードを共有するための Tips の記事。&lt;/p&gt;
&lt;h3 id="net-annotated-monthly-march-2022-the.net-tools-blog"&gt;.NET Annotated Monthly | March 2022 | The .NET Tools Blog&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/"&gt;https://blog.jetbrains.com/dotnet/2022/03/01/net-annotated-monthly-march-2022/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="net-6-dapr-1-qiita"&gt;.NET 6 と Daprを使った分散サービス開発 その1 環境構築 - Qiita&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b"&gt;https://qiita.com/kazumihirose/items/57e3aeaab65a1a68977b&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-send-emails-using-c.net-with-azure-functions-and-sendgrid-bindings"&gt;How to Send Emails using C# .NET with Azure Functions and SendGrid Bindings&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings"&gt;https://www.twilio.com/blog/send-emails-csharp-dotnet-with-azure-functions-and-sendgrid-bindings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Functions で SendGrid Bindings を利用してメールを送信する方法についての記事。&lt;/p&gt;
&lt;h3 id="distributed-locks-manager-c-and-redis"&gt;Distributed Locks Manager (C# and Redis)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250"&gt;https://towardsdev.com/distributed-locks-manager-c-and-redis-fd3d86cd1250&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Redis を使用した分散ロックを実装する方法についての記事。&lt;/p&gt;
&lt;p&gt;記事では RedLock.net を使用した例が紹介されている。&lt;/p&gt;
&lt;h3 id="using-aws-ecs-service-discovery-for-communication-between-microservices-in.net-c"&gt;Using AWS ECS Service Discovery for communication between Microservices in .NET &amp;amp; C#&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71"&gt;https://medium.com/the-aws-coder/using-aws-ecs-service-discovery-for-communication-between-microservices-in-net-c-550e406a8b71&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazon ECS で動作するアプリケーションでサービス間の通信のために AWS Cloud Map を使用して Service Discovery を行う方法についての記事。&lt;/p&gt;
&lt;h3 id="building-a-c-blazor-app-with-nosql-and-sql-using-harperdb"&gt;Building a C# Blazor App with NoSQL and SQL Using HarperDB&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc"&gt;https://dev.to/towernter/building-a-c-blazor-app-with-nosql-and-sql-using-harperdb-lc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blazor アプリケーションで HarperDB と呼ばれる NoSQL/SQL をサポートするデータベースを使用する方法についての記事。&lt;/p&gt;
&lt;h2 id="section-2"&gt;ライブラリ、リポジトリ、ツールなど&lt;/h2&gt;
&lt;h3 id="alias-an-approach-to.net-assembly-conflict-resolution"&gt;Alias: An approach to .NET Assembly Conflict Resolution&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution"&gt;https://blog.sentry.io/2022/02/24/alias-an-approach-to-net-assembly-conflict-resolution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アセンブリーの競合を解決するためのコマンドラインツール Alias の紹介記事。&lt;/p&gt;
&lt;p&gt;複数のバージョンの Newtonsoft.Json.dll や Unity での UPM からインストールされるパッケージの System.Memory.dll, System.Buffers.dll などで発生するバージョンの競合を解決するため、依存関係も含めてエイリアスのパッチを当てるツール。Sentry for Unity SDK で実際に使用されている。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;MyLibrary.dll&lt;/code&gt; が &lt;code&gt;System.Memory.dll&lt;/code&gt;, &lt;code&gt;System.Buffers.dll&lt;/code&gt; に依存している場合、&lt;code&gt;MyLibrary.&lt;/code&gt; をプレフィックスとしてパッチを当てると、&lt;code&gt;internal&lt;/code&gt; 化された &lt;code&gt;MyLibrary.System.Memory.dll&lt;/code&gt; と &lt;code&gt;MyLibrary.System.Buffers.dll&lt;/code&gt; が生成され、&lt;code&gt;MyLibrary.dll&lt;/code&gt; からはそれらを参照するようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getsentry/dotnet-assembly-alias"&gt;getsentry/dotnet-assembly-alias: Tool to rename .NET assemblies and references&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bflattenedbflat-c-as-you-know-it-but-with-go-inspired-tooling-small-selfcontained-and-native-executables"&gt;bflattened/bflat: C# as you know it but with Go-inspired tooling (small, selfcontained, and native executables)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/bflattened/bflat"&gt;https://github.com/bflattened/bflat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NativeAOT と Roslyn を統合して golang のように直接ネイティブ実行バイナリーを出力するというツール。&lt;/p&gt;
&lt;p&gt;なおライセンスは AGPL となっているため注意が必要。&lt;/p&gt;
&lt;!-- https://twitter.com/mstrehovsky/status/1495625804159811586?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;bflat, my take on C# with Go-like tooling, is now open source. New builds coming as soon as I write the Github actions to create them. You can build it from source in the meantime: &lt;a href="https://t.co/VWiqKUjDgk"&gt;https://t.co/VWiqKUjDgk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michal Strehovský (&amp;#64;MStrehovsky) &lt;a href="https://twitter.com/MStrehovsky/status/1495625804159811586?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;サイト、ドキュメントなど&lt;/h2&gt;
&lt;h3 id="create-json-web-apis-from-grpc"&gt;Create JSON Web APIs from gRPC&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0"&gt;https://docs.microsoft.com/en-us/aspnet/core/grpc/httpapi?view=aspnetcore-6.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gRPC を JSON ベースの HTTP Web API として公開できる実験的なライブラリー Microsoft.AspNetCore.Grpc.HttpApi についての記事。&lt;/p&gt;
&lt;h3 id="section-4"&gt;ツイート&lt;/h3&gt;
&lt;!-- https://twitter.com/funcofjoe/status/1495168840510042117?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;To celebrate .NET&amp;#39;s 20 year anniversary, I&amp;#39;ve put up a mirror of Chris Brumme&amp;#39;s weblog: &lt;a href="https://t.co/wP5JGEnegI"&gt;https://t.co/wP5JGEnegI&lt;/a&gt; &lt;a href="https://t.co/l4h5vxBTUz"&gt;pic.twitter.com/l4h5vxBTUz&lt;/a&gt;&lt;/p&gt;&amp;mdash; J☁e Duffy (&amp;#64;funcOfJoe) &lt;a href="https://twitter.com/funcOfJoe/status/1495168840510042117?ref_src=twsrc%5Etfw"&gt;February 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;.NET CLR の開発者であった Chris Brumme 氏のブログ (濃い話が書かれている) を20周年を記念してミラーサイトとして用意したという話。Chris Brumme 氏は5年前に亡くなっているそう。&lt;/p&gt;
&lt;!-- https://twitter.com/stevensanderson/status/1497230826739834883?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;What&amp;#39;s this - is it a completely normal &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core application?&lt;br&gt;&lt;br&gt;No, it&amp;#39;s &lt;a href="https://t.co/iVNZYgvf9Y"&gt;https://t.co/iVNZYgvf9Y&lt;/a&gt; Core running on WASI (WebAssembly on the server)! Just got a prototype working this week. &lt;a href="https://t.co/Hd4rrqSmLA"&gt;pic.twitter.com/Hd4rrqSmLA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steve Sanderson (&amp;#64;stevensanderson) &lt;a href="https://twitter.com/stevensanderson/status/1497230826739834883?ref_src=twsrc%5Etfw"&gt;February 25, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;WASI で ASP.NET Core が動作するプロトタイプができたという話。つまり Blazor ではない ASP.NET Core を WebAssembly で動かせている。&lt;/p&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1496469980661096452?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;And what if Key doesn&amp;#39;t exist? Our .𝗡𝗘𝗧 𝗶𝗻 𝗣𝗶𝗰𝘁𝘂𝗿𝗲𝘀 infographic will explain! 🧐&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/B6zZHhsSZu"&gt;pic.twitter.com/B6zZHhsSZu&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1496469980661096452?ref_src=twsrc%5Etfw"&gt;February 23, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- https://twitter.com/dotnetosorg/status/1495745477433827332?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;New week, new .Net in Pictures! Let&amp;#39;s get a break from .NET Diagnostics Expert and take a look at our new collection of infographics ✨&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/collections?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#collections&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dictionary?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dictionary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dotnetInPictures?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnetInPictures&lt;/a&gt; &lt;a href="https://t.co/4Ytud17h5N"&gt;pic.twitter.com/4Ytud17h5N&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dotnetos (&amp;#64;dotnetosorg) &lt;a href="https://twitter.com/dotnetosorg/status/1495745477433827332?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Dictionary の内部に関するインフォグラフィック。&lt;/p&gt;
&lt;!-- https://twitter.com/badamczewski01/status/1495673553529749507?s=12 --&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Did you know that Compiler Explorer lets you see C# .NET outputs for different Operating Systems and Architectures?&lt;br&gt;&lt;br&gt;Example: &lt;a href="https://t.co/1wKb7G7FM1"&gt;https://t.co/1wKb7G7FM1&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/dotnet?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#dotnet&lt;/a&gt; &lt;a href="https://t.co/vw3AiKCnGo"&gt;pic.twitter.com/vw3AiKCnGo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bartosz Adamczewski (&amp;#64;badamczewski01) &lt;a href="https://twitter.com/badamczewski01/status/1495673553529749507?ref_src=twsrc%5Etfw"&gt;February 21, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Compiler Explorer では様々な OS とアーキテクチャー向けの逆アセンブル結果を確認できるという話。&lt;/p&gt;
&lt;h2 id="deep-dive"&gt;Deep Dive&lt;/h2&gt;
&lt;h3 id="speed-up-contended-http2-frame-writing-500-grpc-h2-70x1-improvement-by-halter73-pull-request-40407-dotnetaspnetcore"&gt;Speed up contended HTTP/2 frame writing (500% gRPC h2 70x1 improvement) by halter73 · Pull Request #40407 · dotnet/aspnetcore&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/aspnetcore/pull/40407"&gt;https://github.com/dotnet/aspnetcore/pull/40407&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 のフレーム書き込みを高速化するという PR。&lt;/p&gt;
&lt;p&gt;これにより TLS 上の HTTP/2 で一つのコネクションに70ストリーム持った場合、500%程度高速になるという。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>